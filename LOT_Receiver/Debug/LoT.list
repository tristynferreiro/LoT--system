
LoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f94  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003180  08003180  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003180  08003180  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003180  08003180  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  080031f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080031f8  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000889f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014d8  00000000  00000000  00028937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  00029e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  0002a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001127b  00000000  00000000  0002ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e23  00000000  00000000  0003bdcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000696c2  00000000  00000000  00044bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ae2b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b08  00000000  00000000  000ae300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800303c 	.word	0x0800303c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800303c 	.word	0x0800303c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fc59 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f849 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f92f 	bl	80004a4 <MX_GPIO_Init>
  MX_ADC_Init();
 8000246:	f000 f895 	bl	8000374 <MX_ADC_Init>
  MX_USART2_UART_Init();
 800024a:	f000 f8fb 	bl	8000444 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  // Wait until button is pressed to start listening
	  	  if (listening == 1)
 800024e:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <main+0x90>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b01      	cmp	r3, #1
 8000254:	d1fb      	bne.n	800024e <main+0x1a>
	  	  {
	  		  sprintf(VAL_print, "Waiting...\r\n\r\n");
 8000256:	4a1c      	ldr	r2, [pc, #112]	; (80002c8 <main+0x94>)
 8000258:	4b1c      	ldr	r3, [pc, #112]	; (80002cc <main+0x98>)
 800025a:	0011      	movs	r1, r2
 800025c:	0018      	movs	r0, r3
 800025e:	f002 fa83 	bl	8002768 <siprintf>
	  		  HAL_UART_Transmit(&huart2, VAL_print, sizeof(VAL_print), 1000);
 8000262:	23fa      	movs	r3, #250	; 0xfa
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	4919      	ldr	r1, [pc, #100]	; (80002cc <main+0x98>)
 8000268:	4819      	ldr	r0, [pc, #100]	; (80002d0 <main+0x9c>)
 800026a:	2228      	movs	r2, #40	; 0x28
 800026c:	f001 fea0 	bl	8001fb0 <HAL_UART_Transmit>
	  		  uint32_t state = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 8000270:	2390      	movs	r3, #144	; 0x90
 8000272:	05db      	lsls	r3, r3, #23
 8000274:	2120      	movs	r1, #32
 8000276:	0018      	movs	r0, r3
 8000278:	f001 f95e 	bl	8001538 <HAL_GPIO_ReadPin>
 800027c:	0003      	movs	r3, r0
 800027e:	607b      	str	r3, [r7, #4]

	  		  // Wait for start bit from transmitter
	  		  while(state<REF)
 8000280:	e007      	b.n	8000292 <main+0x5e>
	  		  {
	  			  //update ADC value
	  			  state = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 8000282:	2390      	movs	r3, #144	; 0x90
 8000284:	05db      	lsls	r3, r3, #23
 8000286:	2120      	movs	r1, #32
 8000288:	0018      	movs	r0, r3
 800028a:	f001 f955 	bl	8001538 <HAL_GPIO_ReadPin>
 800028e:	0003      	movs	r3, r0
 8000290:	607b      	str	r3, [r7, #4]
	  		  while(state<REF)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0f4      	beq.n	8000282 <main+0x4e>
	  		  }

	  		  int cont = 1;
 8000298:	2301      	movs	r3, #1
 800029a:	603b      	str	r3, [r7, #0]
	  		  while(cont)
 800029c:	e00e      	b.n	80002bc <main+0x88>
	  		  {
	  			  readSignal();
 800029e:	f000 f9b3 	bl	8000608 <readSignal>
	  			  HAL_Delay(PERIOD);
 80002a2:	23fa      	movs	r3, #250	; 0xfa
 80002a4:	009b      	lsls	r3, r3, #2
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fc86 	bl	8000bb8 <HAL_Delay>
	  			  cont = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 80002ac:	2390      	movs	r3, #144	; 0x90
 80002ae:	05db      	lsls	r3, r3, #23
 80002b0:	2120      	movs	r1, #32
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 f940 	bl	8001538 <HAL_GPIO_ReadPin>
 80002b8:	0003      	movs	r3, r0
 80002ba:	603b      	str	r3, [r7, #0]
	  		  while(cont)
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d1ed      	bne.n	800029e <main+0x6a>
	  	  if (listening == 1)
 80002c2:	e7c4      	b.n	800024e <main+0x1a>
 80002c4:	20000150 	.word	0x20000150
 80002c8:	08003054 	.word	0x08003054
 80002cc:	20000174 	.word	0x20000174
 80002d0:	200000cc 	.word	0x200000cc

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b590      	push	{r4, r7, lr}
 80002d6:	b091      	sub	sp, #68	; 0x44
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	2410      	movs	r4, #16
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	0018      	movs	r0, r3
 80002e0:	2330      	movs	r3, #48	; 0x30
 80002e2:	001a      	movs	r2, r3
 80002e4:	2100      	movs	r1, #0
 80002e6:	f002 fa37 	bl	8002758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ea:	003b      	movs	r3, r7
 80002ec:	0018      	movs	r0, r3
 80002ee:	2310      	movs	r3, #16
 80002f0:	001a      	movs	r2, r3
 80002f2:	2100      	movs	r1, #0
 80002f4:	f002 fa30 	bl	8002758 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002f8:	0021      	movs	r1, r4
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2212      	movs	r2, #18
 80002fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2201      	movs	r2, #1
 8000304:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2201      	movs	r2, #1
 800030a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2210      	movs	r2, #16
 8000310:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2210      	movs	r2, #16
 8000316:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2202      	movs	r2, #2
 800031c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	22a0      	movs	r2, #160	; 0xa0
 8000328:	0392      	lsls	r2, r2, #14
 800032a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	187b      	adds	r3, r7, r1
 8000334:	0018      	movs	r0, r3
 8000336:	f001 f97b 	bl	8001630 <HAL_RCC_OscConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800033e:	f000 fa9d 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	003b      	movs	r3, r7
 8000344:	2207      	movs	r2, #7
 8000346:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000348:	003b      	movs	r3, r7
 800034a:	2202      	movs	r2, #2
 800034c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	003b      	movs	r3, r7
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	003b      	movs	r3, r7
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035a:	003b      	movs	r3, r7
 800035c:	2101      	movs	r1, #1
 800035e:	0018      	movs	r0, r3
 8000360:	f001 fc80 	bl	8001c64 <HAL_RCC_ClockConfig>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000368:	f000 fa88 	bl	800087c <Error_Handler>
  }
}
 800036c:	46c0      	nop			; (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b011      	add	sp, #68	; 0x44
 8000372:	bd90      	pop	{r4, r7, pc}

08000374 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	0018      	movs	r0, r3
 800037e:	230c      	movs	r3, #12
 8000380:	001a      	movs	r2, r3
 8000382:	2100      	movs	r1, #0
 8000384:	f002 f9e8 	bl	8002758 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000388:	4b2c      	ldr	r3, [pc, #176]	; (800043c <MX_ADC_Init+0xc8>)
 800038a:	4a2d      	ldr	r2, [pc, #180]	; (8000440 <MX_ADC_Init+0xcc>)
 800038c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800038e:	4b2b      	ldr	r3, [pc, #172]	; (800043c <MX_ADC_Init+0xc8>)
 8000390:	2200      	movs	r2, #0
 8000392:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000394:	4b29      	ldr	r3, [pc, #164]	; (800043c <MX_ADC_Init+0xc8>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800039a:	4b28      	ldr	r3, [pc, #160]	; (800043c <MX_ADC_Init+0xc8>)
 800039c:	2200      	movs	r2, #0
 800039e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003a0:	4b26      	ldr	r3, [pc, #152]	; (800043c <MX_ADC_Init+0xc8>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003a6:	4b25      	ldr	r3, [pc, #148]	; (800043c <MX_ADC_Init+0xc8>)
 80003a8:	2204      	movs	r2, #4
 80003aa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003ac:	4b23      	ldr	r3, [pc, #140]	; (800043c <MX_ADC_Init+0xc8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003b2:	4b22      	ldr	r3, [pc, #136]	; (800043c <MX_ADC_Init+0xc8>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003b8:	4b20      	ldr	r3, [pc, #128]	; (800043c <MX_ADC_Init+0xc8>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003be:	4b1f      	ldr	r3, [pc, #124]	; (800043c <MX_ADC_Init+0xc8>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003c4:	4b1d      	ldr	r3, [pc, #116]	; (800043c <MX_ADC_Init+0xc8>)
 80003c6:	22c2      	movs	r2, #194	; 0xc2
 80003c8:	32ff      	adds	r2, #255	; 0xff
 80003ca:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <MX_ADC_Init+0xc8>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <MX_ADC_Init+0xc8>)
 80003d4:	2224      	movs	r2, #36	; 0x24
 80003d6:	2100      	movs	r1, #0
 80003d8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003da:	4b18      	ldr	r3, [pc, #96]	; (800043c <MX_ADC_Init+0xc8>)
 80003dc:	2201      	movs	r2, #1
 80003de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <MX_ADC_Init+0xc8>)
 80003e2:	0018      	movs	r0, r3
 80003e4:	f000 fc0c 	bl	8000c00 <HAL_ADC_Init>
 80003e8:	1e03      	subs	r3, r0, #0
 80003ea:	d001      	beq.n	80003f0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003ec:	f000 fa46 	bl	800087c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2201      	movs	r2, #1
 80003f4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2280      	movs	r2, #128	; 0x80
 80003fa:	0152      	lsls	r2, r2, #5
 80003fc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2280      	movs	r2, #128	; 0x80
 8000402:	0552      	lsls	r2, r2, #21
 8000404:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000406:	1d3a      	adds	r2, r7, #4
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_ADC_Init+0xc8>)
 800040a:	0011      	movs	r1, r2
 800040c:	0018      	movs	r0, r3
 800040e:	f000 fd37 	bl	8000e80 <HAL_ADC_ConfigChannel>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000416:	f000 fa31 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  ADC1->CR|=ADC_CR_ADEN;
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_ADC_Init+0xcc>)
 800041c:	689a      	ldr	r2, [r3, #8]
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <MX_ADC_Init+0xcc>)
 8000420:	2101      	movs	r1, #1
 8000422:	430a      	orrs	r2, r1
 8000424:	609a      	str	r2, [r3, #8]

  // Wait for ISR to be set
  while((ADC1->ISR & ADC_ISR_ADRDY)==0);
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <MX_ADC_Init+0xcc>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2201      	movs	r2, #1
 800042e:	4013      	ands	r3, r2
 8000430:	d0fa      	beq.n	8000428 <MX_ADC_Init+0xb4>
  /* USER CODE END ADC_Init 2 */

}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	46c0      	nop			; (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	b004      	add	sp, #16
 800043a:	bd80      	pop	{r7, pc}
 800043c:	2000008c 	.word	0x2000008c
 8000440:	40012400 	.word	0x40012400

08000444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <MX_USART2_UART_Init+0x58>)
 800044a:	4a15      	ldr	r2, [pc, #84]	; (80004a0 <MX_USART2_UART_Init+0x5c>)
 800044c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000450:	2296      	movs	r2, #150	; 0x96
 8000452:	0192      	lsls	r2, r2, #6
 8000454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_USART2_UART_Init+0x58>)
 800046a:	220c      	movs	r2, #12
 800046c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <MX_USART2_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000486:	4b05      	ldr	r3, [pc, #20]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000488:	0018      	movs	r0, r3
 800048a:	f001 fd3d 	bl	8001f08 <HAL_UART_Init>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000492:	f000 f9f3 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	200000cc 	.word	0x200000cc
 80004a0:	40004400 	.word	0x40004400

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b089      	sub	sp, #36	; 0x24
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	240c      	movs	r4, #12
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	0018      	movs	r0, r3
 80004b0:	2314      	movs	r3, #20
 80004b2:	001a      	movs	r2, r3
 80004b4:	2100      	movs	r1, #0
 80004b6:	f002 f94f 	bl	8002758 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b32      	ldr	r3, [pc, #200]	; (8000584 <MX_GPIO_Init+0xe0>)
 80004bc:	695a      	ldr	r2, [r3, #20]
 80004be:	4b31      	ldr	r3, [pc, #196]	; (8000584 <MX_GPIO_Init+0xe0>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	0289      	lsls	r1, r1, #10
 80004c4:	430a      	orrs	r2, r1
 80004c6:	615a      	str	r2, [r3, #20]
 80004c8:	4b2e      	ldr	r3, [pc, #184]	; (8000584 <MX_GPIO_Init+0xe0>)
 80004ca:	695a      	ldr	r2, [r3, #20]
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	029b      	lsls	r3, r3, #10
 80004d0:	4013      	ands	r3, r2
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <MX_GPIO_Init+0xe0>)
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <MX_GPIO_Init+0xe0>)
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	0309      	lsls	r1, r1, #12
 80004e0:	430a      	orrs	r2, r1
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	4b27      	ldr	r3, [pc, #156]	; (8000584 <MX_GPIO_Init+0xe0>)
 80004e6:	695a      	ldr	r2, [r3, #20]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	031b      	lsls	r3, r3, #12
 80004ec:	4013      	ands	r3, r2
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80004f2:	23c0      	movs	r3, #192	; 0xc0
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	4824      	ldr	r0, [pc, #144]	; (8000588 <MX_GPIO_Init+0xe4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	0019      	movs	r1, r3
 80004fc:	f001 f839 	bl	8001572 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2201      	movs	r2, #1
 8000504:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2288      	movs	r2, #136	; 0x88
 800050a:	0352      	lsls	r2, r2, #13
 800050c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000514:	193a      	adds	r2, r7, r4
 8000516:	2390      	movs	r3, #144	; 0x90
 8000518:	05db      	lsls	r3, r3, #23
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fe9b 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : Signal_in_Pin */
  GPIO_InitStruct.Pin = Signal_in_Pin;
 8000522:	193b      	adds	r3, r7, r4
 8000524:	2220      	movs	r2, #32
 8000526:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000528:	193b      	adds	r3, r7, r4
 800052a:	2200      	movs	r2, #0
 800052c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800052e:	193b      	adds	r3, r7, r4
 8000530:	2202      	movs	r2, #2
 8000532:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Signal_in_GPIO_Port, &GPIO_InitStruct);
 8000534:	193a      	adds	r2, r7, r4
 8000536:	2390      	movs	r3, #144	; 0x90
 8000538:	05db      	lsls	r3, r3, #23
 800053a:	0011      	movs	r1, r2
 800053c:	0018      	movs	r0, r3
 800053e:	f000 fe8b 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000542:	0021      	movs	r1, r4
 8000544:	187b      	adds	r3, r7, r1
 8000546:	22c0      	movs	r2, #192	; 0xc0
 8000548:	0092      	lsls	r2, r2, #2
 800054a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2201      	movs	r2, #1
 8000550:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800055e:	187b      	adds	r3, r7, r1
 8000560:	4a09      	ldr	r2, [pc, #36]	; (8000588 <MX_GPIO_Init+0xe4>)
 8000562:	0019      	movs	r1, r3
 8000564:	0010      	movs	r0, r2
 8000566:	f000 fe77 	bl	8001258 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	2005      	movs	r0, #5
 8000570:	f000 fe40 	bl	80011f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000574:	2005      	movs	r0, #5
 8000576:	f000 fe52 	bl	800121e <HAL_NVIC_EnableIRQ>

}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b009      	add	sp, #36	; 0x24
 8000580:	bd90      	pop	{r4, r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	40021000 	.word	0x40021000
 8000588:	48000800 	.word	0x48000800

0800058c <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI0_1_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	if (B1_Pin)
		{
			if (listening == 0)
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <EXTI0_1_IRQHandler+0x20>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d102      	bne.n	800059e <EXTI0_1_IRQHandler+0x12>
			{
				listening = 1;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <EXTI0_1_IRQHandler+0x20>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
			}
		}
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800059e:	2001      	movs	r0, #1
 80005a0:	f001 f820 	bl	80015e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	20000150 	.word	0x20000150

080005b0 <arrayToData>:

uint8_t arrayToData(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	// convert binary array to one byte
	uint8_t output = 0;
 80005b6:	1dfb      	adds	r3, r7, #7
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 80005bc:	2300      	movs	r3, #0
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	e010      	b.n	80005e4 <arrayToData+0x34>
	{
		output = output + ((data[i])<<i);
 80005c2:	4a10      	ldr	r2, [pc, #64]	; (8000604 <arrayToData+0x54>)
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	18d3      	adds	r3, r2, r3
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	001a      	movs	r2, r3
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	409a      	lsls	r2, r3
 80005d0:	0013      	movs	r3, r2
 80005d2:	b2d9      	uxtb	r1, r3
 80005d4:	1dfb      	adds	r3, r7, #7
 80005d6:	1dfa      	adds	r2, r7, #7
 80005d8:	7812      	ldrb	r2, [r2, #0]
 80005da:	188a      	adds	r2, r1, r2
 80005dc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	2b07      	cmp	r3, #7
 80005e8:	ddeb      	ble.n	80005c2 <arrayToData+0x12>
	}

	//reset data to 0
	memset(data, 0, sizeof data);
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <arrayToData+0x54>)
 80005ec:	2208      	movs	r2, #8
 80005ee:	2100      	movs	r1, #0
 80005f0:	0018      	movs	r0, r3
 80005f2:	f002 f8b1 	bl	8002758 <memset>
	return output;
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	781b      	ldrb	r3, [r3, #0]
}
 80005fa:	0018      	movs	r0, r3
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b002      	add	sp, #8
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	20000154 	.word	0x20000154

08000608 <readSignal>:

void readSignal(void)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
	//add an initial delay
	  HAL_Delay(PERIOD);
 800060e:	23fa      	movs	r3, #250	; 0xfa
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	0018      	movs	r0, r3
 8000614:	f000 fad0 	bl	8000bb8 <HAL_Delay>
	  uint32_t state = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 8000618:	2390      	movs	r3, #144	; 0x90
 800061a:	05db      	lsls	r3, r3, #23
 800061c:	2120      	movs	r1, #32
 800061e:	0018      	movs	r0, r3
 8000620:	f000 ff8a 	bl	8001538 <HAL_GPIO_ReadPin>
 8000624:	0003      	movs	r3, r0
 8000626:	607b      	str	r3, [r7, #4]
	  //check mode of operation
	  if (state < REF) //save data mode
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d161      	bne.n	80006f2 <readSignal+0xea>
	  {
		// Once start bit has been received, store the next 8 bits of data in the data array
		  memset(VAL_print, 0, sizeof(VAL_print));
 800062e:	4b86      	ldr	r3, [pc, #536]	; (8000848 <readSignal+0x240>)
 8000630:	2228      	movs	r2, #40	; 0x28
 8000632:	2100      	movs	r1, #0
 8000634:	0018      	movs	r0, r3
 8000636:	f002 f88f 	bl	8002758 <memset>
		  sprintf(VAL_print, "Receiving data values...\r\n");
 800063a:	4a84      	ldr	r2, [pc, #528]	; (800084c <readSignal+0x244>)
 800063c:	4b82      	ldr	r3, [pc, #520]	; (8000848 <readSignal+0x240>)
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f002 f891 	bl	8002768 <siprintf>
		  HAL_UART_Transmit(&huart2, VAL_print, sizeof(VAL_print), 1000);
 8000646:	23fa      	movs	r3, #250	; 0xfa
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	497f      	ldr	r1, [pc, #508]	; (8000848 <readSignal+0x240>)
 800064c:	4880      	ldr	r0, [pc, #512]	; (8000850 <readSignal+0x248>)
 800064e:	2228      	movs	r2, #40	; 0x28
 8000650:	f001 fcae 	bl	8001fb0 <HAL_UART_Transmit>
		  for (int i = 7; i >= 0; i--)
 8000654:	2307      	movs	r3, #7
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	e01d      	b.n	8000696 <readSignal+0x8e>
		  {
			  HAL_Delay(PERIOD);
 800065a:	23fa      	movs	r3, #250	; 0xfa
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	0018      	movs	r0, r3
 8000660:	f000 faaa 	bl	8000bb8 <HAL_Delay>
			  state = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 8000664:	2390      	movs	r3, #144	; 0x90
 8000666:	05db      	lsls	r3, r3, #23
 8000668:	2120      	movs	r1, #32
 800066a:	0018      	movs	r0, r3
 800066c:	f000 ff64 	bl	8001538 <HAL_GPIO_ReadPin>
 8000670:	0003      	movs	r3, r0
 8000672:	607b      	str	r3, [r7, #4]
			  if (state < REF)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d105      	bne.n	8000686 <readSignal+0x7e>
			  {
				  data[i] = 0;
 800067a:	4a76      	ldr	r2, [pc, #472]	; (8000854 <readSignal+0x24c>)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	18d3      	adds	r3, r2, r3
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	e004      	b.n	8000690 <readSignal+0x88>
			  }
			  else
			  {
				  data[i] = 1;
 8000686:	4a73      	ldr	r2, [pc, #460]	; (8000854 <readSignal+0x24c>)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	18d3      	adds	r3, r2, r3
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
		  for (int i = 7; i >= 0; i--)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3b01      	subs	r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	2b00      	cmp	r3, #0
 800069a:	dade      	bge.n	800065a <readSignal+0x52>
			  }
		  }

		  // Convert data into single 8 bit int and store in allSamples array
		  allSamples[samples] = arrayToData();
 800069c:	4b6e      	ldr	r3, [pc, #440]	; (8000858 <readSignal+0x250>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	001c      	movs	r4, r3
 80006a2:	f7ff ff85 	bl	80005b0 <arrayToData>
 80006a6:	0003      	movs	r3, r0
 80006a8:	001a      	movs	r2, r3
 80006aa:	4b6c      	ldr	r3, [pc, #432]	; (800085c <readSignal+0x254>)
 80006ac:	551a      	strb	r2, [r3, r4]

		  // Increase sample counter
		  samples++;
 80006ae:	4b6a      	ldr	r3, [pc, #424]	; (8000858 <readSignal+0x250>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b68      	ldr	r3, [pc, #416]	; (8000858 <readSignal+0x250>)
 80006b8:	701a      	strb	r2, [r3, #0]

		  // Stop listening
		  listening = 0;
 80006ba:	4b69      	ldr	r3, [pc, #420]	; (8000860 <readSignal+0x258>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
		  memset(VAL_print, 0, sizeof(VAL_print));
 80006c0:	4b61      	ldr	r3, [pc, #388]	; (8000848 <readSignal+0x240>)
 80006c2:	2228      	movs	r2, #40	; 0x28
 80006c4:	2100      	movs	r1, #0
 80006c6:	0018      	movs	r0, r3
 80006c8:	f002 f846 	bl	8002758 <memset>
		  sprintf(VAL_print, "Value Received: %d\r\n\r\n", allSamples[samples-1]);
 80006cc:	4b62      	ldr	r3, [pc, #392]	; (8000858 <readSignal+0x250>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	4a62      	ldr	r2, [pc, #392]	; (800085c <readSignal+0x254>)
 80006d4:	5cd3      	ldrb	r3, [r2, r3]
 80006d6:	001a      	movs	r2, r3
 80006d8:	4962      	ldr	r1, [pc, #392]	; (8000864 <readSignal+0x25c>)
 80006da:	4b5b      	ldr	r3, [pc, #364]	; (8000848 <readSignal+0x240>)
 80006dc:	0018      	movs	r0, r3
 80006de:	f002 f843 	bl	8002768 <siprintf>
		  HAL_UART_Transmit(&huart2, VAL_print, sizeof(VAL_print), 1000);
 80006e2:	23fa      	movs	r3, #250	; 0xfa
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4958      	ldr	r1, [pc, #352]	; (8000848 <readSignal+0x240>)
 80006e8:	4859      	ldr	r0, [pc, #356]	; (8000850 <readSignal+0x248>)
 80006ea:	2228      	movs	r2, #40	; 0x28
 80006ec:	f001 fc60 	bl	8001fb0 <HAL_UART_Transmit>
			  HAL_Delay(500);
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8); //toggle blue pin
			  samples = transmit_samples;
		  }
	  }
}
 80006f0:	e0a6      	b.n	8000840 <readSignal+0x238>
		memset(VAL_print, 0, sizeof(VAL_print));
 80006f2:	4b55      	ldr	r3, [pc, #340]	; (8000848 <readSignal+0x240>)
 80006f4:	2228      	movs	r2, #40	; 0x28
 80006f6:	2100      	movs	r1, #0
 80006f8:	0018      	movs	r0, r3
 80006fa:	f002 f82d 	bl	8002758 <memset>
		sprintf(VAL_print, "Comparing number of transmissions...\r\n");
 80006fe:	4a5a      	ldr	r2, [pc, #360]	; (8000868 <readSignal+0x260>)
 8000700:	4b51      	ldr	r3, [pc, #324]	; (8000848 <readSignal+0x240>)
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f002 f82f 	bl	8002768 <siprintf>
		HAL_UART_Transmit(&huart2, VAL_print, sizeof(VAL_print), 1000);
 800070a:	23fa      	movs	r3, #250	; 0xfa
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	494e      	ldr	r1, [pc, #312]	; (8000848 <readSignal+0x240>)
 8000710:	484f      	ldr	r0, [pc, #316]	; (8000850 <readSignal+0x248>)
 8000712:	2228      	movs	r2, #40	; 0x28
 8000714:	f001 fc4c 	bl	8001fb0 <HAL_UART_Transmit>
		  for(int i = 7; i >= 0; i--)
 8000718:	2307      	movs	r3, #7
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	e01d      	b.n	800075a <readSignal+0x152>
			  HAL_Delay(PERIOD);
 800071e:	23fa      	movs	r3, #250	; 0xfa
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fa48 	bl	8000bb8 <HAL_Delay>
			  state = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 8000728:	2390      	movs	r3, #144	; 0x90
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	2120      	movs	r1, #32
 800072e:	0018      	movs	r0, r3
 8000730:	f000 ff02 	bl	8001538 <HAL_GPIO_ReadPin>
 8000734:	0003      	movs	r3, r0
 8000736:	607b      	str	r3, [r7, #4]
			  if (state < REF)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d105      	bne.n	800074a <readSignal+0x142>
				  data[i] = 0;
 800073e:	4a45      	ldr	r2, [pc, #276]	; (8000854 <readSignal+0x24c>)
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	18d3      	adds	r3, r2, r3
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
 8000748:	e004      	b.n	8000754 <readSignal+0x14c>
				  data[i] = 1;
 800074a:	4a42      	ldr	r2, [pc, #264]	; (8000854 <readSignal+0x24c>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	18d3      	adds	r3, r2, r3
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
		  for(int i = 7; i >= 0; i--)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	3b01      	subs	r3, #1
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	2b00      	cmp	r3, #0
 800075e:	dade      	bge.n	800071e <readSignal+0x116>
		  uint8_t transmit_samples = arrayToData();
 8000760:	1cfc      	adds	r4, r7, #3
 8000762:	f7ff ff25 	bl	80005b0 <arrayToData>
 8000766:	0003      	movs	r3, r0
 8000768:	7023      	strb	r3, [r4, #0]
		  memset(VAL_print, 0, sizeof(VAL_print));
 800076a:	4b37      	ldr	r3, [pc, #220]	; (8000848 <readSignal+0x240>)
 800076c:	2228      	movs	r2, #40	; 0x28
 800076e:	2100      	movs	r1, #0
 8000770:	0018      	movs	r0, r3
 8000772:	f001 fff1 	bl	8002758 <memset>
		  sprintf(VAL_print, "Number of transmissions: %d\r\n",transmit_samples);
 8000776:	1cfb      	adds	r3, r7, #3
 8000778:	781a      	ldrb	r2, [r3, #0]
 800077a:	493c      	ldr	r1, [pc, #240]	; (800086c <readSignal+0x264>)
 800077c:	4b32      	ldr	r3, [pc, #200]	; (8000848 <readSignal+0x240>)
 800077e:	0018      	movs	r0, r3
 8000780:	f001 fff2 	bl	8002768 <siprintf>
		  HAL_UART_Transmit(&huart2, VAL_print, sizeof(VAL_print), 1000);
 8000784:	23fa      	movs	r3, #250	; 0xfa
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	492f      	ldr	r1, [pc, #188]	; (8000848 <readSignal+0x240>)
 800078a:	4831      	ldr	r0, [pc, #196]	; (8000850 <readSignal+0x248>)
 800078c:	2228      	movs	r2, #40	; 0x28
 800078e:	f001 fc0f 	bl	8001fb0 <HAL_UART_Transmit>
		  if (transmit_samples == samples)
 8000792:	4b31      	ldr	r3, [pc, #196]	; (8000858 <readSignal+0x250>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	1cfa      	adds	r2, r7, #3
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	429a      	cmp	r2, r3
 800079c:	d126      	bne.n	80007ec <readSignal+0x1e4>
			  memset(VAL_print, 0, sizeof(VAL_print));
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <readSignal+0x240>)
 80007a0:	2228      	movs	r2, #40	; 0x28
 80007a2:	2100      	movs	r1, #0
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 ffd7 	bl	8002758 <memset>
			  sprintf(VAL_print, "It's the same!! :)\r\n\r\n");
 80007aa:	4a31      	ldr	r2, [pc, #196]	; (8000870 <readSignal+0x268>)
 80007ac:	4b26      	ldr	r3, [pc, #152]	; (8000848 <readSignal+0x240>)
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 ffd9 	bl	8002768 <siprintf>
			  HAL_UART_Transmit(&huart2, VAL_print, sizeof(VAL_print), 1000);
 80007b6:	23fa      	movs	r3, #250	; 0xfa
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4923      	ldr	r1, [pc, #140]	; (8000848 <readSignal+0x240>)
 80007bc:	4824      	ldr	r0, [pc, #144]	; (8000850 <readSignal+0x248>)
 80007be:	2228      	movs	r2, #40	; 0x28
 80007c0:	f001 fbf6 	bl	8001fb0 <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9); //toggle green pin
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4a2a      	ldr	r2, [pc, #168]	; (8000874 <readSignal+0x26c>)
 80007ca:	0019      	movs	r1, r3
 80007cc:	0010      	movs	r0, r2
 80007ce:	f000 feed 	bl	80015ac <HAL_GPIO_TogglePin>
			  HAL_Delay(500);
 80007d2:	23fa      	movs	r3, #250	; 0xfa
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 f9ee 	bl	8000bb8 <HAL_Delay>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9); //toggle green pin
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4a24      	ldr	r2, [pc, #144]	; (8000874 <readSignal+0x26c>)
 80007e2:	0019      	movs	r1, r3
 80007e4:	0010      	movs	r0, r2
 80007e6:	f000 fee1 	bl	80015ac <HAL_GPIO_TogglePin>
}
 80007ea:	e029      	b.n	8000840 <readSignal+0x238>
			  memset(VAL_print, 0, sizeof(VAL_print));
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <readSignal+0x240>)
 80007ee:	2228      	movs	r2, #40	; 0x28
 80007f0:	2100      	movs	r1, #0
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 ffb0 	bl	8002758 <memset>
			  sprintf(VAL_print, "It's not the same!! :(\r\n\r\n");
 80007f8:	4a1f      	ldr	r2, [pc, #124]	; (8000878 <readSignal+0x270>)
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <readSignal+0x240>)
 80007fc:	0011      	movs	r1, r2
 80007fe:	0018      	movs	r0, r3
 8000800:	f001 ffb2 	bl	8002768 <siprintf>
			  HAL_UART_Transmit(&huart2, VAL_print, sizeof(VAL_print), 1000);
 8000804:	23fa      	movs	r3, #250	; 0xfa
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	490f      	ldr	r1, [pc, #60]	; (8000848 <readSignal+0x240>)
 800080a:	4811      	ldr	r0, [pc, #68]	; (8000850 <readSignal+0x248>)
 800080c:	2228      	movs	r2, #40	; 0x28
 800080e:	f001 fbcf 	bl	8001fb0 <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8); //toggle blue pin
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4a17      	ldr	r2, [pc, #92]	; (8000874 <readSignal+0x26c>)
 8000818:	0019      	movs	r1, r3
 800081a:	0010      	movs	r0, r2
 800081c:	f000 fec6 	bl	80015ac <HAL_GPIO_TogglePin>
			  HAL_Delay(500);
 8000820:	23fa      	movs	r3, #250	; 0xfa
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	0018      	movs	r0, r3
 8000826:	f000 f9c7 	bl	8000bb8 <HAL_Delay>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8); //toggle blue pin
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <readSignal+0x26c>)
 8000830:	0019      	movs	r1, r3
 8000832:	0010      	movs	r0, r2
 8000834:	f000 feba 	bl	80015ac <HAL_GPIO_TogglePin>
			  samples = transmit_samples;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <readSignal+0x250>)
 800083a:	1cfa      	adds	r2, r7, #3
 800083c:	7812      	ldrb	r2, [r2, #0]
 800083e:	701a      	strb	r2, [r3, #0]
}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	b005      	add	sp, #20
 8000846:	bd90      	pop	{r4, r7, pc}
 8000848:	20000174 	.word	0x20000174
 800084c:	08003064 	.word	0x08003064
 8000850:	200000cc 	.word	0x200000cc
 8000854:	20000154 	.word	0x20000154
 8000858:	2000015c 	.word	0x2000015c
 800085c:	20000160 	.word	0x20000160
 8000860:	20000150 	.word	0x20000150
 8000864:	08003080 	.word	0x08003080
 8000868:	08003098 	.word	0x08003098
 800086c:	080030c0 	.word	0x080030c0
 8000870:	080030e0 	.word	0x080030e0
 8000874:	48000800 	.word	0x48000800
 8000878:	080030f8 	.word	0x080030f8

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>
	...

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_MspInit+0x44>)
 8000890:	699a      	ldr	r2, [r3, #24]
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_MspInit+0x44>)
 8000894:	2101      	movs	r1, #1
 8000896:	430a      	orrs	r2, r1
 8000898:	619a      	str	r2, [r3, #24]
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_MspInit+0x44>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	2201      	movs	r2, #1
 80008a0:	4013      	ands	r3, r2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_MspInit+0x44>)
 80008a8:	69da      	ldr	r2, [r3, #28]
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_MspInit+0x44>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0549      	lsls	r1, r1, #21
 80008b0:	430a      	orrs	r2, r1
 80008b2:	61da      	str	r2, [r3, #28]
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_MspInit+0x44>)
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	055b      	lsls	r3, r3, #21
 80008bc:	4013      	ands	r3, r2
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b08b      	sub	sp, #44	; 0x2c
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	2414      	movs	r4, #20
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	0018      	movs	r0, r3
 80008de:	2314      	movs	r3, #20
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f001 ff38 	bl	8002758 <memset>
  if(hadc->Instance==ADC1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a19      	ldr	r2, [pc, #100]	; (8000954 <HAL_ADC_MspInit+0x84>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d12b      	bne.n	800094a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <HAL_ADC_MspInit+0x88>)
 80008f4:	699a      	ldr	r2, [r3, #24]
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_ADC_MspInit+0x88>)
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	0089      	lsls	r1, r1, #2
 80008fc:	430a      	orrs	r2, r1
 80008fe:	619a      	str	r2, [r3, #24]
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_ADC_MspInit+0x88>)
 8000902:	699a      	ldr	r2, [r3, #24]
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_ADC_MspInit+0x88>)
 8000910:	695a      	ldr	r2, [r3, #20]
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_ADC_MspInit+0x88>)
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	0289      	lsls	r1, r1, #10
 8000918:	430a      	orrs	r2, r1
 800091a:	615a      	str	r2, [r3, #20]
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_ADC_MspInit+0x88>)
 800091e:	695a      	ldr	r2, [r3, #20]
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	029b      	lsls	r3, r3, #10
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2202      	movs	r2, #2
 800092e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	2203      	movs	r2, #3
 8000934:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	193a      	adds	r2, r7, r4
 800093e:	2390      	movs	r3, #144	; 0x90
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	0011      	movs	r1, r2
 8000944:	0018      	movs	r0, r3
 8000946:	f000 fc87 	bl	8001258 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b00b      	add	sp, #44	; 0x2c
 8000950:	bd90      	pop	{r4, r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	40012400 	.word	0x40012400
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b08b      	sub	sp, #44	; 0x2c
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	2414      	movs	r4, #20
 8000966:	193b      	adds	r3, r7, r4
 8000968:	0018      	movs	r0, r3
 800096a:	2314      	movs	r3, #20
 800096c:	001a      	movs	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f001 fef2 	bl	8002758 <memset>
  if(huart->Instance==USART2)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <HAL_UART_MspInit+0x90>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d132      	bne.n	80009e4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <HAL_UART_MspInit+0x94>)
 8000980:	69da      	ldr	r2, [r3, #28]
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <HAL_UART_MspInit+0x94>)
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	0289      	lsls	r1, r1, #10
 8000988:	430a      	orrs	r2, r1
 800098a:	61da      	str	r2, [r3, #28]
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_UART_MspInit+0x94>)
 800098e:	69da      	ldr	r2, [r3, #28]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	029b      	lsls	r3, r3, #10
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_UART_MspInit+0x94>)
 800099c:	695a      	ldr	r2, [r3, #20]
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <HAL_UART_MspInit+0x94>)
 80009a0:	2180      	movs	r1, #128	; 0x80
 80009a2:	0289      	lsls	r1, r1, #10
 80009a4:	430a      	orrs	r2, r1
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_UART_MspInit+0x94>)
 80009aa:	695a      	ldr	r2, [r3, #20]
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	029b      	lsls	r3, r3, #10
 80009b0:	4013      	ands	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009b6:	0021      	movs	r1, r4
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2202      	movs	r2, #2
 80009c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2203      	movs	r2, #3
 80009ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2201      	movs	r2, #1
 80009d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	187a      	adds	r2, r7, r1
 80009d8:	2390      	movs	r3, #144	; 0x90
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	0011      	movs	r1, r2
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 fc3a 	bl	8001258 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b00b      	add	sp, #44	; 0x2c
 80009ea:	bd90      	pop	{r4, r7, pc}
 80009ec:	40004400 	.word	0x40004400
 80009f0:	40021000 	.word	0x40021000

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a18:	f000 f8b2 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <_sbrk+0x5c>)
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <_sbrk+0x60>)
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <_sbrk+0x64>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <_sbrk+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	18d3      	adds	r3, r2, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d207      	bcs.n	8000a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a54:	f001 fe56 	bl	8002704 <__errno>
 8000a58:	0003      	movs	r3, r0
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	425b      	negs	r3, r3
 8000a62:	e009      	b.n	8000a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	18d2      	adds	r2, r2, r3
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <_sbrk+0x64>)
 8000a74:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b006      	add	sp, #24
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20002000 	.word	0x20002000
 8000a84:	00000400 	.word	0x00000400
 8000a88:	2000019c 	.word	0x2000019c
 8000a8c:	200001b8 	.word	0x200001b8

08000a90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa2:	490e      	ldr	r1, [pc, #56]	; (8000adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa4:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <LoopForever+0xe>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab8:	4c0b      	ldr	r4, [pc, #44]	; (8000ae8 <LoopForever+0x16>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ac6:	f7ff ffe3 	bl	8000a90 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000aca:	f001 fe21 	bl	8002710 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ace:	f7ff fbb1 	bl	8000234 <main>

08000ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad2:	e7fe      	b.n	8000ad2 <LoopForever>
  ldr   r0, =_estack
 8000ad4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000adc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ae0:	08003188 	.word	0x08003188
  ldr r2, =_sbss
 8000ae4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ae8:	200001b4 	.word	0x200001b4

08000aec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC1_COMP_IRQHandler>
	...

08000af0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <HAL_Init+0x24>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_Init+0x24>)
 8000afa:	2110      	movs	r1, #16
 8000afc:	430a      	orrs	r2, r1
 8000afe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 f809 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b06:	f7ff febf 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	40022000 	.word	0x40022000

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_InitTick+0x5c>)
 8000b22:	681c      	ldr	r4, [r3, #0]
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_InitTick+0x60>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	0019      	movs	r1, r3
 8000b2a:	23fa      	movs	r3, #250	; 0xfa
 8000b2c:	0098      	lsls	r0, r3, #2
 8000b2e:	f7ff faf5 	bl	800011c <__udivsi3>
 8000b32:	0003      	movs	r3, r0
 8000b34:	0019      	movs	r1, r3
 8000b36:	0020      	movs	r0, r4
 8000b38:	f7ff faf0 	bl	800011c <__udivsi3>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fb7d 	bl	800123e <HAL_SYSTICK_Config>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e00f      	b.n	8000b6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d80b      	bhi.n	8000b6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2301      	movs	r3, #1
 8000b56:	425b      	negs	r3, r3
 8000b58:	2200      	movs	r2, #0
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f000 fb4a 	bl	80011f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_InitTick+0x64>)
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b003      	add	sp, #12
 8000b72:	bd90      	pop	{r4, r7, pc}
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20000004 	.word	0x20000004

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x1c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	001a      	movs	r2, r3
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	18d2      	adds	r2, r2, r3
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	200001a0 	.word	0x200001a0

08000ba4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <HAL_GetTick+0x10>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	200001a0 	.word	0x200001a0

08000bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff fff0 	bl	8000ba4 <HAL_GetTick>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	d005      	beq.n	8000bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_Delay+0x44>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	189b      	adds	r3, r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	f7ff ffe0 	bl	8000ba4 <HAL_GetTick>
 8000be4:	0002      	movs	r2, r0
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d8f7      	bhi.n	8000be0 <HAL_Delay+0x28>
  {
  }
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b004      	add	sp, #16
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	20000008 	.word	0x20000008

08000c00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c08:	230f      	movs	r3, #15
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e125      	b.n	8000e6a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10a      	bne.n	8000c3c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2234      	movs	r2, #52	; 0x34
 8000c30:	2100      	movs	r1, #0
 8000c32:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	0018      	movs	r0, r3
 8000c38:	f7ff fe4a 	bl	80008d0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c40:	2210      	movs	r2, #16
 8000c42:	4013      	ands	r3, r2
 8000c44:	d000      	beq.n	8000c48 <HAL_ADC_Init+0x48>
 8000c46:	e103      	b.n	8000e50 <HAL_ADC_Init+0x250>
 8000c48:	230f      	movs	r3, #15
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d000      	beq.n	8000c54 <HAL_ADC_Init+0x54>
 8000c52:	e0fd      	b.n	8000e50 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000c5e:	d000      	beq.n	8000c62 <HAL_ADC_Init+0x62>
 8000c60:	e0f6      	b.n	8000e50 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c66:	4a83      	ldr	r2, [pc, #524]	; (8000e74 <HAL_ADC_Init+0x274>)
 8000c68:	4013      	ands	r3, r2
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	2203      	movs	r2, #3
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d112      	bne.n	8000ca6 <HAL_ADC_Init+0xa6>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2201      	movs	r2, #1
 8000c88:	4013      	ands	r3, r2
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d009      	beq.n	8000ca2 <HAL_ADC_Init+0xa2>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	401a      	ands	r2, r3
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d101      	bne.n	8000ca6 <HAL_ADC_Init+0xa6>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e000      	b.n	8000ca8 <HAL_ADC_Init+0xa8>
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d116      	bne.n	8000cda <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	2218      	movs	r2, #24
 8000cb4:	4393      	bics	r3, r2
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	0899      	lsrs	r1, r3, #2
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4964      	ldr	r1, [pc, #400]	; (8000e78 <HAL_ADC_Init+0x278>)
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	7e1b      	ldrb	r3, [r3, #24]
 8000cee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7e5b      	ldrb	r3, [r3, #25]
 8000cf4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cf6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7e9b      	ldrb	r3, [r3, #26]
 8000cfc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000cfe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d002      	beq.n	8000d0e <HAL_ADC_Init+0x10e>
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	015b      	lsls	r3, r3, #5
 8000d0c:	e000      	b.n	8000d10 <HAL_ADC_Init+0x110>
 8000d0e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d10:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d16:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d101      	bne.n	8000d24 <HAL_ADC_Init+0x124>
 8000d20:	2304      	movs	r3, #4
 8000d22:	e000      	b.n	8000d26 <HAL_ADC_Init+0x126>
 8000d24:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000d26:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2124      	movs	r1, #36	; 0x24
 8000d2c:	5c5b      	ldrb	r3, [r3, r1]
 8000d2e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d30:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7edb      	ldrb	r3, [r3, #27]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d115      	bne.n	8000d6c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7e9b      	ldrb	r3, [r3, #26]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d105      	bne.n	8000d54 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	0252      	lsls	r2, r2, #9
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	e00b      	b.n	8000d6c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d58:	2220      	movs	r2, #32
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d64:	2201      	movs	r2, #1
 8000d66:	431a      	orrs	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69da      	ldr	r2, [r3, #28]
 8000d70:	23c2      	movs	r3, #194	; 0xc2
 8000d72:	33ff      	adds	r3, #255	; 0xff
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d007      	beq.n	8000d88 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d80:	4313      	orrs	r3, r2
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68d9      	ldr	r1, [r3, #12]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	055b      	lsls	r3, r3, #21
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d01b      	beq.n	8000ddc <HAL_ADC_Init+0x1dc>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d017      	beq.n	8000ddc <HAL_ADC_Init+0x1dc>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d013      	beq.n	8000ddc <HAL_ADC_Init+0x1dc>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d00f      	beq.n	8000ddc <HAL_ADC_Init+0x1dc>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	d00b      	beq.n	8000ddc <HAL_ADC_Init+0x1dc>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	2b05      	cmp	r3, #5
 8000dca:	d007      	beq.n	8000ddc <HAL_ADC_Init+0x1dc>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	2b06      	cmp	r3, #6
 8000dd2:	d003      	beq.n	8000ddc <HAL_ADC_Init+0x1dc>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	2b07      	cmp	r3, #7
 8000dda:	d112      	bne.n	8000e02 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	695a      	ldr	r2, [r3, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2107      	movs	r1, #7
 8000de8:	438a      	bics	r2, r1
 8000dea:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6959      	ldr	r1, [r3, #20]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df6:	2207      	movs	r2, #7
 8000df8:	401a      	ands	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <HAL_ADC_Init+0x27c>)
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d10b      	bne.n	8000e2a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	4393      	bics	r3, r2
 8000e20:	2201      	movs	r2, #1
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e28:	e01c      	b.n	8000e64 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e2e:	2212      	movs	r2, #18
 8000e30:	4393      	bics	r3, r2
 8000e32:	2210      	movs	r2, #16
 8000e34:	431a      	orrs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3e:	2201      	movs	r2, #1
 8000e40:	431a      	orrs	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000e46:	230f      	movs	r3, #15
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e4e:	e009      	b.n	8000e64 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e54:	2210      	movs	r2, #16
 8000e56:	431a      	orrs	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e64:	230f      	movs	r3, #15
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	781b      	ldrb	r3, [r3, #0]
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b004      	add	sp, #16
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	fffffefd 	.word	0xfffffefd
 8000e78:	fffe0219 	.word	0xfffe0219
 8000e7c:	833fffe7 	.word	0x833fffe7

08000e80 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e8a:	230f      	movs	r3, #15
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	055b      	lsls	r3, r3, #21
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d011      	beq.n	8000ec6 <HAL_ADC_ConfigChannel+0x46>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d00d      	beq.n	8000ec6 <HAL_ADC_ConfigChannel+0x46>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d009      	beq.n	8000ec6 <HAL_ADC_ConfigChannel+0x46>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d005      	beq.n	8000ec6 <HAL_ADC_ConfigChannel+0x46>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d001      	beq.n	8000ec6 <HAL_ADC_ConfigChannel+0x46>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2234      	movs	r2, #52	; 0x34
 8000eca:	5c9b      	ldrb	r3, [r3, r2]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d101      	bne.n	8000ed4 <HAL_ADC_ConfigChannel+0x54>
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	e0d0      	b.n	8001076 <HAL_ADC_ConfigChannel+0x1f6>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2234      	movs	r2, #52	; 0x34
 8000ed8:	2101      	movs	r1, #1
 8000eda:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d000      	beq.n	8000eea <HAL_ADC_ConfigChannel+0x6a>
 8000ee8:	e0b4      	b.n	8001054 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	4a64      	ldr	r2, [pc, #400]	; (8001080 <HAL_ADC_ConfigChannel+0x200>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <HAL_ADC_ConfigChannel+0x76>
 8000ef4:	e082      	b.n	8000ffc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2201      	movs	r2, #1
 8000f02:	409a      	lsls	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	055b      	lsls	r3, r3, #21
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d037      	beq.n	8000f88 <HAL_ADC_ConfigChannel+0x108>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d033      	beq.n	8000f88 <HAL_ADC_ConfigChannel+0x108>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d02f      	beq.n	8000f88 <HAL_ADC_ConfigChannel+0x108>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d02b      	beq.n	8000f88 <HAL_ADC_ConfigChannel+0x108>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d027      	beq.n	8000f88 <HAL_ADC_ConfigChannel+0x108>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3c:	2b05      	cmp	r3, #5
 8000f3e:	d023      	beq.n	8000f88 <HAL_ADC_ConfigChannel+0x108>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f44:	2b06      	cmp	r3, #6
 8000f46:	d01f      	beq.n	8000f88 <HAL_ADC_ConfigChannel+0x108>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4c:	2b07      	cmp	r3, #7
 8000f4e:	d01b      	beq.n	8000f88 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	2107      	movs	r1, #7
 8000f5c:	400b      	ands	r3, r1
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d012      	beq.n	8000f88 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2107      	movs	r1, #7
 8000f6e:	438a      	bics	r2, r1
 8000f70:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6959      	ldr	r1, [r3, #20]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	401a      	ands	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	430a      	orrs	r2, r1
 8000f86:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b10      	cmp	r3, #16
 8000f8e:	d007      	beq.n	8000fa0 <HAL_ADC_ConfigChannel+0x120>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b11      	cmp	r3, #17
 8000f96:	d003      	beq.n	8000fa0 <HAL_ADC_ConfigChannel+0x120>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b12      	cmp	r3, #18
 8000f9e:	d163      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000fa0:	4b38      	ldr	r3, [pc, #224]	; (8001084 <HAL_ADC_ConfigChannel+0x204>)
 8000fa2:	6819      	ldr	r1, [r3, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b10      	cmp	r3, #16
 8000faa:	d009      	beq.n	8000fc0 <HAL_ADC_ConfigChannel+0x140>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b11      	cmp	r3, #17
 8000fb2:	d102      	bne.n	8000fba <HAL_ADC_ConfigChannel+0x13a>
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	03db      	lsls	r3, r3, #15
 8000fb8:	e004      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x144>
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	045b      	lsls	r3, r3, #17
 8000fbe:	e001      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x144>
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	041b      	lsls	r3, r3, #16
 8000fc4:	4a2f      	ldr	r2, [pc, #188]	; (8001084 <HAL_ADC_ConfigChannel+0x204>)
 8000fc6:	430b      	orrs	r3, r1
 8000fc8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b10      	cmp	r3, #16
 8000fd0:	d14a      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <HAL_ADC_ConfigChannel+0x208>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	492d      	ldr	r1, [pc, #180]	; (800108c <HAL_ADC_ConfigChannel+0x20c>)
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f7ff f89f 	bl	800011c <__udivsi3>
 8000fde:	0003      	movs	r3, r0
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	0013      	movs	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	189b      	adds	r3, r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fec:	e002      	b.n	8000ff4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f9      	bne.n	8000fee <HAL_ADC_ConfigChannel+0x16e>
 8000ffa:	e035      	b.n	8001068 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2101      	movs	r1, #1
 8001008:	4099      	lsls	r1, r3
 800100a:	000b      	movs	r3, r1
 800100c:	43d9      	mvns	r1, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	400a      	ands	r2, r1
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b10      	cmp	r3, #16
 800101c:	d007      	beq.n	800102e <HAL_ADC_ConfigChannel+0x1ae>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b11      	cmp	r3, #17
 8001024:	d003      	beq.n	800102e <HAL_ADC_ConfigChannel+0x1ae>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b12      	cmp	r3, #18
 800102c:	d11c      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_ADC_ConfigChannel+0x204>)
 8001030:	6819      	ldr	r1, [r3, #0]
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b10      	cmp	r3, #16
 8001038:	d007      	beq.n	800104a <HAL_ADC_ConfigChannel+0x1ca>
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b11      	cmp	r3, #17
 8001040:	d101      	bne.n	8001046 <HAL_ADC_ConfigChannel+0x1c6>
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <HAL_ADC_ConfigChannel+0x210>)
 8001044:	e002      	b.n	800104c <HAL_ADC_ConfigChannel+0x1cc>
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <HAL_ADC_ConfigChannel+0x214>)
 8001048:	e000      	b.n	800104c <HAL_ADC_ConfigChannel+0x1cc>
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_ADC_ConfigChannel+0x218>)
 800104c:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <HAL_ADC_ConfigChannel+0x204>)
 800104e:	400b      	ands	r3, r1
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e009      	b.n	8001068 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001058:	2220      	movs	r2, #32
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001060:	230f      	movs	r3, #15
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2234      	movs	r2, #52	; 0x34
 800106c:	2100      	movs	r1, #0
 800106e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001070:	230f      	movs	r3, #15
 8001072:	18fb      	adds	r3, r7, r3
 8001074:	781b      	ldrb	r3, [r3, #0]
}
 8001076:	0018      	movs	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	b004      	add	sp, #16
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	00001001 	.word	0x00001001
 8001084:	40012708 	.word	0x40012708
 8001088:	20000000 	.word	0x20000000
 800108c:	000f4240 	.word	0x000f4240
 8001090:	ffbfffff 	.word	0xffbfffff
 8001094:	feffffff 	.word	0xfeffffff
 8001098:	ff7fffff 	.word	0xff7fffff

0800109c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	0002      	movs	r2, r0
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010a8:	1dfb      	adds	r3, r7, #7
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b7f      	cmp	r3, #127	; 0x7f
 80010ae:	d809      	bhi.n	80010c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b0:	1dfb      	adds	r3, r7, #7
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	001a      	movs	r2, r3
 80010b6:	231f      	movs	r3, #31
 80010b8:	401a      	ands	r2, r3
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_EnableIRQ+0x30>)
 80010bc:	2101      	movs	r1, #1
 80010be:	4091      	lsls	r1, r2
 80010c0:	000a      	movs	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
  }
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b002      	add	sp, #8
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	0002      	movs	r2, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b7f      	cmp	r3, #127	; 0x7f
 80010e4:	d828      	bhi.n	8001138 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e6:	4a2f      	ldr	r2, [pc, #188]	; (80011a4 <__NVIC_SetPriority+0xd4>)
 80010e8:	1dfb      	adds	r3, r7, #7
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	33c0      	adds	r3, #192	; 0xc0
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	589b      	ldr	r3, [r3, r2]
 80010f6:	1dfa      	adds	r2, r7, #7
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	0011      	movs	r1, r2
 80010fc:	2203      	movs	r2, #3
 80010fe:	400a      	ands	r2, r1
 8001100:	00d2      	lsls	r2, r2, #3
 8001102:	21ff      	movs	r1, #255	; 0xff
 8001104:	4091      	lsls	r1, r2
 8001106:	000a      	movs	r2, r1
 8001108:	43d2      	mvns	r2, r2
 800110a:	401a      	ands	r2, r3
 800110c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	019b      	lsls	r3, r3, #6
 8001112:	22ff      	movs	r2, #255	; 0xff
 8001114:	401a      	ands	r2, r3
 8001116:	1dfb      	adds	r3, r7, #7
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	0018      	movs	r0, r3
 800111c:	2303      	movs	r3, #3
 800111e:	4003      	ands	r3, r0
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001124:	481f      	ldr	r0, [pc, #124]	; (80011a4 <__NVIC_SetPriority+0xd4>)
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b25b      	sxtb	r3, r3
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	430a      	orrs	r2, r1
 8001130:	33c0      	adds	r3, #192	; 0xc0
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001136:	e031      	b.n	800119c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001138:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <__NVIC_SetPriority+0xd8>)
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	0019      	movs	r1, r3
 8001140:	230f      	movs	r3, #15
 8001142:	400b      	ands	r3, r1
 8001144:	3b08      	subs	r3, #8
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	3306      	adds	r3, #6
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	18d3      	adds	r3, r2, r3
 800114e:	3304      	adds	r3, #4
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	1dfa      	adds	r2, r7, #7
 8001154:	7812      	ldrb	r2, [r2, #0]
 8001156:	0011      	movs	r1, r2
 8001158:	2203      	movs	r2, #3
 800115a:	400a      	ands	r2, r1
 800115c:	00d2      	lsls	r2, r2, #3
 800115e:	21ff      	movs	r1, #255	; 0xff
 8001160:	4091      	lsls	r1, r2
 8001162:	000a      	movs	r2, r1
 8001164:	43d2      	mvns	r2, r2
 8001166:	401a      	ands	r2, r3
 8001168:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	019b      	lsls	r3, r3, #6
 800116e:	22ff      	movs	r2, #255	; 0xff
 8001170:	401a      	ands	r2, r3
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	0018      	movs	r0, r3
 8001178:	2303      	movs	r3, #3
 800117a:	4003      	ands	r3, r0
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001180:	4809      	ldr	r0, [pc, #36]	; (80011a8 <__NVIC_SetPriority+0xd8>)
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	001c      	movs	r4, r3
 8001188:	230f      	movs	r3, #15
 800118a:	4023      	ands	r3, r4
 800118c:	3b08      	subs	r3, #8
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	430a      	orrs	r2, r1
 8001192:	3306      	adds	r3, #6
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	18c3      	adds	r3, r0, r3
 8001198:	3304      	adds	r3, #4
 800119a:	601a      	str	r2, [r3, #0]
}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b003      	add	sp, #12
 80011a2:	bd90      	pop	{r4, r7, pc}
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	1e5a      	subs	r2, r3, #1
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	045b      	lsls	r3, r3, #17
 80011bc:	429a      	cmp	r2, r3
 80011be:	d301      	bcc.n	80011c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c0:	2301      	movs	r3, #1
 80011c2:	e010      	b.n	80011e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <SysTick_Config+0x44>)
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	3a01      	subs	r2, #1
 80011ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011cc:	2301      	movs	r3, #1
 80011ce:	425b      	negs	r3, r3
 80011d0:	2103      	movs	r1, #3
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7ff ff7c 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Config+0x44>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Config+0x44>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	210f      	movs	r1, #15
 8001200:	187b      	adds	r3, r7, r1
 8001202:	1c02      	adds	r2, r0, #0
 8001204:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	187b      	adds	r3, r7, r1
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b25b      	sxtb	r3, r3
 800120e:	0011      	movs	r1, r2
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff ff5d 	bl	80010d0 <__NVIC_SetPriority>
}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	b004      	add	sp, #16
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	0002      	movs	r2, r0
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b25b      	sxtb	r3, r3
 8001230:	0018      	movs	r0, r3
 8001232:	f7ff ff33 	bl	800109c <__NVIC_EnableIRQ>
}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	b002      	add	sp, #8
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	0018      	movs	r0, r3
 800124a:	f7ff ffaf 	bl	80011ac <SysTick_Config>
 800124e:	0003      	movs	r3, r0
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	b002      	add	sp, #8
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001266:	e14f      	b.n	8001508 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2101      	movs	r1, #1
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	4091      	lsls	r1, r2
 8001272:	000a      	movs	r2, r1
 8001274:	4013      	ands	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d100      	bne.n	8001280 <HAL_GPIO_Init+0x28>
 800127e:	e140      	b.n	8001502 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2203      	movs	r2, #3
 8001286:	4013      	ands	r3, r2
 8001288:	2b01      	cmp	r3, #1
 800128a:	d005      	beq.n	8001298 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2203      	movs	r2, #3
 8001292:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001294:	2b02      	cmp	r3, #2
 8001296:	d130      	bne.n	80012fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	409a      	lsls	r2, r3
 80012a6:	0013      	movs	r3, r2
 80012a8:	43da      	mvns	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	409a      	lsls	r2, r3
 80012ba:	0013      	movs	r3, r2
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ce:	2201      	movs	r2, #1
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	2201      	movs	r2, #1
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2203      	movs	r2, #3
 8001300:	4013      	ands	r3, r2
 8001302:	2b03      	cmp	r3, #3
 8001304:	d017      	beq.n	8001336 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	43da      	mvns	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2203      	movs	r2, #3
 800133c:	4013      	ands	r3, r2
 800133e:	2b02      	cmp	r3, #2
 8001340:	d123      	bne.n	800138a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	58d3      	ldr	r3, [r2, r3]
 800134e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2207      	movs	r2, #7
 8001354:	4013      	ands	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	220f      	movs	r2, #15
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	43da      	mvns	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	2107      	movs	r1, #7
 800136e:	400b      	ands	r3, r1
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	409a      	lsls	r2, r3
 8001374:	0013      	movs	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	0092      	lsls	r2, r2, #2
 8001386:	6939      	ldr	r1, [r7, #16]
 8001388:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2203      	movs	r2, #3
 80013a8:	401a      	ands	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	409a      	lsls	r2, r3
 80013b0:	0013      	movs	r3, r2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	23c0      	movs	r3, #192	; 0xc0
 80013c4:	029b      	lsls	r3, r3, #10
 80013c6:	4013      	ands	r3, r2
 80013c8:	d100      	bne.n	80013cc <HAL_GPIO_Init+0x174>
 80013ca:	e09a      	b.n	8001502 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013cc:	4b54      	ldr	r3, [pc, #336]	; (8001520 <HAL_GPIO_Init+0x2c8>)
 80013ce:	699a      	ldr	r2, [r3, #24]
 80013d0:	4b53      	ldr	r3, [pc, #332]	; (8001520 <HAL_GPIO_Init+0x2c8>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	430a      	orrs	r2, r1
 80013d6:	619a      	str	r2, [r3, #24]
 80013d8:	4b51      	ldr	r3, [pc, #324]	; (8001520 <HAL_GPIO_Init+0x2c8>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2201      	movs	r2, #1
 80013de:	4013      	ands	r3, r2
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013e4:	4a4f      	ldr	r2, [pc, #316]	; (8001524 <HAL_GPIO_Init+0x2cc>)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	589b      	ldr	r3, [r3, r2]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2203      	movs	r2, #3
 80013f6:	4013      	ands	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	409a      	lsls	r2, r3
 80013fe:	0013      	movs	r3, r2
 8001400:	43da      	mvns	r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	2390      	movs	r3, #144	; 0x90
 800140c:	05db      	lsls	r3, r3, #23
 800140e:	429a      	cmp	r2, r3
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0x1e2>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a44      	ldr	r2, [pc, #272]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00d      	beq.n	8001436 <HAL_GPIO_Init+0x1de>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a43      	ldr	r2, [pc, #268]	; (800152c <HAL_GPIO_Init+0x2d4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x1da>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a42      	ldr	r2, [pc, #264]	; (8001530 <HAL_GPIO_Init+0x2d8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_GPIO_Init+0x1d6>
 800142a:	2303      	movs	r3, #3
 800142c:	e006      	b.n	800143c <HAL_GPIO_Init+0x1e4>
 800142e:	2305      	movs	r3, #5
 8001430:	e004      	b.n	800143c <HAL_GPIO_Init+0x1e4>
 8001432:	2302      	movs	r3, #2
 8001434:	e002      	b.n	800143c <HAL_GPIO_Init+0x1e4>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <HAL_GPIO_Init+0x1e4>
 800143a:	2300      	movs	r3, #0
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	2103      	movs	r1, #3
 8001440:	400a      	ands	r2, r1
 8001442:	0092      	lsls	r2, r2, #2
 8001444:	4093      	lsls	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800144c:	4935      	ldr	r1, [pc, #212]	; (8001524 <HAL_GPIO_Init+0x2cc>)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3302      	adds	r3, #2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800145a:	4b36      	ldr	r3, [pc, #216]	; (8001534 <HAL_GPIO_Init+0x2dc>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43da      	mvns	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	025b      	lsls	r3, r3, #9
 8001472:	4013      	ands	r3, r2
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <HAL_GPIO_Init+0x2dc>)
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <HAL_GPIO_Init+0x2dc>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43da      	mvns	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	029b      	lsls	r3, r3, #10
 800149c:	4013      	ands	r3, r2
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <HAL_GPIO_Init+0x2dc>)
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <HAL_GPIO_Init+0x2dc>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	43da      	mvns	r2, r3
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	2380      	movs	r3, #128	; 0x80
 80014c4:	035b      	lsls	r3, r3, #13
 80014c6:	4013      	ands	r3, r2
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_GPIO_Init+0x2dc>)
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_GPIO_Init+0x2dc>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	43da      	mvns	r2, r3
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	039b      	lsls	r3, r3, #14
 80014f0:	4013      	ands	r3, r2
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <HAL_GPIO_Init+0x2dc>)
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	40da      	lsrs	r2, r3
 8001510:	1e13      	subs	r3, r2, #0
 8001512:	d000      	beq.n	8001516 <HAL_GPIO_Init+0x2be>
 8001514:	e6a8      	b.n	8001268 <HAL_GPIO_Init+0x10>
  } 
}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b006      	add	sp, #24
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	40010000 	.word	0x40010000
 8001528:	48000400 	.word	0x48000400
 800152c:	48000800 	.word	0x48000800
 8001530:	48000c00 	.word	0x48000c00
 8001534:	40010400 	.word	0x40010400

08001538 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	000a      	movs	r2, r1
 8001542:	1cbb      	adds	r3, r7, #2
 8001544:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	1cba      	adds	r2, r7, #2
 800154c:	8812      	ldrh	r2, [r2, #0]
 800154e:	4013      	ands	r3, r2
 8001550:	d004      	beq.n	800155c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001552:	230f      	movs	r3, #15
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	e003      	b.n	8001564 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800155c:	230f      	movs	r3, #15
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001564:	230f      	movs	r3, #15
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	781b      	ldrb	r3, [r3, #0]
  }
 800156a:	0018      	movs	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	b004      	add	sp, #16
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	0008      	movs	r0, r1
 800157c:	0011      	movs	r1, r2
 800157e:	1cbb      	adds	r3, r7, #2
 8001580:	1c02      	adds	r2, r0, #0
 8001582:	801a      	strh	r2, [r3, #0]
 8001584:	1c7b      	adds	r3, r7, #1
 8001586:	1c0a      	adds	r2, r1, #0
 8001588:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800158a:	1c7b      	adds	r3, r7, #1
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001592:	1cbb      	adds	r3, r7, #2
 8001594:	881a      	ldrh	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800159a:	e003      	b.n	80015a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800159c:	1cbb      	adds	r3, r7, #2
 800159e:	881a      	ldrh	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b002      	add	sp, #8
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	000a      	movs	r2, r1
 80015b6:	1cbb      	adds	r3, r7, #2
 80015b8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015c0:	1cbb      	adds	r3, r7, #2
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	041a      	lsls	r2, r3, #16
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	1cb9      	adds	r1, r7, #2
 80015d0:	8809      	ldrh	r1, [r1, #0]
 80015d2:	400b      	ands	r3, r1
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	619a      	str	r2, [r3, #24]
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b004      	add	sp, #16
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	0002      	movs	r2, r0
 80015ec:	1dbb      	adds	r3, r7, #6
 80015ee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	1dba      	adds	r2, r7, #6
 80015f6:	8812      	ldrh	r2, [r2, #0]
 80015f8:	4013      	ands	r3, r2
 80015fa:	d008      	beq.n	800160e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80015fe:	1dba      	adds	r2, r7, #6
 8001600:	8812      	ldrh	r2, [r2, #0]
 8001602:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001604:	1dbb      	adds	r3, r7, #6
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	0018      	movs	r0, r3
 800160a:	f000 f807 	bl	800161c <HAL_GPIO_EXTI_Callback>
  }
}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b002      	add	sp, #8
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	40010400 	.word	0x40010400

0800161c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	0002      	movs	r2, r0
 8001624:	1dbb      	adds	r3, r7, #6
 8001626:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b002      	add	sp, #8
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e301      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2201      	movs	r2, #1
 8001648:	4013      	ands	r3, r2
 800164a:	d100      	bne.n	800164e <HAL_RCC_OscConfig+0x1e>
 800164c:	e08d      	b.n	800176a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800164e:	4bc3      	ldr	r3, [pc, #780]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	220c      	movs	r2, #12
 8001654:	4013      	ands	r3, r2
 8001656:	2b04      	cmp	r3, #4
 8001658:	d00e      	beq.n	8001678 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800165a:	4bc0      	ldr	r3, [pc, #768]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	220c      	movs	r2, #12
 8001660:	4013      	ands	r3, r2
 8001662:	2b08      	cmp	r3, #8
 8001664:	d116      	bne.n	8001694 <HAL_RCC_OscConfig+0x64>
 8001666:	4bbd      	ldr	r3, [pc, #756]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	025b      	lsls	r3, r3, #9
 800166e:	401a      	ands	r2, r3
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	025b      	lsls	r3, r3, #9
 8001674:	429a      	cmp	r2, r3
 8001676:	d10d      	bne.n	8001694 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	4bb8      	ldr	r3, [pc, #736]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	029b      	lsls	r3, r3, #10
 8001680:	4013      	ands	r3, r2
 8001682:	d100      	bne.n	8001686 <HAL_RCC_OscConfig+0x56>
 8001684:	e070      	b.n	8001768 <HAL_RCC_OscConfig+0x138>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d000      	beq.n	8001690 <HAL_RCC_OscConfig+0x60>
 800168e:	e06b      	b.n	8001768 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e2d8      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d107      	bne.n	80016ac <HAL_RCC_OscConfig+0x7c>
 800169c:	4baf      	ldr	r3, [pc, #700]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4bae      	ldr	r3, [pc, #696]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80016a2:	2180      	movs	r1, #128	; 0x80
 80016a4:	0249      	lsls	r1, r1, #9
 80016a6:	430a      	orrs	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e02f      	b.n	800170c <HAL_RCC_OscConfig+0xdc>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10c      	bne.n	80016ce <HAL_RCC_OscConfig+0x9e>
 80016b4:	4ba9      	ldr	r3, [pc, #676]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4ba8      	ldr	r3, [pc, #672]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80016ba:	49a9      	ldr	r1, [pc, #676]	; (8001960 <HAL_RCC_OscConfig+0x330>)
 80016bc:	400a      	ands	r2, r1
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	4ba6      	ldr	r3, [pc, #664]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4ba5      	ldr	r3, [pc, #660]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80016c6:	49a7      	ldr	r1, [pc, #668]	; (8001964 <HAL_RCC_OscConfig+0x334>)
 80016c8:	400a      	ands	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	e01e      	b.n	800170c <HAL_RCC_OscConfig+0xdc>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b05      	cmp	r3, #5
 80016d4:	d10e      	bne.n	80016f4 <HAL_RCC_OscConfig+0xc4>
 80016d6:	4ba1      	ldr	r3, [pc, #644]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	4ba0      	ldr	r3, [pc, #640]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	02c9      	lsls	r1, r1, #11
 80016e0:	430a      	orrs	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	4b9d      	ldr	r3, [pc, #628]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b9c      	ldr	r3, [pc, #624]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	0249      	lsls	r1, r1, #9
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	e00b      	b.n	800170c <HAL_RCC_OscConfig+0xdc>
 80016f4:	4b99      	ldr	r3, [pc, #612]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b98      	ldr	r3, [pc, #608]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80016fa:	4999      	ldr	r1, [pc, #612]	; (8001960 <HAL_RCC_OscConfig+0x330>)
 80016fc:	400a      	ands	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	4b96      	ldr	r3, [pc, #600]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b95      	ldr	r3, [pc, #596]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001706:	4997      	ldr	r1, [pc, #604]	; (8001964 <HAL_RCC_OscConfig+0x334>)
 8001708:	400a      	ands	r2, r1
 800170a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d014      	beq.n	800173e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fa46 	bl	8000ba4 <HAL_GetTick>
 8001718:	0003      	movs	r3, r0
 800171a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800171e:	f7ff fa41 	bl	8000ba4 <HAL_GetTick>
 8001722:	0002      	movs	r2, r0
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b64      	cmp	r3, #100	; 0x64
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e28a      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001730:	4b8a      	ldr	r3, [pc, #552]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	029b      	lsls	r3, r3, #10
 8001738:	4013      	ands	r3, r2
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0xee>
 800173c:	e015      	b.n	800176a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff fa31 	bl	8000ba4 <HAL_GetTick>
 8001742:	0003      	movs	r3, r0
 8001744:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff fa2c 	bl	8000ba4 <HAL_GetTick>
 800174c:	0002      	movs	r2, r0
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e275      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175a:	4b80      	ldr	r3, [pc, #512]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	029b      	lsls	r3, r3, #10
 8001762:	4013      	ands	r3, r2
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x118>
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2202      	movs	r2, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d100      	bne.n	8001776 <HAL_RCC_OscConfig+0x146>
 8001774:	e069      	b.n	800184a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001776:	4b79      	ldr	r3, [pc, #484]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	220c      	movs	r2, #12
 800177c:	4013      	ands	r3, r2
 800177e:	d00b      	beq.n	8001798 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001780:	4b76      	ldr	r3, [pc, #472]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	220c      	movs	r2, #12
 8001786:	4013      	ands	r3, r2
 8001788:	2b08      	cmp	r3, #8
 800178a:	d11c      	bne.n	80017c6 <HAL_RCC_OscConfig+0x196>
 800178c:	4b73      	ldr	r3, [pc, #460]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	025b      	lsls	r3, r3, #9
 8001794:	4013      	ands	r3, r2
 8001796:	d116      	bne.n	80017c6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001798:	4b70      	ldr	r3, [pc, #448]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2202      	movs	r2, #2
 800179e:	4013      	ands	r3, r2
 80017a0:	d005      	beq.n	80017ae <HAL_RCC_OscConfig+0x17e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d001      	beq.n	80017ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e24b      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ae:	4b6b      	ldr	r3, [pc, #428]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	22f8      	movs	r2, #248	; 0xf8
 80017b4:	4393      	bics	r3, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	00da      	lsls	r2, r3, #3
 80017be:	4b67      	ldr	r3, [pc, #412]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80017c0:	430a      	orrs	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c4:	e041      	b.n	800184a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d024      	beq.n	8001818 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ce:	4b63      	ldr	r3, [pc, #396]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b62      	ldr	r3, [pc, #392]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80017d4:	2101      	movs	r1, #1
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff f9e3 	bl	8000ba4 <HAL_GetTick>
 80017de:	0003      	movs	r3, r0
 80017e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e4:	f7ff f9de 	bl	8000ba4 <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e227      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b59      	ldr	r3, [pc, #356]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2202      	movs	r2, #2
 80017fc:	4013      	ands	r3, r2
 80017fe:	d0f1      	beq.n	80017e4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001800:	4b56      	ldr	r3, [pc, #344]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	22f8      	movs	r2, #248	; 0xf8
 8001806:	4393      	bics	r3, r2
 8001808:	0019      	movs	r1, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	00da      	lsls	r2, r3, #3
 8001810:	4b52      	ldr	r3, [pc, #328]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001812:	430a      	orrs	r2, r1
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	e018      	b.n	800184a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001818:	4b50      	ldr	r3, [pc, #320]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b4f      	ldr	r3, [pc, #316]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 800181e:	2101      	movs	r1, #1
 8001820:	438a      	bics	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff f9be 	bl	8000ba4 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff f9b9 	bl	8000ba4 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e202      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001840:	4b46      	ldr	r3, [pc, #280]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2202      	movs	r2, #2
 8001846:	4013      	ands	r3, r2
 8001848:	d1f1      	bne.n	800182e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2208      	movs	r2, #8
 8001850:	4013      	ands	r3, r2
 8001852:	d036      	beq.n	80018c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d019      	beq.n	8001890 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800185c:	4b3f      	ldr	r3, [pc, #252]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 800185e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001860:	4b3e      	ldr	r3, [pc, #248]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001862:	2101      	movs	r1, #1
 8001864:	430a      	orrs	r2, r1
 8001866:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001868:	f7ff f99c 	bl	8000ba4 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001872:	f7ff f997 	bl	8000ba4 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e1e0      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001884:	4b35      	ldr	r3, [pc, #212]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	2202      	movs	r2, #2
 800188a:	4013      	ands	r3, r2
 800188c:	d0f1      	beq.n	8001872 <HAL_RCC_OscConfig+0x242>
 800188e:	e018      	b.n	80018c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001890:	4b32      	ldr	r3, [pc, #200]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001894:	4b31      	ldr	r3, [pc, #196]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001896:	2101      	movs	r1, #1
 8001898:	438a      	bics	r2, r1
 800189a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189c:	f7ff f982 	bl	8000ba4 <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a6:	f7ff f97d 	bl	8000ba4 <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e1c6      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b8:	4b28      	ldr	r3, [pc, #160]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	2202      	movs	r2, #2
 80018be:	4013      	ands	r3, r2
 80018c0:	d1f1      	bne.n	80018a6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2204      	movs	r2, #4
 80018c8:	4013      	ands	r3, r2
 80018ca:	d100      	bne.n	80018ce <HAL_RCC_OscConfig+0x29e>
 80018cc:	e0b4      	b.n	8001a38 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ce:	201f      	movs	r0, #31
 80018d0:	183b      	adds	r3, r7, r0
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80018d8:	69da      	ldr	r2, [r3, #28]
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	055b      	lsls	r3, r3, #21
 80018de:	4013      	ands	r3, r2
 80018e0:	d110      	bne.n	8001904 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80018e4:	69da      	ldr	r2, [r3, #28]
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	0549      	lsls	r1, r1, #21
 80018ec:	430a      	orrs	r2, r1
 80018ee:	61da      	str	r2, [r3, #28]
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 80018f2:	69da      	ldr	r2, [r3, #28]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	055b      	lsls	r3, r3, #21
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018fe:	183b      	adds	r3, r7, r0
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4013      	ands	r3, r2
 800190e:	d11a      	bne.n	8001946 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	0049      	lsls	r1, r1, #1
 800191a:	430a      	orrs	r2, r1
 800191c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191e:	f7ff f941 	bl	8000ba4 <HAL_GetTick>
 8001922:	0003      	movs	r3, r0
 8001924:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001928:	f7ff f93c 	bl	8000ba4 <HAL_GetTick>
 800192c:	0002      	movs	r2, r0
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e185      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_RCC_OscConfig+0x338>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4013      	ands	r3, r2
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d10e      	bne.n	800196c <HAL_RCC_OscConfig+0x33c>
 800194e:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001950:	6a1a      	ldr	r2, [r3, #32]
 8001952:	4b02      	ldr	r3, [pc, #8]	; (800195c <HAL_RCC_OscConfig+0x32c>)
 8001954:	2101      	movs	r1, #1
 8001956:	430a      	orrs	r2, r1
 8001958:	621a      	str	r2, [r3, #32]
 800195a:	e035      	b.n	80019c8 <HAL_RCC_OscConfig+0x398>
 800195c:	40021000 	.word	0x40021000
 8001960:	fffeffff 	.word	0xfffeffff
 8001964:	fffbffff 	.word	0xfffbffff
 8001968:	40007000 	.word	0x40007000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10c      	bne.n	800198e <HAL_RCC_OscConfig+0x35e>
 8001974:	4bb6      	ldr	r3, [pc, #728]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001976:	6a1a      	ldr	r2, [r3, #32]
 8001978:	4bb5      	ldr	r3, [pc, #724]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 800197a:	2101      	movs	r1, #1
 800197c:	438a      	bics	r2, r1
 800197e:	621a      	str	r2, [r3, #32]
 8001980:	4bb3      	ldr	r3, [pc, #716]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001982:	6a1a      	ldr	r2, [r3, #32]
 8001984:	4bb2      	ldr	r3, [pc, #712]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001986:	2104      	movs	r1, #4
 8001988:	438a      	bics	r2, r1
 800198a:	621a      	str	r2, [r3, #32]
 800198c:	e01c      	b.n	80019c8 <HAL_RCC_OscConfig+0x398>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b05      	cmp	r3, #5
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x380>
 8001996:	4bae      	ldr	r3, [pc, #696]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001998:	6a1a      	ldr	r2, [r3, #32]
 800199a:	4bad      	ldr	r3, [pc, #692]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 800199c:	2104      	movs	r1, #4
 800199e:	430a      	orrs	r2, r1
 80019a0:	621a      	str	r2, [r3, #32]
 80019a2:	4bab      	ldr	r3, [pc, #684]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 80019a4:	6a1a      	ldr	r2, [r3, #32]
 80019a6:	4baa      	ldr	r3, [pc, #680]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 80019a8:	2101      	movs	r1, #1
 80019aa:	430a      	orrs	r2, r1
 80019ac:	621a      	str	r2, [r3, #32]
 80019ae:	e00b      	b.n	80019c8 <HAL_RCC_OscConfig+0x398>
 80019b0:	4ba7      	ldr	r3, [pc, #668]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 80019b2:	6a1a      	ldr	r2, [r3, #32]
 80019b4:	4ba6      	ldr	r3, [pc, #664]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 80019b6:	2101      	movs	r1, #1
 80019b8:	438a      	bics	r2, r1
 80019ba:	621a      	str	r2, [r3, #32]
 80019bc:	4ba4      	ldr	r3, [pc, #656]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 80019be:	6a1a      	ldr	r2, [r3, #32]
 80019c0:	4ba3      	ldr	r3, [pc, #652]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 80019c2:	2104      	movs	r1, #4
 80019c4:	438a      	bics	r2, r1
 80019c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d014      	beq.n	80019fa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d0:	f7ff f8e8 	bl	8000ba4 <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d8:	e009      	b.n	80019ee <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019da:	f7ff f8e3 	bl	8000ba4 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	4a9b      	ldr	r2, [pc, #620]	; (8001c54 <HAL_RCC_OscConfig+0x624>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e12b      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ee:	4b98      	ldr	r3, [pc, #608]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	2202      	movs	r2, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x3aa>
 80019f8:	e013      	b.n	8001a22 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fa:	f7ff f8d3 	bl	8000ba4 <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a02:	e009      	b.n	8001a18 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a04:	f7ff f8ce 	bl	8000ba4 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	4a91      	ldr	r2, [pc, #580]	; (8001c54 <HAL_RCC_OscConfig+0x624>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e116      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a18:	4b8d      	ldr	r3, [pc, #564]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a22:	231f      	movs	r3, #31
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d105      	bne.n	8001a38 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2c:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001a2e:	69da      	ldr	r2, [r3, #28]
 8001a30:	4b87      	ldr	r3, [pc, #540]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001a32:	4989      	ldr	r1, [pc, #548]	; (8001c58 <HAL_RCC_OscConfig+0x628>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2210      	movs	r2, #16
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d063      	beq.n	8001b0a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d12a      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a4a:	4b81      	ldr	r3, [pc, #516]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a4e:	4b80      	ldr	r3, [pc, #512]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001a50:	2104      	movs	r1, #4
 8001a52:	430a      	orrs	r2, r1
 8001a54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a56:	4b7e      	ldr	r3, [pc, #504]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5a:	4b7d      	ldr	r3, [pc, #500]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff f89f 	bl	8000ba4 <HAL_GetTick>
 8001a66:	0003      	movs	r3, r0
 8001a68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a6c:	f7ff f89a 	bl	8000ba4 <HAL_GetTick>
 8001a70:	0002      	movs	r2, r0
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e0e3      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a7e:	4b74      	ldr	r3, [pc, #464]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a82:	2202      	movs	r2, #2
 8001a84:	4013      	ands	r3, r2
 8001a86:	d0f1      	beq.n	8001a6c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a88:	4b71      	ldr	r3, [pc, #452]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8c:	22f8      	movs	r2, #248	; 0xf8
 8001a8e:	4393      	bics	r3, r2
 8001a90:	0019      	movs	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	00da      	lsls	r2, r3, #3
 8001a98:	4b6d      	ldr	r3, [pc, #436]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a9e:	e034      	b.n	8001b0a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	3305      	adds	r3, #5
 8001aa6:	d111      	bne.n	8001acc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001aa8:	4b69      	ldr	r3, [pc, #420]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aac:	4b68      	ldr	r3, [pc, #416]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001aae:	2104      	movs	r1, #4
 8001ab0:	438a      	bics	r2, r1
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ab4:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab8:	22f8      	movs	r2, #248	; 0xf8
 8001aba:	4393      	bics	r3, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	00da      	lsls	r2, r3, #3
 8001ac4:	4b62      	ldr	r3, [pc, #392]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	635a      	str	r2, [r3, #52]	; 0x34
 8001aca:	e01e      	b.n	8001b0a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001acc:	4b60      	ldr	r3, [pc, #384]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad0:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ad8:	4b5d      	ldr	r3, [pc, #372]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001adc:	4b5c      	ldr	r3, [pc, #368]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001ade:	2101      	movs	r1, #1
 8001ae0:	438a      	bics	r2, r1
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f85e 	bl	8000ba4 <HAL_GetTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001aee:	f7ff f859 	bl	8000ba4 <HAL_GetTick>
 8001af2:	0002      	movs	r2, r0
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e0a2      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b00:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b04:	2202      	movs	r2, #2
 8001b06:	4013      	ands	r3, r2
 8001b08:	d1f1      	bne.n	8001aee <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d100      	bne.n	8001b14 <HAL_RCC_OscConfig+0x4e4>
 8001b12:	e097      	b.n	8001c44 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b14:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	220c      	movs	r2, #12
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d100      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4f2>
 8001b20:	e06b      	b.n	8001bfa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d14c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b49      	ldr	r3, [pc, #292]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4b48      	ldr	r3, [pc, #288]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001b30:	494a      	ldr	r1, [pc, #296]	; (8001c5c <HAL_RCC_OscConfig+0x62c>)
 8001b32:	400a      	ands	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7ff f835 	bl	8000ba4 <HAL_GetTick>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff f830 	bl	8000ba4 <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e079      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b52:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	049b      	lsls	r3, r3, #18
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5e:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	220f      	movs	r2, #15
 8001b64:	4393      	bics	r3, r2
 8001b66:	0019      	movs	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b6c:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4a3a      	ldr	r2, [pc, #232]	; (8001c60 <HAL_RCC_OscConfig+0x630>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	0019      	movs	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	431a      	orrs	r2, r3
 8001b86:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b8c:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001b92:	2180      	movs	r1, #128	; 0x80
 8001b94:	0449      	lsls	r1, r1, #17
 8001b96:	430a      	orrs	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff f803 	bl	8000ba4 <HAL_GetTick>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7fe fffe 	bl	8000ba4 <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e047      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb6:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	049b      	lsls	r3, r3, #18
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x574>
 8001bc2:	e03f      	b.n	8001c44 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc4:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001bca:	4924      	ldr	r1, [pc, #144]	; (8001c5c <HAL_RCC_OscConfig+0x62c>)
 8001bcc:	400a      	ands	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7fe ffe8 	bl	8000ba4 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bda:	f7fe ffe3 	bl	8000ba4 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e02c      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	049b      	lsls	r3, r3, #18
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x5aa>
 8001bf8:	e024      	b.n	8001c44 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e01f      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_RCC_OscConfig+0x620>)
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	025b      	lsls	r3, r3, #9
 8001c18:	401a      	ands	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d10e      	bne.n	8001c40 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	220f      	movs	r2, #15
 8001c26:	401a      	ands	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d107      	bne.n	8001c40 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	23f0      	movs	r3, #240	; 0xf0
 8001c34:	039b      	lsls	r3, r3, #14
 8001c36:	401a      	ands	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b008      	add	sp, #32
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	40021000 	.word	0x40021000
 8001c54:	00001388 	.word	0x00001388
 8001c58:	efffffff 	.word	0xefffffff
 8001c5c:	feffffff 	.word	0xfeffffff
 8001c60:	ffc2ffff 	.word	0xffc2ffff

08001c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0b3      	b.n	8001de0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c78:	4b5b      	ldr	r3, [pc, #364]	; (8001de8 <HAL_RCC_ClockConfig+0x184>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4013      	ands	r3, r2
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d911      	bls.n	8001caa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c86:	4b58      	ldr	r3, [pc, #352]	; (8001de8 <HAL_RCC_ClockConfig+0x184>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4393      	bics	r3, r2
 8001c8e:	0019      	movs	r1, r3
 8001c90:	4b55      	ldr	r3, [pc, #340]	; (8001de8 <HAL_RCC_ClockConfig+0x184>)
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c98:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <HAL_RCC_ClockConfig+0x184>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e09a      	b.n	8001de0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d015      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2204      	movs	r2, #4
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d006      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cbe:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <HAL_RCC_ClockConfig+0x188>)
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_RCC_ClockConfig+0x188>)
 8001cc4:	21e0      	movs	r1, #224	; 0xe0
 8001cc6:	00c9      	lsls	r1, r1, #3
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ccc:	4b47      	ldr	r3, [pc, #284]	; (8001dec <HAL_RCC_ClockConfig+0x188>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	22f0      	movs	r2, #240	; 0xf0
 8001cd2:	4393      	bics	r3, r2
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	4b44      	ldr	r3, [pc, #272]	; (8001dec <HAL_RCC_ClockConfig+0x188>)
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d040      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	4b3e      	ldr	r3, [pc, #248]	; (8001dec <HAL_RCC_ClockConfig+0x188>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	029b      	lsls	r3, r3, #10
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d114      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e06e      	b.n	8001de0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0a:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_RCC_ClockConfig+0x188>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	049b      	lsls	r3, r3, #18
 8001d12:	4013      	ands	r3, r2
 8001d14:	d108      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e062      	b.n	8001de0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1a:	4b34      	ldr	r3, [pc, #208]	; (8001dec <HAL_RCC_ClockConfig+0x188>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	4013      	ands	r3, r2
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e05b      	b.n	8001de0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d28:	4b30      	ldr	r3, [pc, #192]	; (8001dec <HAL_RCC_ClockConfig+0x188>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	4393      	bics	r3, r2
 8001d30:	0019      	movs	r1, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <HAL_RCC_ClockConfig+0x188>)
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d3c:	f7fe ff32 	bl	8000ba4 <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d44:	e009      	b.n	8001d5a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d46:	f7fe ff2d 	bl	8000ba4 <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <HAL_RCC_ClockConfig+0x18c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e042      	b.n	8001de0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_RCC_ClockConfig+0x188>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	220c      	movs	r2, #12
 8001d60:	401a      	ands	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d1ec      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_RCC_ClockConfig+0x184>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2201      	movs	r2, #1
 8001d72:	4013      	ands	r3, r2
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d211      	bcs.n	8001d9e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <HAL_RCC_ClockConfig+0x184>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4393      	bics	r3, r2
 8001d82:	0019      	movs	r1, r3
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_RCC_ClockConfig+0x184>)
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8c:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <HAL_RCC_ClockConfig+0x184>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2201      	movs	r2, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e020      	b.n	8001de0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2204      	movs	r2, #4
 8001da4:	4013      	ands	r3, r2
 8001da6:	d009      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001da8:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HAL_RCC_ClockConfig+0x188>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <HAL_RCC_ClockConfig+0x190>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_RCC_ClockConfig+0x188>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dbc:	f000 f820 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 8001dc0:	0001      	movs	r1, r0
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_RCC_ClockConfig+0x188>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	220f      	movs	r2, #15
 8001dca:	4013      	ands	r3, r2
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_RCC_ClockConfig+0x194>)
 8001dce:	5cd3      	ldrb	r3, [r2, r3]
 8001dd0:	000a      	movs	r2, r1
 8001dd2:	40da      	lsrs	r2, r3
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_ClockConfig+0x198>)
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7fe fe9d 	bl	8000b18 <HAL_InitTick>
  
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b004      	add	sp, #16
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40022000 	.word	0x40022000
 8001dec:	40021000 	.word	0x40021000
 8001df0:	00001388 	.word	0x00001388
 8001df4:	fffff8ff 	.word	0xfffff8ff
 8001df8:	08003134 	.word	0x08003134
 8001dfc:	20000000 	.word	0x20000000

08001e00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b08f      	sub	sp, #60	; 0x3c
 8001e04:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e06:	2314      	movs	r3, #20
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	4a2b      	ldr	r2, [pc, #172]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e0e:	c313      	stmia	r3!, {r0, r1, r4}
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	4a29      	ldr	r2, [pc, #164]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e1a:	c313      	stmia	r3!, {r0, r1, r4}
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e24:	2300      	movs	r3, #0
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e28:	2300      	movs	r3, #0
 8001e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001e34:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3c:	220c      	movs	r2, #12
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d002      	beq.n	8001e4a <HAL_RCC_GetSysClockFreq+0x4a>
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d003      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0x50>
 8001e48:	e02d      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e4e:	e02d      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e52:	0c9b      	lsrs	r3, r3, #18
 8001e54:	220f      	movs	r2, #15
 8001e56:	4013      	ands	r3, r2
 8001e58:	2214      	movs	r2, #20
 8001e5a:	18ba      	adds	r2, r7, r2
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	220f      	movs	r2, #15
 8001e66:	4013      	ands	r3, r2
 8001e68:	1d3a      	adds	r2, r7, #4
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	025b      	lsls	r3, r3, #9
 8001e74:	4013      	ands	r3, r2
 8001e76:	d009      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e7a:	4812      	ldr	r0, [pc, #72]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e7c:	f7fe f94e 	bl	800011c <__udivsi3>
 8001e80:	0003      	movs	r3, r0
 8001e82:	001a      	movs	r2, r3
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	4353      	muls	r3, r2
 8001e88:	637b      	str	r3, [r7, #52]	; 0x34
 8001e8a:	e009      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e8e:	000a      	movs	r2, r1
 8001e90:	0152      	lsls	r2, r2, #5
 8001e92:	1a52      	subs	r2, r2, r1
 8001e94:	0193      	lsls	r3, r2, #6
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	185b      	adds	r3, r3, r1
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ea4:	e002      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ea8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eaa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001eae:	0018      	movs	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b00f      	add	sp, #60	; 0x3c
 8001eb4:	bd90      	pop	{r4, r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	08003114 	.word	0x08003114
 8001ebc:	08003124 	.word	0x08003124
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	007a1200 	.word	0x007a1200

08001ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ecc:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	20000000 	.word	0x20000000

08001edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ee0:	f7ff fff2 	bl	8001ec8 <HAL_RCC_GetHCLKFreq>
 8001ee4:	0001      	movs	r1, r0
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	2207      	movs	r2, #7
 8001eee:	4013      	ands	r3, r2
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	40d9      	lsrs	r1, r3
 8001ef6:	000b      	movs	r3, r1
}    
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	40021000 	.word	0x40021000
 8001f04:	08003144 	.word	0x08003144

08001f08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e044      	b.n	8001fa4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d107      	bne.n	8001f32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2274      	movs	r2, #116	; 0x74
 8001f26:	2100      	movs	r1, #0
 8001f28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7fe fd15 	bl	800095c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2224      	movs	r2, #36	; 0x24
 8001f36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2101      	movs	r1, #1
 8001f44:	438a      	bics	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f000 f8da 	bl	8002104 <UART_SetConfig>
 8001f50:	0003      	movs	r3, r0
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e024      	b.n	8001fa4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 fa0d 	bl	8002384 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	490d      	ldr	r1, [pc, #52]	; (8001fac <HAL_UART_Init+0xa4>)
 8001f76:	400a      	ands	r2, r1
 8001f78:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	212a      	movs	r1, #42	; 0x2a
 8001f86:	438a      	bics	r2, r1
 8001f88:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2101      	movs	r1, #1
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 faa5 	bl	80024ec <UART_CheckIdleState>
 8001fa2:	0003      	movs	r3, r0
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	ffffb7ff 	.word	0xffffb7ff

08001fb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	1dbb      	adds	r3, r7, #6
 8001fbe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d000      	beq.n	8001fca <HAL_UART_Transmit+0x1a>
 8001fc8:	e096      	b.n	80020f8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_UART_Transmit+0x28>
 8001fd0:	1dbb      	adds	r3, r7, #6
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e08e      	b.n	80020fa <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	015b      	lsls	r3, r3, #5
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d109      	bne.n	8001ffc <HAL_UART_Transmit+0x4c>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d105      	bne.n	8001ffc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d001      	beq.n	8001ffc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e07e      	b.n	80020fa <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2274      	movs	r2, #116	; 0x74
 8002000:	5c9b      	ldrb	r3, [r3, r2]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_UART_Transmit+0x5a>
 8002006:	2302      	movs	r3, #2
 8002008:	e077      	b.n	80020fa <HAL_UART_Transmit+0x14a>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2274      	movs	r2, #116	; 0x74
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	2100      	movs	r1, #0
 8002018:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2221      	movs	r2, #33	; 0x21
 800201e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002020:	f7fe fdc0 	bl	8000ba4 <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1dba      	adds	r2, r7, #6
 800202c:	2150      	movs	r1, #80	; 0x50
 800202e:	8812      	ldrh	r2, [r2, #0]
 8002030:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1dba      	adds	r2, r7, #6
 8002036:	2152      	movs	r1, #82	; 0x52
 8002038:	8812      	ldrh	r2, [r2, #0]
 800203a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	015b      	lsls	r3, r3, #5
 8002044:	429a      	cmp	r2, r3
 8002046:	d108      	bne.n	800205a <HAL_UART_Transmit+0xaa>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d104      	bne.n	800205a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	61bb      	str	r3, [r7, #24]
 8002058:	e003      	b.n	8002062 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2274      	movs	r2, #116	; 0x74
 8002066:	2100      	movs	r1, #0
 8002068:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800206a:	e02d      	b.n	80020c8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	0013      	movs	r3, r2
 8002076:	2200      	movs	r2, #0
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	f000 fa7f 	bl	800257c <UART_WaitOnFlagUntilTimeout>
 800207e:	1e03      	subs	r3, r0, #0
 8002080:	d001      	beq.n	8002086 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e039      	b.n	80020fa <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10b      	bne.n	80020a4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	881a      	ldrh	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	05d2      	lsls	r2, r2, #23
 8002096:	0dd2      	lsrs	r2, r2, #23
 8002098:	b292      	uxth	r2, r2
 800209a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	3302      	adds	r3, #2
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	e008      	b.n	80020b6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	b292      	uxth	r2, r2
 80020ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	3301      	adds	r3, #1
 80020b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2252      	movs	r2, #82	; 0x52
 80020ba:	5a9b      	ldrh	r3, [r3, r2]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b01      	subs	r3, #1
 80020c0:	b299      	uxth	r1, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2252      	movs	r2, #82	; 0x52
 80020c6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2252      	movs	r2, #82	; 0x52
 80020cc:	5a9b      	ldrh	r3, [r3, r2]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1cb      	bne.n	800206c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	0013      	movs	r3, r2
 80020de:	2200      	movs	r2, #0
 80020e0:	2140      	movs	r1, #64	; 0x40
 80020e2:	f000 fa4b 	bl	800257c <UART_WaitOnFlagUntilTimeout>
 80020e6:	1e03      	subs	r3, r0, #0
 80020e8:	d001      	beq.n	80020ee <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e005      	b.n	80020fa <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2220      	movs	r2, #32
 80020f2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e000      	b.n	80020fa <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
  }
}
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b008      	add	sp, #32
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800210c:	231e      	movs	r3, #30
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	4313      	orrs	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a8d      	ldr	r2, [pc, #564]	; (8002368 <UART_SetConfig+0x264>)
 8002134:	4013      	ands	r3, r2
 8002136:	0019      	movs	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a88      	ldr	r2, [pc, #544]	; (800236c <UART_SetConfig+0x268>)
 800214a:	4013      	ands	r3, r2
 800214c:	0019      	movs	r1, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	4313      	orrs	r3, r2
 8002168:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a7f      	ldr	r2, [pc, #508]	; (8002370 <UART_SetConfig+0x26c>)
 8002172:	4013      	ands	r3, r2
 8002174:	0019      	movs	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	430a      	orrs	r2, r1
 800217e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a7b      	ldr	r2, [pc, #492]	; (8002374 <UART_SetConfig+0x270>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d127      	bne.n	80021da <UART_SetConfig+0xd6>
 800218a:	4b7b      	ldr	r3, [pc, #492]	; (8002378 <UART_SetConfig+0x274>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	2203      	movs	r2, #3
 8002190:	4013      	ands	r3, r2
 8002192:	2b03      	cmp	r3, #3
 8002194:	d00d      	beq.n	80021b2 <UART_SetConfig+0xae>
 8002196:	d81b      	bhi.n	80021d0 <UART_SetConfig+0xcc>
 8002198:	2b02      	cmp	r3, #2
 800219a:	d014      	beq.n	80021c6 <UART_SetConfig+0xc2>
 800219c:	d818      	bhi.n	80021d0 <UART_SetConfig+0xcc>
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <UART_SetConfig+0xa4>
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d00a      	beq.n	80021bc <UART_SetConfig+0xb8>
 80021a6:	e013      	b.n	80021d0 <UART_SetConfig+0xcc>
 80021a8:	231f      	movs	r3, #31
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e021      	b.n	80021f6 <UART_SetConfig+0xf2>
 80021b2:	231f      	movs	r3, #31
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	2202      	movs	r2, #2
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	e01c      	b.n	80021f6 <UART_SetConfig+0xf2>
 80021bc:	231f      	movs	r3, #31
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2204      	movs	r2, #4
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	e017      	b.n	80021f6 <UART_SetConfig+0xf2>
 80021c6:	231f      	movs	r3, #31
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	2208      	movs	r2, #8
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	e012      	b.n	80021f6 <UART_SetConfig+0xf2>
 80021d0:	231f      	movs	r3, #31
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	2210      	movs	r2, #16
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	e00d      	b.n	80021f6 <UART_SetConfig+0xf2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a67      	ldr	r2, [pc, #412]	; (800237c <UART_SetConfig+0x278>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d104      	bne.n	80021ee <UART_SetConfig+0xea>
 80021e4:	231f      	movs	r3, #31
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	e003      	b.n	80021f6 <UART_SetConfig+0xf2>
 80021ee:	231f      	movs	r3, #31
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	2210      	movs	r2, #16
 80021f4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69da      	ldr	r2, [r3, #28]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	429a      	cmp	r2, r3
 8002200:	d15d      	bne.n	80022be <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002202:	231f      	movs	r3, #31
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d015      	beq.n	8002238 <UART_SetConfig+0x134>
 800220c:	dc18      	bgt.n	8002240 <UART_SetConfig+0x13c>
 800220e:	2b04      	cmp	r3, #4
 8002210:	d00d      	beq.n	800222e <UART_SetConfig+0x12a>
 8002212:	dc15      	bgt.n	8002240 <UART_SetConfig+0x13c>
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <UART_SetConfig+0x11a>
 8002218:	2b02      	cmp	r3, #2
 800221a:	d005      	beq.n	8002228 <UART_SetConfig+0x124>
 800221c:	e010      	b.n	8002240 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800221e:	f7ff fe5d 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 8002222:	0003      	movs	r3, r0
 8002224:	61bb      	str	r3, [r7, #24]
        break;
 8002226:	e012      	b.n	800224e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002228:	4b55      	ldr	r3, [pc, #340]	; (8002380 <UART_SetConfig+0x27c>)
 800222a:	61bb      	str	r3, [r7, #24]
        break;
 800222c:	e00f      	b.n	800224e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800222e:	f7ff fde7 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 8002232:	0003      	movs	r3, r0
 8002234:	61bb      	str	r3, [r7, #24]
        break;
 8002236:	e00a      	b.n	800224e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	61bb      	str	r3, [r7, #24]
        break;
 800223e:	e006      	b.n	800224e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002244:	231e      	movs	r3, #30
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
        break;
 800224c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d100      	bne.n	8002256 <UART_SetConfig+0x152>
 8002254:	e07b      	b.n	800234e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	005a      	lsls	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	18d2      	adds	r2, r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	0019      	movs	r1, r3
 8002268:	0010      	movs	r0, r2
 800226a:	f7fd ff57 	bl	800011c <__udivsi3>
 800226e:	0003      	movs	r3, r0
 8002270:	b29b      	uxth	r3, r3
 8002272:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2b0f      	cmp	r3, #15
 8002278:	d91c      	bls.n	80022b4 <UART_SetConfig+0x1b0>
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	025b      	lsls	r3, r3, #9
 8002280:	429a      	cmp	r2, r3
 8002282:	d217      	bcs.n	80022b4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	b29a      	uxth	r2, r3
 8002288:	200e      	movs	r0, #14
 800228a:	183b      	adds	r3, r7, r0
 800228c:	210f      	movs	r1, #15
 800228e:	438a      	bics	r2, r1
 8002290:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	b29b      	uxth	r3, r3
 8002298:	2207      	movs	r2, #7
 800229a:	4013      	ands	r3, r2
 800229c:	b299      	uxth	r1, r3
 800229e:	183b      	adds	r3, r7, r0
 80022a0:	183a      	adds	r2, r7, r0
 80022a2:	8812      	ldrh	r2, [r2, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	183a      	adds	r2, r7, r0
 80022ae:	8812      	ldrh	r2, [r2, #0]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	e04c      	b.n	800234e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80022b4:	231e      	movs	r3, #30
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	e047      	b.n	800234e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80022be:	231f      	movs	r3, #31
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d015      	beq.n	80022f4 <UART_SetConfig+0x1f0>
 80022c8:	dc18      	bgt.n	80022fc <UART_SetConfig+0x1f8>
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d00d      	beq.n	80022ea <UART_SetConfig+0x1e6>
 80022ce:	dc15      	bgt.n	80022fc <UART_SetConfig+0x1f8>
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <UART_SetConfig+0x1d6>
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d005      	beq.n	80022e4 <UART_SetConfig+0x1e0>
 80022d8:	e010      	b.n	80022fc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022da:	f7ff fdff 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 80022de:	0003      	movs	r3, r0
 80022e0:	61bb      	str	r3, [r7, #24]
        break;
 80022e2:	e012      	b.n	800230a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022e4:	4b26      	ldr	r3, [pc, #152]	; (8002380 <UART_SetConfig+0x27c>)
 80022e6:	61bb      	str	r3, [r7, #24]
        break;
 80022e8:	e00f      	b.n	800230a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022ea:	f7ff fd89 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 80022ee:	0003      	movs	r3, r0
 80022f0:	61bb      	str	r3, [r7, #24]
        break;
 80022f2:	e00a      	b.n	800230a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	61bb      	str	r3, [r7, #24]
        break;
 80022fa:	e006      	b.n	800230a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002300:	231e      	movs	r3, #30
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
        break;
 8002308:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01e      	beq.n	800234e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	085a      	lsrs	r2, r3, #1
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	18d2      	adds	r2, r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	0019      	movs	r1, r3
 8002320:	0010      	movs	r0, r2
 8002322:	f7fd fefb 	bl	800011c <__udivsi3>
 8002326:	0003      	movs	r3, r0
 8002328:	b29b      	uxth	r3, r3
 800232a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b0f      	cmp	r3, #15
 8002330:	d909      	bls.n	8002346 <UART_SetConfig+0x242>
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	025b      	lsls	r3, r3, #9
 8002338:	429a      	cmp	r2, r3
 800233a:	d204      	bcs.n	8002346 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	e003      	b.n	800234e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002346:	231e      	movs	r3, #30
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800235a:	231e      	movs	r3, #30
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	781b      	ldrb	r3, [r3, #0]
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b008      	add	sp, #32
 8002366:	bd80      	pop	{r7, pc}
 8002368:	ffff69f3 	.word	0xffff69f3
 800236c:	ffffcfff 	.word	0xffffcfff
 8002370:	fffff4ff 	.word	0xfffff4ff
 8002374:	40013800 	.word	0x40013800
 8002378:	40021000 	.word	0x40021000
 800237c:	40004400 	.word	0x40004400
 8002380:	007a1200 	.word	0x007a1200

08002384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	2201      	movs	r2, #1
 8002392:	4013      	ands	r3, r2
 8002394:	d00b      	beq.n	80023ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a4a      	ldr	r2, [pc, #296]	; (80024c8 <UART_AdvFeatureConfig+0x144>)
 800239e:	4013      	ands	r3, r2
 80023a0:	0019      	movs	r1, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	2202      	movs	r2, #2
 80023b4:	4013      	ands	r3, r2
 80023b6:	d00b      	beq.n	80023d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4a43      	ldr	r2, [pc, #268]	; (80024cc <UART_AdvFeatureConfig+0x148>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	2204      	movs	r2, #4
 80023d6:	4013      	ands	r3, r2
 80023d8:	d00b      	beq.n	80023f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4a3b      	ldr	r2, [pc, #236]	; (80024d0 <UART_AdvFeatureConfig+0x14c>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	2208      	movs	r2, #8
 80023f8:	4013      	ands	r3, r2
 80023fa:	d00b      	beq.n	8002414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4a34      	ldr	r2, [pc, #208]	; (80024d4 <UART_AdvFeatureConfig+0x150>)
 8002404:	4013      	ands	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	2210      	movs	r2, #16
 800241a:	4013      	ands	r3, r2
 800241c:	d00b      	beq.n	8002436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4a2c      	ldr	r2, [pc, #176]	; (80024d8 <UART_AdvFeatureConfig+0x154>)
 8002426:	4013      	ands	r3, r2
 8002428:	0019      	movs	r1, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2220      	movs	r2, #32
 800243c:	4013      	ands	r3, r2
 800243e:	d00b      	beq.n	8002458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	4a25      	ldr	r2, [pc, #148]	; (80024dc <UART_AdvFeatureConfig+0x158>)
 8002448:	4013      	ands	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	2240      	movs	r2, #64	; 0x40
 800245e:	4013      	ands	r3, r2
 8002460:	d01d      	beq.n	800249e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <UART_AdvFeatureConfig+0x15c>)
 800246a:	4013      	ands	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	035b      	lsls	r3, r3, #13
 8002482:	429a      	cmp	r2, r3
 8002484:	d10b      	bne.n	800249e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <UART_AdvFeatureConfig+0x160>)
 800248e:	4013      	ands	r3, r2
 8002490:	0019      	movs	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	2280      	movs	r2, #128	; 0x80
 80024a4:	4013      	ands	r3, r2
 80024a6:	d00b      	beq.n	80024c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <UART_AdvFeatureConfig+0x164>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	605a      	str	r2, [r3, #4]
  }
}
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	fffdffff 	.word	0xfffdffff
 80024cc:	fffeffff 	.word	0xfffeffff
 80024d0:	fffbffff 	.word	0xfffbffff
 80024d4:	ffff7fff 	.word	0xffff7fff
 80024d8:	ffffefff 	.word	0xffffefff
 80024dc:	ffffdfff 	.word	0xffffdfff
 80024e0:	ffefffff 	.word	0xffefffff
 80024e4:	ff9fffff 	.word	0xff9fffff
 80024e8:	fff7ffff 	.word	0xfff7ffff

080024ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	2100      	movs	r1, #0
 80024fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80024fc:	f7fe fb52 	bl	8000ba4 <HAL_GetTick>
 8002500:	0003      	movs	r3, r0
 8002502:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2208      	movs	r2, #8
 800250c:	4013      	ands	r3, r2
 800250e:	2b08      	cmp	r3, #8
 8002510:	d10c      	bne.n	800252c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2280      	movs	r2, #128	; 0x80
 8002516:	0391      	lsls	r1, r2, #14
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4a17      	ldr	r2, [pc, #92]	; (8002578 <UART_CheckIdleState+0x8c>)
 800251c:	9200      	str	r2, [sp, #0]
 800251e:	2200      	movs	r2, #0
 8002520:	f000 f82c 	bl	800257c <UART_WaitOnFlagUntilTimeout>
 8002524:	1e03      	subs	r3, r0, #0
 8002526:	d001      	beq.n	800252c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e021      	b.n	8002570 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2204      	movs	r2, #4
 8002534:	4013      	ands	r3, r2
 8002536:	2b04      	cmp	r3, #4
 8002538:	d10c      	bne.n	8002554 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	03d1      	lsls	r1, r2, #15
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <UART_CheckIdleState+0x8c>)
 8002544:	9200      	str	r2, [sp, #0]
 8002546:	2200      	movs	r2, #0
 8002548:	f000 f818 	bl	800257c <UART_WaitOnFlagUntilTimeout>
 800254c:	1e03      	subs	r3, r0, #0
 800254e:	d001      	beq.n	8002554 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e00d      	b.n	8002570 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2220      	movs	r2, #32
 8002558:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2274      	movs	r2, #116	; 0x74
 800256a:	2100      	movs	r1, #0
 800256c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	0018      	movs	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	b004      	add	sp, #16
 8002576:	bd80      	pop	{r7, pc}
 8002578:	01ffffff 	.word	0x01ffffff

0800257c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b094      	sub	sp, #80	; 0x50
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	1dfb      	adds	r3, r7, #7
 800258a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800258c:	e0a3      	b.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002590:	3301      	adds	r3, #1
 8002592:	d100      	bne.n	8002596 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002594:	e09f      	b.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002596:	f7fe fb05 	bl	8000ba4 <HAL_GetTick>
 800259a:	0002      	movs	r2, r0
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d302      	bcc.n	80025ac <UART_WaitOnFlagUntilTimeout+0x30>
 80025a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d13d      	bne.n	8002628 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ac:	f3ef 8310 	mrs	r3, PRIMASK
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80025b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025b4:	647b      	str	r3, [r7, #68]	; 0x44
 80025b6:	2301      	movs	r3, #1
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	f383 8810 	msr	PRIMASK, r3
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	494c      	ldr	r1, [pc, #304]	; (8002700 <UART_WaitOnFlagUntilTimeout+0x184>)
 80025ce:	400a      	ands	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	f383 8810 	msr	PRIMASK, r3
}
 80025dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025de:	f3ef 8310 	mrs	r3, PRIMASK
 80025e2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80025e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e6:	643b      	str	r3, [r7, #64]	; 0x40
 80025e8:	2301      	movs	r3, #1
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ee:	f383 8810 	msr	PRIMASK, r3
}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2101      	movs	r1, #1
 8002600:	438a      	bics	r2, r1
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002606:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260a:	f383 8810 	msr	PRIMASK, r3
}
 800260e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2220      	movs	r2, #32
 800261a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2274      	movs	r2, #116	; 0x74
 8002620:	2100      	movs	r1, #0
 8002622:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e067      	b.n	80026f8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2204      	movs	r2, #4
 8002630:	4013      	ands	r3, r2
 8002632:	d050      	beq.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69da      	ldr	r2, [r3, #28]
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	401a      	ands	r2, r3
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	429a      	cmp	r2, r3
 8002646:	d146      	bne.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2280      	movs	r2, #128	; 0x80
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002652:	f3ef 8310 	mrs	r3, PRIMASK
 8002656:	613b      	str	r3, [r7, #16]
  return(result);
 8002658:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800265a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800265c:	2301      	movs	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f383 8810 	msr	PRIMASK, r3
}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4923      	ldr	r1, [pc, #140]	; (8002700 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002674:	400a      	ands	r2, r1
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800267a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	f383 8810 	msr	PRIMASK, r3
}
 8002682:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002684:	f3ef 8310 	mrs	r3, PRIMASK
 8002688:	61fb      	str	r3, [r7, #28]
  return(result);
 800268a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800268c:	64bb      	str	r3, [r7, #72]	; 0x48
 800268e:	2301      	movs	r3, #1
 8002690:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	f383 8810 	msr	PRIMASK, r3
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	438a      	bics	r2, r1
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	f383 8810 	msr	PRIMASK, r3
}
 80026b4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2220      	movs	r2, #32
 80026c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	2120      	movs	r1, #32
 80026c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2274      	movs	r2, #116	; 0x74
 80026ce:	2100      	movs	r1, #0
 80026d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e010      	b.n	80026f8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	4013      	ands	r3, r2
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	425a      	negs	r2, r3
 80026e6:	4153      	adcs	r3, r2
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	001a      	movs	r2, r3
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d100      	bne.n	80026f6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80026f4:	e74b      	b.n	800258e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b014      	add	sp, #80	; 0x50
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	fffffe5f 	.word	0xfffffe5f

08002704 <__errno>:
 8002704:	4b01      	ldr	r3, [pc, #4]	; (800270c <__errno+0x8>)
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	4770      	bx	lr
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	2000000c 	.word	0x2000000c

08002710 <__libc_init_array>:
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	2600      	movs	r6, #0
 8002714:	4d0c      	ldr	r5, [pc, #48]	; (8002748 <__libc_init_array+0x38>)
 8002716:	4c0d      	ldr	r4, [pc, #52]	; (800274c <__libc_init_array+0x3c>)
 8002718:	1b64      	subs	r4, r4, r5
 800271a:	10a4      	asrs	r4, r4, #2
 800271c:	42a6      	cmp	r6, r4
 800271e:	d109      	bne.n	8002734 <__libc_init_array+0x24>
 8002720:	2600      	movs	r6, #0
 8002722:	f000 fc8b 	bl	800303c <_init>
 8002726:	4d0a      	ldr	r5, [pc, #40]	; (8002750 <__libc_init_array+0x40>)
 8002728:	4c0a      	ldr	r4, [pc, #40]	; (8002754 <__libc_init_array+0x44>)
 800272a:	1b64      	subs	r4, r4, r5
 800272c:	10a4      	asrs	r4, r4, #2
 800272e:	42a6      	cmp	r6, r4
 8002730:	d105      	bne.n	800273e <__libc_init_array+0x2e>
 8002732:	bd70      	pop	{r4, r5, r6, pc}
 8002734:	00b3      	lsls	r3, r6, #2
 8002736:	58eb      	ldr	r3, [r5, r3]
 8002738:	4798      	blx	r3
 800273a:	3601      	adds	r6, #1
 800273c:	e7ee      	b.n	800271c <__libc_init_array+0xc>
 800273e:	00b3      	lsls	r3, r6, #2
 8002740:	58eb      	ldr	r3, [r5, r3]
 8002742:	4798      	blx	r3
 8002744:	3601      	adds	r6, #1
 8002746:	e7f2      	b.n	800272e <__libc_init_array+0x1e>
 8002748:	08003180 	.word	0x08003180
 800274c:	08003180 	.word	0x08003180
 8002750:	08003180 	.word	0x08003180
 8002754:	08003184 	.word	0x08003184

08002758 <memset>:
 8002758:	0003      	movs	r3, r0
 800275a:	1882      	adds	r2, r0, r2
 800275c:	4293      	cmp	r3, r2
 800275e:	d100      	bne.n	8002762 <memset+0xa>
 8002760:	4770      	bx	lr
 8002762:	7019      	strb	r1, [r3, #0]
 8002764:	3301      	adds	r3, #1
 8002766:	e7f9      	b.n	800275c <memset+0x4>

08002768 <siprintf>:
 8002768:	b40e      	push	{r1, r2, r3}
 800276a:	b500      	push	{lr}
 800276c:	490b      	ldr	r1, [pc, #44]	; (800279c <siprintf+0x34>)
 800276e:	b09c      	sub	sp, #112	; 0x70
 8002770:	ab1d      	add	r3, sp, #116	; 0x74
 8002772:	9002      	str	r0, [sp, #8]
 8002774:	9006      	str	r0, [sp, #24]
 8002776:	9107      	str	r1, [sp, #28]
 8002778:	9104      	str	r1, [sp, #16]
 800277a:	4809      	ldr	r0, [pc, #36]	; (80027a0 <siprintf+0x38>)
 800277c:	4909      	ldr	r1, [pc, #36]	; (80027a4 <siprintf+0x3c>)
 800277e:	cb04      	ldmia	r3!, {r2}
 8002780:	9105      	str	r1, [sp, #20]
 8002782:	6800      	ldr	r0, [r0, #0]
 8002784:	a902      	add	r1, sp, #8
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	f000 f870 	bl	800286c <_svfiprintf_r>
 800278c:	2300      	movs	r3, #0
 800278e:	9a02      	ldr	r2, [sp, #8]
 8002790:	7013      	strb	r3, [r2, #0]
 8002792:	b01c      	add	sp, #112	; 0x70
 8002794:	bc08      	pop	{r3}
 8002796:	b003      	add	sp, #12
 8002798:	4718      	bx	r3
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	7fffffff 	.word	0x7fffffff
 80027a0:	2000000c 	.word	0x2000000c
 80027a4:	ffff0208 	.word	0xffff0208

080027a8 <__ssputs_r>:
 80027a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027aa:	688e      	ldr	r6, [r1, #8]
 80027ac:	b085      	sub	sp, #20
 80027ae:	0007      	movs	r7, r0
 80027b0:	000c      	movs	r4, r1
 80027b2:	9203      	str	r2, [sp, #12]
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	429e      	cmp	r6, r3
 80027b8:	d83c      	bhi.n	8002834 <__ssputs_r+0x8c>
 80027ba:	2390      	movs	r3, #144	; 0x90
 80027bc:	898a      	ldrh	r2, [r1, #12]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	421a      	tst	r2, r3
 80027c2:	d034      	beq.n	800282e <__ssputs_r+0x86>
 80027c4:	6909      	ldr	r1, [r1, #16]
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	6960      	ldr	r0, [r4, #20]
 80027ca:	1a5b      	subs	r3, r3, r1
 80027cc:	9302      	str	r3, [sp, #8]
 80027ce:	2303      	movs	r3, #3
 80027d0:	4343      	muls	r3, r0
 80027d2:	0fdd      	lsrs	r5, r3, #31
 80027d4:	18ed      	adds	r5, r5, r3
 80027d6:	9b01      	ldr	r3, [sp, #4]
 80027d8:	9802      	ldr	r0, [sp, #8]
 80027da:	3301      	adds	r3, #1
 80027dc:	181b      	adds	r3, r3, r0
 80027de:	106d      	asrs	r5, r5, #1
 80027e0:	42ab      	cmp	r3, r5
 80027e2:	d900      	bls.n	80027e6 <__ssputs_r+0x3e>
 80027e4:	001d      	movs	r5, r3
 80027e6:	0553      	lsls	r3, r2, #21
 80027e8:	d532      	bpl.n	8002850 <__ssputs_r+0xa8>
 80027ea:	0029      	movs	r1, r5
 80027ec:	0038      	movs	r0, r7
 80027ee:	f000 fb53 	bl	8002e98 <_malloc_r>
 80027f2:	1e06      	subs	r6, r0, #0
 80027f4:	d109      	bne.n	800280a <__ssputs_r+0x62>
 80027f6:	230c      	movs	r3, #12
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	2340      	movs	r3, #64	; 0x40
 80027fc:	2001      	movs	r0, #1
 80027fe:	89a2      	ldrh	r2, [r4, #12]
 8002800:	4240      	negs	r0, r0
 8002802:	4313      	orrs	r3, r2
 8002804:	81a3      	strh	r3, [r4, #12]
 8002806:	b005      	add	sp, #20
 8002808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280a:	9a02      	ldr	r2, [sp, #8]
 800280c:	6921      	ldr	r1, [r4, #16]
 800280e:	f000 faba 	bl	8002d86 <memcpy>
 8002812:	89a3      	ldrh	r3, [r4, #12]
 8002814:	4a14      	ldr	r2, [pc, #80]	; (8002868 <__ssputs_r+0xc0>)
 8002816:	401a      	ands	r2, r3
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	4313      	orrs	r3, r2
 800281c:	81a3      	strh	r3, [r4, #12]
 800281e:	9b02      	ldr	r3, [sp, #8]
 8002820:	6126      	str	r6, [r4, #16]
 8002822:	18f6      	adds	r6, r6, r3
 8002824:	6026      	str	r6, [r4, #0]
 8002826:	6165      	str	r5, [r4, #20]
 8002828:	9e01      	ldr	r6, [sp, #4]
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	60a5      	str	r5, [r4, #8]
 800282e:	9b01      	ldr	r3, [sp, #4]
 8002830:	429e      	cmp	r6, r3
 8002832:	d900      	bls.n	8002836 <__ssputs_r+0x8e>
 8002834:	9e01      	ldr	r6, [sp, #4]
 8002836:	0032      	movs	r2, r6
 8002838:	9903      	ldr	r1, [sp, #12]
 800283a:	6820      	ldr	r0, [r4, #0]
 800283c:	f000 faac 	bl	8002d98 <memmove>
 8002840:	68a3      	ldr	r3, [r4, #8]
 8002842:	2000      	movs	r0, #0
 8002844:	1b9b      	subs	r3, r3, r6
 8002846:	60a3      	str	r3, [r4, #8]
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	199e      	adds	r6, r3, r6
 800284c:	6026      	str	r6, [r4, #0]
 800284e:	e7da      	b.n	8002806 <__ssputs_r+0x5e>
 8002850:	002a      	movs	r2, r5
 8002852:	0038      	movs	r0, r7
 8002854:	f000 fb96 	bl	8002f84 <_realloc_r>
 8002858:	1e06      	subs	r6, r0, #0
 800285a:	d1e0      	bne.n	800281e <__ssputs_r+0x76>
 800285c:	0038      	movs	r0, r7
 800285e:	6921      	ldr	r1, [r4, #16]
 8002860:	f000 faae 	bl	8002dc0 <_free_r>
 8002864:	e7c7      	b.n	80027f6 <__ssputs_r+0x4e>
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	fffffb7f 	.word	0xfffffb7f

0800286c <_svfiprintf_r>:
 800286c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800286e:	b0a1      	sub	sp, #132	; 0x84
 8002870:	9003      	str	r0, [sp, #12]
 8002872:	001d      	movs	r5, r3
 8002874:	898b      	ldrh	r3, [r1, #12]
 8002876:	000f      	movs	r7, r1
 8002878:	0016      	movs	r6, r2
 800287a:	061b      	lsls	r3, r3, #24
 800287c:	d511      	bpl.n	80028a2 <_svfiprintf_r+0x36>
 800287e:	690b      	ldr	r3, [r1, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10e      	bne.n	80028a2 <_svfiprintf_r+0x36>
 8002884:	2140      	movs	r1, #64	; 0x40
 8002886:	f000 fb07 	bl	8002e98 <_malloc_r>
 800288a:	6038      	str	r0, [r7, #0]
 800288c:	6138      	str	r0, [r7, #16]
 800288e:	2800      	cmp	r0, #0
 8002890:	d105      	bne.n	800289e <_svfiprintf_r+0x32>
 8002892:	230c      	movs	r3, #12
 8002894:	9a03      	ldr	r2, [sp, #12]
 8002896:	3801      	subs	r0, #1
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	b021      	add	sp, #132	; 0x84
 800289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800289e:	2340      	movs	r3, #64	; 0x40
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	2300      	movs	r3, #0
 80028a4:	ac08      	add	r4, sp, #32
 80028a6:	6163      	str	r3, [r4, #20]
 80028a8:	3320      	adds	r3, #32
 80028aa:	7663      	strb	r3, [r4, #25]
 80028ac:	3310      	adds	r3, #16
 80028ae:	76a3      	strb	r3, [r4, #26]
 80028b0:	9507      	str	r5, [sp, #28]
 80028b2:	0035      	movs	r5, r6
 80028b4:	782b      	ldrb	r3, [r5, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <_svfiprintf_r+0x52>
 80028ba:	2b25      	cmp	r3, #37	; 0x25
 80028bc:	d147      	bne.n	800294e <_svfiprintf_r+0xe2>
 80028be:	1bab      	subs	r3, r5, r6
 80028c0:	9305      	str	r3, [sp, #20]
 80028c2:	42b5      	cmp	r5, r6
 80028c4:	d00c      	beq.n	80028e0 <_svfiprintf_r+0x74>
 80028c6:	0032      	movs	r2, r6
 80028c8:	0039      	movs	r1, r7
 80028ca:	9803      	ldr	r0, [sp, #12]
 80028cc:	f7ff ff6c 	bl	80027a8 <__ssputs_r>
 80028d0:	1c43      	adds	r3, r0, #1
 80028d2:	d100      	bne.n	80028d6 <_svfiprintf_r+0x6a>
 80028d4:	e0ae      	b.n	8002a34 <_svfiprintf_r+0x1c8>
 80028d6:	6962      	ldr	r2, [r4, #20]
 80028d8:	9b05      	ldr	r3, [sp, #20]
 80028da:	4694      	mov	ip, r2
 80028dc:	4463      	add	r3, ip
 80028de:	6163      	str	r3, [r4, #20]
 80028e0:	782b      	ldrb	r3, [r5, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d100      	bne.n	80028e8 <_svfiprintf_r+0x7c>
 80028e6:	e0a5      	b.n	8002a34 <_svfiprintf_r+0x1c8>
 80028e8:	2201      	movs	r2, #1
 80028ea:	2300      	movs	r3, #0
 80028ec:	4252      	negs	r2, r2
 80028ee:	6062      	str	r2, [r4, #4]
 80028f0:	a904      	add	r1, sp, #16
 80028f2:	3254      	adds	r2, #84	; 0x54
 80028f4:	1852      	adds	r2, r2, r1
 80028f6:	1c6e      	adds	r6, r5, #1
 80028f8:	6023      	str	r3, [r4, #0]
 80028fa:	60e3      	str	r3, [r4, #12]
 80028fc:	60a3      	str	r3, [r4, #8]
 80028fe:	7013      	strb	r3, [r2, #0]
 8002900:	65a3      	str	r3, [r4, #88]	; 0x58
 8002902:	2205      	movs	r2, #5
 8002904:	7831      	ldrb	r1, [r6, #0]
 8002906:	4854      	ldr	r0, [pc, #336]	; (8002a58 <_svfiprintf_r+0x1ec>)
 8002908:	f000 fa32 	bl	8002d70 <memchr>
 800290c:	1c75      	adds	r5, r6, #1
 800290e:	2800      	cmp	r0, #0
 8002910:	d11f      	bne.n	8002952 <_svfiprintf_r+0xe6>
 8002912:	6822      	ldr	r2, [r4, #0]
 8002914:	06d3      	lsls	r3, r2, #27
 8002916:	d504      	bpl.n	8002922 <_svfiprintf_r+0xb6>
 8002918:	2353      	movs	r3, #83	; 0x53
 800291a:	a904      	add	r1, sp, #16
 800291c:	185b      	adds	r3, r3, r1
 800291e:	2120      	movs	r1, #32
 8002920:	7019      	strb	r1, [r3, #0]
 8002922:	0713      	lsls	r3, r2, #28
 8002924:	d504      	bpl.n	8002930 <_svfiprintf_r+0xc4>
 8002926:	2353      	movs	r3, #83	; 0x53
 8002928:	a904      	add	r1, sp, #16
 800292a:	185b      	adds	r3, r3, r1
 800292c:	212b      	movs	r1, #43	; 0x2b
 800292e:	7019      	strb	r1, [r3, #0]
 8002930:	7833      	ldrb	r3, [r6, #0]
 8002932:	2b2a      	cmp	r3, #42	; 0x2a
 8002934:	d016      	beq.n	8002964 <_svfiprintf_r+0xf8>
 8002936:	0035      	movs	r5, r6
 8002938:	2100      	movs	r1, #0
 800293a:	200a      	movs	r0, #10
 800293c:	68e3      	ldr	r3, [r4, #12]
 800293e:	782a      	ldrb	r2, [r5, #0]
 8002940:	1c6e      	adds	r6, r5, #1
 8002942:	3a30      	subs	r2, #48	; 0x30
 8002944:	2a09      	cmp	r2, #9
 8002946:	d94e      	bls.n	80029e6 <_svfiprintf_r+0x17a>
 8002948:	2900      	cmp	r1, #0
 800294a:	d111      	bne.n	8002970 <_svfiprintf_r+0x104>
 800294c:	e017      	b.n	800297e <_svfiprintf_r+0x112>
 800294e:	3501      	adds	r5, #1
 8002950:	e7b0      	b.n	80028b4 <_svfiprintf_r+0x48>
 8002952:	4b41      	ldr	r3, [pc, #260]	; (8002a58 <_svfiprintf_r+0x1ec>)
 8002954:	6822      	ldr	r2, [r4, #0]
 8002956:	1ac0      	subs	r0, r0, r3
 8002958:	2301      	movs	r3, #1
 800295a:	4083      	lsls	r3, r0
 800295c:	4313      	orrs	r3, r2
 800295e:	002e      	movs	r6, r5
 8002960:	6023      	str	r3, [r4, #0]
 8002962:	e7ce      	b.n	8002902 <_svfiprintf_r+0x96>
 8002964:	9b07      	ldr	r3, [sp, #28]
 8002966:	1d19      	adds	r1, r3, #4
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	9107      	str	r1, [sp, #28]
 800296c:	2b00      	cmp	r3, #0
 800296e:	db01      	blt.n	8002974 <_svfiprintf_r+0x108>
 8002970:	930b      	str	r3, [sp, #44]	; 0x2c
 8002972:	e004      	b.n	800297e <_svfiprintf_r+0x112>
 8002974:	425b      	negs	r3, r3
 8002976:	60e3      	str	r3, [r4, #12]
 8002978:	2302      	movs	r3, #2
 800297a:	4313      	orrs	r3, r2
 800297c:	6023      	str	r3, [r4, #0]
 800297e:	782b      	ldrb	r3, [r5, #0]
 8002980:	2b2e      	cmp	r3, #46	; 0x2e
 8002982:	d10a      	bne.n	800299a <_svfiprintf_r+0x12e>
 8002984:	786b      	ldrb	r3, [r5, #1]
 8002986:	2b2a      	cmp	r3, #42	; 0x2a
 8002988:	d135      	bne.n	80029f6 <_svfiprintf_r+0x18a>
 800298a:	9b07      	ldr	r3, [sp, #28]
 800298c:	3502      	adds	r5, #2
 800298e:	1d1a      	adds	r2, r3, #4
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	9207      	str	r2, [sp, #28]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db2b      	blt.n	80029f0 <_svfiprintf_r+0x184>
 8002998:	9309      	str	r3, [sp, #36]	; 0x24
 800299a:	4e30      	ldr	r6, [pc, #192]	; (8002a5c <_svfiprintf_r+0x1f0>)
 800299c:	2203      	movs	r2, #3
 800299e:	0030      	movs	r0, r6
 80029a0:	7829      	ldrb	r1, [r5, #0]
 80029a2:	f000 f9e5 	bl	8002d70 <memchr>
 80029a6:	2800      	cmp	r0, #0
 80029a8:	d006      	beq.n	80029b8 <_svfiprintf_r+0x14c>
 80029aa:	2340      	movs	r3, #64	; 0x40
 80029ac:	1b80      	subs	r0, r0, r6
 80029ae:	4083      	lsls	r3, r0
 80029b0:	6822      	ldr	r2, [r4, #0]
 80029b2:	3501      	adds	r5, #1
 80029b4:	4313      	orrs	r3, r2
 80029b6:	6023      	str	r3, [r4, #0]
 80029b8:	7829      	ldrb	r1, [r5, #0]
 80029ba:	2206      	movs	r2, #6
 80029bc:	4828      	ldr	r0, [pc, #160]	; (8002a60 <_svfiprintf_r+0x1f4>)
 80029be:	1c6e      	adds	r6, r5, #1
 80029c0:	7621      	strb	r1, [r4, #24]
 80029c2:	f000 f9d5 	bl	8002d70 <memchr>
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d03c      	beq.n	8002a44 <_svfiprintf_r+0x1d8>
 80029ca:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <_svfiprintf_r+0x1f8>)
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d125      	bne.n	8002a1c <_svfiprintf_r+0x1b0>
 80029d0:	2207      	movs	r2, #7
 80029d2:	9b07      	ldr	r3, [sp, #28]
 80029d4:	3307      	adds	r3, #7
 80029d6:	4393      	bics	r3, r2
 80029d8:	3308      	adds	r3, #8
 80029da:	9307      	str	r3, [sp, #28]
 80029dc:	6963      	ldr	r3, [r4, #20]
 80029de:	9a04      	ldr	r2, [sp, #16]
 80029e0:	189b      	adds	r3, r3, r2
 80029e2:	6163      	str	r3, [r4, #20]
 80029e4:	e765      	b.n	80028b2 <_svfiprintf_r+0x46>
 80029e6:	4343      	muls	r3, r0
 80029e8:	0035      	movs	r5, r6
 80029ea:	2101      	movs	r1, #1
 80029ec:	189b      	adds	r3, r3, r2
 80029ee:	e7a6      	b.n	800293e <_svfiprintf_r+0xd2>
 80029f0:	2301      	movs	r3, #1
 80029f2:	425b      	negs	r3, r3
 80029f4:	e7d0      	b.n	8002998 <_svfiprintf_r+0x12c>
 80029f6:	2300      	movs	r3, #0
 80029f8:	200a      	movs	r0, #10
 80029fa:	001a      	movs	r2, r3
 80029fc:	3501      	adds	r5, #1
 80029fe:	6063      	str	r3, [r4, #4]
 8002a00:	7829      	ldrb	r1, [r5, #0]
 8002a02:	1c6e      	adds	r6, r5, #1
 8002a04:	3930      	subs	r1, #48	; 0x30
 8002a06:	2909      	cmp	r1, #9
 8002a08:	d903      	bls.n	8002a12 <_svfiprintf_r+0x1a6>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0c5      	beq.n	800299a <_svfiprintf_r+0x12e>
 8002a0e:	9209      	str	r2, [sp, #36]	; 0x24
 8002a10:	e7c3      	b.n	800299a <_svfiprintf_r+0x12e>
 8002a12:	4342      	muls	r2, r0
 8002a14:	0035      	movs	r5, r6
 8002a16:	2301      	movs	r3, #1
 8002a18:	1852      	adds	r2, r2, r1
 8002a1a:	e7f1      	b.n	8002a00 <_svfiprintf_r+0x194>
 8002a1c:	ab07      	add	r3, sp, #28
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	003a      	movs	r2, r7
 8002a22:	0021      	movs	r1, r4
 8002a24:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <_svfiprintf_r+0x1fc>)
 8002a26:	9803      	ldr	r0, [sp, #12]
 8002a28:	e000      	b.n	8002a2c <_svfiprintf_r+0x1c0>
 8002a2a:	bf00      	nop
 8002a2c:	9004      	str	r0, [sp, #16]
 8002a2e:	9b04      	ldr	r3, [sp, #16]
 8002a30:	3301      	adds	r3, #1
 8002a32:	d1d3      	bne.n	80029dc <_svfiprintf_r+0x170>
 8002a34:	89bb      	ldrh	r3, [r7, #12]
 8002a36:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002a38:	065b      	lsls	r3, r3, #25
 8002a3a:	d400      	bmi.n	8002a3e <_svfiprintf_r+0x1d2>
 8002a3c:	e72d      	b.n	800289a <_svfiprintf_r+0x2e>
 8002a3e:	2001      	movs	r0, #1
 8002a40:	4240      	negs	r0, r0
 8002a42:	e72a      	b.n	800289a <_svfiprintf_r+0x2e>
 8002a44:	ab07      	add	r3, sp, #28
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	003a      	movs	r2, r7
 8002a4a:	0021      	movs	r1, r4
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <_svfiprintf_r+0x1fc>)
 8002a4e:	9803      	ldr	r0, [sp, #12]
 8002a50:	f000 f87c 	bl	8002b4c <_printf_i>
 8002a54:	e7ea      	b.n	8002a2c <_svfiprintf_r+0x1c0>
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	0800314c 	.word	0x0800314c
 8002a5c:	08003152 	.word	0x08003152
 8002a60:	08003156 	.word	0x08003156
 8002a64:	00000000 	.word	0x00000000
 8002a68:	080027a9 	.word	0x080027a9

08002a6c <_printf_common>:
 8002a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a6e:	0015      	movs	r5, r2
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	688a      	ldr	r2, [r1, #8]
 8002a74:	690b      	ldr	r3, [r1, #16]
 8002a76:	000c      	movs	r4, r1
 8002a78:	9000      	str	r0, [sp, #0]
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	da00      	bge.n	8002a80 <_printf_common+0x14>
 8002a7e:	0013      	movs	r3, r2
 8002a80:	0022      	movs	r2, r4
 8002a82:	602b      	str	r3, [r5, #0]
 8002a84:	3243      	adds	r2, #67	; 0x43
 8002a86:	7812      	ldrb	r2, [r2, #0]
 8002a88:	2a00      	cmp	r2, #0
 8002a8a:	d001      	beq.n	8002a90 <_printf_common+0x24>
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	602b      	str	r3, [r5, #0]
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	069b      	lsls	r3, r3, #26
 8002a94:	d502      	bpl.n	8002a9c <_printf_common+0x30>
 8002a96:	682b      	ldr	r3, [r5, #0]
 8002a98:	3302      	adds	r3, #2
 8002a9a:	602b      	str	r3, [r5, #0]
 8002a9c:	6822      	ldr	r2, [r4, #0]
 8002a9e:	2306      	movs	r3, #6
 8002aa0:	0017      	movs	r7, r2
 8002aa2:	401f      	ands	r7, r3
 8002aa4:	421a      	tst	r2, r3
 8002aa6:	d027      	beq.n	8002af8 <_printf_common+0x8c>
 8002aa8:	0023      	movs	r3, r4
 8002aaa:	3343      	adds	r3, #67	; 0x43
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	1e5a      	subs	r2, r3, #1
 8002ab0:	4193      	sbcs	r3, r2
 8002ab2:	6822      	ldr	r2, [r4, #0]
 8002ab4:	0692      	lsls	r2, r2, #26
 8002ab6:	d430      	bmi.n	8002b1a <_printf_common+0xae>
 8002ab8:	0022      	movs	r2, r4
 8002aba:	9901      	ldr	r1, [sp, #4]
 8002abc:	9800      	ldr	r0, [sp, #0]
 8002abe:	9e08      	ldr	r6, [sp, #32]
 8002ac0:	3243      	adds	r2, #67	; 0x43
 8002ac2:	47b0      	blx	r6
 8002ac4:	1c43      	adds	r3, r0, #1
 8002ac6:	d025      	beq.n	8002b14 <_printf_common+0xa8>
 8002ac8:	2306      	movs	r3, #6
 8002aca:	6820      	ldr	r0, [r4, #0]
 8002acc:	682a      	ldr	r2, [r5, #0]
 8002ace:	68e1      	ldr	r1, [r4, #12]
 8002ad0:	2500      	movs	r5, #0
 8002ad2:	4003      	ands	r3, r0
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d103      	bne.n	8002ae0 <_printf_common+0x74>
 8002ad8:	1a8d      	subs	r5, r1, r2
 8002ada:	43eb      	mvns	r3, r5
 8002adc:	17db      	asrs	r3, r3, #31
 8002ade:	401d      	ands	r5, r3
 8002ae0:	68a3      	ldr	r3, [r4, #8]
 8002ae2:	6922      	ldr	r2, [r4, #16]
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	dd01      	ble.n	8002aec <_printf_common+0x80>
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	18ed      	adds	r5, r5, r3
 8002aec:	2700      	movs	r7, #0
 8002aee:	42bd      	cmp	r5, r7
 8002af0:	d120      	bne.n	8002b34 <_printf_common+0xc8>
 8002af2:	2000      	movs	r0, #0
 8002af4:	e010      	b.n	8002b18 <_printf_common+0xac>
 8002af6:	3701      	adds	r7, #1
 8002af8:	68e3      	ldr	r3, [r4, #12]
 8002afa:	682a      	ldr	r2, [r5, #0]
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	42bb      	cmp	r3, r7
 8002b00:	ddd2      	ble.n	8002aa8 <_printf_common+0x3c>
 8002b02:	0022      	movs	r2, r4
 8002b04:	2301      	movs	r3, #1
 8002b06:	9901      	ldr	r1, [sp, #4]
 8002b08:	9800      	ldr	r0, [sp, #0]
 8002b0a:	9e08      	ldr	r6, [sp, #32]
 8002b0c:	3219      	adds	r2, #25
 8002b0e:	47b0      	blx	r6
 8002b10:	1c43      	adds	r3, r0, #1
 8002b12:	d1f0      	bne.n	8002af6 <_printf_common+0x8a>
 8002b14:	2001      	movs	r0, #1
 8002b16:	4240      	negs	r0, r0
 8002b18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b1a:	2030      	movs	r0, #48	; 0x30
 8002b1c:	18e1      	adds	r1, r4, r3
 8002b1e:	3143      	adds	r1, #67	; 0x43
 8002b20:	7008      	strb	r0, [r1, #0]
 8002b22:	0021      	movs	r1, r4
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	3145      	adds	r1, #69	; 0x45
 8002b28:	7809      	ldrb	r1, [r1, #0]
 8002b2a:	18a2      	adds	r2, r4, r2
 8002b2c:	3243      	adds	r2, #67	; 0x43
 8002b2e:	3302      	adds	r3, #2
 8002b30:	7011      	strb	r1, [r2, #0]
 8002b32:	e7c1      	b.n	8002ab8 <_printf_common+0x4c>
 8002b34:	0022      	movs	r2, r4
 8002b36:	2301      	movs	r3, #1
 8002b38:	9901      	ldr	r1, [sp, #4]
 8002b3a:	9800      	ldr	r0, [sp, #0]
 8002b3c:	9e08      	ldr	r6, [sp, #32]
 8002b3e:	321a      	adds	r2, #26
 8002b40:	47b0      	blx	r6
 8002b42:	1c43      	adds	r3, r0, #1
 8002b44:	d0e6      	beq.n	8002b14 <_printf_common+0xa8>
 8002b46:	3701      	adds	r7, #1
 8002b48:	e7d1      	b.n	8002aee <_printf_common+0x82>
	...

08002b4c <_printf_i>:
 8002b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4e:	b08b      	sub	sp, #44	; 0x2c
 8002b50:	9206      	str	r2, [sp, #24]
 8002b52:	000a      	movs	r2, r1
 8002b54:	3243      	adds	r2, #67	; 0x43
 8002b56:	9307      	str	r3, [sp, #28]
 8002b58:	9005      	str	r0, [sp, #20]
 8002b5a:	9204      	str	r2, [sp, #16]
 8002b5c:	7e0a      	ldrb	r2, [r1, #24]
 8002b5e:	000c      	movs	r4, r1
 8002b60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b62:	2a78      	cmp	r2, #120	; 0x78
 8002b64:	d807      	bhi.n	8002b76 <_printf_i+0x2a>
 8002b66:	2a62      	cmp	r2, #98	; 0x62
 8002b68:	d809      	bhi.n	8002b7e <_printf_i+0x32>
 8002b6a:	2a00      	cmp	r2, #0
 8002b6c:	d100      	bne.n	8002b70 <_printf_i+0x24>
 8002b6e:	e0c1      	b.n	8002cf4 <_printf_i+0x1a8>
 8002b70:	2a58      	cmp	r2, #88	; 0x58
 8002b72:	d100      	bne.n	8002b76 <_printf_i+0x2a>
 8002b74:	e08c      	b.n	8002c90 <_printf_i+0x144>
 8002b76:	0026      	movs	r6, r4
 8002b78:	3642      	adds	r6, #66	; 0x42
 8002b7a:	7032      	strb	r2, [r6, #0]
 8002b7c:	e022      	b.n	8002bc4 <_printf_i+0x78>
 8002b7e:	0010      	movs	r0, r2
 8002b80:	3863      	subs	r0, #99	; 0x63
 8002b82:	2815      	cmp	r0, #21
 8002b84:	d8f7      	bhi.n	8002b76 <_printf_i+0x2a>
 8002b86:	f7fd fabf 	bl	8000108 <__gnu_thumb1_case_shi>
 8002b8a:	0016      	.short	0x0016
 8002b8c:	fff6001f 	.word	0xfff6001f
 8002b90:	fff6fff6 	.word	0xfff6fff6
 8002b94:	001ffff6 	.word	0x001ffff6
 8002b98:	fff6fff6 	.word	0xfff6fff6
 8002b9c:	fff6fff6 	.word	0xfff6fff6
 8002ba0:	003600a8 	.word	0x003600a8
 8002ba4:	fff6009a 	.word	0xfff6009a
 8002ba8:	00b9fff6 	.word	0x00b9fff6
 8002bac:	0036fff6 	.word	0x0036fff6
 8002bb0:	fff6fff6 	.word	0xfff6fff6
 8002bb4:	009e      	.short	0x009e
 8002bb6:	0026      	movs	r6, r4
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	3642      	adds	r6, #66	; 0x42
 8002bbc:	1d11      	adds	r1, r2, #4
 8002bbe:	6019      	str	r1, [r3, #0]
 8002bc0:	6813      	ldr	r3, [r2, #0]
 8002bc2:	7033      	strb	r3, [r6, #0]
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0a7      	b.n	8002d18 <_printf_i+0x1cc>
 8002bc8:	6808      	ldr	r0, [r1, #0]
 8002bca:	6819      	ldr	r1, [r3, #0]
 8002bcc:	1d0a      	adds	r2, r1, #4
 8002bce:	0605      	lsls	r5, r0, #24
 8002bd0:	d50b      	bpl.n	8002bea <_printf_i+0x9e>
 8002bd2:	680d      	ldr	r5, [r1, #0]
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	2d00      	cmp	r5, #0
 8002bd8:	da03      	bge.n	8002be2 <_printf_i+0x96>
 8002bda:	232d      	movs	r3, #45	; 0x2d
 8002bdc:	9a04      	ldr	r2, [sp, #16]
 8002bde:	426d      	negs	r5, r5
 8002be0:	7013      	strb	r3, [r2, #0]
 8002be2:	4b61      	ldr	r3, [pc, #388]	; (8002d68 <_printf_i+0x21c>)
 8002be4:	270a      	movs	r7, #10
 8002be6:	9303      	str	r3, [sp, #12]
 8002be8:	e01b      	b.n	8002c22 <_printf_i+0xd6>
 8002bea:	680d      	ldr	r5, [r1, #0]
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	0641      	lsls	r1, r0, #25
 8002bf0:	d5f1      	bpl.n	8002bd6 <_printf_i+0x8a>
 8002bf2:	b22d      	sxth	r5, r5
 8002bf4:	e7ef      	b.n	8002bd6 <_printf_i+0x8a>
 8002bf6:	680d      	ldr	r5, [r1, #0]
 8002bf8:	6819      	ldr	r1, [r3, #0]
 8002bfa:	1d08      	adds	r0, r1, #4
 8002bfc:	6018      	str	r0, [r3, #0]
 8002bfe:	062e      	lsls	r6, r5, #24
 8002c00:	d501      	bpl.n	8002c06 <_printf_i+0xba>
 8002c02:	680d      	ldr	r5, [r1, #0]
 8002c04:	e003      	b.n	8002c0e <_printf_i+0xc2>
 8002c06:	066d      	lsls	r5, r5, #25
 8002c08:	d5fb      	bpl.n	8002c02 <_printf_i+0xb6>
 8002c0a:	680d      	ldr	r5, [r1, #0]
 8002c0c:	b2ad      	uxth	r5, r5
 8002c0e:	4b56      	ldr	r3, [pc, #344]	; (8002d68 <_printf_i+0x21c>)
 8002c10:	2708      	movs	r7, #8
 8002c12:	9303      	str	r3, [sp, #12]
 8002c14:	2a6f      	cmp	r2, #111	; 0x6f
 8002c16:	d000      	beq.n	8002c1a <_printf_i+0xce>
 8002c18:	3702      	adds	r7, #2
 8002c1a:	0023      	movs	r3, r4
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	3343      	adds	r3, #67	; 0x43
 8002c20:	701a      	strb	r2, [r3, #0]
 8002c22:	6863      	ldr	r3, [r4, #4]
 8002c24:	60a3      	str	r3, [r4, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	db03      	blt.n	8002c32 <_printf_i+0xe6>
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	6821      	ldr	r1, [r4, #0]
 8002c2e:	4391      	bics	r1, r2
 8002c30:	6021      	str	r1, [r4, #0]
 8002c32:	2d00      	cmp	r5, #0
 8002c34:	d102      	bne.n	8002c3c <_printf_i+0xf0>
 8002c36:	9e04      	ldr	r6, [sp, #16]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00c      	beq.n	8002c56 <_printf_i+0x10a>
 8002c3c:	9e04      	ldr	r6, [sp, #16]
 8002c3e:	0028      	movs	r0, r5
 8002c40:	0039      	movs	r1, r7
 8002c42:	f7fd faf1 	bl	8000228 <__aeabi_uidivmod>
 8002c46:	9b03      	ldr	r3, [sp, #12]
 8002c48:	3e01      	subs	r6, #1
 8002c4a:	5c5b      	ldrb	r3, [r3, r1]
 8002c4c:	7033      	strb	r3, [r6, #0]
 8002c4e:	002b      	movs	r3, r5
 8002c50:	0005      	movs	r5, r0
 8002c52:	429f      	cmp	r7, r3
 8002c54:	d9f3      	bls.n	8002c3e <_printf_i+0xf2>
 8002c56:	2f08      	cmp	r7, #8
 8002c58:	d109      	bne.n	8002c6e <_printf_i+0x122>
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	07db      	lsls	r3, r3, #31
 8002c5e:	d506      	bpl.n	8002c6e <_printf_i+0x122>
 8002c60:	6863      	ldr	r3, [r4, #4]
 8002c62:	6922      	ldr	r2, [r4, #16]
 8002c64:	4293      	cmp	r3, r2
 8002c66:	dc02      	bgt.n	8002c6e <_printf_i+0x122>
 8002c68:	2330      	movs	r3, #48	; 0x30
 8002c6a:	3e01      	subs	r6, #1
 8002c6c:	7033      	strb	r3, [r6, #0]
 8002c6e:	9b04      	ldr	r3, [sp, #16]
 8002c70:	1b9b      	subs	r3, r3, r6
 8002c72:	6123      	str	r3, [r4, #16]
 8002c74:	9b07      	ldr	r3, [sp, #28]
 8002c76:	0021      	movs	r1, r4
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	9805      	ldr	r0, [sp, #20]
 8002c7c:	9b06      	ldr	r3, [sp, #24]
 8002c7e:	aa09      	add	r2, sp, #36	; 0x24
 8002c80:	f7ff fef4 	bl	8002a6c <_printf_common>
 8002c84:	1c43      	adds	r3, r0, #1
 8002c86:	d14c      	bne.n	8002d22 <_printf_i+0x1d6>
 8002c88:	2001      	movs	r0, #1
 8002c8a:	4240      	negs	r0, r0
 8002c8c:	b00b      	add	sp, #44	; 0x2c
 8002c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c90:	3145      	adds	r1, #69	; 0x45
 8002c92:	700a      	strb	r2, [r1, #0]
 8002c94:	4a34      	ldr	r2, [pc, #208]	; (8002d68 <_printf_i+0x21c>)
 8002c96:	9203      	str	r2, [sp, #12]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	6821      	ldr	r1, [r4, #0]
 8002c9c:	ca20      	ldmia	r2!, {r5}
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	0608      	lsls	r0, r1, #24
 8002ca2:	d516      	bpl.n	8002cd2 <_printf_i+0x186>
 8002ca4:	07cb      	lsls	r3, r1, #31
 8002ca6:	d502      	bpl.n	8002cae <_printf_i+0x162>
 8002ca8:	2320      	movs	r3, #32
 8002caa:	4319      	orrs	r1, r3
 8002cac:	6021      	str	r1, [r4, #0]
 8002cae:	2710      	movs	r7, #16
 8002cb0:	2d00      	cmp	r5, #0
 8002cb2:	d1b2      	bne.n	8002c1a <_printf_i+0xce>
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	6822      	ldr	r2, [r4, #0]
 8002cb8:	439a      	bics	r2, r3
 8002cba:	6022      	str	r2, [r4, #0]
 8002cbc:	e7ad      	b.n	8002c1a <_printf_i+0xce>
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	6809      	ldr	r1, [r1, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	6022      	str	r2, [r4, #0]
 8002cc6:	0022      	movs	r2, r4
 8002cc8:	2178      	movs	r1, #120	; 0x78
 8002cca:	3245      	adds	r2, #69	; 0x45
 8002ccc:	7011      	strb	r1, [r2, #0]
 8002cce:	4a27      	ldr	r2, [pc, #156]	; (8002d6c <_printf_i+0x220>)
 8002cd0:	e7e1      	b.n	8002c96 <_printf_i+0x14a>
 8002cd2:	0648      	lsls	r0, r1, #25
 8002cd4:	d5e6      	bpl.n	8002ca4 <_printf_i+0x158>
 8002cd6:	b2ad      	uxth	r5, r5
 8002cd8:	e7e4      	b.n	8002ca4 <_printf_i+0x158>
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	680d      	ldr	r5, [r1, #0]
 8002cde:	1d10      	adds	r0, r2, #4
 8002ce0:	6949      	ldr	r1, [r1, #20]
 8002ce2:	6018      	str	r0, [r3, #0]
 8002ce4:	6813      	ldr	r3, [r2, #0]
 8002ce6:	062e      	lsls	r6, r5, #24
 8002ce8:	d501      	bpl.n	8002cee <_printf_i+0x1a2>
 8002cea:	6019      	str	r1, [r3, #0]
 8002cec:	e002      	b.n	8002cf4 <_printf_i+0x1a8>
 8002cee:	066d      	lsls	r5, r5, #25
 8002cf0:	d5fb      	bpl.n	8002cea <_printf_i+0x19e>
 8002cf2:	8019      	strh	r1, [r3, #0]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9e04      	ldr	r6, [sp, #16]
 8002cf8:	6123      	str	r3, [r4, #16]
 8002cfa:	e7bb      	b.n	8002c74 <_printf_i+0x128>
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	1d11      	adds	r1, r2, #4
 8002d00:	6019      	str	r1, [r3, #0]
 8002d02:	6816      	ldr	r6, [r2, #0]
 8002d04:	2100      	movs	r1, #0
 8002d06:	0030      	movs	r0, r6
 8002d08:	6862      	ldr	r2, [r4, #4]
 8002d0a:	f000 f831 	bl	8002d70 <memchr>
 8002d0e:	2800      	cmp	r0, #0
 8002d10:	d001      	beq.n	8002d16 <_printf_i+0x1ca>
 8002d12:	1b80      	subs	r0, r0, r6
 8002d14:	6060      	str	r0, [r4, #4]
 8002d16:	6863      	ldr	r3, [r4, #4]
 8002d18:	6123      	str	r3, [r4, #16]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9a04      	ldr	r2, [sp, #16]
 8002d1e:	7013      	strb	r3, [r2, #0]
 8002d20:	e7a8      	b.n	8002c74 <_printf_i+0x128>
 8002d22:	6923      	ldr	r3, [r4, #16]
 8002d24:	0032      	movs	r2, r6
 8002d26:	9906      	ldr	r1, [sp, #24]
 8002d28:	9805      	ldr	r0, [sp, #20]
 8002d2a:	9d07      	ldr	r5, [sp, #28]
 8002d2c:	47a8      	blx	r5
 8002d2e:	1c43      	adds	r3, r0, #1
 8002d30:	d0aa      	beq.n	8002c88 <_printf_i+0x13c>
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	079b      	lsls	r3, r3, #30
 8002d36:	d415      	bmi.n	8002d64 <_printf_i+0x218>
 8002d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d3a:	68e0      	ldr	r0, [r4, #12]
 8002d3c:	4298      	cmp	r0, r3
 8002d3e:	daa5      	bge.n	8002c8c <_printf_i+0x140>
 8002d40:	0018      	movs	r0, r3
 8002d42:	e7a3      	b.n	8002c8c <_printf_i+0x140>
 8002d44:	0022      	movs	r2, r4
 8002d46:	2301      	movs	r3, #1
 8002d48:	9906      	ldr	r1, [sp, #24]
 8002d4a:	9805      	ldr	r0, [sp, #20]
 8002d4c:	9e07      	ldr	r6, [sp, #28]
 8002d4e:	3219      	adds	r2, #25
 8002d50:	47b0      	blx	r6
 8002d52:	1c43      	adds	r3, r0, #1
 8002d54:	d098      	beq.n	8002c88 <_printf_i+0x13c>
 8002d56:	3501      	adds	r5, #1
 8002d58:	68e3      	ldr	r3, [r4, #12]
 8002d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	42ab      	cmp	r3, r5
 8002d60:	dcf0      	bgt.n	8002d44 <_printf_i+0x1f8>
 8002d62:	e7e9      	b.n	8002d38 <_printf_i+0x1ec>
 8002d64:	2500      	movs	r5, #0
 8002d66:	e7f7      	b.n	8002d58 <_printf_i+0x20c>
 8002d68:	0800315d 	.word	0x0800315d
 8002d6c:	0800316e 	.word	0x0800316e

08002d70 <memchr>:
 8002d70:	b2c9      	uxtb	r1, r1
 8002d72:	1882      	adds	r2, r0, r2
 8002d74:	4290      	cmp	r0, r2
 8002d76:	d101      	bne.n	8002d7c <memchr+0xc>
 8002d78:	2000      	movs	r0, #0
 8002d7a:	4770      	bx	lr
 8002d7c:	7803      	ldrb	r3, [r0, #0]
 8002d7e:	428b      	cmp	r3, r1
 8002d80:	d0fb      	beq.n	8002d7a <memchr+0xa>
 8002d82:	3001      	adds	r0, #1
 8002d84:	e7f6      	b.n	8002d74 <memchr+0x4>

08002d86 <memcpy>:
 8002d86:	2300      	movs	r3, #0
 8002d88:	b510      	push	{r4, lr}
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d100      	bne.n	8002d90 <memcpy+0xa>
 8002d8e:	bd10      	pop	{r4, pc}
 8002d90:	5ccc      	ldrb	r4, [r1, r3]
 8002d92:	54c4      	strb	r4, [r0, r3]
 8002d94:	3301      	adds	r3, #1
 8002d96:	e7f8      	b.n	8002d8a <memcpy+0x4>

08002d98 <memmove>:
 8002d98:	b510      	push	{r4, lr}
 8002d9a:	4288      	cmp	r0, r1
 8002d9c:	d902      	bls.n	8002da4 <memmove+0xc>
 8002d9e:	188b      	adds	r3, r1, r2
 8002da0:	4298      	cmp	r0, r3
 8002da2:	d303      	bcc.n	8002dac <memmove+0x14>
 8002da4:	2300      	movs	r3, #0
 8002da6:	e007      	b.n	8002db8 <memmove+0x20>
 8002da8:	5c8b      	ldrb	r3, [r1, r2]
 8002daa:	5483      	strb	r3, [r0, r2]
 8002dac:	3a01      	subs	r2, #1
 8002dae:	d2fb      	bcs.n	8002da8 <memmove+0x10>
 8002db0:	bd10      	pop	{r4, pc}
 8002db2:	5ccc      	ldrb	r4, [r1, r3]
 8002db4:	54c4      	strb	r4, [r0, r3]
 8002db6:	3301      	adds	r3, #1
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d1fa      	bne.n	8002db2 <memmove+0x1a>
 8002dbc:	e7f8      	b.n	8002db0 <memmove+0x18>
	...

08002dc0 <_free_r>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	0005      	movs	r5, r0
 8002dc4:	2900      	cmp	r1, #0
 8002dc6:	d010      	beq.n	8002dea <_free_r+0x2a>
 8002dc8:	1f0c      	subs	r4, r1, #4
 8002dca:	6823      	ldr	r3, [r4, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	da00      	bge.n	8002dd2 <_free_r+0x12>
 8002dd0:	18e4      	adds	r4, r4, r3
 8002dd2:	0028      	movs	r0, r5
 8002dd4:	f000 f918 	bl	8003008 <__malloc_lock>
 8002dd8:	4a1d      	ldr	r2, [pc, #116]	; (8002e50 <_free_r+0x90>)
 8002dda:	6813      	ldr	r3, [r2, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <_free_r+0x2c>
 8002de0:	6063      	str	r3, [r4, #4]
 8002de2:	6014      	str	r4, [r2, #0]
 8002de4:	0028      	movs	r0, r5
 8002de6:	f000 f917 	bl	8003018 <__malloc_unlock>
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
 8002dec:	42a3      	cmp	r3, r4
 8002dee:	d908      	bls.n	8002e02 <_free_r+0x42>
 8002df0:	6821      	ldr	r1, [r4, #0]
 8002df2:	1860      	adds	r0, r4, r1
 8002df4:	4283      	cmp	r3, r0
 8002df6:	d1f3      	bne.n	8002de0 <_free_r+0x20>
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	1841      	adds	r1, r0, r1
 8002dfe:	6021      	str	r1, [r4, #0]
 8002e00:	e7ee      	b.n	8002de0 <_free_r+0x20>
 8002e02:	001a      	movs	r2, r3
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <_free_r+0x4e>
 8002e0a:	42a3      	cmp	r3, r4
 8002e0c:	d9f9      	bls.n	8002e02 <_free_r+0x42>
 8002e0e:	6811      	ldr	r1, [r2, #0]
 8002e10:	1850      	adds	r0, r2, r1
 8002e12:	42a0      	cmp	r0, r4
 8002e14:	d10b      	bne.n	8002e2e <_free_r+0x6e>
 8002e16:	6820      	ldr	r0, [r4, #0]
 8002e18:	1809      	adds	r1, r1, r0
 8002e1a:	1850      	adds	r0, r2, r1
 8002e1c:	6011      	str	r1, [r2, #0]
 8002e1e:	4283      	cmp	r3, r0
 8002e20:	d1e0      	bne.n	8002de4 <_free_r+0x24>
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	1841      	adds	r1, r0, r1
 8002e28:	6011      	str	r1, [r2, #0]
 8002e2a:	6053      	str	r3, [r2, #4]
 8002e2c:	e7da      	b.n	8002de4 <_free_r+0x24>
 8002e2e:	42a0      	cmp	r0, r4
 8002e30:	d902      	bls.n	8002e38 <_free_r+0x78>
 8002e32:	230c      	movs	r3, #12
 8002e34:	602b      	str	r3, [r5, #0]
 8002e36:	e7d5      	b.n	8002de4 <_free_r+0x24>
 8002e38:	6821      	ldr	r1, [r4, #0]
 8002e3a:	1860      	adds	r0, r4, r1
 8002e3c:	4283      	cmp	r3, r0
 8002e3e:	d103      	bne.n	8002e48 <_free_r+0x88>
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	1841      	adds	r1, r0, r1
 8002e46:	6021      	str	r1, [r4, #0]
 8002e48:	6063      	str	r3, [r4, #4]
 8002e4a:	6054      	str	r4, [r2, #4]
 8002e4c:	e7ca      	b.n	8002de4 <_free_r+0x24>
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	200001a4 	.word	0x200001a4

08002e54 <sbrk_aligned>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	4e0f      	ldr	r6, [pc, #60]	; (8002e94 <sbrk_aligned+0x40>)
 8002e58:	000d      	movs	r5, r1
 8002e5a:	6831      	ldr	r1, [r6, #0]
 8002e5c:	0004      	movs	r4, r0
 8002e5e:	2900      	cmp	r1, #0
 8002e60:	d102      	bne.n	8002e68 <sbrk_aligned+0x14>
 8002e62:	f000 f8bf 	bl	8002fe4 <_sbrk_r>
 8002e66:	6030      	str	r0, [r6, #0]
 8002e68:	0029      	movs	r1, r5
 8002e6a:	0020      	movs	r0, r4
 8002e6c:	f000 f8ba 	bl	8002fe4 <_sbrk_r>
 8002e70:	1c43      	adds	r3, r0, #1
 8002e72:	d00a      	beq.n	8002e8a <sbrk_aligned+0x36>
 8002e74:	2303      	movs	r3, #3
 8002e76:	1cc5      	adds	r5, r0, #3
 8002e78:	439d      	bics	r5, r3
 8002e7a:	42a8      	cmp	r0, r5
 8002e7c:	d007      	beq.n	8002e8e <sbrk_aligned+0x3a>
 8002e7e:	1a29      	subs	r1, r5, r0
 8002e80:	0020      	movs	r0, r4
 8002e82:	f000 f8af 	bl	8002fe4 <_sbrk_r>
 8002e86:	1c43      	adds	r3, r0, #1
 8002e88:	d101      	bne.n	8002e8e <sbrk_aligned+0x3a>
 8002e8a:	2501      	movs	r5, #1
 8002e8c:	426d      	negs	r5, r5
 8002e8e:	0028      	movs	r0, r5
 8002e90:	bd70      	pop	{r4, r5, r6, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	200001a8 	.word	0x200001a8

08002e98 <_malloc_r>:
 8002e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	1ccb      	adds	r3, r1, #3
 8002e9e:	4393      	bics	r3, r2
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	0006      	movs	r6, r0
 8002ea4:	001f      	movs	r7, r3
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d232      	bcs.n	8002f10 <_malloc_r+0x78>
 8002eaa:	270c      	movs	r7, #12
 8002eac:	42b9      	cmp	r1, r7
 8002eae:	d831      	bhi.n	8002f14 <_malloc_r+0x7c>
 8002eb0:	0030      	movs	r0, r6
 8002eb2:	f000 f8a9 	bl	8003008 <__malloc_lock>
 8002eb6:	4d32      	ldr	r5, [pc, #200]	; (8002f80 <_malloc_r+0xe8>)
 8002eb8:	682b      	ldr	r3, [r5, #0]
 8002eba:	001c      	movs	r4, r3
 8002ebc:	2c00      	cmp	r4, #0
 8002ebe:	d12e      	bne.n	8002f1e <_malloc_r+0x86>
 8002ec0:	0039      	movs	r1, r7
 8002ec2:	0030      	movs	r0, r6
 8002ec4:	f7ff ffc6 	bl	8002e54 <sbrk_aligned>
 8002ec8:	0004      	movs	r4, r0
 8002eca:	1c43      	adds	r3, r0, #1
 8002ecc:	d11e      	bne.n	8002f0c <_malloc_r+0x74>
 8002ece:	682c      	ldr	r4, [r5, #0]
 8002ed0:	0025      	movs	r5, r4
 8002ed2:	2d00      	cmp	r5, #0
 8002ed4:	d14a      	bne.n	8002f6c <_malloc_r+0xd4>
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	0029      	movs	r1, r5
 8002eda:	18e3      	adds	r3, r4, r3
 8002edc:	0030      	movs	r0, r6
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	f000 f880 	bl	8002fe4 <_sbrk_r>
 8002ee4:	9b01      	ldr	r3, [sp, #4]
 8002ee6:	4283      	cmp	r3, r0
 8002ee8:	d143      	bne.n	8002f72 <_malloc_r+0xda>
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	3703      	adds	r7, #3
 8002eee:	1aff      	subs	r7, r7, r3
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	439f      	bics	r7, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	2f0c      	cmp	r7, #12
 8002ef8:	d200      	bcs.n	8002efc <_malloc_r+0x64>
 8002efa:	270c      	movs	r7, #12
 8002efc:	0039      	movs	r1, r7
 8002efe:	0030      	movs	r0, r6
 8002f00:	f7ff ffa8 	bl	8002e54 <sbrk_aligned>
 8002f04:	1c43      	adds	r3, r0, #1
 8002f06:	d034      	beq.n	8002f72 <_malloc_r+0xda>
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	19df      	adds	r7, r3, r7
 8002f0c:	6027      	str	r7, [r4, #0]
 8002f0e:	e013      	b.n	8002f38 <_malloc_r+0xa0>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	dacb      	bge.n	8002eac <_malloc_r+0x14>
 8002f14:	230c      	movs	r3, #12
 8002f16:	2500      	movs	r5, #0
 8002f18:	6033      	str	r3, [r6, #0]
 8002f1a:	0028      	movs	r0, r5
 8002f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f1e:	6822      	ldr	r2, [r4, #0]
 8002f20:	1bd1      	subs	r1, r2, r7
 8002f22:	d420      	bmi.n	8002f66 <_malloc_r+0xce>
 8002f24:	290b      	cmp	r1, #11
 8002f26:	d917      	bls.n	8002f58 <_malloc_r+0xc0>
 8002f28:	19e2      	adds	r2, r4, r7
 8002f2a:	6027      	str	r7, [r4, #0]
 8002f2c:	42a3      	cmp	r3, r4
 8002f2e:	d111      	bne.n	8002f54 <_malloc_r+0xbc>
 8002f30:	602a      	str	r2, [r5, #0]
 8002f32:	6863      	ldr	r3, [r4, #4]
 8002f34:	6011      	str	r1, [r2, #0]
 8002f36:	6053      	str	r3, [r2, #4]
 8002f38:	0030      	movs	r0, r6
 8002f3a:	0025      	movs	r5, r4
 8002f3c:	f000 f86c 	bl	8003018 <__malloc_unlock>
 8002f40:	2207      	movs	r2, #7
 8002f42:	350b      	adds	r5, #11
 8002f44:	1d23      	adds	r3, r4, #4
 8002f46:	4395      	bics	r5, r2
 8002f48:	1aea      	subs	r2, r5, r3
 8002f4a:	429d      	cmp	r5, r3
 8002f4c:	d0e5      	beq.n	8002f1a <_malloc_r+0x82>
 8002f4e:	1b5b      	subs	r3, r3, r5
 8002f50:	50a3      	str	r3, [r4, r2]
 8002f52:	e7e2      	b.n	8002f1a <_malloc_r+0x82>
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	e7ec      	b.n	8002f32 <_malloc_r+0x9a>
 8002f58:	6862      	ldr	r2, [r4, #4]
 8002f5a:	42a3      	cmp	r3, r4
 8002f5c:	d101      	bne.n	8002f62 <_malloc_r+0xca>
 8002f5e:	602a      	str	r2, [r5, #0]
 8002f60:	e7ea      	b.n	8002f38 <_malloc_r+0xa0>
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	e7e8      	b.n	8002f38 <_malloc_r+0xa0>
 8002f66:	0023      	movs	r3, r4
 8002f68:	6864      	ldr	r4, [r4, #4]
 8002f6a:	e7a7      	b.n	8002ebc <_malloc_r+0x24>
 8002f6c:	002c      	movs	r4, r5
 8002f6e:	686d      	ldr	r5, [r5, #4]
 8002f70:	e7af      	b.n	8002ed2 <_malloc_r+0x3a>
 8002f72:	230c      	movs	r3, #12
 8002f74:	0030      	movs	r0, r6
 8002f76:	6033      	str	r3, [r6, #0]
 8002f78:	f000 f84e 	bl	8003018 <__malloc_unlock>
 8002f7c:	e7cd      	b.n	8002f1a <_malloc_r+0x82>
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	200001a4 	.word	0x200001a4

08002f84 <_realloc_r>:
 8002f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f86:	0007      	movs	r7, r0
 8002f88:	000e      	movs	r6, r1
 8002f8a:	0014      	movs	r4, r2
 8002f8c:	2900      	cmp	r1, #0
 8002f8e:	d105      	bne.n	8002f9c <_realloc_r+0x18>
 8002f90:	0011      	movs	r1, r2
 8002f92:	f7ff ff81 	bl	8002e98 <_malloc_r>
 8002f96:	0005      	movs	r5, r0
 8002f98:	0028      	movs	r0, r5
 8002f9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f9c:	2a00      	cmp	r2, #0
 8002f9e:	d103      	bne.n	8002fa8 <_realloc_r+0x24>
 8002fa0:	f7ff ff0e 	bl	8002dc0 <_free_r>
 8002fa4:	0025      	movs	r5, r4
 8002fa6:	e7f7      	b.n	8002f98 <_realloc_r+0x14>
 8002fa8:	f000 f83e 	bl	8003028 <_malloc_usable_size_r>
 8002fac:	9001      	str	r0, [sp, #4]
 8002fae:	4284      	cmp	r4, r0
 8002fb0:	d803      	bhi.n	8002fba <_realloc_r+0x36>
 8002fb2:	0035      	movs	r5, r6
 8002fb4:	0843      	lsrs	r3, r0, #1
 8002fb6:	42a3      	cmp	r3, r4
 8002fb8:	d3ee      	bcc.n	8002f98 <_realloc_r+0x14>
 8002fba:	0021      	movs	r1, r4
 8002fbc:	0038      	movs	r0, r7
 8002fbe:	f7ff ff6b 	bl	8002e98 <_malloc_r>
 8002fc2:	1e05      	subs	r5, r0, #0
 8002fc4:	d0e8      	beq.n	8002f98 <_realloc_r+0x14>
 8002fc6:	9b01      	ldr	r3, [sp, #4]
 8002fc8:	0022      	movs	r2, r4
 8002fca:	429c      	cmp	r4, r3
 8002fcc:	d900      	bls.n	8002fd0 <_realloc_r+0x4c>
 8002fce:	001a      	movs	r2, r3
 8002fd0:	0031      	movs	r1, r6
 8002fd2:	0028      	movs	r0, r5
 8002fd4:	f7ff fed7 	bl	8002d86 <memcpy>
 8002fd8:	0031      	movs	r1, r6
 8002fda:	0038      	movs	r0, r7
 8002fdc:	f7ff fef0 	bl	8002dc0 <_free_r>
 8002fe0:	e7da      	b.n	8002f98 <_realloc_r+0x14>
	...

08002fe4 <_sbrk_r>:
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	b570      	push	{r4, r5, r6, lr}
 8002fe8:	4d06      	ldr	r5, [pc, #24]	; (8003004 <_sbrk_r+0x20>)
 8002fea:	0004      	movs	r4, r0
 8002fec:	0008      	movs	r0, r1
 8002fee:	602b      	str	r3, [r5, #0]
 8002ff0:	f7fd fd18 	bl	8000a24 <_sbrk>
 8002ff4:	1c43      	adds	r3, r0, #1
 8002ff6:	d103      	bne.n	8003000 <_sbrk_r+0x1c>
 8002ff8:	682b      	ldr	r3, [r5, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d000      	beq.n	8003000 <_sbrk_r+0x1c>
 8002ffe:	6023      	str	r3, [r4, #0]
 8003000:	bd70      	pop	{r4, r5, r6, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	200001ac 	.word	0x200001ac

08003008 <__malloc_lock>:
 8003008:	b510      	push	{r4, lr}
 800300a:	4802      	ldr	r0, [pc, #8]	; (8003014 <__malloc_lock+0xc>)
 800300c:	f000 f814 	bl	8003038 <__retarget_lock_acquire_recursive>
 8003010:	bd10      	pop	{r4, pc}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	200001b0 	.word	0x200001b0

08003018 <__malloc_unlock>:
 8003018:	b510      	push	{r4, lr}
 800301a:	4802      	ldr	r0, [pc, #8]	; (8003024 <__malloc_unlock+0xc>)
 800301c:	f000 f80d 	bl	800303a <__retarget_lock_release_recursive>
 8003020:	bd10      	pop	{r4, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	200001b0 	.word	0x200001b0

08003028 <_malloc_usable_size_r>:
 8003028:	1f0b      	subs	r3, r1, #4
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	1f18      	subs	r0, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	da01      	bge.n	8003036 <_malloc_usable_size_r+0xe>
 8003032:	580b      	ldr	r3, [r1, r0]
 8003034:	18c0      	adds	r0, r0, r3
 8003036:	4770      	bx	lr

08003038 <__retarget_lock_acquire_recursive>:
 8003038:	4770      	bx	lr

0800303a <__retarget_lock_release_recursive>:
 800303a:	4770      	bx	lr

0800303c <_init>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr

08003048 <_fini>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304e:	bc08      	pop	{r3}
 8003050:	469e      	mov	lr, r3
 8003052:	4770      	bx	lr
