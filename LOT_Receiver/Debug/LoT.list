
LoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002fa4  08002fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003028  08003028  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003028  08003028  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003028  08003028  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800302c  0800302c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000070  080030a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080030a0  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088a3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000151a  00000000  00000000  0002893b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00029e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  0002a538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001127b  00000000  00000000  0002aba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e52  00000000  00000000  0003be23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000696ca  00000000  00000000  00044c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ae33f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b28  00000000  00000000  000ae390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f8c 	.word	0x08002f8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002f8c 	.word	0x08002f8c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fc01 	bl	8000a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f83f 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f925 	bl	8000490 <MX_GPIO_Init>
  MX_ADC_Init();
 8000246:	f000 f88b 	bl	8000360 <MX_ADC_Init>
  MX_USART2_UART_Init();
 800024a:	f000 f8f1 	bl	8000430 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t adc = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 800024e:	2390      	movs	r3, #144	; 0x90
 8000250:	05db      	lsls	r3, r3, #23
 8000252:	2120      	movs	r1, #32
 8000254:	0018      	movs	r0, r3
 8000256:	f001 f917 	bl	8001488 <HAL_GPIO_ReadPin>
 800025a:	0003      	movs	r3, r0
 800025c:	607b      	str	r3, [r7, #4]
	  	  // Wait until button is pressed to start listening
	  	  if (listening == 1)
 800025e:	4b17      	ldr	r3, [pc, #92]	; (80002bc <main+0x88>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d1f3      	bne.n	800024e <main+0x1a>
	  	  {
	  		  //read first ADC value
	  		  adc = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 8000266:	2390      	movs	r3, #144	; 0x90
 8000268:	05db      	lsls	r3, r3, #23
 800026a:	2120      	movs	r1, #32
 800026c:	0018      	movs	r0, r3
 800026e:	f001 f90b 	bl	8001488 <HAL_GPIO_ReadPin>
 8000272:	0003      	movs	r3, r0
 8000274:	607b      	str	r3, [r7, #4]

	  		  // Wait for start bit from transmitter
	  		  while(adc<REF)
 8000276:	e007      	b.n	8000288 <main+0x54>
	  		  {
	  			  //update ADC value
	  			  adc = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 8000278:	2390      	movs	r3, #144	; 0x90
 800027a:	05db      	lsls	r3, r3, #23
 800027c:	2120      	movs	r1, #32
 800027e:	0018      	movs	r0, r3
 8000280:	f001 f902 	bl	8001488 <HAL_GPIO_ReadPin>
 8000284:	0003      	movs	r3, r0
 8000286:	607b      	str	r3, [r7, #4]
	  		  while(adc<REF)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0f4      	beq.n	8000278 <main+0x44>
	  		  }

	  		  int cont = 1;
 800028e:	2301      	movs	r3, #1
 8000290:	603b      	str	r3, [r7, #0]
	  		  while(cont)
 8000292:	e00e      	b.n	80002b2 <main+0x7e>
	  		  {
	  			  readSignal();
 8000294:	f000 f9ae 	bl	80005f4 <readSignal>
	  			  HAL_Delay(PERIOD);
 8000298:	23fa      	movs	r3, #250	; 0xfa
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	0018      	movs	r0, r3
 800029e:	f000 fc33 	bl	8000b08 <HAL_Delay>
	  			  cont = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 80002a2:	2390      	movs	r3, #144	; 0x90
 80002a4:	05db      	lsls	r3, r3, #23
 80002a6:	2120      	movs	r1, #32
 80002a8:	0018      	movs	r0, r3
 80002aa:	f001 f8ed 	bl	8001488 <HAL_GPIO_ReadPin>
 80002ae:	0003      	movs	r3, r0
 80002b0:	603b      	str	r3, [r7, #0]
	  		  while(cont)
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d1ed      	bne.n	8000294 <main+0x60>
  {
 80002b8:	e7c9      	b.n	800024e <main+0x1a>
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	20000150 	.word	0x20000150

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b091      	sub	sp, #68	; 0x44
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	2410      	movs	r4, #16
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	0018      	movs	r0, r3
 80002cc:	2330      	movs	r3, #48	; 0x30
 80002ce:	001a      	movs	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	f002 f9e9 	bl	80026a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d6:	003b      	movs	r3, r7
 80002d8:	0018      	movs	r0, r3
 80002da:	2310      	movs	r3, #16
 80002dc:	001a      	movs	r2, r3
 80002de:	2100      	movs	r1, #0
 80002e0:	f002 f9e2 	bl	80026a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002e4:	0021      	movs	r1, r4
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2212      	movs	r2, #18
 80002ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2201      	movs	r2, #1
 80002f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2201      	movs	r2, #1
 80002f6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2210      	movs	r2, #16
 80002fc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2210      	movs	r2, #16
 8000302:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2202      	movs	r2, #2
 8000308:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2200      	movs	r2, #0
 800030e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	22a0      	movs	r2, #160	; 0xa0
 8000314:	0392      	lsls	r2, r2, #14
 8000316:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2200      	movs	r2, #0
 800031c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	187b      	adds	r3, r7, r1
 8000320:	0018      	movs	r0, r3
 8000322:	f001 f92d 	bl	8001580 <HAL_RCC_OscConfig>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800032a:	f000 fa4f 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	003b      	movs	r3, r7
 8000330:	2207      	movs	r2, #7
 8000332:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	003b      	movs	r3, r7
 8000336:	2202      	movs	r2, #2
 8000338:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	003b      	movs	r3, r7
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000340:	003b      	movs	r3, r7
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000346:	003b      	movs	r3, r7
 8000348:	2101      	movs	r1, #1
 800034a:	0018      	movs	r0, r3
 800034c:	f001 fc32 	bl	8001bb4 <HAL_RCC_ClockConfig>
 8000350:	1e03      	subs	r3, r0, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000354:	f000 fa3a 	bl	80007cc <Error_Handler>
  }
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b011      	add	sp, #68	; 0x44
 800035e:	bd90      	pop	{r4, r7, pc}

08000360 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	0018      	movs	r0, r3
 800036a:	230c      	movs	r3, #12
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f002 f99a 	bl	80026a8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000374:	4b2c      	ldr	r3, [pc, #176]	; (8000428 <MX_ADC_Init+0xc8>)
 8000376:	4a2d      	ldr	r2, [pc, #180]	; (800042c <MX_ADC_Init+0xcc>)
 8000378:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800037a:	4b2b      	ldr	r3, [pc, #172]	; (8000428 <MX_ADC_Init+0xc8>)
 800037c:	2200      	movs	r2, #0
 800037e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000380:	4b29      	ldr	r3, [pc, #164]	; (8000428 <MX_ADC_Init+0xc8>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000386:	4b28      	ldr	r3, [pc, #160]	; (8000428 <MX_ADC_Init+0xc8>)
 8000388:	2200      	movs	r2, #0
 800038a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800038c:	4b26      	ldr	r3, [pc, #152]	; (8000428 <MX_ADC_Init+0xc8>)
 800038e:	2201      	movs	r2, #1
 8000390:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000392:	4b25      	ldr	r3, [pc, #148]	; (8000428 <MX_ADC_Init+0xc8>)
 8000394:	2204      	movs	r2, #4
 8000396:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000398:	4b23      	ldr	r3, [pc, #140]	; (8000428 <MX_ADC_Init+0xc8>)
 800039a:	2200      	movs	r2, #0
 800039c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800039e:	4b22      	ldr	r3, [pc, #136]	; (8000428 <MX_ADC_Init+0xc8>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003a4:	4b20      	ldr	r3, [pc, #128]	; (8000428 <MX_ADC_Init+0xc8>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003aa:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <MX_ADC_Init+0xc8>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b0:	4b1d      	ldr	r3, [pc, #116]	; (8000428 <MX_ADC_Init+0xc8>)
 80003b2:	22c2      	movs	r2, #194	; 0xc2
 80003b4:	32ff      	adds	r2, #255	; 0xff
 80003b6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003b8:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <MX_ADC_Init+0xc8>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003be:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <MX_ADC_Init+0xc8>)
 80003c0:	2224      	movs	r2, #36	; 0x24
 80003c2:	2100      	movs	r1, #0
 80003c4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003c6:	4b18      	ldr	r3, [pc, #96]	; (8000428 <MX_ADC_Init+0xc8>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003cc:	4b16      	ldr	r3, [pc, #88]	; (8000428 <MX_ADC_Init+0xc8>)
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 fbbe 	bl	8000b50 <HAL_ADC_Init>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003d8:	f000 f9f8 	bl	80007cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2201      	movs	r2, #1
 80003e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2280      	movs	r2, #128	; 0x80
 80003e6:	0152      	lsls	r2, r2, #5
 80003e8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2280      	movs	r2, #128	; 0x80
 80003ee:	0552      	lsls	r2, r2, #21
 80003f0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003f2:	1d3a      	adds	r2, r7, #4
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_ADC_Init+0xc8>)
 80003f6:	0011      	movs	r1, r2
 80003f8:	0018      	movs	r0, r3
 80003fa:	f000 fce9 	bl	8000dd0 <HAL_ADC_ConfigChannel>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000402:	f000 f9e3 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  ADC1->CR|=ADC_CR_ADEN;
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_ADC_Init+0xcc>)
 8000408:	689a      	ldr	r2, [r3, #8]
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_ADC_Init+0xcc>)
 800040c:	2101      	movs	r1, #1
 800040e:	430a      	orrs	r2, r1
 8000410:	609a      	str	r2, [r3, #8]

  // Wait for ISR to be set
  while((ADC1->ISR & ADC_ISR_ADRDY)==0);
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <MX_ADC_Init+0xcc>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2201      	movs	r2, #1
 800041a:	4013      	ands	r3, r2
 800041c:	d0fa      	beq.n	8000414 <MX_ADC_Init+0xb4>
  /* USER CODE END ADC_Init 2 */

}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b004      	add	sp, #16
 8000426:	bd80      	pop	{r7, pc}
 8000428:	2000008c 	.word	0x2000008c
 800042c:	40012400 	.word	0x40012400

08000430 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000434:	4b14      	ldr	r3, [pc, #80]	; (8000488 <MX_USART2_UART_Init+0x58>)
 8000436:	4a15      	ldr	r2, [pc, #84]	; (800048c <MX_USART2_UART_Init+0x5c>)
 8000438:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800043a:	4b13      	ldr	r3, [pc, #76]	; (8000488 <MX_USART2_UART_Init+0x58>)
 800043c:	2296      	movs	r2, #150	; 0x96
 800043e:	0192      	lsls	r2, r2, #6
 8000440:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000442:	4b11      	ldr	r3, [pc, #68]	; (8000488 <MX_USART2_UART_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <MX_USART2_UART_Init+0x58>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <MX_USART2_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <MX_USART2_UART_Init+0x58>)
 8000456:	220c      	movs	r2, #12
 8000458:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045a:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <MX_USART2_UART_Init+0x58>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000460:	4b09      	ldr	r3, [pc, #36]	; (8000488 <MX_USART2_UART_Init+0x58>)
 8000462:	2200      	movs	r2, #0
 8000464:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000466:	4b08      	ldr	r3, [pc, #32]	; (8000488 <MX_USART2_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <MX_USART2_UART_Init+0x58>)
 800046e:	2200      	movs	r2, #0
 8000470:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000472:	4b05      	ldr	r3, [pc, #20]	; (8000488 <MX_USART2_UART_Init+0x58>)
 8000474:	0018      	movs	r0, r3
 8000476:	f001 fcef 	bl	8001e58 <HAL_UART_Init>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800047e:	f000 f9a5 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200000cc 	.word	0x200000cc
 800048c:	40004400 	.word	0x40004400

08000490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000490:	b590      	push	{r4, r7, lr}
 8000492:	b089      	sub	sp, #36	; 0x24
 8000494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	240c      	movs	r4, #12
 8000498:	193b      	adds	r3, r7, r4
 800049a:	0018      	movs	r0, r3
 800049c:	2314      	movs	r3, #20
 800049e:	001a      	movs	r2, r3
 80004a0:	2100      	movs	r1, #0
 80004a2:	f002 f901 	bl	80026a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b32      	ldr	r3, [pc, #200]	; (8000570 <MX_GPIO_Init+0xe0>)
 80004a8:	695a      	ldr	r2, [r3, #20]
 80004aa:	4b31      	ldr	r3, [pc, #196]	; (8000570 <MX_GPIO_Init+0xe0>)
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	0289      	lsls	r1, r1, #10
 80004b0:	430a      	orrs	r2, r1
 80004b2:	615a      	str	r2, [r3, #20]
 80004b4:	4b2e      	ldr	r3, [pc, #184]	; (8000570 <MX_GPIO_Init+0xe0>)
 80004b6:	695a      	ldr	r2, [r3, #20]
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	029b      	lsls	r3, r3, #10
 80004bc:	4013      	ands	r3, r2
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4b2b      	ldr	r3, [pc, #172]	; (8000570 <MX_GPIO_Init+0xe0>)
 80004c4:	695a      	ldr	r2, [r3, #20]
 80004c6:	4b2a      	ldr	r3, [pc, #168]	; (8000570 <MX_GPIO_Init+0xe0>)
 80004c8:	2180      	movs	r1, #128	; 0x80
 80004ca:	0309      	lsls	r1, r1, #12
 80004cc:	430a      	orrs	r2, r1
 80004ce:	615a      	str	r2, [r3, #20]
 80004d0:	4b27      	ldr	r3, [pc, #156]	; (8000570 <MX_GPIO_Init+0xe0>)
 80004d2:	695a      	ldr	r2, [r3, #20]
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	031b      	lsls	r3, r3, #12
 80004d8:	4013      	ands	r3, r2
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80004de:	23c0      	movs	r3, #192	; 0xc0
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	4824      	ldr	r0, [pc, #144]	; (8000574 <MX_GPIO_Init+0xe4>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	0019      	movs	r1, r3
 80004e8:	f000 ffeb 	bl	80014c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	2201      	movs	r2, #1
 80004f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	2288      	movs	r2, #136	; 0x88
 80004f6:	0352      	lsls	r2, r2, #13
 80004f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000500:	193a      	adds	r2, r7, r4
 8000502:	2390      	movs	r3, #144	; 0x90
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	0011      	movs	r1, r2
 8000508:	0018      	movs	r0, r3
 800050a:	f000 fe4d 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Signal_in_Pin */
  GPIO_InitStruct.Pin = Signal_in_Pin;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2220      	movs	r2, #32
 8000512:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2200      	movs	r2, #0
 8000518:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2202      	movs	r2, #2
 800051e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Signal_in_GPIO_Port, &GPIO_InitStruct);
 8000520:	193a      	adds	r2, r7, r4
 8000522:	2390      	movs	r3, #144	; 0x90
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f000 fe3d 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800052e:	0021      	movs	r1, r4
 8000530:	187b      	adds	r3, r7, r1
 8000532:	22c0      	movs	r2, #192	; 0xc0
 8000534:	0092      	lsls	r2, r2, #2
 8000536:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2201      	movs	r2, #1
 800053c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054a:	187b      	adds	r3, r7, r1
 800054c:	4a09      	ldr	r2, [pc, #36]	; (8000574 <MX_GPIO_Init+0xe4>)
 800054e:	0019      	movs	r1, r3
 8000550:	0010      	movs	r0, r2
 8000552:	f000 fe29 	bl	80011a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	2005      	movs	r0, #5
 800055c:	f000 fdf2 	bl	8001144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000560:	2005      	movs	r0, #5
 8000562:	f000 fe04 	bl	800116e <HAL_NVIC_EnableIRQ>

}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b009      	add	sp, #36	; 0x24
 800056c:	bd90      	pop	{r4, r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	40021000 	.word	0x40021000
 8000574:	48000800 	.word	0x48000800

08000578 <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI0_1_IRQHandler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	if (B1_Pin)
		{
			if (listening == 0)
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <EXTI0_1_IRQHandler+0x20>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d102      	bne.n	800058a <EXTI0_1_IRQHandler+0x12>
			{
				listening = 1;
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <EXTI0_1_IRQHandler+0x20>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
			}
		}
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800058a:	2001      	movs	r0, #1
 800058c:	f000 ffd2 	bl	8001534 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	20000150 	.word	0x20000150

0800059c <arrayToData>:
	ADC1->CR &= ~ADC_CR_ADSTART;
	return val;
}

uint8_t arrayToData(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
	// convert binary array to one byte
	uint8_t output = 0;
 80005a2:	1dfb      	adds	r3, r7, #7
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 80005a8:	2300      	movs	r3, #0
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	e010      	b.n	80005d0 <arrayToData+0x34>
	{
		output = output + ((data[i])<<i);
 80005ae:	4a10      	ldr	r2, [pc, #64]	; (80005f0 <arrayToData+0x54>)
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	18d3      	adds	r3, r2, r3
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	001a      	movs	r2, r3
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	409a      	lsls	r2, r3
 80005bc:	0013      	movs	r3, r2
 80005be:	b2d9      	uxtb	r1, r3
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	1dfa      	adds	r2, r7, #7
 80005c4:	7812      	ldrb	r2, [r2, #0]
 80005c6:	188a      	adds	r2, r1, r2
 80005c8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	2b07      	cmp	r3, #7
 80005d4:	ddeb      	ble.n	80005ae <arrayToData+0x12>
	}
	//reset data to 0
	memset(data, 0, sizeof data);
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <arrayToData+0x54>)
 80005d8:	2208      	movs	r2, #8
 80005da:	2100      	movs	r1, #0
 80005dc:	0018      	movs	r0, r3
 80005de:	f002 f863 	bl	80026a8 <memset>
	return output;
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	781b      	ldrb	r3, [r3, #0]
}
 80005e6:	0018      	movs	r0, r3
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b002      	add	sp, #8
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	20000154 	.word	0x20000154

080005f4 <readSignal>:

void readSignal(void)
{
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
	//add an initial delay
	  HAL_Delay(PERIOD);
 80005fa:	23fa      	movs	r3, #250	; 0xfa
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 fa82 	bl	8000b08 <HAL_Delay>
	  uint32_t adc = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 8000604:	2390      	movs	r3, #144	; 0x90
 8000606:	05db      	lsls	r3, r3, #23
 8000608:	2120      	movs	r1, #32
 800060a:	0018      	movs	r0, r3
 800060c:	f000 ff3c 	bl	8001488 <HAL_GPIO_ReadPin>
 8000610:	0003      	movs	r3, r0
 8000612:	607b      	str	r3, [r7, #4]
	  //check mode of operation
	  if (adc < REF) //save data mode
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d159      	bne.n	80006ce <readSignal+0xda>
	  {
		// Once start bit has been received, store the next 8 bits of data in the data array
		  for (int i = 7; i >= 0; i--)
 800061a:	2307      	movs	r3, #7
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	e02a      	b.n	8000676 <readSignal+0x82>
		  {
			  HAL_Delay(PERIOD);
 8000620:	23fa      	movs	r3, #250	; 0xfa
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	0018      	movs	r0, r3
 8000626:	f000 fa6f 	bl	8000b08 <HAL_Delay>
			  //read adc value
			  adc = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 800062a:	2390      	movs	r3, #144	; 0x90
 800062c:	05db      	lsls	r3, r3, #23
 800062e:	2120      	movs	r1, #32
 8000630:	0018      	movs	r0, r3
 8000632:	f000 ff29 	bl	8001488 <HAL_GPIO_ReadPin>
 8000636:	0003      	movs	r3, r0
 8000638:	607b      	str	r3, [r7, #4]
			sprintf(ADC_print, "ADC: %d\r\n\r\n",adc);
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	4959      	ldr	r1, [pc, #356]	; (80007a4 <readSignal+0x1b0>)
 800063e:	4b5a      	ldr	r3, [pc, #360]	; (80007a8 <readSignal+0x1b4>)
 8000640:	0018      	movs	r0, r3
 8000642:	f002 f839 	bl	80026b8 <siprintf>
			  HAL_UART_Transmit(&huart2, ADC_print, sizeof(ADC_print), 1000);
 8000646:	23fa      	movs	r3, #250	; 0xfa
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4957      	ldr	r1, [pc, #348]	; (80007a8 <readSignal+0x1b4>)
 800064c:	4857      	ldr	r0, [pc, #348]	; (80007ac <readSignal+0x1b8>)
 800064e:	2219      	movs	r2, #25
 8000650:	f001 fc56 	bl	8001f00 <HAL_UART_Transmit>
			  if (adc < REF)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d105      	bne.n	8000666 <readSignal+0x72>
			  {
				  data[i] = 0;
 800065a:	4a55      	ldr	r2, [pc, #340]	; (80007b0 <readSignal+0x1bc>)
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	18d3      	adds	r3, r2, r3
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
 8000664:	e004      	b.n	8000670 <readSignal+0x7c>
			  }
			  else
			  {
				  data[i] = 1;
 8000666:	4a52      	ldr	r2, [pc, #328]	; (80007b0 <readSignal+0x1bc>)
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	18d3      	adds	r3, r2, r3
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
		  for (int i = 7; i >= 0; i--)
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	3b01      	subs	r3, #1
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	2b00      	cmp	r3, #0
 800067a:	dad1      	bge.n	8000620 <readSignal+0x2c>
			  }
		  }

		  // Convert data into single 8 bit int and store in allSamples array
		  allSamples[samples] = arrayToData();
 800067c:	4b4d      	ldr	r3, [pc, #308]	; (80007b4 <readSignal+0x1c0>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	001c      	movs	r4, r3
 8000682:	f7ff ff8b 	bl	800059c <arrayToData>
 8000686:	0003      	movs	r3, r0
 8000688:	001a      	movs	r2, r3
 800068a:	4b4b      	ldr	r3, [pc, #300]	; (80007b8 <readSignal+0x1c4>)
 800068c:	551a      	strb	r2, [r3, r4]

		  // Increase sample counter
		  samples++;
 800068e:	4b49      	ldr	r3, [pc, #292]	; (80007b4 <readSignal+0x1c0>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b47      	ldr	r3, [pc, #284]	; (80007b4 <readSignal+0x1c0>)
 8000698:	701a      	strb	r2, [r3, #0]

		  // Stop listening
		  listening = 0;
 800069a:	4b48      	ldr	r3, [pc, #288]	; (80007bc <readSignal+0x1c8>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
		  sprintf(ADC_print, "Val: %d\r\n\r\n",allSamples[samples-1]);
 80006a0:	4b44      	ldr	r3, [pc, #272]	; (80007b4 <readSignal+0x1c0>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	4a44      	ldr	r2, [pc, #272]	; (80007b8 <readSignal+0x1c4>)
 80006a8:	5cd3      	ldrb	r3, [r2, r3]
 80006aa:	001a      	movs	r2, r3
 80006ac:	4944      	ldr	r1, [pc, #272]	; (80007c0 <readSignal+0x1cc>)
 80006ae:	4b3e      	ldr	r3, [pc, #248]	; (80007a8 <readSignal+0x1b4>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f002 f801 	bl	80026b8 <siprintf>
		  HAL_UART_Transmit(&huart2, ADC_print, sizeof(ADC_print), 1000);
 80006b6:	23fa      	movs	r3, #250	; 0xfa
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	493b      	ldr	r1, [pc, #236]	; (80007a8 <readSignal+0x1b4>)
 80006bc:	483b      	ldr	r0, [pc, #236]	; (80007ac <readSignal+0x1b8>)
 80006be:	2219      	movs	r2, #25
 80006c0:	f001 fc1e 	bl	8001f00 <HAL_UART_Transmit>
		  HAL_Delay(5000);
 80006c4:	4b3f      	ldr	r3, [pc, #252]	; (80007c4 <readSignal+0x1d0>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 fa1e 	bl	8000b08 <HAL_Delay>
			  HAL_Delay(500);
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8); //toggle green pin
			  samples = transmit_samples;
		  }
	  }
}
 80006cc:	e066      	b.n	800079c <readSignal+0x1a8>
		  for(int i = 7; i >= 0; i--)
 80006ce:	2307      	movs	r3, #7
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	e02a      	b.n	800072a <readSignal+0x136>
			  HAL_Delay(PERIOD);
 80006d4:	23fa      	movs	r3, #250	; 0xfa
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 fa15 	bl	8000b08 <HAL_Delay>
			  adc = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 80006de:	2390      	movs	r3, #144	; 0x90
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	2120      	movs	r1, #32
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fecf 	bl	8001488 <HAL_GPIO_ReadPin>
 80006ea:	0003      	movs	r3, r0
 80006ec:	607b      	str	r3, [r7, #4]
			sprintf(ADC_print, "ADC: %d\r\n\r\n",adc);
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	492c      	ldr	r1, [pc, #176]	; (80007a4 <readSignal+0x1b0>)
 80006f2:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <readSignal+0x1b4>)
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 ffdf 	bl	80026b8 <siprintf>
			  HAL_UART_Transmit(&huart2, ADC_print, sizeof(ADC_print), 1000);
 80006fa:	23fa      	movs	r3, #250	; 0xfa
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	492a      	ldr	r1, [pc, #168]	; (80007a8 <readSignal+0x1b4>)
 8000700:	482a      	ldr	r0, [pc, #168]	; (80007ac <readSignal+0x1b8>)
 8000702:	2219      	movs	r2, #25
 8000704:	f001 fbfc 	bl	8001f00 <HAL_UART_Transmit>
			  if (adc < REF)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d105      	bne.n	800071a <readSignal+0x126>
				  data[i] = 0;
 800070e:	4a28      	ldr	r2, [pc, #160]	; (80007b0 <readSignal+0x1bc>)
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	18d3      	adds	r3, r2, r3
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	e004      	b.n	8000724 <readSignal+0x130>
				  data[i] = 1;
 800071a:	4a25      	ldr	r2, [pc, #148]	; (80007b0 <readSignal+0x1bc>)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	18d3      	adds	r3, r2, r3
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
		  for(int i = 7; i >= 0; i--)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	3b01      	subs	r3, #1
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	2b00      	cmp	r3, #0
 800072e:	dad1      	bge.n	80006d4 <readSignal+0xe0>
		  uint8_t transmit_samples = arrayToData();
 8000730:	1cfc      	adds	r4, r7, #3
 8000732:	f7ff ff33 	bl	800059c <arrayToData>
 8000736:	0003      	movs	r3, r0
 8000738:	7023      	strb	r3, [r4, #0]
		  if (transmit_samples == samples)
 800073a:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <readSignal+0x1c0>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	1cfa      	adds	r2, r7, #3
 8000740:	7812      	ldrb	r2, [r2, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d113      	bne.n	800076e <readSignal+0x17a>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9); //toggle blue pin
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4a1f      	ldr	r2, [pc, #124]	; (80007c8 <readSignal+0x1d4>)
 800074c:	0019      	movs	r1, r3
 800074e:	0010      	movs	r0, r2
 8000750:	f000 fed4 	bl	80014fc <HAL_GPIO_TogglePin>
			  HAL_Delay(500);
 8000754:	23fa      	movs	r3, #250	; 0xfa
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	0018      	movs	r0, r3
 800075a:	f000 f9d5 	bl	8000b08 <HAL_Delay>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9); //toggle blue pin
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4a19      	ldr	r2, [pc, #100]	; (80007c8 <readSignal+0x1d4>)
 8000764:	0019      	movs	r1, r3
 8000766:	0010      	movs	r0, r2
 8000768:	f000 fec8 	bl	80014fc <HAL_GPIO_TogglePin>
}
 800076c:	e016      	b.n	800079c <readSignal+0x1a8>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8); //toggle green pin
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <readSignal+0x1d4>)
 8000774:	0019      	movs	r1, r3
 8000776:	0010      	movs	r0, r2
 8000778:	f000 fec0 	bl	80014fc <HAL_GPIO_TogglePin>
			  HAL_Delay(500);
 800077c:	23fa      	movs	r3, #250	; 0xfa
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	0018      	movs	r0, r3
 8000782:	f000 f9c1 	bl	8000b08 <HAL_Delay>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8); //toggle green pin
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <readSignal+0x1d4>)
 800078c:	0019      	movs	r1, r3
 800078e:	0010      	movs	r0, r2
 8000790:	f000 feb4 	bl	80014fc <HAL_GPIO_TogglePin>
			  samples = transmit_samples;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <readSignal+0x1c0>)
 8000796:	1cfa      	adds	r2, r7, #3
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	701a      	strb	r2, [r3, #0]
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b005      	add	sp, #20
 80007a2:	bd90      	pop	{r4, r7, pc}
 80007a4:	08002fa4 	.word	0x08002fa4
 80007a8:	20000174 	.word	0x20000174
 80007ac:	200000cc 	.word	0x200000cc
 80007b0:	20000154 	.word	0x20000154
 80007b4:	2000015c 	.word	0x2000015c
 80007b8:	20000160 	.word	0x20000160
 80007bc:	20000150 	.word	0x20000150
 80007c0:	08002fb0 	.word	0x08002fb0
 80007c4:	00001388 	.word	0x00001388
 80007c8:	48000800 	.word	0x48000800

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_MspInit+0x44>)
 80007e0:	699a      	ldr	r2, [r3, #24]
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_MspInit+0x44>)
 80007e4:	2101      	movs	r1, #1
 80007e6:	430a      	orrs	r2, r1
 80007e8:	619a      	str	r2, [r3, #24]
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <HAL_MspInit+0x44>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4013      	ands	r3, r2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_MspInit+0x44>)
 80007f8:	69da      	ldr	r2, [r3, #28]
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_MspInit+0x44>)
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0549      	lsls	r1, r1, #21
 8000800:	430a      	orrs	r2, r1
 8000802:	61da      	str	r2, [r3, #28]
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_MspInit+0x44>)
 8000806:	69da      	ldr	r2, [r3, #28]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	055b      	lsls	r3, r3, #21
 800080c:	4013      	ands	r3, r2
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b08b      	sub	sp, #44	; 0x2c
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	2414      	movs	r4, #20
 800082a:	193b      	adds	r3, r7, r4
 800082c:	0018      	movs	r0, r3
 800082e:	2314      	movs	r3, #20
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f001 ff38 	bl	80026a8 <memset>
  if(hadc->Instance==ADC1)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <HAL_ADC_MspInit+0x84>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d12b      	bne.n	800089a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <HAL_ADC_MspInit+0x88>)
 8000844:	699a      	ldr	r2, [r3, #24]
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <HAL_ADC_MspInit+0x88>)
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	0089      	lsls	r1, r1, #2
 800084c:	430a      	orrs	r2, r1
 800084e:	619a      	str	r2, [r3, #24]
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <HAL_ADC_MspInit+0x88>)
 8000852:	699a      	ldr	r2, [r3, #24]
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_ADC_MspInit+0x88>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_ADC_MspInit+0x88>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	0289      	lsls	r1, r1, #10
 8000868:	430a      	orrs	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_ADC_MspInit+0x88>)
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	029b      	lsls	r3, r3, #10
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	2202      	movs	r2, #2
 800087e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2203      	movs	r2, #3
 8000884:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	193a      	adds	r2, r7, r4
 800088e:	2390      	movs	r3, #144	; 0x90
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f000 fc87 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b00b      	add	sp, #44	; 0x2c
 80008a0:	bd90      	pop	{r4, r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	40012400 	.word	0x40012400
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b08b      	sub	sp, #44	; 0x2c
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	2414      	movs	r4, #20
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	0018      	movs	r0, r3
 80008ba:	2314      	movs	r3, #20
 80008bc:	001a      	movs	r2, r3
 80008be:	2100      	movs	r1, #0
 80008c0:	f001 fef2 	bl	80026a8 <memset>
  if(huart->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a1c      	ldr	r2, [pc, #112]	; (800093c <HAL_UART_MspInit+0x90>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d132      	bne.n	8000934 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <HAL_UART_MspInit+0x94>)
 80008d0:	69da      	ldr	r2, [r3, #28]
 80008d2:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <HAL_UART_MspInit+0x94>)
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	0289      	lsls	r1, r1, #10
 80008d8:	430a      	orrs	r2, r1
 80008da:	61da      	str	r2, [r3, #28]
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_UART_MspInit+0x94>)
 80008de:	69da      	ldr	r2, [r3, #28]
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	029b      	lsls	r3, r3, #10
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_UART_MspInit+0x94>)
 80008ec:	695a      	ldr	r2, [r3, #20]
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_UART_MspInit+0x94>)
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	0289      	lsls	r1, r1, #10
 80008f4:	430a      	orrs	r2, r1
 80008f6:	615a      	str	r2, [r3, #20]
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_UART_MspInit+0x94>)
 80008fa:	695a      	ldr	r2, [r3, #20]
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	029b      	lsls	r3, r3, #10
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000906:	0021      	movs	r1, r4
 8000908:	187b      	adds	r3, r7, r1
 800090a:	220c      	movs	r2, #12
 800090c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2202      	movs	r2, #2
 8000912:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2203      	movs	r2, #3
 800091e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2201      	movs	r2, #1
 8000924:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	187a      	adds	r2, r7, r1
 8000928:	2390      	movs	r3, #144	; 0x90
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	0011      	movs	r1, r2
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fc3a 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b00b      	add	sp, #44	; 0x2c
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	40004400 	.word	0x40004400
 8000940:	40021000 	.word	0x40021000

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f8b2 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <_sbrk+0x5c>)
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <_sbrk+0x60>)
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <_sbrk+0x64>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <_sbrk+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	18d3      	adds	r3, r2, r3
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d207      	bcs.n	80009b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a4:	f001 fe56 	bl	8002654 <__errno>
 80009a8:	0003      	movs	r3, r0
 80009aa:	220c      	movs	r2, #12
 80009ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	425b      	negs	r3, r3
 80009b2:	e009      	b.n	80009c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	18d2      	adds	r2, r2, r3
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <_sbrk+0x64>)
 80009c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009c6:	68fb      	ldr	r3, [r7, #12]
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b006      	add	sp, #24
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20002000 	.word	0x20002000
 80009d4:	00000400 	.word	0x00000400
 80009d8:	20000190 	.word	0x20000190
 80009dc:	200001a8 	.word	0x200001a8

080009e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f2:	490e      	ldr	r1, [pc, #56]	; (8000a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f4:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <LoopForever+0xe>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a08:	4c0b      	ldr	r4, [pc, #44]	; (8000a38 <LoopForever+0x16>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a16:	f7ff ffe3 	bl	80009e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a1a:	f001 fe21 	bl	8002660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1e:	f7ff fc09 	bl	8000234 <main>

08000a22 <LoopForever>:

LoopForever:
    b LoopForever
 8000a22:	e7fe      	b.n	8000a22 <LoopForever>
  ldr   r0, =_estack
 8000a24:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a30:	08003030 	.word	0x08003030
  ldr r2, =_sbss
 8000a34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a38:	200001a8 	.word	0x200001a8

08000a3c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC1_COMP_IRQHandler>
	...

08000a40 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <HAL_Init+0x24>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_Init+0x24>)
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 f809 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a56:	f7ff febf 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40022000 	.word	0x40022000

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <HAL_InitTick+0x5c>)
 8000a72:	681c      	ldr	r4, [r3, #0]
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <HAL_InitTick+0x60>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	0019      	movs	r1, r3
 8000a7a:	23fa      	movs	r3, #250	; 0xfa
 8000a7c:	0098      	lsls	r0, r3, #2
 8000a7e:	f7ff fb4d 	bl	800011c <__udivsi3>
 8000a82:	0003      	movs	r3, r0
 8000a84:	0019      	movs	r1, r3
 8000a86:	0020      	movs	r0, r4
 8000a88:	f7ff fb48 	bl	800011c <__udivsi3>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 fb7d 	bl	800118e <HAL_SYSTICK_Config>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e00f      	b.n	8000abc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d80b      	bhi.n	8000aba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	425b      	negs	r3, r3
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 fb4a 	bl	8001144 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_InitTick+0x64>)
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b003      	add	sp, #12
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_IncTick+0x1c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	001a      	movs	r2, r3
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_IncTick+0x20>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	18d2      	adds	r2, r2, r3
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_IncTick+0x20>)
 8000ae2:	601a      	str	r2, [r3, #0]
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000194 	.word	0x20000194

08000af4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;
 8000af8:	4b02      	ldr	r3, [pc, #8]	; (8000b04 <HAL_GetTick+0x10>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	0018      	movs	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	20000194 	.word	0x20000194

08000b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b10:	f7ff fff0 	bl	8000af4 <HAL_GetTick>
 8000b14:	0003      	movs	r3, r0
 8000b16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	d005      	beq.n	8000b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_Delay+0x44>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	001a      	movs	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	189b      	adds	r3, r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	f7ff ffe0 	bl	8000af4 <HAL_GetTick>
 8000b34:	0002      	movs	r2, r0
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d8f7      	bhi.n	8000b30 <HAL_Delay+0x28>
  {
  }
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b004      	add	sp, #16
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	20000008 	.word	0x20000008

08000b50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b58:	230f      	movs	r3, #15
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e125      	b.n	8000dba <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d10a      	bne.n	8000b8c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2234      	movs	r2, #52	; 0x34
 8000b80:	2100      	movs	r1, #0
 8000b82:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	0018      	movs	r0, r3
 8000b88:	f7ff fe4a 	bl	8000820 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b90:	2210      	movs	r2, #16
 8000b92:	4013      	ands	r3, r2
 8000b94:	d000      	beq.n	8000b98 <HAL_ADC_Init+0x48>
 8000b96:	e103      	b.n	8000da0 <HAL_ADC_Init+0x250>
 8000b98:	230f      	movs	r3, #15
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d000      	beq.n	8000ba4 <HAL_ADC_Init+0x54>
 8000ba2:	e0fd      	b.n	8000da0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	2204      	movs	r2, #4
 8000bac:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000bae:	d000      	beq.n	8000bb2 <HAL_ADC_Init+0x62>
 8000bb0:	e0f6      	b.n	8000da0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb6:	4a83      	ldr	r2, [pc, #524]	; (8000dc4 <HAL_ADC_Init+0x274>)
 8000bb8:	4013      	ands	r3, r2
 8000bba:	2202      	movs	r2, #2
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	2203      	movs	r2, #3
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d112      	bne.n	8000bf6 <HAL_ADC_Init+0xa6>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4013      	ands	r3, r2
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d009      	beq.n	8000bf2 <HAL_ADC_Init+0xa2>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	401a      	ands	r2, r3
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d101      	bne.n	8000bf6 <HAL_ADC_Init+0xa6>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e000      	b.n	8000bf8 <HAL_ADC_Init+0xa8>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d116      	bne.n	8000c2a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	2218      	movs	r2, #24
 8000c04:	4393      	bics	r3, r2
 8000c06:	0019      	movs	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	430a      	orrs	r2, r1
 8000c12:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	0899      	lsrs	r1, r3, #2
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	430a      	orrs	r2, r1
 8000c28:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4964      	ldr	r1, [pc, #400]	; (8000dc8 <HAL_ADC_Init+0x278>)
 8000c36:	400a      	ands	r2, r1
 8000c38:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7e1b      	ldrb	r3, [r3, #24]
 8000c3e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7e5b      	ldrb	r3, [r3, #25]
 8000c44:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c46:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7e9b      	ldrb	r3, [r3, #26]
 8000c4c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c4e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d002      	beq.n	8000c5e <HAL_ADC_Init+0x10e>
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	015b      	lsls	r3, r3, #5
 8000c5c:	e000      	b.n	8000c60 <HAL_ADC_Init+0x110>
 8000c5e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c60:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c66:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d101      	bne.n	8000c74 <HAL_ADC_Init+0x124>
 8000c70:	2304      	movs	r3, #4
 8000c72:	e000      	b.n	8000c76 <HAL_ADC_Init+0x126>
 8000c74:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000c76:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2124      	movs	r1, #36	; 0x24
 8000c7c:	5c5b      	ldrb	r3, [r3, r1]
 8000c7e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c80:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7edb      	ldrb	r3, [r3, #27]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d115      	bne.n	8000cbc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7e9b      	ldrb	r3, [r3, #26]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d105      	bne.n	8000ca4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	2280      	movs	r2, #128	; 0x80
 8000c9c:	0252      	lsls	r2, r2, #9
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	e00b      	b.n	8000cbc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca8:	2220      	movs	r2, #32
 8000caa:	431a      	orrs	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69da      	ldr	r2, [r3, #28]
 8000cc0:	23c2      	movs	r3, #194	; 0xc2
 8000cc2:	33ff      	adds	r3, #255	; 0xff
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d007      	beq.n	8000cd8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	68d9      	ldr	r1, [r3, #12]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	055b      	lsls	r3, r3, #21
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d01b      	beq.n	8000d2c <HAL_ADC_Init+0x1dc>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d017      	beq.n	8000d2c <HAL_ADC_Init+0x1dc>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d013      	beq.n	8000d2c <HAL_ADC_Init+0x1dc>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d00f      	beq.n	8000d2c <HAL_ADC_Init+0x1dc>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d00b      	beq.n	8000d2c <HAL_ADC_Init+0x1dc>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d18:	2b05      	cmp	r3, #5
 8000d1a:	d007      	beq.n	8000d2c <HAL_ADC_Init+0x1dc>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d20:	2b06      	cmp	r3, #6
 8000d22:	d003      	beq.n	8000d2c <HAL_ADC_Init+0x1dc>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d28:	2b07      	cmp	r3, #7
 8000d2a:	d112      	bne.n	8000d52 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	695a      	ldr	r2, [r3, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2107      	movs	r1, #7
 8000d38:	438a      	bics	r2, r1
 8000d3a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6959      	ldr	r1, [r3, #20]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d46:	2207      	movs	r2, #7
 8000d48:	401a      	ands	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <HAL_ADC_Init+0x27c>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d10b      	bne.n	8000d7a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	4393      	bics	r3, r2
 8000d70:	2201      	movs	r2, #1
 8000d72:	431a      	orrs	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d78:	e01c      	b.n	8000db4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d7e:	2212      	movs	r2, #18
 8000d80:	4393      	bics	r3, r2
 8000d82:	2210      	movs	r2, #16
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d8e:	2201      	movs	r2, #1
 8000d90:	431a      	orrs	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000d96:	230f      	movs	r3, #15
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d9e:	e009      	b.n	8000db4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da4:	2210      	movs	r2, #16
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000dac:	230f      	movs	r3, #15
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000db4:	230f      	movs	r3, #15
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	781b      	ldrb	r3, [r3, #0]
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b004      	add	sp, #16
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	fffffefd 	.word	0xfffffefd
 8000dc8:	fffe0219 	.word	0xfffe0219
 8000dcc:	833fffe7 	.word	0x833fffe7

08000dd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dda:	230f      	movs	r3, #15
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	055b      	lsls	r3, r3, #21
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d011      	beq.n	8000e16 <HAL_ADC_ConfigChannel+0x46>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d00d      	beq.n	8000e16 <HAL_ADC_ConfigChannel+0x46>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d009      	beq.n	8000e16 <HAL_ADC_ConfigChannel+0x46>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d005      	beq.n	8000e16 <HAL_ADC_ConfigChannel+0x46>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d001      	beq.n	8000e16 <HAL_ADC_ConfigChannel+0x46>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2234      	movs	r2, #52	; 0x34
 8000e1a:	5c9b      	ldrb	r3, [r3, r2]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d101      	bne.n	8000e24 <HAL_ADC_ConfigChannel+0x54>
 8000e20:	2302      	movs	r3, #2
 8000e22:	e0d0      	b.n	8000fc6 <HAL_ADC_ConfigChannel+0x1f6>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2234      	movs	r2, #52	; 0x34
 8000e28:	2101      	movs	r1, #1
 8000e2a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2204      	movs	r2, #4
 8000e34:	4013      	ands	r3, r2
 8000e36:	d000      	beq.n	8000e3a <HAL_ADC_ConfigChannel+0x6a>
 8000e38:	e0b4      	b.n	8000fa4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	4a64      	ldr	r2, [pc, #400]	; (8000fd0 <HAL_ADC_ConfigChannel+0x200>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d100      	bne.n	8000e46 <HAL_ADC_ConfigChannel+0x76>
 8000e44:	e082      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2201      	movs	r2, #1
 8000e52:	409a      	lsls	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	055b      	lsls	r3, r3, #21
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d037      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d033      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d02f      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d02b      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d027      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8c:	2b05      	cmp	r3, #5
 8000e8e:	d023      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	2b06      	cmp	r3, #6
 8000e96:	d01f      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9c:	2b07      	cmp	r3, #7
 8000e9e:	d01b      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	2107      	movs	r1, #7
 8000eac:	400b      	ands	r3, r1
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d012      	beq.n	8000ed8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	695a      	ldr	r2, [r3, #20]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2107      	movs	r1, #7
 8000ebe:	438a      	bics	r2, r1
 8000ec0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6959      	ldr	r1, [r3, #20]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2207      	movs	r2, #7
 8000ece:	401a      	ands	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b10      	cmp	r3, #16
 8000ede:	d007      	beq.n	8000ef0 <HAL_ADC_ConfigChannel+0x120>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b11      	cmp	r3, #17
 8000ee6:	d003      	beq.n	8000ef0 <HAL_ADC_ConfigChannel+0x120>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b12      	cmp	r3, #18
 8000eee:	d163      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000ef0:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <HAL_ADC_ConfigChannel+0x204>)
 8000ef2:	6819      	ldr	r1, [r3, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b10      	cmp	r3, #16
 8000efa:	d009      	beq.n	8000f10 <HAL_ADC_ConfigChannel+0x140>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b11      	cmp	r3, #17
 8000f02:	d102      	bne.n	8000f0a <HAL_ADC_ConfigChannel+0x13a>
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	03db      	lsls	r3, r3, #15
 8000f08:	e004      	b.n	8000f14 <HAL_ADC_ConfigChannel+0x144>
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	045b      	lsls	r3, r3, #17
 8000f0e:	e001      	b.n	8000f14 <HAL_ADC_ConfigChannel+0x144>
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	041b      	lsls	r3, r3, #16
 8000f14:	4a2f      	ldr	r2, [pc, #188]	; (8000fd4 <HAL_ADC_ConfigChannel+0x204>)
 8000f16:	430b      	orrs	r3, r1
 8000f18:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b10      	cmp	r3, #16
 8000f20:	d14a      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_ADC_ConfigChannel+0x208>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	492d      	ldr	r1, [pc, #180]	; (8000fdc <HAL_ADC_ConfigChannel+0x20c>)
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff f8f7 	bl	800011c <__udivsi3>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	001a      	movs	r2, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	189b      	adds	r3, r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f3c:	e002      	b.n	8000f44 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f9      	bne.n	8000f3e <HAL_ADC_ConfigChannel+0x16e>
 8000f4a:	e035      	b.n	8000fb8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2101      	movs	r1, #1
 8000f58:	4099      	lsls	r1, r3
 8000f5a:	000b      	movs	r3, r1
 8000f5c:	43d9      	mvns	r1, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	400a      	ands	r2, r1
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b10      	cmp	r3, #16
 8000f6c:	d007      	beq.n	8000f7e <HAL_ADC_ConfigChannel+0x1ae>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b11      	cmp	r3, #17
 8000f74:	d003      	beq.n	8000f7e <HAL_ADC_ConfigChannel+0x1ae>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b12      	cmp	r3, #18
 8000f7c:	d11c      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_ADC_ConfigChannel+0x204>)
 8000f80:	6819      	ldr	r1, [r3, #0]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b10      	cmp	r3, #16
 8000f88:	d007      	beq.n	8000f9a <HAL_ADC_ConfigChannel+0x1ca>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b11      	cmp	r3, #17
 8000f90:	d101      	bne.n	8000f96 <HAL_ADC_ConfigChannel+0x1c6>
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <HAL_ADC_ConfigChannel+0x210>)
 8000f94:	e002      	b.n	8000f9c <HAL_ADC_ConfigChannel+0x1cc>
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_ADC_ConfigChannel+0x214>)
 8000f98:	e000      	b.n	8000f9c <HAL_ADC_ConfigChannel+0x1cc>
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_ADC_ConfigChannel+0x218>)
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <HAL_ADC_ConfigChannel+0x204>)
 8000f9e:	400b      	ands	r3, r1
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e009      	b.n	8000fb8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa8:	2220      	movs	r2, #32
 8000faa:	431a      	orrs	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2234      	movs	r2, #52	; 0x34
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	781b      	ldrb	r3, [r3, #0]
}
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b004      	add	sp, #16
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	00001001 	.word	0x00001001
 8000fd4:	40012708 	.word	0x40012708
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	000f4240 	.word	0x000f4240
 8000fe0:	ffbfffff 	.word	0xffbfffff
 8000fe4:	feffffff 	.word	0xfeffffff
 8000fe8:	ff7fffff 	.word	0xff7fffff

08000fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ffe:	d809      	bhi.n	8001014 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	001a      	movs	r2, r3
 8001006:	231f      	movs	r3, #31
 8001008:	401a      	ands	r2, r3
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_EnableIRQ+0x30>)
 800100c:	2101      	movs	r1, #1
 800100e:	4091      	lsls	r1, r2
 8001010:	000a      	movs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
  }
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b002      	add	sp, #8
 800101a:	bd80      	pop	{r7, pc}
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	0002      	movs	r2, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b7f      	cmp	r3, #127	; 0x7f
 8001034:	d828      	bhi.n	8001088 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001036:	4a2f      	ldr	r2, [pc, #188]	; (80010f4 <__NVIC_SetPriority+0xd4>)
 8001038:	1dfb      	adds	r3, r7, #7
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b25b      	sxtb	r3, r3
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	33c0      	adds	r3, #192	; 0xc0
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	589b      	ldr	r3, [r3, r2]
 8001046:	1dfa      	adds	r2, r7, #7
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	0011      	movs	r1, r2
 800104c:	2203      	movs	r2, #3
 800104e:	400a      	ands	r2, r1
 8001050:	00d2      	lsls	r2, r2, #3
 8001052:	21ff      	movs	r1, #255	; 0xff
 8001054:	4091      	lsls	r1, r2
 8001056:	000a      	movs	r2, r1
 8001058:	43d2      	mvns	r2, r2
 800105a:	401a      	ands	r2, r3
 800105c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	019b      	lsls	r3, r3, #6
 8001062:	22ff      	movs	r2, #255	; 0xff
 8001064:	401a      	ands	r2, r3
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	0018      	movs	r0, r3
 800106c:	2303      	movs	r3, #3
 800106e:	4003      	ands	r3, r0
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001074:	481f      	ldr	r0, [pc, #124]	; (80010f4 <__NVIC_SetPriority+0xd4>)
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b25b      	sxtb	r3, r3
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	430a      	orrs	r2, r1
 8001080:	33c0      	adds	r3, #192	; 0xc0
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001086:	e031      	b.n	80010ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <__NVIC_SetPriority+0xd8>)
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	0019      	movs	r1, r3
 8001090:	230f      	movs	r3, #15
 8001092:	400b      	ands	r3, r1
 8001094:	3b08      	subs	r3, #8
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3306      	adds	r3, #6
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	18d3      	adds	r3, r2, r3
 800109e:	3304      	adds	r3, #4
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	1dfa      	adds	r2, r7, #7
 80010a4:	7812      	ldrb	r2, [r2, #0]
 80010a6:	0011      	movs	r1, r2
 80010a8:	2203      	movs	r2, #3
 80010aa:	400a      	ands	r2, r1
 80010ac:	00d2      	lsls	r2, r2, #3
 80010ae:	21ff      	movs	r1, #255	; 0xff
 80010b0:	4091      	lsls	r1, r2
 80010b2:	000a      	movs	r2, r1
 80010b4:	43d2      	mvns	r2, r2
 80010b6:	401a      	ands	r2, r3
 80010b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	019b      	lsls	r3, r3, #6
 80010be:	22ff      	movs	r2, #255	; 0xff
 80010c0:	401a      	ands	r2, r3
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	0018      	movs	r0, r3
 80010c8:	2303      	movs	r3, #3
 80010ca:	4003      	ands	r3, r0
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d0:	4809      	ldr	r0, [pc, #36]	; (80010f8 <__NVIC_SetPriority+0xd8>)
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	001c      	movs	r4, r3
 80010d8:	230f      	movs	r3, #15
 80010da:	4023      	ands	r3, r4
 80010dc:	3b08      	subs	r3, #8
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	430a      	orrs	r2, r1
 80010e2:	3306      	adds	r3, #6
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	18c3      	adds	r3, r0, r3
 80010e8:	3304      	adds	r3, #4
 80010ea:	601a      	str	r2, [r3, #0]
}
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b003      	add	sp, #12
 80010f2:	bd90      	pop	{r4, r7, pc}
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	1e5a      	subs	r2, r3, #1
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	045b      	lsls	r3, r3, #17
 800110c:	429a      	cmp	r2, r3
 800110e:	d301      	bcc.n	8001114 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001110:	2301      	movs	r3, #1
 8001112:	e010      	b.n	8001136 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <SysTick_Config+0x44>)
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	3a01      	subs	r2, #1
 800111a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111c:	2301      	movs	r3, #1
 800111e:	425b      	negs	r3, r3
 8001120:	2103      	movs	r1, #3
 8001122:	0018      	movs	r0, r3
 8001124:	f7ff ff7c 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SysTick_Config+0x44>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SysTick_Config+0x44>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	0018      	movs	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	b002      	add	sp, #8
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	210f      	movs	r1, #15
 8001150:	187b      	adds	r3, r7, r1
 8001152:	1c02      	adds	r2, r0, #0
 8001154:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	187b      	adds	r3, r7, r1
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b25b      	sxtb	r3, r3
 800115e:	0011      	movs	r1, r2
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff ff5d 	bl	8001020 <__NVIC_SetPriority>
}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	b004      	add	sp, #16
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	0002      	movs	r2, r0
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b25b      	sxtb	r3, r3
 8001180:	0018      	movs	r0, r3
 8001182:	f7ff ff33 	bl	8000fec <__NVIC_EnableIRQ>
}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff ffaf 	bl	80010fc <SysTick_Config>
 800119e:	0003      	movs	r3, r0
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b002      	add	sp, #8
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b6:	e14f      	b.n	8001458 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2101      	movs	r1, #1
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4091      	lsls	r1, r2
 80011c2:	000a      	movs	r2, r1
 80011c4:	4013      	ands	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d100      	bne.n	80011d0 <HAL_GPIO_Init+0x28>
 80011ce:	e140      	b.n	8001452 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2203      	movs	r2, #3
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d005      	beq.n	80011e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2203      	movs	r2, #3
 80011e2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d130      	bne.n	800124a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	409a      	lsls	r2, r3
 80011f6:	0013      	movs	r3, r2
 80011f8:	43da      	mvns	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	409a      	lsls	r2, r3
 800120a:	0013      	movs	r3, r2
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121e:	2201      	movs	r2, #1
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	43da      	mvns	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	2201      	movs	r2, #1
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2203      	movs	r2, #3
 8001250:	4013      	ands	r3, r2
 8001252:	2b03      	cmp	r3, #3
 8001254:	d017      	beq.n	8001286 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	43da      	mvns	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2203      	movs	r2, #3
 800128c:	4013      	ands	r3, r2
 800128e:	2b02      	cmp	r3, #2
 8001290:	d123      	bne.n	80012da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	08da      	lsrs	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	58d3      	ldr	r3, [r2, r3]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2207      	movs	r2, #7
 80012a4:	4013      	ands	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	43da      	mvns	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2107      	movs	r1, #7
 80012be:	400b      	ands	r3, r1
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	08da      	lsrs	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3208      	adds	r2, #8
 80012d4:	0092      	lsls	r2, r2, #2
 80012d6:	6939      	ldr	r1, [r7, #16]
 80012d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	2203      	movs	r2, #3
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	43da      	mvns	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2203      	movs	r2, #3
 80012f8:	401a      	ands	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	409a      	lsls	r2, r3
 8001300:	0013      	movs	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	23c0      	movs	r3, #192	; 0xc0
 8001314:	029b      	lsls	r3, r3, #10
 8001316:	4013      	ands	r3, r2
 8001318:	d100      	bne.n	800131c <HAL_GPIO_Init+0x174>
 800131a:	e09a      	b.n	8001452 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131c:	4b54      	ldr	r3, [pc, #336]	; (8001470 <HAL_GPIO_Init+0x2c8>)
 800131e:	699a      	ldr	r2, [r3, #24]
 8001320:	4b53      	ldr	r3, [pc, #332]	; (8001470 <HAL_GPIO_Init+0x2c8>)
 8001322:	2101      	movs	r1, #1
 8001324:	430a      	orrs	r2, r1
 8001326:	619a      	str	r2, [r3, #24]
 8001328:	4b51      	ldr	r3, [pc, #324]	; (8001470 <HAL_GPIO_Init+0x2c8>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	2201      	movs	r2, #1
 800132e:	4013      	ands	r3, r2
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x2cc>)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	589b      	ldr	r3, [r3, r2]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2203      	movs	r2, #3
 8001346:	4013      	ands	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	409a      	lsls	r2, r3
 800134e:	0013      	movs	r3, r2
 8001350:	43da      	mvns	r2, r3
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	2390      	movs	r3, #144	; 0x90
 800135c:	05db      	lsls	r3, r3, #23
 800135e:	429a      	cmp	r2, r3
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0x1e2>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a44      	ldr	r2, [pc, #272]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_GPIO_Init+0x1de>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a43      	ldr	r2, [pc, #268]	; (800147c <HAL_GPIO_Init+0x2d4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x1da>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a42      	ldr	r2, [pc, #264]	; (8001480 <HAL_GPIO_Init+0x2d8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_GPIO_Init+0x1d6>
 800137a:	2303      	movs	r3, #3
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x1e4>
 800137e:	2305      	movs	r3, #5
 8001380:	e004      	b.n	800138c <HAL_GPIO_Init+0x1e4>
 8001382:	2302      	movs	r3, #2
 8001384:	e002      	b.n	800138c <HAL_GPIO_Init+0x1e4>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <HAL_GPIO_Init+0x1e4>
 800138a:	2300      	movs	r3, #0
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	2103      	movs	r1, #3
 8001390:	400a      	ands	r2, r1
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	4093      	lsls	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800139c:	4935      	ldr	r1, [pc, #212]	; (8001474 <HAL_GPIO_Init+0x2cc>)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013aa:	4b36      	ldr	r3, [pc, #216]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43da      	mvns	r2, r3
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	025b      	lsls	r3, r3, #9
 80013c2:	4013      	ands	r3, r2
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	43da      	mvns	r2, r3
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	029b      	lsls	r3, r3, #10
 80013ec:	4013      	ands	r3, r2
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43da      	mvns	r2, r3
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	035b      	lsls	r3, r3, #13
 8001416:	4013      	ands	r3, r2
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43da      	mvns	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	039b      	lsls	r3, r3, #14
 8001440:	4013      	ands	r3, r2
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	3301      	adds	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	40da      	lsrs	r2, r3
 8001460:	1e13      	subs	r3, r2, #0
 8001462:	d000      	beq.n	8001466 <HAL_GPIO_Init+0x2be>
 8001464:	e6a8      	b.n	80011b8 <HAL_GPIO_Init+0x10>
  } 
}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	b006      	add	sp, #24
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000
 8001474:	40010000 	.word	0x40010000
 8001478:	48000400 	.word	0x48000400
 800147c:	48000800 	.word	0x48000800
 8001480:	48000c00 	.word	0x48000c00
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	000a      	movs	r2, r1
 8001492:	1cbb      	adds	r3, r7, #2
 8001494:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	1cba      	adds	r2, r7, #2
 800149c:	8812      	ldrh	r2, [r2, #0]
 800149e:	4013      	ands	r3, r2
 80014a0:	d004      	beq.n	80014ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80014a2:	230f      	movs	r3, #15
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
 80014aa:	e003      	b.n	80014b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ac:	230f      	movs	r3, #15
 80014ae:	18fb      	adds	r3, r7, r3
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80014b4:	230f      	movs	r3, #15
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	781b      	ldrb	r3, [r3, #0]
  }
 80014ba:	0018      	movs	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	b004      	add	sp, #16
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	0008      	movs	r0, r1
 80014cc:	0011      	movs	r1, r2
 80014ce:	1cbb      	adds	r3, r7, #2
 80014d0:	1c02      	adds	r2, r0, #0
 80014d2:	801a      	strh	r2, [r3, #0]
 80014d4:	1c7b      	adds	r3, r7, #1
 80014d6:	1c0a      	adds	r2, r1, #0
 80014d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014da:	1c7b      	adds	r3, r7, #1
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d004      	beq.n	80014ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014e2:	1cbb      	adds	r3, r7, #2
 80014e4:	881a      	ldrh	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014ea:	e003      	b.n	80014f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ec:	1cbb      	adds	r3, r7, #2
 80014ee:	881a      	ldrh	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014f4:	46c0      	nop			; (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b002      	add	sp, #8
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	000a      	movs	r2, r1
 8001506:	1cbb      	adds	r3, r7, #2
 8001508:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001510:	1cbb      	adds	r3, r7, #2
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4013      	ands	r3, r2
 8001518:	041a      	lsls	r2, r3, #16
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	43db      	mvns	r3, r3
 800151e:	1cb9      	adds	r1, r7, #2
 8001520:	8809      	ldrh	r1, [r1, #0]
 8001522:	400b      	ands	r3, r1
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	619a      	str	r2, [r3, #24]
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	b004      	add	sp, #16
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	0002      	movs	r2, r0
 800153c:	1dbb      	adds	r3, r7, #6
 800153e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	1dba      	adds	r2, r7, #6
 8001546:	8812      	ldrh	r2, [r2, #0]
 8001548:	4013      	ands	r3, r2
 800154a:	d008      	beq.n	800155e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800154e:	1dba      	adds	r2, r7, #6
 8001550:	8812      	ldrh	r2, [r2, #0]
 8001552:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001554:	1dbb      	adds	r3, r7, #6
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	0018      	movs	r0, r3
 800155a:	f000 f807 	bl	800156c <HAL_GPIO_EXTI_Callback>
  }
}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	46bd      	mov	sp, r7
 8001562:	b002      	add	sp, #8
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	40010400 	.word	0x40010400

0800156c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	0002      	movs	r2, r0
 8001574:	1dbb      	adds	r3, r7, #6
 8001576:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	b002      	add	sp, #8
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e301      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2201      	movs	r2, #1
 8001598:	4013      	ands	r3, r2
 800159a:	d100      	bne.n	800159e <HAL_RCC_OscConfig+0x1e>
 800159c:	e08d      	b.n	80016ba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800159e:	4bc3      	ldr	r3, [pc, #780]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	220c      	movs	r2, #12
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d00e      	beq.n	80015c8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015aa:	4bc0      	ldr	r3, [pc, #768]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	220c      	movs	r2, #12
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d116      	bne.n	80015e4 <HAL_RCC_OscConfig+0x64>
 80015b6:	4bbd      	ldr	r3, [pc, #756]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	025b      	lsls	r3, r3, #9
 80015be:	401a      	ands	r2, r3
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	025b      	lsls	r3, r3, #9
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d10d      	bne.n	80015e4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	4bb8      	ldr	r3, [pc, #736]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	029b      	lsls	r3, r3, #10
 80015d0:	4013      	ands	r3, r2
 80015d2:	d100      	bne.n	80015d6 <HAL_RCC_OscConfig+0x56>
 80015d4:	e070      	b.n	80016b8 <HAL_RCC_OscConfig+0x138>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d000      	beq.n	80015e0 <HAL_RCC_OscConfig+0x60>
 80015de:	e06b      	b.n	80016b8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e2d8      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d107      	bne.n	80015fc <HAL_RCC_OscConfig+0x7c>
 80015ec:	4baf      	ldr	r3, [pc, #700]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4bae      	ldr	r3, [pc, #696]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	0249      	lsls	r1, r1, #9
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e02f      	b.n	800165c <HAL_RCC_OscConfig+0xdc>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10c      	bne.n	800161e <HAL_RCC_OscConfig+0x9e>
 8001604:	4ba9      	ldr	r3, [pc, #676]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4ba8      	ldr	r3, [pc, #672]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 800160a:	49a9      	ldr	r1, [pc, #676]	; (80018b0 <HAL_RCC_OscConfig+0x330>)
 800160c:	400a      	ands	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	4ba6      	ldr	r3, [pc, #664]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4ba5      	ldr	r3, [pc, #660]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001616:	49a7      	ldr	r1, [pc, #668]	; (80018b4 <HAL_RCC_OscConfig+0x334>)
 8001618:	400a      	ands	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	e01e      	b.n	800165c <HAL_RCC_OscConfig+0xdc>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b05      	cmp	r3, #5
 8001624:	d10e      	bne.n	8001644 <HAL_RCC_OscConfig+0xc4>
 8001626:	4ba1      	ldr	r3, [pc, #644]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4ba0      	ldr	r3, [pc, #640]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	02c9      	lsls	r1, r1, #11
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	4b9d      	ldr	r3, [pc, #628]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b9c      	ldr	r3, [pc, #624]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 800163a:	2180      	movs	r1, #128	; 0x80
 800163c:	0249      	lsls	r1, r1, #9
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0xdc>
 8001644:	4b99      	ldr	r3, [pc, #612]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b98      	ldr	r3, [pc, #608]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 800164a:	4999      	ldr	r1, [pc, #612]	; (80018b0 <HAL_RCC_OscConfig+0x330>)
 800164c:	400a      	ands	r2, r1
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	4b96      	ldr	r3, [pc, #600]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b95      	ldr	r3, [pc, #596]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001656:	4997      	ldr	r1, [pc, #604]	; (80018b4 <HAL_RCC_OscConfig+0x334>)
 8001658:	400a      	ands	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d014      	beq.n	800168e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fa46 	bl	8000af4 <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800166e:	f7ff fa41 	bl	8000af4 <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b64      	cmp	r3, #100	; 0x64
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e28a      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001680:	4b8a      	ldr	r3, [pc, #552]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	029b      	lsls	r3, r3, #10
 8001688:	4013      	ands	r3, r2
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0xee>
 800168c:	e015      	b.n	80016ba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168e:	f7ff fa31 	bl	8000af4 <HAL_GetTick>
 8001692:	0003      	movs	r3, r0
 8001694:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fa2c 	bl	8000af4 <HAL_GetTick>
 800169c:	0002      	movs	r2, r0
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e275      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	4b80      	ldr	r3, [pc, #512]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	029b      	lsls	r3, r3, #10
 80016b2:	4013      	ands	r3, r2
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x118>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2202      	movs	r2, #2
 80016c0:	4013      	ands	r3, r2
 80016c2:	d100      	bne.n	80016c6 <HAL_RCC_OscConfig+0x146>
 80016c4:	e069      	b.n	800179a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016c6:	4b79      	ldr	r3, [pc, #484]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	220c      	movs	r2, #12
 80016cc:	4013      	ands	r3, r2
 80016ce:	d00b      	beq.n	80016e8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016d0:	4b76      	ldr	r3, [pc, #472]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	220c      	movs	r2, #12
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d11c      	bne.n	8001716 <HAL_RCC_OscConfig+0x196>
 80016dc:	4b73      	ldr	r3, [pc, #460]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	025b      	lsls	r3, r3, #9
 80016e4:	4013      	ands	r3, r2
 80016e6:	d116      	bne.n	8001716 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e8:	4b70      	ldr	r3, [pc, #448]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2202      	movs	r2, #2
 80016ee:	4013      	ands	r3, r2
 80016f0:	d005      	beq.n	80016fe <HAL_RCC_OscConfig+0x17e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e24b      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fe:	4b6b      	ldr	r3, [pc, #428]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	22f8      	movs	r2, #248	; 0xf8
 8001704:	4393      	bics	r3, r2
 8001706:	0019      	movs	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	00da      	lsls	r2, r3, #3
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001714:	e041      	b.n	800179a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d024      	beq.n	8001768 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b62      	ldr	r3, [pc, #392]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001724:	2101      	movs	r1, #1
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff f9e3 	bl	8000af4 <HAL_GetTick>
 800172e:	0003      	movs	r3, r0
 8001730:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001734:	f7ff f9de 	bl	8000af4 <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e227      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001746:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2202      	movs	r2, #2
 800174c:	4013      	ands	r3, r2
 800174e:	d0f1      	beq.n	8001734 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001750:	4b56      	ldr	r3, [pc, #344]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	22f8      	movs	r2, #248	; 0xf8
 8001756:	4393      	bics	r3, r2
 8001758:	0019      	movs	r1, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00da      	lsls	r2, r3, #3
 8001760:	4b52      	ldr	r3, [pc, #328]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001762:	430a      	orrs	r2, r1
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	e018      	b.n	800179a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001768:	4b50      	ldr	r3, [pc, #320]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b4f      	ldr	r3, [pc, #316]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 800176e:	2101      	movs	r1, #1
 8001770:	438a      	bics	r2, r1
 8001772:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff f9be 	bl	8000af4 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800177e:	f7ff f9b9 	bl	8000af4 <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e202      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001790:	4b46      	ldr	r3, [pc, #280]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2202      	movs	r2, #2
 8001796:	4013      	ands	r3, r2
 8001798:	d1f1      	bne.n	800177e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2208      	movs	r2, #8
 80017a0:	4013      	ands	r3, r2
 80017a2:	d036      	beq.n	8001812 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d019      	beq.n	80017e0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ac:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80017ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b0:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80017b2:	2101      	movs	r1, #1
 80017b4:	430a      	orrs	r2, r1
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b8:	f7ff f99c 	bl	8000af4 <HAL_GetTick>
 80017bc:	0003      	movs	r3, r0
 80017be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c2:	f7ff f997 	bl	8000af4 <HAL_GetTick>
 80017c6:	0002      	movs	r2, r0
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1e0      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d4:	4b35      	ldr	r3, [pc, #212]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	2202      	movs	r2, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	d0f1      	beq.n	80017c2 <HAL_RCC_OscConfig+0x242>
 80017de:	e018      	b.n	8001812 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e0:	4b32      	ldr	r3, [pc, #200]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80017e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e4:	4b31      	ldr	r3, [pc, #196]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	438a      	bics	r2, r1
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ec:	f7ff f982 	bl	8000af4 <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f6:	f7ff f97d 	bl	8000af4 <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e1c6      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	2202      	movs	r2, #2
 800180e:	4013      	ands	r3, r2
 8001810:	d1f1      	bne.n	80017f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2204      	movs	r2, #4
 8001818:	4013      	ands	r3, r2
 800181a:	d100      	bne.n	800181e <HAL_RCC_OscConfig+0x29e>
 800181c:	e0b4      	b.n	8001988 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181e:	201f      	movs	r0, #31
 8001820:	183b      	adds	r3, r7, r0
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	055b      	lsls	r3, r3, #21
 800182e:	4013      	ands	r3, r2
 8001830:	d110      	bne.n	8001854 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001834:	69da      	ldr	r2, [r3, #28]
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	0549      	lsls	r1, r1, #21
 800183c:	430a      	orrs	r2, r1
 800183e:	61da      	str	r2, [r3, #28]
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 8001842:	69da      	ldr	r2, [r3, #28]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	055b      	lsls	r3, r3, #21
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800184e:	183b      	adds	r3, r7, r0
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_RCC_OscConfig+0x338>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4013      	ands	r3, r2
 800185e:	d11a      	bne.n	8001896 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_RCC_OscConfig+0x338>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <HAL_RCC_OscConfig+0x338>)
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	0049      	lsls	r1, r1, #1
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186e:	f7ff f941 	bl	8000af4 <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001878:	f7ff f93c 	bl	8000af4 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e185      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_RCC_OscConfig+0x338>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4013      	ands	r3, r2
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d10e      	bne.n	80018bc <HAL_RCC_OscConfig+0x33c>
 800189e:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80018a0:	6a1a      	ldr	r2, [r3, #32]
 80018a2:	4b02      	ldr	r3, [pc, #8]	; (80018ac <HAL_RCC_OscConfig+0x32c>)
 80018a4:	2101      	movs	r1, #1
 80018a6:	430a      	orrs	r2, r1
 80018a8:	621a      	str	r2, [r3, #32]
 80018aa:	e035      	b.n	8001918 <HAL_RCC_OscConfig+0x398>
 80018ac:	40021000 	.word	0x40021000
 80018b0:	fffeffff 	.word	0xfffeffff
 80018b4:	fffbffff 	.word	0xfffbffff
 80018b8:	40007000 	.word	0x40007000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10c      	bne.n	80018de <HAL_RCC_OscConfig+0x35e>
 80018c4:	4bb6      	ldr	r3, [pc, #728]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	4bb5      	ldr	r3, [pc, #724]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80018ca:	2101      	movs	r1, #1
 80018cc:	438a      	bics	r2, r1
 80018ce:	621a      	str	r2, [r3, #32]
 80018d0:	4bb3      	ldr	r3, [pc, #716]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80018d2:	6a1a      	ldr	r2, [r3, #32]
 80018d4:	4bb2      	ldr	r3, [pc, #712]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80018d6:	2104      	movs	r1, #4
 80018d8:	438a      	bics	r2, r1
 80018da:	621a      	str	r2, [r3, #32]
 80018dc:	e01c      	b.n	8001918 <HAL_RCC_OscConfig+0x398>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x380>
 80018e6:	4bae      	ldr	r3, [pc, #696]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80018e8:	6a1a      	ldr	r2, [r3, #32]
 80018ea:	4bad      	ldr	r3, [pc, #692]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80018ec:	2104      	movs	r1, #4
 80018ee:	430a      	orrs	r2, r1
 80018f0:	621a      	str	r2, [r3, #32]
 80018f2:	4bab      	ldr	r3, [pc, #684]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80018f4:	6a1a      	ldr	r2, [r3, #32]
 80018f6:	4baa      	ldr	r3, [pc, #680]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80018f8:	2101      	movs	r1, #1
 80018fa:	430a      	orrs	r2, r1
 80018fc:	621a      	str	r2, [r3, #32]
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0x398>
 8001900:	4ba7      	ldr	r3, [pc, #668]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001902:	6a1a      	ldr	r2, [r3, #32]
 8001904:	4ba6      	ldr	r3, [pc, #664]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001906:	2101      	movs	r1, #1
 8001908:	438a      	bics	r2, r1
 800190a:	621a      	str	r2, [r3, #32]
 800190c:	4ba4      	ldr	r3, [pc, #656]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 800190e:	6a1a      	ldr	r2, [r3, #32]
 8001910:	4ba3      	ldr	r3, [pc, #652]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001912:	2104      	movs	r1, #4
 8001914:	438a      	bics	r2, r1
 8001916:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d014      	beq.n	800194a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001920:	f7ff f8e8 	bl	8000af4 <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001928:	e009      	b.n	800193e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192a:	f7ff f8e3 	bl	8000af4 <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	4a9b      	ldr	r2, [pc, #620]	; (8001ba4 <HAL_RCC_OscConfig+0x624>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e12b      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193e:	4b98      	ldr	r3, [pc, #608]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	2202      	movs	r2, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x3aa>
 8001948:	e013      	b.n	8001972 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7ff f8d3 	bl	8000af4 <HAL_GetTick>
 800194e:	0003      	movs	r3, r0
 8001950:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001952:	e009      	b.n	8001968 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff f8ce 	bl	8000af4 <HAL_GetTick>
 8001958:	0002      	movs	r2, r0
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	4a91      	ldr	r2, [pc, #580]	; (8001ba4 <HAL_RCC_OscConfig+0x624>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e116      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001968:	4b8d      	ldr	r3, [pc, #564]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	2202      	movs	r2, #2
 800196e:	4013      	ands	r3, r2
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001972:	231f      	movs	r3, #31
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197c:	4b88      	ldr	r3, [pc, #544]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 800197e:	69da      	ldr	r2, [r3, #28]
 8001980:	4b87      	ldr	r3, [pc, #540]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001982:	4989      	ldr	r1, [pc, #548]	; (8001ba8 <HAL_RCC_OscConfig+0x628>)
 8001984:	400a      	ands	r2, r1
 8001986:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2210      	movs	r2, #16
 800198e:	4013      	ands	r3, r2
 8001990:	d063      	beq.n	8001a5a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d12a      	bne.n	80019f0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800199a:	4b81      	ldr	r3, [pc, #516]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 800199c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199e:	4b80      	ldr	r3, [pc, #512]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80019a0:	2104      	movs	r1, #4
 80019a2:	430a      	orrs	r2, r1
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80019a6:	4b7e      	ldr	r3, [pc, #504]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80019a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019aa:	4b7d      	ldr	r3, [pc, #500]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80019ac:	2101      	movs	r1, #1
 80019ae:	430a      	orrs	r2, r1
 80019b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b2:	f7ff f89f 	bl	8000af4 <HAL_GetTick>
 80019b6:	0003      	movs	r3, r0
 80019b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019bc:	f7ff f89a 	bl	8000af4 <HAL_GetTick>
 80019c0:	0002      	movs	r2, r0
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e0e3      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019ce:	4b74      	ldr	r3, [pc, #464]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80019d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d2:	2202      	movs	r2, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	d0f1      	beq.n	80019bc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019d8:	4b71      	ldr	r3, [pc, #452]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80019da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019dc:	22f8      	movs	r2, #248	; 0xf8
 80019de:	4393      	bics	r3, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	00da      	lsls	r2, r3, #3
 80019e8:	4b6d      	ldr	r3, [pc, #436]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80019ea:	430a      	orrs	r2, r1
 80019ec:	635a      	str	r2, [r3, #52]	; 0x34
 80019ee:	e034      	b.n	8001a5a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	3305      	adds	r3, #5
 80019f6:	d111      	bne.n	8001a1c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019f8:	4b69      	ldr	r3, [pc, #420]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80019fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019fc:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 80019fe:	2104      	movs	r1, #4
 8001a00:	438a      	bics	r2, r1
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a04:	4b66      	ldr	r3, [pc, #408]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a08:	22f8      	movs	r2, #248	; 0xf8
 8001a0a:	4393      	bics	r3, r2
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	00da      	lsls	r2, r3, #3
 8001a14:	4b62      	ldr	r3, [pc, #392]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001a16:	430a      	orrs	r2, r1
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34
 8001a1a:	e01e      	b.n	8001a5a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a1c:	4b60      	ldr	r3, [pc, #384]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a20:	4b5f      	ldr	r3, [pc, #380]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001a22:	2104      	movs	r1, #4
 8001a24:	430a      	orrs	r2, r1
 8001a26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a28:	4b5d      	ldr	r3, [pc, #372]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	438a      	bics	r2, r1
 8001a32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a34:	f7ff f85e 	bl	8000af4 <HAL_GetTick>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a3e:	f7ff f859 	bl	8000af4 <HAL_GetTick>
 8001a42:	0002      	movs	r2, r0
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e0a2      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a50:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a54:	2202      	movs	r2, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	d1f1      	bne.n	8001a3e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d100      	bne.n	8001a64 <HAL_RCC_OscConfig+0x4e4>
 8001a62:	e097      	b.n	8001b94 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a64:	4b4e      	ldr	r3, [pc, #312]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	220c      	movs	r2, #12
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d100      	bne.n	8001a72 <HAL_RCC_OscConfig+0x4f2>
 8001a70:	e06b      	b.n	8001b4a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d14c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7a:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001a80:	494a      	ldr	r1, [pc, #296]	; (8001bac <HAL_RCC_OscConfig+0x62c>)
 8001a82:	400a      	ands	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff f835 	bl	8000af4 <HAL_GetTick>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f830 	bl	8000af4 <HAL_GetTick>
 8001a94:	0002      	movs	r2, r0
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e079      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa2:	4b3f      	ldr	r3, [pc, #252]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	049b      	lsls	r3, r3, #18
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aae:	4b3c      	ldr	r3, [pc, #240]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	220f      	movs	r2, #15
 8001ab4:	4393      	bics	r3, r2
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001abc:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ac2:	4b37      	ldr	r3, [pc, #220]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4a3a      	ldr	r2, [pc, #232]	; (8001bb0 <HAL_RCC_OscConfig+0x630>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001adc:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	0449      	lsls	r1, r1, #17
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aea:	f7ff f803 	bl	8000af4 <HAL_GetTick>
 8001aee:	0003      	movs	r3, r0
 8001af0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af4:	f7fe fffe 	bl	8000af4 <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e047      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	049b      	lsls	r3, r3, #18
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x574>
 8001b12:	e03f      	b.n	8001b94 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001b1a:	4924      	ldr	r1, [pc, #144]	; (8001bac <HAL_RCC_OscConfig+0x62c>)
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7fe ffe8 	bl	8000af4 <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7fe ffe3 	bl	8000af4 <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e02c      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3c:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	049b      	lsls	r3, r3, #18
 8001b44:	4013      	ands	r3, r2
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x5aa>
 8001b48:	e024      	b.n	8001b94 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e01f      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	025b      	lsls	r3, r3, #9
 8001b68:	401a      	ands	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d10e      	bne.n	8001b90 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	220f      	movs	r2, #15
 8001b76:	401a      	ands	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	23f0      	movs	r3, #240	; 0xf0
 8001b84:	039b      	lsls	r3, r3, #14
 8001b86:	401a      	ands	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	0018      	movs	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b008      	add	sp, #32
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	00001388 	.word	0x00001388
 8001ba8:	efffffff 	.word	0xefffffff
 8001bac:	feffffff 	.word	0xfeffffff
 8001bb0:	ffc2ffff 	.word	0xffc2ffff

08001bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0b3      	b.n	8001d30 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b5b      	ldr	r3, [pc, #364]	; (8001d38 <HAL_RCC_ClockConfig+0x184>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4013      	ands	r3, r2
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d911      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b58      	ldr	r3, [pc, #352]	; (8001d38 <HAL_RCC_ClockConfig+0x184>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4393      	bics	r3, r2
 8001bde:	0019      	movs	r1, r3
 8001be0:	4b55      	ldr	r3, [pc, #340]	; (8001d38 <HAL_RCC_ClockConfig+0x184>)
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_RCC_ClockConfig+0x184>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e09a      	b.n	8001d30 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	4013      	ands	r3, r2
 8001c02:	d015      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2204      	movs	r2, #4
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d006      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c0e:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <HAL_RCC_ClockConfig+0x188>)
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4b4a      	ldr	r3, [pc, #296]	; (8001d3c <HAL_RCC_ClockConfig+0x188>)
 8001c14:	21e0      	movs	r1, #224	; 0xe0
 8001c16:	00c9      	lsls	r1, r1, #3
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <HAL_RCC_ClockConfig+0x188>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	22f0      	movs	r2, #240	; 0xf0
 8001c22:	4393      	bics	r3, r2
 8001c24:	0019      	movs	r1, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <HAL_RCC_ClockConfig+0x188>)
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2201      	movs	r2, #1
 8001c36:	4013      	ands	r3, r2
 8001c38:	d040      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <HAL_RCC_ClockConfig+0x188>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	029b      	lsls	r3, r3, #10
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d114      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e06e      	b.n	8001d30 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_RCC_ClockConfig+0x188>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	049b      	lsls	r3, r3, #18
 8001c62:	4013      	ands	r3, r2
 8001c64:	d108      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e062      	b.n	8001d30 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <HAL_RCC_ClockConfig+0x188>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	4013      	ands	r3, r2
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e05b      	b.n	8001d30 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c78:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <HAL_RCC_ClockConfig+0x188>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	4393      	bics	r3, r2
 8001c80:	0019      	movs	r1, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_RCC_ClockConfig+0x188>)
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c8c:	f7fe ff32 	bl	8000af4 <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c94:	e009      	b.n	8001caa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c96:	f7fe ff2d 	bl	8000af4 <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	4a27      	ldr	r2, [pc, #156]	; (8001d40 <HAL_RCC_ClockConfig+0x18c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e042      	b.n	8001d30 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_RCC_ClockConfig+0x188>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	220c      	movs	r2, #12
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1ec      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <HAL_RCC_ClockConfig+0x184>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d211      	bcs.n	8001cee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_RCC_ClockConfig+0x184>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4393      	bics	r3, r2
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_RCC_ClockConfig+0x184>)
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_RCC_ClockConfig+0x184>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e020      	b.n	8001d30 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2204      	movs	r2, #4
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d009      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_ClockConfig+0x188>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	4a11      	ldr	r2, [pc, #68]	; (8001d44 <HAL_RCC_ClockConfig+0x190>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	0019      	movs	r1, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_RCC_ClockConfig+0x188>)
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d0c:	f000 f820 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8001d10:	0001      	movs	r1, r0
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_RCC_ClockConfig+0x188>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	220f      	movs	r2, #15
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <HAL_RCC_ClockConfig+0x194>)
 8001d1e:	5cd3      	ldrb	r3, [r2, r3]
 8001d20:	000a      	movs	r2, r1
 8001d22:	40da      	lsrs	r2, r3
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_RCC_ClockConfig+0x198>)
 8001d26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7fe fe9d 	bl	8000a68 <HAL_InitTick>
  
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b004      	add	sp, #16
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	00001388 	.word	0x00001388
 8001d44:	fffff8ff 	.word	0xfffff8ff
 8001d48:	08002fdc 	.word	0x08002fdc
 8001d4c:	20000000 	.word	0x20000000

08001d50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b08f      	sub	sp, #60	; 0x3c
 8001d54:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d56:	2314      	movs	r3, #20
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	4a2b      	ldr	r2, [pc, #172]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d5c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d5e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	4a29      	ldr	r2, [pc, #164]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d6a:	c313      	stmia	r3!, {r0, r1, r4}
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d78:	2300      	movs	r3, #0
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d84:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8c:	220c      	movs	r2, #12
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d002      	beq.n	8001d9a <HAL_RCC_GetSysClockFreq+0x4a>
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d003      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x50>
 8001d98:	e02d      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d9e:	e02d      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da2:	0c9b      	lsrs	r3, r3, #18
 8001da4:	220f      	movs	r2, #15
 8001da6:	4013      	ands	r3, r2
 8001da8:	2214      	movs	r2, #20
 8001daa:	18ba      	adds	r2, r7, r2
 8001dac:	5cd3      	ldrb	r3, [r2, r3]
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	220f      	movs	r2, #15
 8001db6:	4013      	ands	r3, r2
 8001db8:	1d3a      	adds	r2, r7, #4
 8001dba:	5cd3      	ldrb	r3, [r2, r3]
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	025b      	lsls	r3, r3, #9
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d009      	beq.n	8001ddc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dca:	4812      	ldr	r0, [pc, #72]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dcc:	f7fe f9a6 	bl	800011c <__udivsi3>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	001a      	movs	r2, r3
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	4353      	muls	r3, r2
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dda:	e009      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ddc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dde:	000a      	movs	r2, r1
 8001de0:	0152      	lsls	r2, r2, #5
 8001de2:	1a52      	subs	r2, r2, r1
 8001de4:	0193      	lsls	r3, r2, #6
 8001de6:	1a9b      	subs	r3, r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	185b      	adds	r3, r3, r1
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001df4:	e002      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df6:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dfa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001dfe:	0018      	movs	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b00f      	add	sp, #60	; 0x3c
 8001e04:	bd90      	pop	{r4, r7, pc}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	08002fbc 	.word	0x08002fbc
 8001e0c:	08002fcc 	.word	0x08002fcc
 8001e10:	40021000 	.word	0x40021000
 8001e14:	007a1200 	.word	0x007a1200

08001e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b02      	ldr	r3, [pc, #8]	; (8001e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e30:	f7ff fff2 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e34:	0001      	movs	r1, r0
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4013      	ands	r3, r2
 8001e40:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e42:	5cd3      	ldrb	r3, [r2, r3]
 8001e44:	40d9      	lsrs	r1, r3
 8001e46:	000b      	movs	r3, r1
}    
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	40021000 	.word	0x40021000
 8001e54:	08002fec 	.word	0x08002fec

08001e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e044      	b.n	8001ef4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d107      	bne.n	8001e82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2274      	movs	r2, #116	; 0x74
 8001e76:	2100      	movs	r1, #0
 8001e78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7fe fd15 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2224      	movs	r2, #36	; 0x24
 8001e86:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2101      	movs	r1, #1
 8001e94:	438a      	bics	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f000 f8da 	bl	8002054 <UART_SetConfig>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e024      	b.n	8001ef4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f000 fa0d 	bl	80022d4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	490d      	ldr	r1, [pc, #52]	; (8001efc <HAL_UART_Init+0xa4>)
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	212a      	movs	r1, #42	; 0x2a
 8001ed6:	438a      	bics	r2, r1
 8001ed8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f000 faa5 	bl	800243c <UART_CheckIdleState>
 8001ef2:	0003      	movs	r3, r0
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b002      	add	sp, #8
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	ffffb7ff 	.word	0xffffb7ff

08001f00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	1dbb      	adds	r3, r7, #6
 8001f0e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f14:	2b20      	cmp	r3, #32
 8001f16:	d000      	beq.n	8001f1a <HAL_UART_Transmit+0x1a>
 8001f18:	e096      	b.n	8002048 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_UART_Transmit+0x28>
 8001f20:	1dbb      	adds	r3, r7, #6
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e08e      	b.n	800204a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	015b      	lsls	r3, r3, #5
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d109      	bne.n	8001f4c <HAL_UART_Transmit+0x4c>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2201      	movs	r2, #1
 8001f44:	4013      	ands	r3, r2
 8001f46:	d001      	beq.n	8001f4c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e07e      	b.n	800204a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2274      	movs	r2, #116	; 0x74
 8001f50:	5c9b      	ldrb	r3, [r3, r2]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_UART_Transmit+0x5a>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e077      	b.n	800204a <HAL_UART_Transmit+0x14a>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2274      	movs	r2, #116	; 0x74
 8001f5e:	2101      	movs	r1, #1
 8001f60:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	2100      	movs	r1, #0
 8001f68:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2221      	movs	r2, #33	; 0x21
 8001f6e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f70:	f7fe fdc0 	bl	8000af4 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1dba      	adds	r2, r7, #6
 8001f7c:	2150      	movs	r1, #80	; 0x50
 8001f7e:	8812      	ldrh	r2, [r2, #0]
 8001f80:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1dba      	adds	r2, r7, #6
 8001f86:	2152      	movs	r1, #82	; 0x52
 8001f88:	8812      	ldrh	r2, [r2, #0]
 8001f8a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	015b      	lsls	r3, r3, #5
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d108      	bne.n	8001faa <HAL_UART_Transmit+0xaa>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d104      	bne.n	8001faa <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	e003      	b.n	8001fb2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2274      	movs	r2, #116	; 0x74
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001fba:	e02d      	b.n	8002018 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	0013      	movs	r3, r2
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2180      	movs	r1, #128	; 0x80
 8001fca:	f000 fa7f 	bl	80024cc <UART_WaitOnFlagUntilTimeout>
 8001fce:	1e03      	subs	r3, r0, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e039      	b.n	800204a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10b      	bne.n	8001ff4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	881a      	ldrh	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	05d2      	lsls	r2, r2, #23
 8001fe6:	0dd2      	lsrs	r2, r2, #23
 8001fe8:	b292      	uxth	r2, r2
 8001fea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	3302      	adds	r3, #2
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	e008      	b.n	8002006 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	781a      	ldrb	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	b292      	uxth	r2, r2
 8001ffe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	3301      	adds	r3, #1
 8002004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2252      	movs	r2, #82	; 0x52
 800200a:	5a9b      	ldrh	r3, [r3, r2]
 800200c:	b29b      	uxth	r3, r3
 800200e:	3b01      	subs	r3, #1
 8002010:	b299      	uxth	r1, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2252      	movs	r2, #82	; 0x52
 8002016:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2252      	movs	r2, #82	; 0x52
 800201c:	5a9b      	ldrh	r3, [r3, r2]
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1cb      	bne.n	8001fbc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	0013      	movs	r3, r2
 800202e:	2200      	movs	r2, #0
 8002030:	2140      	movs	r1, #64	; 0x40
 8002032:	f000 fa4b 	bl	80024cc <UART_WaitOnFlagUntilTimeout>
 8002036:	1e03      	subs	r3, r0, #0
 8002038:	d001      	beq.n	800203e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e005      	b.n	800204a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	e000      	b.n	800204a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002048:	2302      	movs	r3, #2
  }
}
 800204a:	0018      	movs	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	b008      	add	sp, #32
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800205c:	231e      	movs	r3, #30
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a8d      	ldr	r2, [pc, #564]	; (80022b8 <UART_SetConfig+0x264>)
 8002084:	4013      	ands	r3, r2
 8002086:	0019      	movs	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a88      	ldr	r2, [pc, #544]	; (80022bc <UART_SetConfig+0x268>)
 800209a:	4013      	ands	r3, r2
 800209c:	0019      	movs	r1, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a7f      	ldr	r2, [pc, #508]	; (80022c0 <UART_SetConfig+0x26c>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a7b      	ldr	r2, [pc, #492]	; (80022c4 <UART_SetConfig+0x270>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d127      	bne.n	800212a <UART_SetConfig+0xd6>
 80020da:	4b7b      	ldr	r3, [pc, #492]	; (80022c8 <UART_SetConfig+0x274>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	2203      	movs	r2, #3
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d00d      	beq.n	8002102 <UART_SetConfig+0xae>
 80020e6:	d81b      	bhi.n	8002120 <UART_SetConfig+0xcc>
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d014      	beq.n	8002116 <UART_SetConfig+0xc2>
 80020ec:	d818      	bhi.n	8002120 <UART_SetConfig+0xcc>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <UART_SetConfig+0xa4>
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d00a      	beq.n	800210c <UART_SetConfig+0xb8>
 80020f6:	e013      	b.n	8002120 <UART_SetConfig+0xcc>
 80020f8:	231f      	movs	r3, #31
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	e021      	b.n	8002146 <UART_SetConfig+0xf2>
 8002102:	231f      	movs	r3, #31
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	2202      	movs	r2, #2
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e01c      	b.n	8002146 <UART_SetConfig+0xf2>
 800210c:	231f      	movs	r3, #31
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2204      	movs	r2, #4
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	e017      	b.n	8002146 <UART_SetConfig+0xf2>
 8002116:	231f      	movs	r3, #31
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	2208      	movs	r2, #8
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	e012      	b.n	8002146 <UART_SetConfig+0xf2>
 8002120:	231f      	movs	r3, #31
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	2210      	movs	r2, #16
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	e00d      	b.n	8002146 <UART_SetConfig+0xf2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a67      	ldr	r2, [pc, #412]	; (80022cc <UART_SetConfig+0x278>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d104      	bne.n	800213e <UART_SetConfig+0xea>
 8002134:	231f      	movs	r3, #31
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
 800213c:	e003      	b.n	8002146 <UART_SetConfig+0xf2>
 800213e:	231f      	movs	r3, #31
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	2210      	movs	r2, #16
 8002144:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	429a      	cmp	r2, r3
 8002150:	d15d      	bne.n	800220e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002152:	231f      	movs	r3, #31
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b08      	cmp	r3, #8
 800215a:	d015      	beq.n	8002188 <UART_SetConfig+0x134>
 800215c:	dc18      	bgt.n	8002190 <UART_SetConfig+0x13c>
 800215e:	2b04      	cmp	r3, #4
 8002160:	d00d      	beq.n	800217e <UART_SetConfig+0x12a>
 8002162:	dc15      	bgt.n	8002190 <UART_SetConfig+0x13c>
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <UART_SetConfig+0x11a>
 8002168:	2b02      	cmp	r3, #2
 800216a:	d005      	beq.n	8002178 <UART_SetConfig+0x124>
 800216c:	e010      	b.n	8002190 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800216e:	f7ff fe5d 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002172:	0003      	movs	r3, r0
 8002174:	61bb      	str	r3, [r7, #24]
        break;
 8002176:	e012      	b.n	800219e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002178:	4b55      	ldr	r3, [pc, #340]	; (80022d0 <UART_SetConfig+0x27c>)
 800217a:	61bb      	str	r3, [r7, #24]
        break;
 800217c:	e00f      	b.n	800219e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800217e:	f7ff fde7 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8002182:	0003      	movs	r3, r0
 8002184:	61bb      	str	r3, [r7, #24]
        break;
 8002186:	e00a      	b.n	800219e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	61bb      	str	r3, [r7, #24]
        break;
 800218e:	e006      	b.n	800219e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002194:	231e      	movs	r3, #30
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
        break;
 800219c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d100      	bne.n	80021a6 <UART_SetConfig+0x152>
 80021a4:	e07b      	b.n	800229e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	005a      	lsls	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	085b      	lsrs	r3, r3, #1
 80021b0:	18d2      	adds	r2, r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	0019      	movs	r1, r3
 80021b8:	0010      	movs	r0, r2
 80021ba:	f7fd ffaf 	bl	800011c <__udivsi3>
 80021be:	0003      	movs	r3, r0
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	2b0f      	cmp	r3, #15
 80021c8:	d91c      	bls.n	8002204 <UART_SetConfig+0x1b0>
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	025b      	lsls	r3, r3, #9
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d217      	bcs.n	8002204 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	200e      	movs	r0, #14
 80021da:	183b      	adds	r3, r7, r0
 80021dc:	210f      	movs	r1, #15
 80021de:	438a      	bics	r2, r1
 80021e0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	2207      	movs	r2, #7
 80021ea:	4013      	ands	r3, r2
 80021ec:	b299      	uxth	r1, r3
 80021ee:	183b      	adds	r3, r7, r0
 80021f0:	183a      	adds	r2, r7, r0
 80021f2:	8812      	ldrh	r2, [r2, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	183a      	adds	r2, r7, r0
 80021fe:	8812      	ldrh	r2, [r2, #0]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	e04c      	b.n	800229e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002204:	231e      	movs	r3, #30
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	e047      	b.n	800229e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800220e:	231f      	movs	r3, #31
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b08      	cmp	r3, #8
 8002216:	d015      	beq.n	8002244 <UART_SetConfig+0x1f0>
 8002218:	dc18      	bgt.n	800224c <UART_SetConfig+0x1f8>
 800221a:	2b04      	cmp	r3, #4
 800221c:	d00d      	beq.n	800223a <UART_SetConfig+0x1e6>
 800221e:	dc15      	bgt.n	800224c <UART_SetConfig+0x1f8>
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <UART_SetConfig+0x1d6>
 8002224:	2b02      	cmp	r3, #2
 8002226:	d005      	beq.n	8002234 <UART_SetConfig+0x1e0>
 8002228:	e010      	b.n	800224c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800222a:	f7ff fdff 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 800222e:	0003      	movs	r3, r0
 8002230:	61bb      	str	r3, [r7, #24]
        break;
 8002232:	e012      	b.n	800225a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002234:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <UART_SetConfig+0x27c>)
 8002236:	61bb      	str	r3, [r7, #24]
        break;
 8002238:	e00f      	b.n	800225a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800223a:	f7ff fd89 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 800223e:	0003      	movs	r3, r0
 8002240:	61bb      	str	r3, [r7, #24]
        break;
 8002242:	e00a      	b.n	800225a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	61bb      	str	r3, [r7, #24]
        break;
 800224a:	e006      	b.n	800225a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002250:	231e      	movs	r3, #30
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
        break;
 8002258:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01e      	beq.n	800229e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	085a      	lsrs	r2, r3, #1
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	18d2      	adds	r2, r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	0019      	movs	r1, r3
 8002270:	0010      	movs	r0, r2
 8002272:	f7fd ff53 	bl	800011c <__udivsi3>
 8002276:	0003      	movs	r3, r0
 8002278:	b29b      	uxth	r3, r3
 800227a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2b0f      	cmp	r3, #15
 8002280:	d909      	bls.n	8002296 <UART_SetConfig+0x242>
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	025b      	lsls	r3, r3, #9
 8002288:	429a      	cmp	r2, r3
 800228a:	d204      	bcs.n	8002296 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	60da      	str	r2, [r3, #12]
 8002294:	e003      	b.n	800229e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002296:	231e      	movs	r3, #30
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80022aa:	231e      	movs	r3, #30
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	781b      	ldrb	r3, [r3, #0]
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b008      	add	sp, #32
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	ffff69f3 	.word	0xffff69f3
 80022bc:	ffffcfff 	.word	0xffffcfff
 80022c0:	fffff4ff 	.word	0xfffff4ff
 80022c4:	40013800 	.word	0x40013800
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40004400 	.word	0x40004400
 80022d0:	007a1200 	.word	0x007a1200

080022d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	2201      	movs	r2, #1
 80022e2:	4013      	ands	r3, r2
 80022e4:	d00b      	beq.n	80022fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a4a      	ldr	r2, [pc, #296]	; (8002418 <UART_AdvFeatureConfig+0x144>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	0019      	movs	r1, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	2202      	movs	r2, #2
 8002304:	4013      	ands	r3, r2
 8002306:	d00b      	beq.n	8002320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4a43      	ldr	r2, [pc, #268]	; (800241c <UART_AdvFeatureConfig+0x148>)
 8002310:	4013      	ands	r3, r2
 8002312:	0019      	movs	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	2204      	movs	r2, #4
 8002326:	4013      	ands	r3, r2
 8002328:	d00b      	beq.n	8002342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4a3b      	ldr	r2, [pc, #236]	; (8002420 <UART_AdvFeatureConfig+0x14c>)
 8002332:	4013      	ands	r3, r2
 8002334:	0019      	movs	r1, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	2208      	movs	r2, #8
 8002348:	4013      	ands	r3, r2
 800234a:	d00b      	beq.n	8002364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4a34      	ldr	r2, [pc, #208]	; (8002424 <UART_AdvFeatureConfig+0x150>)
 8002354:	4013      	ands	r3, r2
 8002356:	0019      	movs	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	2210      	movs	r2, #16
 800236a:	4013      	ands	r3, r2
 800236c:	d00b      	beq.n	8002386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4a2c      	ldr	r2, [pc, #176]	; (8002428 <UART_AdvFeatureConfig+0x154>)
 8002376:	4013      	ands	r3, r2
 8002378:	0019      	movs	r1, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	2220      	movs	r2, #32
 800238c:	4013      	ands	r3, r2
 800238e:	d00b      	beq.n	80023a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	4a25      	ldr	r2, [pc, #148]	; (800242c <UART_AdvFeatureConfig+0x158>)
 8002398:	4013      	ands	r3, r2
 800239a:	0019      	movs	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	2240      	movs	r2, #64	; 0x40
 80023ae:	4013      	ands	r3, r2
 80023b0:	d01d      	beq.n	80023ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <UART_AdvFeatureConfig+0x15c>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	035b      	lsls	r3, r3, #13
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d10b      	bne.n	80023ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a15      	ldr	r2, [pc, #84]	; (8002434 <UART_AdvFeatureConfig+0x160>)
 80023de:	4013      	ands	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	2280      	movs	r2, #128	; 0x80
 80023f4:	4013      	ands	r3, r2
 80023f6:	d00b      	beq.n	8002410 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <UART_AdvFeatureConfig+0x164>)
 8002400:	4013      	ands	r3, r2
 8002402:	0019      	movs	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]
  }
}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	b002      	add	sp, #8
 8002416:	bd80      	pop	{r7, pc}
 8002418:	fffdffff 	.word	0xfffdffff
 800241c:	fffeffff 	.word	0xfffeffff
 8002420:	fffbffff 	.word	0xfffbffff
 8002424:	ffff7fff 	.word	0xffff7fff
 8002428:	ffffefff 	.word	0xffffefff
 800242c:	ffffdfff 	.word	0xffffdfff
 8002430:	ffefffff 	.word	0xffefffff
 8002434:	ff9fffff 	.word	0xff9fffff
 8002438:	fff7ffff 	.word	0xfff7ffff

0800243c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af02      	add	r7, sp, #8
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	2100      	movs	r1, #0
 800244a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800244c:	f7fe fb52 	bl	8000af4 <HAL_GetTick>
 8002450:	0003      	movs	r3, r0
 8002452:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2208      	movs	r2, #8
 800245c:	4013      	ands	r3, r2
 800245e:	2b08      	cmp	r3, #8
 8002460:	d10c      	bne.n	800247c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2280      	movs	r2, #128	; 0x80
 8002466:	0391      	lsls	r1, r2, #14
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	4a17      	ldr	r2, [pc, #92]	; (80024c8 <UART_CheckIdleState+0x8c>)
 800246c:	9200      	str	r2, [sp, #0]
 800246e:	2200      	movs	r2, #0
 8002470:	f000 f82c 	bl	80024cc <UART_WaitOnFlagUntilTimeout>
 8002474:	1e03      	subs	r3, r0, #0
 8002476:	d001      	beq.n	800247c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e021      	b.n	80024c0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2204      	movs	r2, #4
 8002484:	4013      	ands	r3, r2
 8002486:	2b04      	cmp	r3, #4
 8002488:	d10c      	bne.n	80024a4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	03d1      	lsls	r1, r2, #15
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <UART_CheckIdleState+0x8c>)
 8002494:	9200      	str	r2, [sp, #0]
 8002496:	2200      	movs	r2, #0
 8002498:	f000 f818 	bl	80024cc <UART_WaitOnFlagUntilTimeout>
 800249c:	1e03      	subs	r3, r0, #0
 800249e:	d001      	beq.n	80024a4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e00d      	b.n	80024c0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2220      	movs	r2, #32
 80024a8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2220      	movs	r2, #32
 80024ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2274      	movs	r2, #116	; 0x74
 80024ba:	2100      	movs	r1, #0
 80024bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	0018      	movs	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b004      	add	sp, #16
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	01ffffff 	.word	0x01ffffff

080024cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b094      	sub	sp, #80	; 0x50
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	1dfb      	adds	r3, r7, #7
 80024da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024dc:	e0a3      	b.n	8002626 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024e0:	3301      	adds	r3, #1
 80024e2:	d100      	bne.n	80024e6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80024e4:	e09f      	b.n	8002626 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e6:	f7fe fb05 	bl	8000af4 <HAL_GetTick>
 80024ea:	0002      	movs	r2, r0
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d302      	bcc.n	80024fc <UART_WaitOnFlagUntilTimeout+0x30>
 80024f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d13d      	bne.n	8002578 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002504:	647b      	str	r3, [r7, #68]	; 0x44
 8002506:	2301      	movs	r3, #1
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250c:	f383 8810 	msr	PRIMASK, r3
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	494c      	ldr	r1, [pc, #304]	; (8002650 <UART_WaitOnFlagUntilTimeout+0x184>)
 800251e:	400a      	ands	r2, r1
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	f383 8810 	msr	PRIMASK, r3
}
 800252c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800252e:	f3ef 8310 	mrs	r3, PRIMASK
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002536:	643b      	str	r3, [r7, #64]	; 0x40
 8002538:	2301      	movs	r3, #1
 800253a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253e:	f383 8810 	msr	PRIMASK, r3
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2101      	movs	r1, #1
 8002550:	438a      	bics	r2, r1
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800255a:	f383 8810 	msr	PRIMASK, r3
}
 800255e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2274      	movs	r2, #116	; 0x74
 8002570:	2100      	movs	r1, #0
 8002572:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e067      	b.n	8002648 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2204      	movs	r2, #4
 8002580:	4013      	ands	r3, r2
 8002582:	d050      	beq.n	8002626 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	401a      	ands	r2, r3
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	429a      	cmp	r2, r3
 8002596:	d146      	bne.n	8002626 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	0112      	lsls	r2, r2, #4
 80025a0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025a2:	f3ef 8310 	mrs	r3, PRIMASK
 80025a6:	613b      	str	r3, [r7, #16]
  return(result);
 80025a8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025ac:	2301      	movs	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f383 8810 	msr	PRIMASK, r3
}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4923      	ldr	r1, [pc, #140]	; (8002650 <UART_WaitOnFlagUntilTimeout+0x184>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	f383 8810 	msr	PRIMASK, r3
}
 80025d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025d4:	f3ef 8310 	mrs	r3, PRIMASK
 80025d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80025da:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80025de:	2301      	movs	r3, #1
 80025e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	f383 8810 	msr	PRIMASK, r3
}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2101      	movs	r1, #1
 80025f6:	438a      	bics	r2, r1
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	f383 8810 	msr	PRIMASK, r3
}
 8002604:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2280      	movs	r2, #128	; 0x80
 8002616:	2120      	movs	r1, #32
 8002618:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2274      	movs	r2, #116	; 0x74
 800261e:	2100      	movs	r1, #0
 8002620:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e010      	b.n	8002648 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	4013      	ands	r3, r2
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	425a      	negs	r2, r3
 8002636:	4153      	adcs	r3, r2
 8002638:	b2db      	uxtb	r3, r3
 800263a:	001a      	movs	r2, r3
 800263c:	1dfb      	adds	r3, r7, #7
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d100      	bne.n	8002646 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002644:	e74b      	b.n	80024de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b014      	add	sp, #80	; 0x50
 800264e:	bd80      	pop	{r7, pc}
 8002650:	fffffe5f 	.word	0xfffffe5f

08002654 <__errno>:
 8002654:	4b01      	ldr	r3, [pc, #4]	; (800265c <__errno+0x8>)
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	4770      	bx	lr
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	2000000c 	.word	0x2000000c

08002660 <__libc_init_array>:
 8002660:	b570      	push	{r4, r5, r6, lr}
 8002662:	2600      	movs	r6, #0
 8002664:	4d0c      	ldr	r5, [pc, #48]	; (8002698 <__libc_init_array+0x38>)
 8002666:	4c0d      	ldr	r4, [pc, #52]	; (800269c <__libc_init_array+0x3c>)
 8002668:	1b64      	subs	r4, r4, r5
 800266a:	10a4      	asrs	r4, r4, #2
 800266c:	42a6      	cmp	r6, r4
 800266e:	d109      	bne.n	8002684 <__libc_init_array+0x24>
 8002670:	2600      	movs	r6, #0
 8002672:	f000 fc8b 	bl	8002f8c <_init>
 8002676:	4d0a      	ldr	r5, [pc, #40]	; (80026a0 <__libc_init_array+0x40>)
 8002678:	4c0a      	ldr	r4, [pc, #40]	; (80026a4 <__libc_init_array+0x44>)
 800267a:	1b64      	subs	r4, r4, r5
 800267c:	10a4      	asrs	r4, r4, #2
 800267e:	42a6      	cmp	r6, r4
 8002680:	d105      	bne.n	800268e <__libc_init_array+0x2e>
 8002682:	bd70      	pop	{r4, r5, r6, pc}
 8002684:	00b3      	lsls	r3, r6, #2
 8002686:	58eb      	ldr	r3, [r5, r3]
 8002688:	4798      	blx	r3
 800268a:	3601      	adds	r6, #1
 800268c:	e7ee      	b.n	800266c <__libc_init_array+0xc>
 800268e:	00b3      	lsls	r3, r6, #2
 8002690:	58eb      	ldr	r3, [r5, r3]
 8002692:	4798      	blx	r3
 8002694:	3601      	adds	r6, #1
 8002696:	e7f2      	b.n	800267e <__libc_init_array+0x1e>
 8002698:	08003028 	.word	0x08003028
 800269c:	08003028 	.word	0x08003028
 80026a0:	08003028 	.word	0x08003028
 80026a4:	0800302c 	.word	0x0800302c

080026a8 <memset>:
 80026a8:	0003      	movs	r3, r0
 80026aa:	1882      	adds	r2, r0, r2
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d100      	bne.n	80026b2 <memset+0xa>
 80026b0:	4770      	bx	lr
 80026b2:	7019      	strb	r1, [r3, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	e7f9      	b.n	80026ac <memset+0x4>

080026b8 <siprintf>:
 80026b8:	b40e      	push	{r1, r2, r3}
 80026ba:	b500      	push	{lr}
 80026bc:	490b      	ldr	r1, [pc, #44]	; (80026ec <siprintf+0x34>)
 80026be:	b09c      	sub	sp, #112	; 0x70
 80026c0:	ab1d      	add	r3, sp, #116	; 0x74
 80026c2:	9002      	str	r0, [sp, #8]
 80026c4:	9006      	str	r0, [sp, #24]
 80026c6:	9107      	str	r1, [sp, #28]
 80026c8:	9104      	str	r1, [sp, #16]
 80026ca:	4809      	ldr	r0, [pc, #36]	; (80026f0 <siprintf+0x38>)
 80026cc:	4909      	ldr	r1, [pc, #36]	; (80026f4 <siprintf+0x3c>)
 80026ce:	cb04      	ldmia	r3!, {r2}
 80026d0:	9105      	str	r1, [sp, #20]
 80026d2:	6800      	ldr	r0, [r0, #0]
 80026d4:	a902      	add	r1, sp, #8
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	f000 f870 	bl	80027bc <_svfiprintf_r>
 80026dc:	2300      	movs	r3, #0
 80026de:	9a02      	ldr	r2, [sp, #8]
 80026e0:	7013      	strb	r3, [r2, #0]
 80026e2:	b01c      	add	sp, #112	; 0x70
 80026e4:	bc08      	pop	{r3}
 80026e6:	b003      	add	sp, #12
 80026e8:	4718      	bx	r3
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	7fffffff 	.word	0x7fffffff
 80026f0:	2000000c 	.word	0x2000000c
 80026f4:	ffff0208 	.word	0xffff0208

080026f8 <__ssputs_r>:
 80026f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026fa:	688e      	ldr	r6, [r1, #8]
 80026fc:	b085      	sub	sp, #20
 80026fe:	0007      	movs	r7, r0
 8002700:	000c      	movs	r4, r1
 8002702:	9203      	str	r2, [sp, #12]
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	429e      	cmp	r6, r3
 8002708:	d83c      	bhi.n	8002784 <__ssputs_r+0x8c>
 800270a:	2390      	movs	r3, #144	; 0x90
 800270c:	898a      	ldrh	r2, [r1, #12]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	421a      	tst	r2, r3
 8002712:	d034      	beq.n	800277e <__ssputs_r+0x86>
 8002714:	6909      	ldr	r1, [r1, #16]
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	6960      	ldr	r0, [r4, #20]
 800271a:	1a5b      	subs	r3, r3, r1
 800271c:	9302      	str	r3, [sp, #8]
 800271e:	2303      	movs	r3, #3
 8002720:	4343      	muls	r3, r0
 8002722:	0fdd      	lsrs	r5, r3, #31
 8002724:	18ed      	adds	r5, r5, r3
 8002726:	9b01      	ldr	r3, [sp, #4]
 8002728:	9802      	ldr	r0, [sp, #8]
 800272a:	3301      	adds	r3, #1
 800272c:	181b      	adds	r3, r3, r0
 800272e:	106d      	asrs	r5, r5, #1
 8002730:	42ab      	cmp	r3, r5
 8002732:	d900      	bls.n	8002736 <__ssputs_r+0x3e>
 8002734:	001d      	movs	r5, r3
 8002736:	0553      	lsls	r3, r2, #21
 8002738:	d532      	bpl.n	80027a0 <__ssputs_r+0xa8>
 800273a:	0029      	movs	r1, r5
 800273c:	0038      	movs	r0, r7
 800273e:	f000 fb53 	bl	8002de8 <_malloc_r>
 8002742:	1e06      	subs	r6, r0, #0
 8002744:	d109      	bne.n	800275a <__ssputs_r+0x62>
 8002746:	230c      	movs	r3, #12
 8002748:	603b      	str	r3, [r7, #0]
 800274a:	2340      	movs	r3, #64	; 0x40
 800274c:	2001      	movs	r0, #1
 800274e:	89a2      	ldrh	r2, [r4, #12]
 8002750:	4240      	negs	r0, r0
 8002752:	4313      	orrs	r3, r2
 8002754:	81a3      	strh	r3, [r4, #12]
 8002756:	b005      	add	sp, #20
 8002758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800275a:	9a02      	ldr	r2, [sp, #8]
 800275c:	6921      	ldr	r1, [r4, #16]
 800275e:	f000 faba 	bl	8002cd6 <memcpy>
 8002762:	89a3      	ldrh	r3, [r4, #12]
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <__ssputs_r+0xc0>)
 8002766:	401a      	ands	r2, r3
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	4313      	orrs	r3, r2
 800276c:	81a3      	strh	r3, [r4, #12]
 800276e:	9b02      	ldr	r3, [sp, #8]
 8002770:	6126      	str	r6, [r4, #16]
 8002772:	18f6      	adds	r6, r6, r3
 8002774:	6026      	str	r6, [r4, #0]
 8002776:	6165      	str	r5, [r4, #20]
 8002778:	9e01      	ldr	r6, [sp, #4]
 800277a:	1aed      	subs	r5, r5, r3
 800277c:	60a5      	str	r5, [r4, #8]
 800277e:	9b01      	ldr	r3, [sp, #4]
 8002780:	429e      	cmp	r6, r3
 8002782:	d900      	bls.n	8002786 <__ssputs_r+0x8e>
 8002784:	9e01      	ldr	r6, [sp, #4]
 8002786:	0032      	movs	r2, r6
 8002788:	9903      	ldr	r1, [sp, #12]
 800278a:	6820      	ldr	r0, [r4, #0]
 800278c:	f000 faac 	bl	8002ce8 <memmove>
 8002790:	68a3      	ldr	r3, [r4, #8]
 8002792:	2000      	movs	r0, #0
 8002794:	1b9b      	subs	r3, r3, r6
 8002796:	60a3      	str	r3, [r4, #8]
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	199e      	adds	r6, r3, r6
 800279c:	6026      	str	r6, [r4, #0]
 800279e:	e7da      	b.n	8002756 <__ssputs_r+0x5e>
 80027a0:	002a      	movs	r2, r5
 80027a2:	0038      	movs	r0, r7
 80027a4:	f000 fb96 	bl	8002ed4 <_realloc_r>
 80027a8:	1e06      	subs	r6, r0, #0
 80027aa:	d1e0      	bne.n	800276e <__ssputs_r+0x76>
 80027ac:	0038      	movs	r0, r7
 80027ae:	6921      	ldr	r1, [r4, #16]
 80027b0:	f000 faae 	bl	8002d10 <_free_r>
 80027b4:	e7c7      	b.n	8002746 <__ssputs_r+0x4e>
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	fffffb7f 	.word	0xfffffb7f

080027bc <_svfiprintf_r>:
 80027bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027be:	b0a1      	sub	sp, #132	; 0x84
 80027c0:	9003      	str	r0, [sp, #12]
 80027c2:	001d      	movs	r5, r3
 80027c4:	898b      	ldrh	r3, [r1, #12]
 80027c6:	000f      	movs	r7, r1
 80027c8:	0016      	movs	r6, r2
 80027ca:	061b      	lsls	r3, r3, #24
 80027cc:	d511      	bpl.n	80027f2 <_svfiprintf_r+0x36>
 80027ce:	690b      	ldr	r3, [r1, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10e      	bne.n	80027f2 <_svfiprintf_r+0x36>
 80027d4:	2140      	movs	r1, #64	; 0x40
 80027d6:	f000 fb07 	bl	8002de8 <_malloc_r>
 80027da:	6038      	str	r0, [r7, #0]
 80027dc:	6138      	str	r0, [r7, #16]
 80027de:	2800      	cmp	r0, #0
 80027e0:	d105      	bne.n	80027ee <_svfiprintf_r+0x32>
 80027e2:	230c      	movs	r3, #12
 80027e4:	9a03      	ldr	r2, [sp, #12]
 80027e6:	3801      	subs	r0, #1
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	b021      	add	sp, #132	; 0x84
 80027ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ee:	2340      	movs	r3, #64	; 0x40
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	2300      	movs	r3, #0
 80027f4:	ac08      	add	r4, sp, #32
 80027f6:	6163      	str	r3, [r4, #20]
 80027f8:	3320      	adds	r3, #32
 80027fa:	7663      	strb	r3, [r4, #25]
 80027fc:	3310      	adds	r3, #16
 80027fe:	76a3      	strb	r3, [r4, #26]
 8002800:	9507      	str	r5, [sp, #28]
 8002802:	0035      	movs	r5, r6
 8002804:	782b      	ldrb	r3, [r5, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <_svfiprintf_r+0x52>
 800280a:	2b25      	cmp	r3, #37	; 0x25
 800280c:	d147      	bne.n	800289e <_svfiprintf_r+0xe2>
 800280e:	1bab      	subs	r3, r5, r6
 8002810:	9305      	str	r3, [sp, #20]
 8002812:	42b5      	cmp	r5, r6
 8002814:	d00c      	beq.n	8002830 <_svfiprintf_r+0x74>
 8002816:	0032      	movs	r2, r6
 8002818:	0039      	movs	r1, r7
 800281a:	9803      	ldr	r0, [sp, #12]
 800281c:	f7ff ff6c 	bl	80026f8 <__ssputs_r>
 8002820:	1c43      	adds	r3, r0, #1
 8002822:	d100      	bne.n	8002826 <_svfiprintf_r+0x6a>
 8002824:	e0ae      	b.n	8002984 <_svfiprintf_r+0x1c8>
 8002826:	6962      	ldr	r2, [r4, #20]
 8002828:	9b05      	ldr	r3, [sp, #20]
 800282a:	4694      	mov	ip, r2
 800282c:	4463      	add	r3, ip
 800282e:	6163      	str	r3, [r4, #20]
 8002830:	782b      	ldrb	r3, [r5, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d100      	bne.n	8002838 <_svfiprintf_r+0x7c>
 8002836:	e0a5      	b.n	8002984 <_svfiprintf_r+0x1c8>
 8002838:	2201      	movs	r2, #1
 800283a:	2300      	movs	r3, #0
 800283c:	4252      	negs	r2, r2
 800283e:	6062      	str	r2, [r4, #4]
 8002840:	a904      	add	r1, sp, #16
 8002842:	3254      	adds	r2, #84	; 0x54
 8002844:	1852      	adds	r2, r2, r1
 8002846:	1c6e      	adds	r6, r5, #1
 8002848:	6023      	str	r3, [r4, #0]
 800284a:	60e3      	str	r3, [r4, #12]
 800284c:	60a3      	str	r3, [r4, #8]
 800284e:	7013      	strb	r3, [r2, #0]
 8002850:	65a3      	str	r3, [r4, #88]	; 0x58
 8002852:	2205      	movs	r2, #5
 8002854:	7831      	ldrb	r1, [r6, #0]
 8002856:	4854      	ldr	r0, [pc, #336]	; (80029a8 <_svfiprintf_r+0x1ec>)
 8002858:	f000 fa32 	bl	8002cc0 <memchr>
 800285c:	1c75      	adds	r5, r6, #1
 800285e:	2800      	cmp	r0, #0
 8002860:	d11f      	bne.n	80028a2 <_svfiprintf_r+0xe6>
 8002862:	6822      	ldr	r2, [r4, #0]
 8002864:	06d3      	lsls	r3, r2, #27
 8002866:	d504      	bpl.n	8002872 <_svfiprintf_r+0xb6>
 8002868:	2353      	movs	r3, #83	; 0x53
 800286a:	a904      	add	r1, sp, #16
 800286c:	185b      	adds	r3, r3, r1
 800286e:	2120      	movs	r1, #32
 8002870:	7019      	strb	r1, [r3, #0]
 8002872:	0713      	lsls	r3, r2, #28
 8002874:	d504      	bpl.n	8002880 <_svfiprintf_r+0xc4>
 8002876:	2353      	movs	r3, #83	; 0x53
 8002878:	a904      	add	r1, sp, #16
 800287a:	185b      	adds	r3, r3, r1
 800287c:	212b      	movs	r1, #43	; 0x2b
 800287e:	7019      	strb	r1, [r3, #0]
 8002880:	7833      	ldrb	r3, [r6, #0]
 8002882:	2b2a      	cmp	r3, #42	; 0x2a
 8002884:	d016      	beq.n	80028b4 <_svfiprintf_r+0xf8>
 8002886:	0035      	movs	r5, r6
 8002888:	2100      	movs	r1, #0
 800288a:	200a      	movs	r0, #10
 800288c:	68e3      	ldr	r3, [r4, #12]
 800288e:	782a      	ldrb	r2, [r5, #0]
 8002890:	1c6e      	adds	r6, r5, #1
 8002892:	3a30      	subs	r2, #48	; 0x30
 8002894:	2a09      	cmp	r2, #9
 8002896:	d94e      	bls.n	8002936 <_svfiprintf_r+0x17a>
 8002898:	2900      	cmp	r1, #0
 800289a:	d111      	bne.n	80028c0 <_svfiprintf_r+0x104>
 800289c:	e017      	b.n	80028ce <_svfiprintf_r+0x112>
 800289e:	3501      	adds	r5, #1
 80028a0:	e7b0      	b.n	8002804 <_svfiprintf_r+0x48>
 80028a2:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <_svfiprintf_r+0x1ec>)
 80028a4:	6822      	ldr	r2, [r4, #0]
 80028a6:	1ac0      	subs	r0, r0, r3
 80028a8:	2301      	movs	r3, #1
 80028aa:	4083      	lsls	r3, r0
 80028ac:	4313      	orrs	r3, r2
 80028ae:	002e      	movs	r6, r5
 80028b0:	6023      	str	r3, [r4, #0]
 80028b2:	e7ce      	b.n	8002852 <_svfiprintf_r+0x96>
 80028b4:	9b07      	ldr	r3, [sp, #28]
 80028b6:	1d19      	adds	r1, r3, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	9107      	str	r1, [sp, #28]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db01      	blt.n	80028c4 <_svfiprintf_r+0x108>
 80028c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80028c2:	e004      	b.n	80028ce <_svfiprintf_r+0x112>
 80028c4:	425b      	negs	r3, r3
 80028c6:	60e3      	str	r3, [r4, #12]
 80028c8:	2302      	movs	r3, #2
 80028ca:	4313      	orrs	r3, r2
 80028cc:	6023      	str	r3, [r4, #0]
 80028ce:	782b      	ldrb	r3, [r5, #0]
 80028d0:	2b2e      	cmp	r3, #46	; 0x2e
 80028d2:	d10a      	bne.n	80028ea <_svfiprintf_r+0x12e>
 80028d4:	786b      	ldrb	r3, [r5, #1]
 80028d6:	2b2a      	cmp	r3, #42	; 0x2a
 80028d8:	d135      	bne.n	8002946 <_svfiprintf_r+0x18a>
 80028da:	9b07      	ldr	r3, [sp, #28]
 80028dc:	3502      	adds	r5, #2
 80028de:	1d1a      	adds	r2, r3, #4
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	9207      	str	r2, [sp, #28]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	db2b      	blt.n	8002940 <_svfiprintf_r+0x184>
 80028e8:	9309      	str	r3, [sp, #36]	; 0x24
 80028ea:	4e30      	ldr	r6, [pc, #192]	; (80029ac <_svfiprintf_r+0x1f0>)
 80028ec:	2203      	movs	r2, #3
 80028ee:	0030      	movs	r0, r6
 80028f0:	7829      	ldrb	r1, [r5, #0]
 80028f2:	f000 f9e5 	bl	8002cc0 <memchr>
 80028f6:	2800      	cmp	r0, #0
 80028f8:	d006      	beq.n	8002908 <_svfiprintf_r+0x14c>
 80028fa:	2340      	movs	r3, #64	; 0x40
 80028fc:	1b80      	subs	r0, r0, r6
 80028fe:	4083      	lsls	r3, r0
 8002900:	6822      	ldr	r2, [r4, #0]
 8002902:	3501      	adds	r5, #1
 8002904:	4313      	orrs	r3, r2
 8002906:	6023      	str	r3, [r4, #0]
 8002908:	7829      	ldrb	r1, [r5, #0]
 800290a:	2206      	movs	r2, #6
 800290c:	4828      	ldr	r0, [pc, #160]	; (80029b0 <_svfiprintf_r+0x1f4>)
 800290e:	1c6e      	adds	r6, r5, #1
 8002910:	7621      	strb	r1, [r4, #24]
 8002912:	f000 f9d5 	bl	8002cc0 <memchr>
 8002916:	2800      	cmp	r0, #0
 8002918:	d03c      	beq.n	8002994 <_svfiprintf_r+0x1d8>
 800291a:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <_svfiprintf_r+0x1f8>)
 800291c:	2b00      	cmp	r3, #0
 800291e:	d125      	bne.n	800296c <_svfiprintf_r+0x1b0>
 8002920:	2207      	movs	r2, #7
 8002922:	9b07      	ldr	r3, [sp, #28]
 8002924:	3307      	adds	r3, #7
 8002926:	4393      	bics	r3, r2
 8002928:	3308      	adds	r3, #8
 800292a:	9307      	str	r3, [sp, #28]
 800292c:	6963      	ldr	r3, [r4, #20]
 800292e:	9a04      	ldr	r2, [sp, #16]
 8002930:	189b      	adds	r3, r3, r2
 8002932:	6163      	str	r3, [r4, #20]
 8002934:	e765      	b.n	8002802 <_svfiprintf_r+0x46>
 8002936:	4343      	muls	r3, r0
 8002938:	0035      	movs	r5, r6
 800293a:	2101      	movs	r1, #1
 800293c:	189b      	adds	r3, r3, r2
 800293e:	e7a6      	b.n	800288e <_svfiprintf_r+0xd2>
 8002940:	2301      	movs	r3, #1
 8002942:	425b      	negs	r3, r3
 8002944:	e7d0      	b.n	80028e8 <_svfiprintf_r+0x12c>
 8002946:	2300      	movs	r3, #0
 8002948:	200a      	movs	r0, #10
 800294a:	001a      	movs	r2, r3
 800294c:	3501      	adds	r5, #1
 800294e:	6063      	str	r3, [r4, #4]
 8002950:	7829      	ldrb	r1, [r5, #0]
 8002952:	1c6e      	adds	r6, r5, #1
 8002954:	3930      	subs	r1, #48	; 0x30
 8002956:	2909      	cmp	r1, #9
 8002958:	d903      	bls.n	8002962 <_svfiprintf_r+0x1a6>
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0c5      	beq.n	80028ea <_svfiprintf_r+0x12e>
 800295e:	9209      	str	r2, [sp, #36]	; 0x24
 8002960:	e7c3      	b.n	80028ea <_svfiprintf_r+0x12e>
 8002962:	4342      	muls	r2, r0
 8002964:	0035      	movs	r5, r6
 8002966:	2301      	movs	r3, #1
 8002968:	1852      	adds	r2, r2, r1
 800296a:	e7f1      	b.n	8002950 <_svfiprintf_r+0x194>
 800296c:	ab07      	add	r3, sp, #28
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	003a      	movs	r2, r7
 8002972:	0021      	movs	r1, r4
 8002974:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <_svfiprintf_r+0x1fc>)
 8002976:	9803      	ldr	r0, [sp, #12]
 8002978:	e000      	b.n	800297c <_svfiprintf_r+0x1c0>
 800297a:	bf00      	nop
 800297c:	9004      	str	r0, [sp, #16]
 800297e:	9b04      	ldr	r3, [sp, #16]
 8002980:	3301      	adds	r3, #1
 8002982:	d1d3      	bne.n	800292c <_svfiprintf_r+0x170>
 8002984:	89bb      	ldrh	r3, [r7, #12]
 8002986:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002988:	065b      	lsls	r3, r3, #25
 800298a:	d400      	bmi.n	800298e <_svfiprintf_r+0x1d2>
 800298c:	e72d      	b.n	80027ea <_svfiprintf_r+0x2e>
 800298e:	2001      	movs	r0, #1
 8002990:	4240      	negs	r0, r0
 8002992:	e72a      	b.n	80027ea <_svfiprintf_r+0x2e>
 8002994:	ab07      	add	r3, sp, #28
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	003a      	movs	r2, r7
 800299a:	0021      	movs	r1, r4
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <_svfiprintf_r+0x1fc>)
 800299e:	9803      	ldr	r0, [sp, #12]
 80029a0:	f000 f87c 	bl	8002a9c <_printf_i>
 80029a4:	e7ea      	b.n	800297c <_svfiprintf_r+0x1c0>
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	08002ff4 	.word	0x08002ff4
 80029ac:	08002ffa 	.word	0x08002ffa
 80029b0:	08002ffe 	.word	0x08002ffe
 80029b4:	00000000 	.word	0x00000000
 80029b8:	080026f9 	.word	0x080026f9

080029bc <_printf_common>:
 80029bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029be:	0015      	movs	r5, r2
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	688a      	ldr	r2, [r1, #8]
 80029c4:	690b      	ldr	r3, [r1, #16]
 80029c6:	000c      	movs	r4, r1
 80029c8:	9000      	str	r0, [sp, #0]
 80029ca:	4293      	cmp	r3, r2
 80029cc:	da00      	bge.n	80029d0 <_printf_common+0x14>
 80029ce:	0013      	movs	r3, r2
 80029d0:	0022      	movs	r2, r4
 80029d2:	602b      	str	r3, [r5, #0]
 80029d4:	3243      	adds	r2, #67	; 0x43
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	2a00      	cmp	r2, #0
 80029da:	d001      	beq.n	80029e0 <_printf_common+0x24>
 80029dc:	3301      	adds	r3, #1
 80029de:	602b      	str	r3, [r5, #0]
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	069b      	lsls	r3, r3, #26
 80029e4:	d502      	bpl.n	80029ec <_printf_common+0x30>
 80029e6:	682b      	ldr	r3, [r5, #0]
 80029e8:	3302      	adds	r3, #2
 80029ea:	602b      	str	r3, [r5, #0]
 80029ec:	6822      	ldr	r2, [r4, #0]
 80029ee:	2306      	movs	r3, #6
 80029f0:	0017      	movs	r7, r2
 80029f2:	401f      	ands	r7, r3
 80029f4:	421a      	tst	r2, r3
 80029f6:	d027      	beq.n	8002a48 <_printf_common+0x8c>
 80029f8:	0023      	movs	r3, r4
 80029fa:	3343      	adds	r3, #67	; 0x43
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	1e5a      	subs	r2, r3, #1
 8002a00:	4193      	sbcs	r3, r2
 8002a02:	6822      	ldr	r2, [r4, #0]
 8002a04:	0692      	lsls	r2, r2, #26
 8002a06:	d430      	bmi.n	8002a6a <_printf_common+0xae>
 8002a08:	0022      	movs	r2, r4
 8002a0a:	9901      	ldr	r1, [sp, #4]
 8002a0c:	9800      	ldr	r0, [sp, #0]
 8002a0e:	9e08      	ldr	r6, [sp, #32]
 8002a10:	3243      	adds	r2, #67	; 0x43
 8002a12:	47b0      	blx	r6
 8002a14:	1c43      	adds	r3, r0, #1
 8002a16:	d025      	beq.n	8002a64 <_printf_common+0xa8>
 8002a18:	2306      	movs	r3, #6
 8002a1a:	6820      	ldr	r0, [r4, #0]
 8002a1c:	682a      	ldr	r2, [r5, #0]
 8002a1e:	68e1      	ldr	r1, [r4, #12]
 8002a20:	2500      	movs	r5, #0
 8002a22:	4003      	ands	r3, r0
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d103      	bne.n	8002a30 <_printf_common+0x74>
 8002a28:	1a8d      	subs	r5, r1, r2
 8002a2a:	43eb      	mvns	r3, r5
 8002a2c:	17db      	asrs	r3, r3, #31
 8002a2e:	401d      	ands	r5, r3
 8002a30:	68a3      	ldr	r3, [r4, #8]
 8002a32:	6922      	ldr	r2, [r4, #16]
 8002a34:	4293      	cmp	r3, r2
 8002a36:	dd01      	ble.n	8002a3c <_printf_common+0x80>
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	18ed      	adds	r5, r5, r3
 8002a3c:	2700      	movs	r7, #0
 8002a3e:	42bd      	cmp	r5, r7
 8002a40:	d120      	bne.n	8002a84 <_printf_common+0xc8>
 8002a42:	2000      	movs	r0, #0
 8002a44:	e010      	b.n	8002a68 <_printf_common+0xac>
 8002a46:	3701      	adds	r7, #1
 8002a48:	68e3      	ldr	r3, [r4, #12]
 8002a4a:	682a      	ldr	r2, [r5, #0]
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	42bb      	cmp	r3, r7
 8002a50:	ddd2      	ble.n	80029f8 <_printf_common+0x3c>
 8002a52:	0022      	movs	r2, r4
 8002a54:	2301      	movs	r3, #1
 8002a56:	9901      	ldr	r1, [sp, #4]
 8002a58:	9800      	ldr	r0, [sp, #0]
 8002a5a:	9e08      	ldr	r6, [sp, #32]
 8002a5c:	3219      	adds	r2, #25
 8002a5e:	47b0      	blx	r6
 8002a60:	1c43      	adds	r3, r0, #1
 8002a62:	d1f0      	bne.n	8002a46 <_printf_common+0x8a>
 8002a64:	2001      	movs	r0, #1
 8002a66:	4240      	negs	r0, r0
 8002a68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a6a:	2030      	movs	r0, #48	; 0x30
 8002a6c:	18e1      	adds	r1, r4, r3
 8002a6e:	3143      	adds	r1, #67	; 0x43
 8002a70:	7008      	strb	r0, [r1, #0]
 8002a72:	0021      	movs	r1, r4
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	3145      	adds	r1, #69	; 0x45
 8002a78:	7809      	ldrb	r1, [r1, #0]
 8002a7a:	18a2      	adds	r2, r4, r2
 8002a7c:	3243      	adds	r2, #67	; 0x43
 8002a7e:	3302      	adds	r3, #2
 8002a80:	7011      	strb	r1, [r2, #0]
 8002a82:	e7c1      	b.n	8002a08 <_printf_common+0x4c>
 8002a84:	0022      	movs	r2, r4
 8002a86:	2301      	movs	r3, #1
 8002a88:	9901      	ldr	r1, [sp, #4]
 8002a8a:	9800      	ldr	r0, [sp, #0]
 8002a8c:	9e08      	ldr	r6, [sp, #32]
 8002a8e:	321a      	adds	r2, #26
 8002a90:	47b0      	blx	r6
 8002a92:	1c43      	adds	r3, r0, #1
 8002a94:	d0e6      	beq.n	8002a64 <_printf_common+0xa8>
 8002a96:	3701      	adds	r7, #1
 8002a98:	e7d1      	b.n	8002a3e <_printf_common+0x82>
	...

08002a9c <_printf_i>:
 8002a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9e:	b08b      	sub	sp, #44	; 0x2c
 8002aa0:	9206      	str	r2, [sp, #24]
 8002aa2:	000a      	movs	r2, r1
 8002aa4:	3243      	adds	r2, #67	; 0x43
 8002aa6:	9307      	str	r3, [sp, #28]
 8002aa8:	9005      	str	r0, [sp, #20]
 8002aaa:	9204      	str	r2, [sp, #16]
 8002aac:	7e0a      	ldrb	r2, [r1, #24]
 8002aae:	000c      	movs	r4, r1
 8002ab0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002ab2:	2a78      	cmp	r2, #120	; 0x78
 8002ab4:	d807      	bhi.n	8002ac6 <_printf_i+0x2a>
 8002ab6:	2a62      	cmp	r2, #98	; 0x62
 8002ab8:	d809      	bhi.n	8002ace <_printf_i+0x32>
 8002aba:	2a00      	cmp	r2, #0
 8002abc:	d100      	bne.n	8002ac0 <_printf_i+0x24>
 8002abe:	e0c1      	b.n	8002c44 <_printf_i+0x1a8>
 8002ac0:	2a58      	cmp	r2, #88	; 0x58
 8002ac2:	d100      	bne.n	8002ac6 <_printf_i+0x2a>
 8002ac4:	e08c      	b.n	8002be0 <_printf_i+0x144>
 8002ac6:	0026      	movs	r6, r4
 8002ac8:	3642      	adds	r6, #66	; 0x42
 8002aca:	7032      	strb	r2, [r6, #0]
 8002acc:	e022      	b.n	8002b14 <_printf_i+0x78>
 8002ace:	0010      	movs	r0, r2
 8002ad0:	3863      	subs	r0, #99	; 0x63
 8002ad2:	2815      	cmp	r0, #21
 8002ad4:	d8f7      	bhi.n	8002ac6 <_printf_i+0x2a>
 8002ad6:	f7fd fb17 	bl	8000108 <__gnu_thumb1_case_shi>
 8002ada:	0016      	.short	0x0016
 8002adc:	fff6001f 	.word	0xfff6001f
 8002ae0:	fff6fff6 	.word	0xfff6fff6
 8002ae4:	001ffff6 	.word	0x001ffff6
 8002ae8:	fff6fff6 	.word	0xfff6fff6
 8002aec:	fff6fff6 	.word	0xfff6fff6
 8002af0:	003600a8 	.word	0x003600a8
 8002af4:	fff6009a 	.word	0xfff6009a
 8002af8:	00b9fff6 	.word	0x00b9fff6
 8002afc:	0036fff6 	.word	0x0036fff6
 8002b00:	fff6fff6 	.word	0xfff6fff6
 8002b04:	009e      	.short	0x009e
 8002b06:	0026      	movs	r6, r4
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	3642      	adds	r6, #66	; 0x42
 8002b0c:	1d11      	adds	r1, r2, #4
 8002b0e:	6019      	str	r1, [r3, #0]
 8002b10:	6813      	ldr	r3, [r2, #0]
 8002b12:	7033      	strb	r3, [r6, #0]
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0a7      	b.n	8002c68 <_printf_i+0x1cc>
 8002b18:	6808      	ldr	r0, [r1, #0]
 8002b1a:	6819      	ldr	r1, [r3, #0]
 8002b1c:	1d0a      	adds	r2, r1, #4
 8002b1e:	0605      	lsls	r5, r0, #24
 8002b20:	d50b      	bpl.n	8002b3a <_printf_i+0x9e>
 8002b22:	680d      	ldr	r5, [r1, #0]
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	2d00      	cmp	r5, #0
 8002b28:	da03      	bge.n	8002b32 <_printf_i+0x96>
 8002b2a:	232d      	movs	r3, #45	; 0x2d
 8002b2c:	9a04      	ldr	r2, [sp, #16]
 8002b2e:	426d      	negs	r5, r5
 8002b30:	7013      	strb	r3, [r2, #0]
 8002b32:	4b61      	ldr	r3, [pc, #388]	; (8002cb8 <_printf_i+0x21c>)
 8002b34:	270a      	movs	r7, #10
 8002b36:	9303      	str	r3, [sp, #12]
 8002b38:	e01b      	b.n	8002b72 <_printf_i+0xd6>
 8002b3a:	680d      	ldr	r5, [r1, #0]
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	0641      	lsls	r1, r0, #25
 8002b40:	d5f1      	bpl.n	8002b26 <_printf_i+0x8a>
 8002b42:	b22d      	sxth	r5, r5
 8002b44:	e7ef      	b.n	8002b26 <_printf_i+0x8a>
 8002b46:	680d      	ldr	r5, [r1, #0]
 8002b48:	6819      	ldr	r1, [r3, #0]
 8002b4a:	1d08      	adds	r0, r1, #4
 8002b4c:	6018      	str	r0, [r3, #0]
 8002b4e:	062e      	lsls	r6, r5, #24
 8002b50:	d501      	bpl.n	8002b56 <_printf_i+0xba>
 8002b52:	680d      	ldr	r5, [r1, #0]
 8002b54:	e003      	b.n	8002b5e <_printf_i+0xc2>
 8002b56:	066d      	lsls	r5, r5, #25
 8002b58:	d5fb      	bpl.n	8002b52 <_printf_i+0xb6>
 8002b5a:	680d      	ldr	r5, [r1, #0]
 8002b5c:	b2ad      	uxth	r5, r5
 8002b5e:	4b56      	ldr	r3, [pc, #344]	; (8002cb8 <_printf_i+0x21c>)
 8002b60:	2708      	movs	r7, #8
 8002b62:	9303      	str	r3, [sp, #12]
 8002b64:	2a6f      	cmp	r2, #111	; 0x6f
 8002b66:	d000      	beq.n	8002b6a <_printf_i+0xce>
 8002b68:	3702      	adds	r7, #2
 8002b6a:	0023      	movs	r3, r4
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	3343      	adds	r3, #67	; 0x43
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	6863      	ldr	r3, [r4, #4]
 8002b74:	60a3      	str	r3, [r4, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db03      	blt.n	8002b82 <_printf_i+0xe6>
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	6821      	ldr	r1, [r4, #0]
 8002b7e:	4391      	bics	r1, r2
 8002b80:	6021      	str	r1, [r4, #0]
 8002b82:	2d00      	cmp	r5, #0
 8002b84:	d102      	bne.n	8002b8c <_printf_i+0xf0>
 8002b86:	9e04      	ldr	r6, [sp, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00c      	beq.n	8002ba6 <_printf_i+0x10a>
 8002b8c:	9e04      	ldr	r6, [sp, #16]
 8002b8e:	0028      	movs	r0, r5
 8002b90:	0039      	movs	r1, r7
 8002b92:	f7fd fb49 	bl	8000228 <__aeabi_uidivmod>
 8002b96:	9b03      	ldr	r3, [sp, #12]
 8002b98:	3e01      	subs	r6, #1
 8002b9a:	5c5b      	ldrb	r3, [r3, r1]
 8002b9c:	7033      	strb	r3, [r6, #0]
 8002b9e:	002b      	movs	r3, r5
 8002ba0:	0005      	movs	r5, r0
 8002ba2:	429f      	cmp	r7, r3
 8002ba4:	d9f3      	bls.n	8002b8e <_printf_i+0xf2>
 8002ba6:	2f08      	cmp	r7, #8
 8002ba8:	d109      	bne.n	8002bbe <_printf_i+0x122>
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	07db      	lsls	r3, r3, #31
 8002bae:	d506      	bpl.n	8002bbe <_printf_i+0x122>
 8002bb0:	6863      	ldr	r3, [r4, #4]
 8002bb2:	6922      	ldr	r2, [r4, #16]
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	dc02      	bgt.n	8002bbe <_printf_i+0x122>
 8002bb8:	2330      	movs	r3, #48	; 0x30
 8002bba:	3e01      	subs	r6, #1
 8002bbc:	7033      	strb	r3, [r6, #0]
 8002bbe:	9b04      	ldr	r3, [sp, #16]
 8002bc0:	1b9b      	subs	r3, r3, r6
 8002bc2:	6123      	str	r3, [r4, #16]
 8002bc4:	9b07      	ldr	r3, [sp, #28]
 8002bc6:	0021      	movs	r1, r4
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	9805      	ldr	r0, [sp, #20]
 8002bcc:	9b06      	ldr	r3, [sp, #24]
 8002bce:	aa09      	add	r2, sp, #36	; 0x24
 8002bd0:	f7ff fef4 	bl	80029bc <_printf_common>
 8002bd4:	1c43      	adds	r3, r0, #1
 8002bd6:	d14c      	bne.n	8002c72 <_printf_i+0x1d6>
 8002bd8:	2001      	movs	r0, #1
 8002bda:	4240      	negs	r0, r0
 8002bdc:	b00b      	add	sp, #44	; 0x2c
 8002bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002be0:	3145      	adds	r1, #69	; 0x45
 8002be2:	700a      	strb	r2, [r1, #0]
 8002be4:	4a34      	ldr	r2, [pc, #208]	; (8002cb8 <_printf_i+0x21c>)
 8002be6:	9203      	str	r2, [sp, #12]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	6821      	ldr	r1, [r4, #0]
 8002bec:	ca20      	ldmia	r2!, {r5}
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	0608      	lsls	r0, r1, #24
 8002bf2:	d516      	bpl.n	8002c22 <_printf_i+0x186>
 8002bf4:	07cb      	lsls	r3, r1, #31
 8002bf6:	d502      	bpl.n	8002bfe <_printf_i+0x162>
 8002bf8:	2320      	movs	r3, #32
 8002bfa:	4319      	orrs	r1, r3
 8002bfc:	6021      	str	r1, [r4, #0]
 8002bfe:	2710      	movs	r7, #16
 8002c00:	2d00      	cmp	r5, #0
 8002c02:	d1b2      	bne.n	8002b6a <_printf_i+0xce>
 8002c04:	2320      	movs	r3, #32
 8002c06:	6822      	ldr	r2, [r4, #0]
 8002c08:	439a      	bics	r2, r3
 8002c0a:	6022      	str	r2, [r4, #0]
 8002c0c:	e7ad      	b.n	8002b6a <_printf_i+0xce>
 8002c0e:	2220      	movs	r2, #32
 8002c10:	6809      	ldr	r1, [r1, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	6022      	str	r2, [r4, #0]
 8002c16:	0022      	movs	r2, r4
 8002c18:	2178      	movs	r1, #120	; 0x78
 8002c1a:	3245      	adds	r2, #69	; 0x45
 8002c1c:	7011      	strb	r1, [r2, #0]
 8002c1e:	4a27      	ldr	r2, [pc, #156]	; (8002cbc <_printf_i+0x220>)
 8002c20:	e7e1      	b.n	8002be6 <_printf_i+0x14a>
 8002c22:	0648      	lsls	r0, r1, #25
 8002c24:	d5e6      	bpl.n	8002bf4 <_printf_i+0x158>
 8002c26:	b2ad      	uxth	r5, r5
 8002c28:	e7e4      	b.n	8002bf4 <_printf_i+0x158>
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	680d      	ldr	r5, [r1, #0]
 8002c2e:	1d10      	adds	r0, r2, #4
 8002c30:	6949      	ldr	r1, [r1, #20]
 8002c32:	6018      	str	r0, [r3, #0]
 8002c34:	6813      	ldr	r3, [r2, #0]
 8002c36:	062e      	lsls	r6, r5, #24
 8002c38:	d501      	bpl.n	8002c3e <_printf_i+0x1a2>
 8002c3a:	6019      	str	r1, [r3, #0]
 8002c3c:	e002      	b.n	8002c44 <_printf_i+0x1a8>
 8002c3e:	066d      	lsls	r5, r5, #25
 8002c40:	d5fb      	bpl.n	8002c3a <_printf_i+0x19e>
 8002c42:	8019      	strh	r1, [r3, #0]
 8002c44:	2300      	movs	r3, #0
 8002c46:	9e04      	ldr	r6, [sp, #16]
 8002c48:	6123      	str	r3, [r4, #16]
 8002c4a:	e7bb      	b.n	8002bc4 <_printf_i+0x128>
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	1d11      	adds	r1, r2, #4
 8002c50:	6019      	str	r1, [r3, #0]
 8002c52:	6816      	ldr	r6, [r2, #0]
 8002c54:	2100      	movs	r1, #0
 8002c56:	0030      	movs	r0, r6
 8002c58:	6862      	ldr	r2, [r4, #4]
 8002c5a:	f000 f831 	bl	8002cc0 <memchr>
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	d001      	beq.n	8002c66 <_printf_i+0x1ca>
 8002c62:	1b80      	subs	r0, r0, r6
 8002c64:	6060      	str	r0, [r4, #4]
 8002c66:	6863      	ldr	r3, [r4, #4]
 8002c68:	6123      	str	r3, [r4, #16]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9a04      	ldr	r2, [sp, #16]
 8002c6e:	7013      	strb	r3, [r2, #0]
 8002c70:	e7a8      	b.n	8002bc4 <_printf_i+0x128>
 8002c72:	6923      	ldr	r3, [r4, #16]
 8002c74:	0032      	movs	r2, r6
 8002c76:	9906      	ldr	r1, [sp, #24]
 8002c78:	9805      	ldr	r0, [sp, #20]
 8002c7a:	9d07      	ldr	r5, [sp, #28]
 8002c7c:	47a8      	blx	r5
 8002c7e:	1c43      	adds	r3, r0, #1
 8002c80:	d0aa      	beq.n	8002bd8 <_printf_i+0x13c>
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	079b      	lsls	r3, r3, #30
 8002c86:	d415      	bmi.n	8002cb4 <_printf_i+0x218>
 8002c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c8a:	68e0      	ldr	r0, [r4, #12]
 8002c8c:	4298      	cmp	r0, r3
 8002c8e:	daa5      	bge.n	8002bdc <_printf_i+0x140>
 8002c90:	0018      	movs	r0, r3
 8002c92:	e7a3      	b.n	8002bdc <_printf_i+0x140>
 8002c94:	0022      	movs	r2, r4
 8002c96:	2301      	movs	r3, #1
 8002c98:	9906      	ldr	r1, [sp, #24]
 8002c9a:	9805      	ldr	r0, [sp, #20]
 8002c9c:	9e07      	ldr	r6, [sp, #28]
 8002c9e:	3219      	adds	r2, #25
 8002ca0:	47b0      	blx	r6
 8002ca2:	1c43      	adds	r3, r0, #1
 8002ca4:	d098      	beq.n	8002bd8 <_printf_i+0x13c>
 8002ca6:	3501      	adds	r5, #1
 8002ca8:	68e3      	ldr	r3, [r4, #12]
 8002caa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	42ab      	cmp	r3, r5
 8002cb0:	dcf0      	bgt.n	8002c94 <_printf_i+0x1f8>
 8002cb2:	e7e9      	b.n	8002c88 <_printf_i+0x1ec>
 8002cb4:	2500      	movs	r5, #0
 8002cb6:	e7f7      	b.n	8002ca8 <_printf_i+0x20c>
 8002cb8:	08003005 	.word	0x08003005
 8002cbc:	08003016 	.word	0x08003016

08002cc0 <memchr>:
 8002cc0:	b2c9      	uxtb	r1, r1
 8002cc2:	1882      	adds	r2, r0, r2
 8002cc4:	4290      	cmp	r0, r2
 8002cc6:	d101      	bne.n	8002ccc <memchr+0xc>
 8002cc8:	2000      	movs	r0, #0
 8002cca:	4770      	bx	lr
 8002ccc:	7803      	ldrb	r3, [r0, #0]
 8002cce:	428b      	cmp	r3, r1
 8002cd0:	d0fb      	beq.n	8002cca <memchr+0xa>
 8002cd2:	3001      	adds	r0, #1
 8002cd4:	e7f6      	b.n	8002cc4 <memchr+0x4>

08002cd6 <memcpy>:
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	b510      	push	{r4, lr}
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d100      	bne.n	8002ce0 <memcpy+0xa>
 8002cde:	bd10      	pop	{r4, pc}
 8002ce0:	5ccc      	ldrb	r4, [r1, r3]
 8002ce2:	54c4      	strb	r4, [r0, r3]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	e7f8      	b.n	8002cda <memcpy+0x4>

08002ce8 <memmove>:
 8002ce8:	b510      	push	{r4, lr}
 8002cea:	4288      	cmp	r0, r1
 8002cec:	d902      	bls.n	8002cf4 <memmove+0xc>
 8002cee:	188b      	adds	r3, r1, r2
 8002cf0:	4298      	cmp	r0, r3
 8002cf2:	d303      	bcc.n	8002cfc <memmove+0x14>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e007      	b.n	8002d08 <memmove+0x20>
 8002cf8:	5c8b      	ldrb	r3, [r1, r2]
 8002cfa:	5483      	strb	r3, [r0, r2]
 8002cfc:	3a01      	subs	r2, #1
 8002cfe:	d2fb      	bcs.n	8002cf8 <memmove+0x10>
 8002d00:	bd10      	pop	{r4, pc}
 8002d02:	5ccc      	ldrb	r4, [r1, r3]
 8002d04:	54c4      	strb	r4, [r0, r3]
 8002d06:	3301      	adds	r3, #1
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1fa      	bne.n	8002d02 <memmove+0x1a>
 8002d0c:	e7f8      	b.n	8002d00 <memmove+0x18>
	...

08002d10 <_free_r>:
 8002d10:	b570      	push	{r4, r5, r6, lr}
 8002d12:	0005      	movs	r5, r0
 8002d14:	2900      	cmp	r1, #0
 8002d16:	d010      	beq.n	8002d3a <_free_r+0x2a>
 8002d18:	1f0c      	subs	r4, r1, #4
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	da00      	bge.n	8002d22 <_free_r+0x12>
 8002d20:	18e4      	adds	r4, r4, r3
 8002d22:	0028      	movs	r0, r5
 8002d24:	f000 f918 	bl	8002f58 <__malloc_lock>
 8002d28:	4a1d      	ldr	r2, [pc, #116]	; (8002da0 <_free_r+0x90>)
 8002d2a:	6813      	ldr	r3, [r2, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d105      	bne.n	8002d3c <_free_r+0x2c>
 8002d30:	6063      	str	r3, [r4, #4]
 8002d32:	6014      	str	r4, [r2, #0]
 8002d34:	0028      	movs	r0, r5
 8002d36:	f000 f917 	bl	8002f68 <__malloc_unlock>
 8002d3a:	bd70      	pop	{r4, r5, r6, pc}
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	d908      	bls.n	8002d52 <_free_r+0x42>
 8002d40:	6821      	ldr	r1, [r4, #0]
 8002d42:	1860      	adds	r0, r4, r1
 8002d44:	4283      	cmp	r3, r0
 8002d46:	d1f3      	bne.n	8002d30 <_free_r+0x20>
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	1841      	adds	r1, r0, r1
 8002d4e:	6021      	str	r1, [r4, #0]
 8002d50:	e7ee      	b.n	8002d30 <_free_r+0x20>
 8002d52:	001a      	movs	r2, r3
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <_free_r+0x4e>
 8002d5a:	42a3      	cmp	r3, r4
 8002d5c:	d9f9      	bls.n	8002d52 <_free_r+0x42>
 8002d5e:	6811      	ldr	r1, [r2, #0]
 8002d60:	1850      	adds	r0, r2, r1
 8002d62:	42a0      	cmp	r0, r4
 8002d64:	d10b      	bne.n	8002d7e <_free_r+0x6e>
 8002d66:	6820      	ldr	r0, [r4, #0]
 8002d68:	1809      	adds	r1, r1, r0
 8002d6a:	1850      	adds	r0, r2, r1
 8002d6c:	6011      	str	r1, [r2, #0]
 8002d6e:	4283      	cmp	r3, r0
 8002d70:	d1e0      	bne.n	8002d34 <_free_r+0x24>
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	1841      	adds	r1, r0, r1
 8002d78:	6011      	str	r1, [r2, #0]
 8002d7a:	6053      	str	r3, [r2, #4]
 8002d7c:	e7da      	b.n	8002d34 <_free_r+0x24>
 8002d7e:	42a0      	cmp	r0, r4
 8002d80:	d902      	bls.n	8002d88 <_free_r+0x78>
 8002d82:	230c      	movs	r3, #12
 8002d84:	602b      	str	r3, [r5, #0]
 8002d86:	e7d5      	b.n	8002d34 <_free_r+0x24>
 8002d88:	6821      	ldr	r1, [r4, #0]
 8002d8a:	1860      	adds	r0, r4, r1
 8002d8c:	4283      	cmp	r3, r0
 8002d8e:	d103      	bne.n	8002d98 <_free_r+0x88>
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	1841      	adds	r1, r0, r1
 8002d96:	6021      	str	r1, [r4, #0]
 8002d98:	6063      	str	r3, [r4, #4]
 8002d9a:	6054      	str	r4, [r2, #4]
 8002d9c:	e7ca      	b.n	8002d34 <_free_r+0x24>
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	20000198 	.word	0x20000198

08002da4 <sbrk_aligned>:
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	4e0f      	ldr	r6, [pc, #60]	; (8002de4 <sbrk_aligned+0x40>)
 8002da8:	000d      	movs	r5, r1
 8002daa:	6831      	ldr	r1, [r6, #0]
 8002dac:	0004      	movs	r4, r0
 8002dae:	2900      	cmp	r1, #0
 8002db0:	d102      	bne.n	8002db8 <sbrk_aligned+0x14>
 8002db2:	f000 f8bf 	bl	8002f34 <_sbrk_r>
 8002db6:	6030      	str	r0, [r6, #0]
 8002db8:	0029      	movs	r1, r5
 8002dba:	0020      	movs	r0, r4
 8002dbc:	f000 f8ba 	bl	8002f34 <_sbrk_r>
 8002dc0:	1c43      	adds	r3, r0, #1
 8002dc2:	d00a      	beq.n	8002dda <sbrk_aligned+0x36>
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	1cc5      	adds	r5, r0, #3
 8002dc8:	439d      	bics	r5, r3
 8002dca:	42a8      	cmp	r0, r5
 8002dcc:	d007      	beq.n	8002dde <sbrk_aligned+0x3a>
 8002dce:	1a29      	subs	r1, r5, r0
 8002dd0:	0020      	movs	r0, r4
 8002dd2:	f000 f8af 	bl	8002f34 <_sbrk_r>
 8002dd6:	1c43      	adds	r3, r0, #1
 8002dd8:	d101      	bne.n	8002dde <sbrk_aligned+0x3a>
 8002dda:	2501      	movs	r5, #1
 8002ddc:	426d      	negs	r5, r5
 8002dde:	0028      	movs	r0, r5
 8002de0:	bd70      	pop	{r4, r5, r6, pc}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	2000019c 	.word	0x2000019c

08002de8 <_malloc_r>:
 8002de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dea:	2203      	movs	r2, #3
 8002dec:	1ccb      	adds	r3, r1, #3
 8002dee:	4393      	bics	r3, r2
 8002df0:	3308      	adds	r3, #8
 8002df2:	0006      	movs	r6, r0
 8002df4:	001f      	movs	r7, r3
 8002df6:	2b0c      	cmp	r3, #12
 8002df8:	d232      	bcs.n	8002e60 <_malloc_r+0x78>
 8002dfa:	270c      	movs	r7, #12
 8002dfc:	42b9      	cmp	r1, r7
 8002dfe:	d831      	bhi.n	8002e64 <_malloc_r+0x7c>
 8002e00:	0030      	movs	r0, r6
 8002e02:	f000 f8a9 	bl	8002f58 <__malloc_lock>
 8002e06:	4d32      	ldr	r5, [pc, #200]	; (8002ed0 <_malloc_r+0xe8>)
 8002e08:	682b      	ldr	r3, [r5, #0]
 8002e0a:	001c      	movs	r4, r3
 8002e0c:	2c00      	cmp	r4, #0
 8002e0e:	d12e      	bne.n	8002e6e <_malloc_r+0x86>
 8002e10:	0039      	movs	r1, r7
 8002e12:	0030      	movs	r0, r6
 8002e14:	f7ff ffc6 	bl	8002da4 <sbrk_aligned>
 8002e18:	0004      	movs	r4, r0
 8002e1a:	1c43      	adds	r3, r0, #1
 8002e1c:	d11e      	bne.n	8002e5c <_malloc_r+0x74>
 8002e1e:	682c      	ldr	r4, [r5, #0]
 8002e20:	0025      	movs	r5, r4
 8002e22:	2d00      	cmp	r5, #0
 8002e24:	d14a      	bne.n	8002ebc <_malloc_r+0xd4>
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	0029      	movs	r1, r5
 8002e2a:	18e3      	adds	r3, r4, r3
 8002e2c:	0030      	movs	r0, r6
 8002e2e:	9301      	str	r3, [sp, #4]
 8002e30:	f000 f880 	bl	8002f34 <_sbrk_r>
 8002e34:	9b01      	ldr	r3, [sp, #4]
 8002e36:	4283      	cmp	r3, r0
 8002e38:	d143      	bne.n	8002ec2 <_malloc_r+0xda>
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	3703      	adds	r7, #3
 8002e3e:	1aff      	subs	r7, r7, r3
 8002e40:	2303      	movs	r3, #3
 8002e42:	439f      	bics	r7, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	2f0c      	cmp	r7, #12
 8002e48:	d200      	bcs.n	8002e4c <_malloc_r+0x64>
 8002e4a:	270c      	movs	r7, #12
 8002e4c:	0039      	movs	r1, r7
 8002e4e:	0030      	movs	r0, r6
 8002e50:	f7ff ffa8 	bl	8002da4 <sbrk_aligned>
 8002e54:	1c43      	adds	r3, r0, #1
 8002e56:	d034      	beq.n	8002ec2 <_malloc_r+0xda>
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	19df      	adds	r7, r3, r7
 8002e5c:	6027      	str	r7, [r4, #0]
 8002e5e:	e013      	b.n	8002e88 <_malloc_r+0xa0>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	dacb      	bge.n	8002dfc <_malloc_r+0x14>
 8002e64:	230c      	movs	r3, #12
 8002e66:	2500      	movs	r5, #0
 8002e68:	6033      	str	r3, [r6, #0]
 8002e6a:	0028      	movs	r0, r5
 8002e6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e6e:	6822      	ldr	r2, [r4, #0]
 8002e70:	1bd1      	subs	r1, r2, r7
 8002e72:	d420      	bmi.n	8002eb6 <_malloc_r+0xce>
 8002e74:	290b      	cmp	r1, #11
 8002e76:	d917      	bls.n	8002ea8 <_malloc_r+0xc0>
 8002e78:	19e2      	adds	r2, r4, r7
 8002e7a:	6027      	str	r7, [r4, #0]
 8002e7c:	42a3      	cmp	r3, r4
 8002e7e:	d111      	bne.n	8002ea4 <_malloc_r+0xbc>
 8002e80:	602a      	str	r2, [r5, #0]
 8002e82:	6863      	ldr	r3, [r4, #4]
 8002e84:	6011      	str	r1, [r2, #0]
 8002e86:	6053      	str	r3, [r2, #4]
 8002e88:	0030      	movs	r0, r6
 8002e8a:	0025      	movs	r5, r4
 8002e8c:	f000 f86c 	bl	8002f68 <__malloc_unlock>
 8002e90:	2207      	movs	r2, #7
 8002e92:	350b      	adds	r5, #11
 8002e94:	1d23      	adds	r3, r4, #4
 8002e96:	4395      	bics	r5, r2
 8002e98:	1aea      	subs	r2, r5, r3
 8002e9a:	429d      	cmp	r5, r3
 8002e9c:	d0e5      	beq.n	8002e6a <_malloc_r+0x82>
 8002e9e:	1b5b      	subs	r3, r3, r5
 8002ea0:	50a3      	str	r3, [r4, r2]
 8002ea2:	e7e2      	b.n	8002e6a <_malloc_r+0x82>
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	e7ec      	b.n	8002e82 <_malloc_r+0x9a>
 8002ea8:	6862      	ldr	r2, [r4, #4]
 8002eaa:	42a3      	cmp	r3, r4
 8002eac:	d101      	bne.n	8002eb2 <_malloc_r+0xca>
 8002eae:	602a      	str	r2, [r5, #0]
 8002eb0:	e7ea      	b.n	8002e88 <_malloc_r+0xa0>
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	e7e8      	b.n	8002e88 <_malloc_r+0xa0>
 8002eb6:	0023      	movs	r3, r4
 8002eb8:	6864      	ldr	r4, [r4, #4]
 8002eba:	e7a7      	b.n	8002e0c <_malloc_r+0x24>
 8002ebc:	002c      	movs	r4, r5
 8002ebe:	686d      	ldr	r5, [r5, #4]
 8002ec0:	e7af      	b.n	8002e22 <_malloc_r+0x3a>
 8002ec2:	230c      	movs	r3, #12
 8002ec4:	0030      	movs	r0, r6
 8002ec6:	6033      	str	r3, [r6, #0]
 8002ec8:	f000 f84e 	bl	8002f68 <__malloc_unlock>
 8002ecc:	e7cd      	b.n	8002e6a <_malloc_r+0x82>
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	20000198 	.word	0x20000198

08002ed4 <_realloc_r>:
 8002ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ed6:	0007      	movs	r7, r0
 8002ed8:	000e      	movs	r6, r1
 8002eda:	0014      	movs	r4, r2
 8002edc:	2900      	cmp	r1, #0
 8002ede:	d105      	bne.n	8002eec <_realloc_r+0x18>
 8002ee0:	0011      	movs	r1, r2
 8002ee2:	f7ff ff81 	bl	8002de8 <_malloc_r>
 8002ee6:	0005      	movs	r5, r0
 8002ee8:	0028      	movs	r0, r5
 8002eea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002eec:	2a00      	cmp	r2, #0
 8002eee:	d103      	bne.n	8002ef8 <_realloc_r+0x24>
 8002ef0:	f7ff ff0e 	bl	8002d10 <_free_r>
 8002ef4:	0025      	movs	r5, r4
 8002ef6:	e7f7      	b.n	8002ee8 <_realloc_r+0x14>
 8002ef8:	f000 f83e 	bl	8002f78 <_malloc_usable_size_r>
 8002efc:	9001      	str	r0, [sp, #4]
 8002efe:	4284      	cmp	r4, r0
 8002f00:	d803      	bhi.n	8002f0a <_realloc_r+0x36>
 8002f02:	0035      	movs	r5, r6
 8002f04:	0843      	lsrs	r3, r0, #1
 8002f06:	42a3      	cmp	r3, r4
 8002f08:	d3ee      	bcc.n	8002ee8 <_realloc_r+0x14>
 8002f0a:	0021      	movs	r1, r4
 8002f0c:	0038      	movs	r0, r7
 8002f0e:	f7ff ff6b 	bl	8002de8 <_malloc_r>
 8002f12:	1e05      	subs	r5, r0, #0
 8002f14:	d0e8      	beq.n	8002ee8 <_realloc_r+0x14>
 8002f16:	9b01      	ldr	r3, [sp, #4]
 8002f18:	0022      	movs	r2, r4
 8002f1a:	429c      	cmp	r4, r3
 8002f1c:	d900      	bls.n	8002f20 <_realloc_r+0x4c>
 8002f1e:	001a      	movs	r2, r3
 8002f20:	0031      	movs	r1, r6
 8002f22:	0028      	movs	r0, r5
 8002f24:	f7ff fed7 	bl	8002cd6 <memcpy>
 8002f28:	0031      	movs	r1, r6
 8002f2a:	0038      	movs	r0, r7
 8002f2c:	f7ff fef0 	bl	8002d10 <_free_r>
 8002f30:	e7da      	b.n	8002ee8 <_realloc_r+0x14>
	...

08002f34 <_sbrk_r>:
 8002f34:	2300      	movs	r3, #0
 8002f36:	b570      	push	{r4, r5, r6, lr}
 8002f38:	4d06      	ldr	r5, [pc, #24]	; (8002f54 <_sbrk_r+0x20>)
 8002f3a:	0004      	movs	r4, r0
 8002f3c:	0008      	movs	r0, r1
 8002f3e:	602b      	str	r3, [r5, #0]
 8002f40:	f7fd fd18 	bl	8000974 <_sbrk>
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	d103      	bne.n	8002f50 <_sbrk_r+0x1c>
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d000      	beq.n	8002f50 <_sbrk_r+0x1c>
 8002f4e:	6023      	str	r3, [r4, #0]
 8002f50:	bd70      	pop	{r4, r5, r6, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	200001a0 	.word	0x200001a0

08002f58 <__malloc_lock>:
 8002f58:	b510      	push	{r4, lr}
 8002f5a:	4802      	ldr	r0, [pc, #8]	; (8002f64 <__malloc_lock+0xc>)
 8002f5c:	f000 f814 	bl	8002f88 <__retarget_lock_acquire_recursive>
 8002f60:	bd10      	pop	{r4, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	200001a4 	.word	0x200001a4

08002f68 <__malloc_unlock>:
 8002f68:	b510      	push	{r4, lr}
 8002f6a:	4802      	ldr	r0, [pc, #8]	; (8002f74 <__malloc_unlock+0xc>)
 8002f6c:	f000 f80d 	bl	8002f8a <__retarget_lock_release_recursive>
 8002f70:	bd10      	pop	{r4, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	200001a4 	.word	0x200001a4

08002f78 <_malloc_usable_size_r>:
 8002f78:	1f0b      	subs	r3, r1, #4
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	1f18      	subs	r0, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	da01      	bge.n	8002f86 <_malloc_usable_size_r+0xe>
 8002f82:	580b      	ldr	r3, [r1, r0]
 8002f84:	18c0      	adds	r0, r0, r3
 8002f86:	4770      	bx	lr

08002f88 <__retarget_lock_acquire_recursive>:
 8002f88:	4770      	bx	lr

08002f8a <__retarget_lock_release_recursive>:
 8002f8a:	4770      	bx	lr

08002f8c <_init>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f92:	bc08      	pop	{r3}
 8002f94:	469e      	mov	lr, r3
 8002f96:	4770      	bx	lr

08002f98 <_fini>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr
