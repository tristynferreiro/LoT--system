
LOT_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d7c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08008e40  08008e40  00018e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009314  08009314  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009314  08009314  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009314  08009314  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009314  08009314  00019314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009318  08009318  00019318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800931c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200001dc  080094f8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  080094f8  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7e7  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d7  00000000  00000000  0002f9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00031bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  000329b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a19  00000000  00000000  000336d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103c1  00000000  00000000  000470e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007552d  00000000  00000000  000574aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc9d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b4  00000000  00000000  000cca28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008e24 	.word	0x08008e24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08008e24 	.word	0x08008e24

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff0d 	bl	800125c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fe5d 	bl	800110c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 feff 	bl	800125c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fef5 	bl	800125c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe85 	bl	8001190 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fe7b 	bl	8001190 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	000d      	movs	r5, r1
 80004b2:	0004      	movs	r4, r0
 80004b4:	b5c0      	push	{r6, r7, lr}
 80004b6:	001f      	movs	r7, r3
 80004b8:	0011      	movs	r1, r2
 80004ba:	0328      	lsls	r0, r5, #12
 80004bc:	0f62      	lsrs	r2, r4, #29
 80004be:	0a40      	lsrs	r0, r0, #9
 80004c0:	4310      	orrs	r0, r2
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	0d52      	lsrs	r2, r2, #21
 80004c6:	00e3      	lsls	r3, r4, #3
 80004c8:	033c      	lsls	r4, r7, #12
 80004ca:	4691      	mov	r9, r2
 80004cc:	0a64      	lsrs	r4, r4, #9
 80004ce:	0ffa      	lsrs	r2, r7, #31
 80004d0:	0f4f      	lsrs	r7, r1, #29
 80004d2:	006e      	lsls	r6, r5, #1
 80004d4:	4327      	orrs	r7, r4
 80004d6:	4692      	mov	sl, r2
 80004d8:	46b8      	mov	r8, r7
 80004da:	0d76      	lsrs	r6, r6, #21
 80004dc:	0fed      	lsrs	r5, r5, #31
 80004de:	00c9      	lsls	r1, r1, #3
 80004e0:	4295      	cmp	r5, r2
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dadd+0x3e>
 80004e4:	e099      	b.n	800061a <__aeabi_dadd+0x172>
 80004e6:	464c      	mov	r4, r9
 80004e8:	1b34      	subs	r4, r6, r4
 80004ea:	46a4      	mov	ip, r4
 80004ec:	2c00      	cmp	r4, #0
 80004ee:	dc00      	bgt.n	80004f2 <__aeabi_dadd+0x4a>
 80004f0:	e07c      	b.n	80005ec <__aeabi_dadd+0x144>
 80004f2:	464a      	mov	r2, r9
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b8      	b.n	800066c <__aeabi_dadd+0x1c4>
 80004fa:	4ac5      	ldr	r2, [pc, #788]	; (8000810 <__aeabi_dadd+0x368>)
 80004fc:	4296      	cmp	r6, r2
 80004fe:	d100      	bne.n	8000502 <__aeabi_dadd+0x5a>
 8000500:	e11c      	b.n	800073c <__aeabi_dadd+0x294>
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	003c      	movs	r4, r7
 8000506:	0412      	lsls	r2, r2, #16
 8000508:	4314      	orrs	r4, r2
 800050a:	46a0      	mov	r8, r4
 800050c:	4662      	mov	r2, ip
 800050e:	2a38      	cmp	r2, #56	; 0x38
 8000510:	dd00      	ble.n	8000514 <__aeabi_dadd+0x6c>
 8000512:	e161      	b.n	80007d8 <__aeabi_dadd+0x330>
 8000514:	2a1f      	cmp	r2, #31
 8000516:	dd00      	ble.n	800051a <__aeabi_dadd+0x72>
 8000518:	e1cc      	b.n	80008b4 <__aeabi_dadd+0x40c>
 800051a:	4664      	mov	r4, ip
 800051c:	2220      	movs	r2, #32
 800051e:	1b12      	subs	r2, r2, r4
 8000520:	4644      	mov	r4, r8
 8000522:	4094      	lsls	r4, r2
 8000524:	000f      	movs	r7, r1
 8000526:	46a1      	mov	r9, r4
 8000528:	4664      	mov	r4, ip
 800052a:	4091      	lsls	r1, r2
 800052c:	40e7      	lsrs	r7, r4
 800052e:	464c      	mov	r4, r9
 8000530:	1e4a      	subs	r2, r1, #1
 8000532:	4191      	sbcs	r1, r2
 8000534:	433c      	orrs	r4, r7
 8000536:	4642      	mov	r2, r8
 8000538:	4321      	orrs	r1, r4
 800053a:	4664      	mov	r4, ip
 800053c:	40e2      	lsrs	r2, r4
 800053e:	1a80      	subs	r0, r0, r2
 8000540:	1a5c      	subs	r4, r3, r1
 8000542:	42a3      	cmp	r3, r4
 8000544:	419b      	sbcs	r3, r3
 8000546:	425f      	negs	r7, r3
 8000548:	1bc7      	subs	r7, r0, r7
 800054a:	023b      	lsls	r3, r7, #8
 800054c:	d400      	bmi.n	8000550 <__aeabi_dadd+0xa8>
 800054e:	e0d0      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000550:	027f      	lsls	r7, r7, #9
 8000552:	0a7f      	lsrs	r7, r7, #9
 8000554:	2f00      	cmp	r7, #0
 8000556:	d100      	bne.n	800055a <__aeabi_dadd+0xb2>
 8000558:	e0ff      	b.n	800075a <__aeabi_dadd+0x2b2>
 800055a:	0038      	movs	r0, r7
 800055c:	f001 fd8a 	bl	8002074 <__clzsi2>
 8000560:	0001      	movs	r1, r0
 8000562:	3908      	subs	r1, #8
 8000564:	2320      	movs	r3, #32
 8000566:	0022      	movs	r2, r4
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	408f      	lsls	r7, r1
 800056c:	40da      	lsrs	r2, r3
 800056e:	408c      	lsls	r4, r1
 8000570:	4317      	orrs	r7, r2
 8000572:	42b1      	cmp	r1, r6
 8000574:	da00      	bge.n	8000578 <__aeabi_dadd+0xd0>
 8000576:	e0ff      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000578:	1b89      	subs	r1, r1, r6
 800057a:	1c4b      	adds	r3, r1, #1
 800057c:	2b1f      	cmp	r3, #31
 800057e:	dd00      	ble.n	8000582 <__aeabi_dadd+0xda>
 8000580:	e0a8      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000582:	2220      	movs	r2, #32
 8000584:	0039      	movs	r1, r7
 8000586:	1ad2      	subs	r2, r2, r3
 8000588:	0020      	movs	r0, r4
 800058a:	4094      	lsls	r4, r2
 800058c:	4091      	lsls	r1, r2
 800058e:	40d8      	lsrs	r0, r3
 8000590:	1e62      	subs	r2, r4, #1
 8000592:	4194      	sbcs	r4, r2
 8000594:	40df      	lsrs	r7, r3
 8000596:	2600      	movs	r6, #0
 8000598:	4301      	orrs	r1, r0
 800059a:	430c      	orrs	r4, r1
 800059c:	0763      	lsls	r3, r4, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	4023      	ands	r3, r4
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d23      	adds	r3, r4, #4
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	41a4      	sbcs	r4, r4
 80005ae:	4264      	negs	r4, r4
 80005b0:	193f      	adds	r7, r7, r4
 80005b2:	001c      	movs	r4, r3
 80005b4:	023b      	lsls	r3, r7, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e09e      	b.n	80006f8 <__aeabi_dadd+0x250>
 80005ba:	4b95      	ldr	r3, [pc, #596]	; (8000810 <__aeabi_dadd+0x368>)
 80005bc:	3601      	adds	r6, #1
 80005be:	429e      	cmp	r6, r3
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0b7      	b.n	8000734 <__aeabi_dadd+0x28c>
 80005c4:	4a93      	ldr	r2, [pc, #588]	; (8000814 <__aeabi_dadd+0x36c>)
 80005c6:	08e4      	lsrs	r4, r4, #3
 80005c8:	4017      	ands	r7, r2
 80005ca:	077b      	lsls	r3, r7, #29
 80005cc:	0571      	lsls	r1, r6, #21
 80005ce:	027f      	lsls	r7, r7, #9
 80005d0:	4323      	orrs	r3, r4
 80005d2:	0b3f      	lsrs	r7, r7, #12
 80005d4:	0d4a      	lsrs	r2, r1, #21
 80005d6:	0512      	lsls	r2, r2, #20
 80005d8:	433a      	orrs	r2, r7
 80005da:	07ed      	lsls	r5, r5, #31
 80005dc:	432a      	orrs	r2, r5
 80005de:	0018      	movs	r0, r3
 80005e0:	0011      	movs	r1, r2
 80005e2:	bce0      	pop	{r5, r6, r7}
 80005e4:	46ba      	mov	sl, r7
 80005e6:	46b1      	mov	r9, r6
 80005e8:	46a8      	mov	r8, r5
 80005ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ec:	2c00      	cmp	r4, #0
 80005ee:	d04b      	beq.n	8000688 <__aeabi_dadd+0x1e0>
 80005f0:	464c      	mov	r4, r9
 80005f2:	1ba4      	subs	r4, r4, r6
 80005f4:	46a4      	mov	ip, r4
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d000      	beq.n	80005fc <__aeabi_dadd+0x154>
 80005fa:	e123      	b.n	8000844 <__aeabi_dadd+0x39c>
 80005fc:	0004      	movs	r4, r0
 80005fe:	431c      	orrs	r4, r3
 8000600:	d100      	bne.n	8000604 <__aeabi_dadd+0x15c>
 8000602:	e1af      	b.n	8000964 <__aeabi_dadd+0x4bc>
 8000604:	4662      	mov	r2, ip
 8000606:	1e54      	subs	r4, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x166>
 800060c:	e215      	b.n	8000a3a <__aeabi_dadd+0x592>
 800060e:	4d80      	ldr	r5, [pc, #512]	; (8000810 <__aeabi_dadd+0x368>)
 8000610:	45ac      	cmp	ip, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16e>
 8000614:	e1c8      	b.n	80009a8 <__aeabi_dadd+0x500>
 8000616:	46a4      	mov	ip, r4
 8000618:	e11b      	b.n	8000852 <__aeabi_dadd+0x3aa>
 800061a:	464a      	mov	r2, r9
 800061c:	1ab2      	subs	r2, r6, r2
 800061e:	4694      	mov	ip, r2
 8000620:	2a00      	cmp	r2, #0
 8000622:	dc00      	bgt.n	8000626 <__aeabi_dadd+0x17e>
 8000624:	e0ac      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000626:	464a      	mov	r2, r9
 8000628:	2a00      	cmp	r2, #0
 800062a:	d043      	beq.n	80006b4 <__aeabi_dadd+0x20c>
 800062c:	4a78      	ldr	r2, [pc, #480]	; (8000810 <__aeabi_dadd+0x368>)
 800062e:	4296      	cmp	r6, r2
 8000630:	d100      	bne.n	8000634 <__aeabi_dadd+0x18c>
 8000632:	e1af      	b.n	8000994 <__aeabi_dadd+0x4ec>
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	003c      	movs	r4, r7
 8000638:	0412      	lsls	r2, r2, #16
 800063a:	4314      	orrs	r4, r2
 800063c:	46a0      	mov	r8, r4
 800063e:	4662      	mov	r2, ip
 8000640:	2a38      	cmp	r2, #56	; 0x38
 8000642:	dc67      	bgt.n	8000714 <__aeabi_dadd+0x26c>
 8000644:	2a1f      	cmp	r2, #31
 8000646:	dc00      	bgt.n	800064a <__aeabi_dadd+0x1a2>
 8000648:	e15f      	b.n	800090a <__aeabi_dadd+0x462>
 800064a:	4647      	mov	r7, r8
 800064c:	3a20      	subs	r2, #32
 800064e:	40d7      	lsrs	r7, r2
 8000650:	4662      	mov	r2, ip
 8000652:	2a20      	cmp	r2, #32
 8000654:	d005      	beq.n	8000662 <__aeabi_dadd+0x1ba>
 8000656:	4664      	mov	r4, ip
 8000658:	2240      	movs	r2, #64	; 0x40
 800065a:	1b12      	subs	r2, r2, r4
 800065c:	4644      	mov	r4, r8
 800065e:	4094      	lsls	r4, r2
 8000660:	4321      	orrs	r1, r4
 8000662:	1e4a      	subs	r2, r1, #1
 8000664:	4191      	sbcs	r1, r2
 8000666:	000c      	movs	r4, r1
 8000668:	433c      	orrs	r4, r7
 800066a:	e057      	b.n	800071c <__aeabi_dadd+0x274>
 800066c:	003a      	movs	r2, r7
 800066e:	430a      	orrs	r2, r1
 8000670:	d100      	bne.n	8000674 <__aeabi_dadd+0x1cc>
 8000672:	e105      	b.n	8000880 <__aeabi_dadd+0x3d8>
 8000674:	0022      	movs	r2, r4
 8000676:	3a01      	subs	r2, #1
 8000678:	2c01      	cmp	r4, #1
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x1d6>
 800067c:	e182      	b.n	8000984 <__aeabi_dadd+0x4dc>
 800067e:	4c64      	ldr	r4, [pc, #400]	; (8000810 <__aeabi_dadd+0x368>)
 8000680:	45a4      	cmp	ip, r4
 8000682:	d05b      	beq.n	800073c <__aeabi_dadd+0x294>
 8000684:	4694      	mov	ip, r2
 8000686:	e741      	b.n	800050c <__aeabi_dadd+0x64>
 8000688:	4c63      	ldr	r4, [pc, #396]	; (8000818 <__aeabi_dadd+0x370>)
 800068a:	1c77      	adds	r7, r6, #1
 800068c:	4227      	tst	r7, r4
 800068e:	d000      	beq.n	8000692 <__aeabi_dadd+0x1ea>
 8000690:	e0c4      	b.n	800081c <__aeabi_dadd+0x374>
 8000692:	0004      	movs	r4, r0
 8000694:	431c      	orrs	r4, r3
 8000696:	2e00      	cmp	r6, #0
 8000698:	d000      	beq.n	800069c <__aeabi_dadd+0x1f4>
 800069a:	e169      	b.n	8000970 <__aeabi_dadd+0x4c8>
 800069c:	2c00      	cmp	r4, #0
 800069e:	d100      	bne.n	80006a2 <__aeabi_dadd+0x1fa>
 80006a0:	e1bf      	b.n	8000a22 <__aeabi_dadd+0x57a>
 80006a2:	4644      	mov	r4, r8
 80006a4:	430c      	orrs	r4, r1
 80006a6:	d000      	beq.n	80006aa <__aeabi_dadd+0x202>
 80006a8:	e1d0      	b.n	8000a4c <__aeabi_dadd+0x5a4>
 80006aa:	0742      	lsls	r2, r0, #29
 80006ac:	08db      	lsrs	r3, r3, #3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	08c0      	lsrs	r0, r0, #3
 80006b2:	e029      	b.n	8000708 <__aeabi_dadd+0x260>
 80006b4:	003a      	movs	r2, r7
 80006b6:	430a      	orrs	r2, r1
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x214>
 80006ba:	e170      	b.n	800099e <__aeabi_dadd+0x4f6>
 80006bc:	4662      	mov	r2, ip
 80006be:	4664      	mov	r4, ip
 80006c0:	3a01      	subs	r2, #1
 80006c2:	2c01      	cmp	r4, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x220>
 80006c6:	e0e0      	b.n	800088a <__aeabi_dadd+0x3e2>
 80006c8:	4c51      	ldr	r4, [pc, #324]	; (8000810 <__aeabi_dadd+0x368>)
 80006ca:	45a4      	cmp	ip, r4
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x228>
 80006ce:	e161      	b.n	8000994 <__aeabi_dadd+0x4ec>
 80006d0:	4694      	mov	ip, r2
 80006d2:	e7b4      	b.n	800063e <__aeabi_dadd+0x196>
 80006d4:	003a      	movs	r2, r7
 80006d6:	391f      	subs	r1, #31
 80006d8:	40ca      	lsrs	r2, r1
 80006da:	0011      	movs	r1, r2
 80006dc:	2b20      	cmp	r3, #32
 80006de:	d003      	beq.n	80006e8 <__aeabi_dadd+0x240>
 80006e0:	2240      	movs	r2, #64	; 0x40
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	409f      	lsls	r7, r3
 80006e6:	433c      	orrs	r4, r7
 80006e8:	1e63      	subs	r3, r4, #1
 80006ea:	419c      	sbcs	r4, r3
 80006ec:	2700      	movs	r7, #0
 80006ee:	2600      	movs	r6, #0
 80006f0:	430c      	orrs	r4, r1
 80006f2:	0763      	lsls	r3, r4, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x250>
 80006f6:	e753      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80006f8:	46b4      	mov	ip, r6
 80006fa:	08e4      	lsrs	r4, r4, #3
 80006fc:	077b      	lsls	r3, r7, #29
 80006fe:	4323      	orrs	r3, r4
 8000700:	08f8      	lsrs	r0, r7, #3
 8000702:	4a43      	ldr	r2, [pc, #268]	; (8000810 <__aeabi_dadd+0x368>)
 8000704:	4594      	cmp	ip, r2
 8000706:	d01d      	beq.n	8000744 <__aeabi_dadd+0x29c>
 8000708:	4662      	mov	r2, ip
 800070a:	0307      	lsls	r7, r0, #12
 800070c:	0552      	lsls	r2, r2, #21
 800070e:	0b3f      	lsrs	r7, r7, #12
 8000710:	0d52      	lsrs	r2, r2, #21
 8000712:	e760      	b.n	80005d6 <__aeabi_dadd+0x12e>
 8000714:	4644      	mov	r4, r8
 8000716:	430c      	orrs	r4, r1
 8000718:	1e62      	subs	r2, r4, #1
 800071a:	4194      	sbcs	r4, r2
 800071c:	18e4      	adds	r4, r4, r3
 800071e:	429c      	cmp	r4, r3
 8000720:	419b      	sbcs	r3, r3
 8000722:	425f      	negs	r7, r3
 8000724:	183f      	adds	r7, r7, r0
 8000726:	023b      	lsls	r3, r7, #8
 8000728:	d5e3      	bpl.n	80006f2 <__aeabi_dadd+0x24a>
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <__aeabi_dadd+0x368>)
 800072c:	3601      	adds	r6, #1
 800072e:	429e      	cmp	r6, r3
 8000730:	d000      	beq.n	8000734 <__aeabi_dadd+0x28c>
 8000732:	e0b5      	b.n	80008a0 <__aeabi_dadd+0x3f8>
 8000734:	0032      	movs	r2, r6
 8000736:	2700      	movs	r7, #0
 8000738:	2300      	movs	r3, #0
 800073a:	e74c      	b.n	80005d6 <__aeabi_dadd+0x12e>
 800073c:	0742      	lsls	r2, r0, #29
 800073e:	08db      	lsrs	r3, r3, #3
 8000740:	4313      	orrs	r3, r2
 8000742:	08c0      	lsrs	r0, r0, #3
 8000744:	001a      	movs	r2, r3
 8000746:	4302      	orrs	r2, r0
 8000748:	d100      	bne.n	800074c <__aeabi_dadd+0x2a4>
 800074a:	e1e1      	b.n	8000b10 <__aeabi_dadd+0x668>
 800074c:	2780      	movs	r7, #128	; 0x80
 800074e:	033f      	lsls	r7, r7, #12
 8000750:	4307      	orrs	r7, r0
 8000752:	033f      	lsls	r7, r7, #12
 8000754:	4a2e      	ldr	r2, [pc, #184]	; (8000810 <__aeabi_dadd+0x368>)
 8000756:	0b3f      	lsrs	r7, r7, #12
 8000758:	e73d      	b.n	80005d6 <__aeabi_dadd+0x12e>
 800075a:	0020      	movs	r0, r4
 800075c:	f001 fc8a 	bl	8002074 <__clzsi2>
 8000760:	0001      	movs	r1, r0
 8000762:	3118      	adds	r1, #24
 8000764:	291f      	cmp	r1, #31
 8000766:	dc00      	bgt.n	800076a <__aeabi_dadd+0x2c2>
 8000768:	e6fc      	b.n	8000564 <__aeabi_dadd+0xbc>
 800076a:	3808      	subs	r0, #8
 800076c:	4084      	lsls	r4, r0
 800076e:	0027      	movs	r7, r4
 8000770:	2400      	movs	r4, #0
 8000772:	42b1      	cmp	r1, r6
 8000774:	db00      	blt.n	8000778 <__aeabi_dadd+0x2d0>
 8000776:	e6ff      	b.n	8000578 <__aeabi_dadd+0xd0>
 8000778:	4a26      	ldr	r2, [pc, #152]	; (8000814 <__aeabi_dadd+0x36c>)
 800077a:	1a76      	subs	r6, r6, r1
 800077c:	4017      	ands	r7, r2
 800077e:	e70d      	b.n	800059c <__aeabi_dadd+0xf4>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d02f      	beq.n	80007e4 <__aeabi_dadd+0x33c>
 8000784:	464a      	mov	r2, r9
 8000786:	1b92      	subs	r2, r2, r6
 8000788:	4694      	mov	ip, r2
 800078a:	2e00      	cmp	r6, #0
 800078c:	d100      	bne.n	8000790 <__aeabi_dadd+0x2e8>
 800078e:	e0ad      	b.n	80008ec <__aeabi_dadd+0x444>
 8000790:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <__aeabi_dadd+0x368>)
 8000792:	4591      	cmp	r9, r2
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x2f0>
 8000796:	e10f      	b.n	80009b8 <__aeabi_dadd+0x510>
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0412      	lsls	r2, r2, #16
 800079c:	4310      	orrs	r0, r2
 800079e:	4662      	mov	r2, ip
 80007a0:	2a38      	cmp	r2, #56	; 0x38
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_dadd+0x2fe>
 80007a4:	e10f      	b.n	80009c6 <__aeabi_dadd+0x51e>
 80007a6:	2a1f      	cmp	r2, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0x304>
 80007aa:	e180      	b.n	8000aae <__aeabi_dadd+0x606>
 80007ac:	4664      	mov	r4, ip
 80007ae:	2220      	movs	r2, #32
 80007b0:	001e      	movs	r6, r3
 80007b2:	1b12      	subs	r2, r2, r4
 80007b4:	4667      	mov	r7, ip
 80007b6:	0004      	movs	r4, r0
 80007b8:	4093      	lsls	r3, r2
 80007ba:	4094      	lsls	r4, r2
 80007bc:	40fe      	lsrs	r6, r7
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	4193      	sbcs	r3, r2
 80007c2:	40f8      	lsrs	r0, r7
 80007c4:	4334      	orrs	r4, r6
 80007c6:	431c      	orrs	r4, r3
 80007c8:	4480      	add	r8, r0
 80007ca:	1864      	adds	r4, r4, r1
 80007cc:	428c      	cmp	r4, r1
 80007ce:	41bf      	sbcs	r7, r7
 80007d0:	427f      	negs	r7, r7
 80007d2:	464e      	mov	r6, r9
 80007d4:	4447      	add	r7, r8
 80007d6:	e7a6      	b.n	8000726 <__aeabi_dadd+0x27e>
 80007d8:	4642      	mov	r2, r8
 80007da:	430a      	orrs	r2, r1
 80007dc:	0011      	movs	r1, r2
 80007de:	1e4a      	subs	r2, r1, #1
 80007e0:	4191      	sbcs	r1, r2
 80007e2:	e6ad      	b.n	8000540 <__aeabi_dadd+0x98>
 80007e4:	4c0c      	ldr	r4, [pc, #48]	; (8000818 <__aeabi_dadd+0x370>)
 80007e6:	1c72      	adds	r2, r6, #1
 80007e8:	4222      	tst	r2, r4
 80007ea:	d000      	beq.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a1      	b.n	8000932 <__aeabi_dadd+0x48a>
 80007ee:	0002      	movs	r2, r0
 80007f0:	431a      	orrs	r2, r3
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e0fa      	b.n	80009ee <__aeabi_dadd+0x546>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x356>
 80007fc:	e145      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 80007fe:	003a      	movs	r2, r7
 8000800:	430a      	orrs	r2, r1
 8000802:	d000      	beq.n	8000806 <__aeabi_dadd+0x35e>
 8000804:	e146      	b.n	8000a94 <__aeabi_dadd+0x5ec>
 8000806:	0742      	lsls	r2, r0, #29
 8000808:	08db      	lsrs	r3, r3, #3
 800080a:	4313      	orrs	r3, r2
 800080c:	08c0      	lsrs	r0, r0, #3
 800080e:	e77b      	b.n	8000708 <__aeabi_dadd+0x260>
 8000810:	000007ff 	.word	0x000007ff
 8000814:	ff7fffff 	.word	0xff7fffff
 8000818:	000007fe 	.word	0x000007fe
 800081c:	4647      	mov	r7, r8
 800081e:	1a5c      	subs	r4, r3, r1
 8000820:	1bc2      	subs	r2, r0, r7
 8000822:	42a3      	cmp	r3, r4
 8000824:	41bf      	sbcs	r7, r7
 8000826:	427f      	negs	r7, r7
 8000828:	46b9      	mov	r9, r7
 800082a:	0017      	movs	r7, r2
 800082c:	464a      	mov	r2, r9
 800082e:	1abf      	subs	r7, r7, r2
 8000830:	023a      	lsls	r2, r7, #8
 8000832:	d500      	bpl.n	8000836 <__aeabi_dadd+0x38e>
 8000834:	e08d      	b.n	8000952 <__aeabi_dadd+0x4aa>
 8000836:	0023      	movs	r3, r4
 8000838:	433b      	orrs	r3, r7
 800083a:	d000      	beq.n	800083e <__aeabi_dadd+0x396>
 800083c:	e68a      	b.n	8000554 <__aeabi_dadd+0xac>
 800083e:	2000      	movs	r0, #0
 8000840:	2500      	movs	r5, #0
 8000842:	e761      	b.n	8000708 <__aeabi_dadd+0x260>
 8000844:	4cb4      	ldr	r4, [pc, #720]	; (8000b18 <__aeabi_dadd+0x670>)
 8000846:	45a1      	cmp	r9, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e0ad      	b.n	80009a8 <__aeabi_dadd+0x500>
 800084c:	2480      	movs	r4, #128	; 0x80
 800084e:	0424      	lsls	r4, r4, #16
 8000850:	4320      	orrs	r0, r4
 8000852:	4664      	mov	r4, ip
 8000854:	2c38      	cmp	r4, #56	; 0x38
 8000856:	dc3d      	bgt.n	80008d4 <__aeabi_dadd+0x42c>
 8000858:	4662      	mov	r2, ip
 800085a:	2c1f      	cmp	r4, #31
 800085c:	dd00      	ble.n	8000860 <__aeabi_dadd+0x3b8>
 800085e:	e0b7      	b.n	80009d0 <__aeabi_dadd+0x528>
 8000860:	2520      	movs	r5, #32
 8000862:	001e      	movs	r6, r3
 8000864:	1b2d      	subs	r5, r5, r4
 8000866:	0004      	movs	r4, r0
 8000868:	40ab      	lsls	r3, r5
 800086a:	40ac      	lsls	r4, r5
 800086c:	40d6      	lsrs	r6, r2
 800086e:	40d0      	lsrs	r0, r2
 8000870:	4642      	mov	r2, r8
 8000872:	1e5d      	subs	r5, r3, #1
 8000874:	41ab      	sbcs	r3, r5
 8000876:	4334      	orrs	r4, r6
 8000878:	1a12      	subs	r2, r2, r0
 800087a:	4690      	mov	r8, r2
 800087c:	4323      	orrs	r3, r4
 800087e:	e02c      	b.n	80008da <__aeabi_dadd+0x432>
 8000880:	0742      	lsls	r2, r0, #29
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	4313      	orrs	r3, r2
 8000886:	08c0      	lsrs	r0, r0, #3
 8000888:	e73b      	b.n	8000702 <__aeabi_dadd+0x25a>
 800088a:	185c      	adds	r4, r3, r1
 800088c:	429c      	cmp	r4, r3
 800088e:	419b      	sbcs	r3, r3
 8000890:	4440      	add	r0, r8
 8000892:	425b      	negs	r3, r3
 8000894:	18c7      	adds	r7, r0, r3
 8000896:	2601      	movs	r6, #1
 8000898:	023b      	lsls	r3, r7, #8
 800089a:	d400      	bmi.n	800089e <__aeabi_dadd+0x3f6>
 800089c:	e729      	b.n	80006f2 <__aeabi_dadd+0x24a>
 800089e:	2602      	movs	r6, #2
 80008a0:	4a9e      	ldr	r2, [pc, #632]	; (8000b1c <__aeabi_dadd+0x674>)
 80008a2:	0863      	lsrs	r3, r4, #1
 80008a4:	4017      	ands	r7, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	4014      	ands	r4, r2
 80008aa:	431c      	orrs	r4, r3
 80008ac:	07fb      	lsls	r3, r7, #31
 80008ae:	431c      	orrs	r4, r3
 80008b0:	087f      	lsrs	r7, r7, #1
 80008b2:	e673      	b.n	800059c <__aeabi_dadd+0xf4>
 80008b4:	4644      	mov	r4, r8
 80008b6:	3a20      	subs	r2, #32
 80008b8:	40d4      	lsrs	r4, r2
 80008ba:	4662      	mov	r2, ip
 80008bc:	2a20      	cmp	r2, #32
 80008be:	d005      	beq.n	80008cc <__aeabi_dadd+0x424>
 80008c0:	4667      	mov	r7, ip
 80008c2:	2240      	movs	r2, #64	; 0x40
 80008c4:	1bd2      	subs	r2, r2, r7
 80008c6:	4647      	mov	r7, r8
 80008c8:	4097      	lsls	r7, r2
 80008ca:	4339      	orrs	r1, r7
 80008cc:	1e4a      	subs	r2, r1, #1
 80008ce:	4191      	sbcs	r1, r2
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e635      	b.n	8000540 <__aeabi_dadd+0x98>
 80008d4:	4303      	orrs	r3, r0
 80008d6:	1e58      	subs	r0, r3, #1
 80008d8:	4183      	sbcs	r3, r0
 80008da:	1acc      	subs	r4, r1, r3
 80008dc:	42a1      	cmp	r1, r4
 80008de:	41bf      	sbcs	r7, r7
 80008e0:	4643      	mov	r3, r8
 80008e2:	427f      	negs	r7, r7
 80008e4:	4655      	mov	r5, sl
 80008e6:	464e      	mov	r6, r9
 80008e8:	1bdf      	subs	r7, r3, r7
 80008ea:	e62e      	b.n	800054a <__aeabi_dadd+0xa2>
 80008ec:	0002      	movs	r2, r0
 80008ee:	431a      	orrs	r2, r3
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x44c>
 80008f2:	e0bd      	b.n	8000a70 <__aeabi_dadd+0x5c8>
 80008f4:	4662      	mov	r2, ip
 80008f6:	4664      	mov	r4, ip
 80008f8:	3a01      	subs	r2, #1
 80008fa:	2c01      	cmp	r4, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x458>
 80008fe:	e0e5      	b.n	8000acc <__aeabi_dadd+0x624>
 8000900:	4c85      	ldr	r4, [pc, #532]	; (8000b18 <__aeabi_dadd+0x670>)
 8000902:	45a4      	cmp	ip, r4
 8000904:	d058      	beq.n	80009b8 <__aeabi_dadd+0x510>
 8000906:	4694      	mov	ip, r2
 8000908:	e749      	b.n	800079e <__aeabi_dadd+0x2f6>
 800090a:	4664      	mov	r4, ip
 800090c:	2220      	movs	r2, #32
 800090e:	1b12      	subs	r2, r2, r4
 8000910:	4644      	mov	r4, r8
 8000912:	4094      	lsls	r4, r2
 8000914:	000f      	movs	r7, r1
 8000916:	46a1      	mov	r9, r4
 8000918:	4664      	mov	r4, ip
 800091a:	4091      	lsls	r1, r2
 800091c:	40e7      	lsrs	r7, r4
 800091e:	464c      	mov	r4, r9
 8000920:	1e4a      	subs	r2, r1, #1
 8000922:	4191      	sbcs	r1, r2
 8000924:	433c      	orrs	r4, r7
 8000926:	4642      	mov	r2, r8
 8000928:	430c      	orrs	r4, r1
 800092a:	4661      	mov	r1, ip
 800092c:	40ca      	lsrs	r2, r1
 800092e:	1880      	adds	r0, r0, r2
 8000930:	e6f4      	b.n	800071c <__aeabi_dadd+0x274>
 8000932:	4c79      	ldr	r4, [pc, #484]	; (8000b18 <__aeabi_dadd+0x670>)
 8000934:	42a2      	cmp	r2, r4
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x492>
 8000938:	e6fd      	b.n	8000736 <__aeabi_dadd+0x28e>
 800093a:	1859      	adds	r1, r3, r1
 800093c:	4299      	cmp	r1, r3
 800093e:	419b      	sbcs	r3, r3
 8000940:	4440      	add	r0, r8
 8000942:	425f      	negs	r7, r3
 8000944:	19c7      	adds	r7, r0, r7
 8000946:	07fc      	lsls	r4, r7, #31
 8000948:	0849      	lsrs	r1, r1, #1
 800094a:	0016      	movs	r6, r2
 800094c:	430c      	orrs	r4, r1
 800094e:	087f      	lsrs	r7, r7, #1
 8000950:	e6cf      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000952:	1acc      	subs	r4, r1, r3
 8000954:	42a1      	cmp	r1, r4
 8000956:	41bf      	sbcs	r7, r7
 8000958:	4643      	mov	r3, r8
 800095a:	427f      	negs	r7, r7
 800095c:	1a18      	subs	r0, r3, r0
 800095e:	4655      	mov	r5, sl
 8000960:	1bc7      	subs	r7, r0, r7
 8000962:	e5f7      	b.n	8000554 <__aeabi_dadd+0xac>
 8000964:	08c9      	lsrs	r1, r1, #3
 8000966:	077b      	lsls	r3, r7, #29
 8000968:	4655      	mov	r5, sl
 800096a:	430b      	orrs	r3, r1
 800096c:	08f8      	lsrs	r0, r7, #3
 800096e:	e6c8      	b.n	8000702 <__aeabi_dadd+0x25a>
 8000970:	2c00      	cmp	r4, #0
 8000972:	d000      	beq.n	8000976 <__aeabi_dadd+0x4ce>
 8000974:	e081      	b.n	8000a7a <__aeabi_dadd+0x5d2>
 8000976:	4643      	mov	r3, r8
 8000978:	430b      	orrs	r3, r1
 800097a:	d115      	bne.n	80009a8 <__aeabi_dadd+0x500>
 800097c:	2080      	movs	r0, #128	; 0x80
 800097e:	2500      	movs	r5, #0
 8000980:	0300      	lsls	r0, r0, #12
 8000982:	e6e3      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000984:	1a5c      	subs	r4, r3, r1
 8000986:	42a3      	cmp	r3, r4
 8000988:	419b      	sbcs	r3, r3
 800098a:	1bc7      	subs	r7, r0, r7
 800098c:	425b      	negs	r3, r3
 800098e:	2601      	movs	r6, #1
 8000990:	1aff      	subs	r7, r7, r3
 8000992:	e5da      	b.n	800054a <__aeabi_dadd+0xa2>
 8000994:	0742      	lsls	r2, r0, #29
 8000996:	08db      	lsrs	r3, r3, #3
 8000998:	4313      	orrs	r3, r2
 800099a:	08c0      	lsrs	r0, r0, #3
 800099c:	e6d2      	b.n	8000744 <__aeabi_dadd+0x29c>
 800099e:	0742      	lsls	r2, r0, #29
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	08c0      	lsrs	r0, r0, #3
 80009a6:	e6ac      	b.n	8000702 <__aeabi_dadd+0x25a>
 80009a8:	4643      	mov	r3, r8
 80009aa:	4642      	mov	r2, r8
 80009ac:	08c9      	lsrs	r1, r1, #3
 80009ae:	075b      	lsls	r3, r3, #29
 80009b0:	4655      	mov	r5, sl
 80009b2:	430b      	orrs	r3, r1
 80009b4:	08d0      	lsrs	r0, r2, #3
 80009b6:	e6c5      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009b8:	4643      	mov	r3, r8
 80009ba:	4642      	mov	r2, r8
 80009bc:	075b      	lsls	r3, r3, #29
 80009be:	08c9      	lsrs	r1, r1, #3
 80009c0:	430b      	orrs	r3, r1
 80009c2:	08d0      	lsrs	r0, r2, #3
 80009c4:	e6be      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009c6:	4303      	orrs	r3, r0
 80009c8:	001c      	movs	r4, r3
 80009ca:	1e63      	subs	r3, r4, #1
 80009cc:	419c      	sbcs	r4, r3
 80009ce:	e6fc      	b.n	80007ca <__aeabi_dadd+0x322>
 80009d0:	0002      	movs	r2, r0
 80009d2:	3c20      	subs	r4, #32
 80009d4:	40e2      	lsrs	r2, r4
 80009d6:	0014      	movs	r4, r2
 80009d8:	4662      	mov	r2, ip
 80009da:	2a20      	cmp	r2, #32
 80009dc:	d003      	beq.n	80009e6 <__aeabi_dadd+0x53e>
 80009de:	2540      	movs	r5, #64	; 0x40
 80009e0:	1aad      	subs	r5, r5, r2
 80009e2:	40a8      	lsls	r0, r5
 80009e4:	4303      	orrs	r3, r0
 80009e6:	1e58      	subs	r0, r3, #1
 80009e8:	4183      	sbcs	r3, r0
 80009ea:	4323      	orrs	r3, r4
 80009ec:	e775      	b.n	80008da <__aeabi_dadd+0x432>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d0e2      	beq.n	80009b8 <__aeabi_dadd+0x510>
 80009f2:	003a      	movs	r2, r7
 80009f4:	430a      	orrs	r2, r1
 80009f6:	d0cd      	beq.n	8000994 <__aeabi_dadd+0x4ec>
 80009f8:	0742      	lsls	r2, r0, #29
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	0312      	lsls	r2, r2, #12
 8000a04:	4210      	tst	r0, r2
 8000a06:	d006      	beq.n	8000a16 <__aeabi_dadd+0x56e>
 8000a08:	08fc      	lsrs	r4, r7, #3
 8000a0a:	4214      	tst	r4, r2
 8000a0c:	d103      	bne.n	8000a16 <__aeabi_dadd+0x56e>
 8000a0e:	0020      	movs	r0, r4
 8000a10:	08cb      	lsrs	r3, r1, #3
 8000a12:	077a      	lsls	r2, r7, #29
 8000a14:	4313      	orrs	r3, r2
 8000a16:	0f5a      	lsrs	r2, r3, #29
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	0752      	lsls	r2, r2, #29
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	e690      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000a22:	4643      	mov	r3, r8
 8000a24:	430b      	orrs	r3, r1
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x582>
 8000a28:	e709      	b.n	800083e <__aeabi_dadd+0x396>
 8000a2a:	4643      	mov	r3, r8
 8000a2c:	4642      	mov	r2, r8
 8000a2e:	08c9      	lsrs	r1, r1, #3
 8000a30:	075b      	lsls	r3, r3, #29
 8000a32:	4655      	mov	r5, sl
 8000a34:	430b      	orrs	r3, r1
 8000a36:	08d0      	lsrs	r0, r2, #3
 8000a38:	e666      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a3a:	1acc      	subs	r4, r1, r3
 8000a3c:	42a1      	cmp	r1, r4
 8000a3e:	4189      	sbcs	r1, r1
 8000a40:	1a3f      	subs	r7, r7, r0
 8000a42:	4249      	negs	r1, r1
 8000a44:	4655      	mov	r5, sl
 8000a46:	2601      	movs	r6, #1
 8000a48:	1a7f      	subs	r7, r7, r1
 8000a4a:	e57e      	b.n	800054a <__aeabi_dadd+0xa2>
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	1a5c      	subs	r4, r3, r1
 8000a50:	1a87      	subs	r7, r0, r2
 8000a52:	42a3      	cmp	r3, r4
 8000a54:	4192      	sbcs	r2, r2
 8000a56:	4252      	negs	r2, r2
 8000a58:	1abf      	subs	r7, r7, r2
 8000a5a:	023a      	lsls	r2, r7, #8
 8000a5c:	d53d      	bpl.n	8000ada <__aeabi_dadd+0x632>
 8000a5e:	1acc      	subs	r4, r1, r3
 8000a60:	42a1      	cmp	r1, r4
 8000a62:	4189      	sbcs	r1, r1
 8000a64:	4643      	mov	r3, r8
 8000a66:	4249      	negs	r1, r1
 8000a68:	1a1f      	subs	r7, r3, r0
 8000a6a:	4655      	mov	r5, sl
 8000a6c:	1a7f      	subs	r7, r7, r1
 8000a6e:	e595      	b.n	800059c <__aeabi_dadd+0xf4>
 8000a70:	077b      	lsls	r3, r7, #29
 8000a72:	08c9      	lsrs	r1, r1, #3
 8000a74:	430b      	orrs	r3, r1
 8000a76:	08f8      	lsrs	r0, r7, #3
 8000a78:	e643      	b.n	8000702 <__aeabi_dadd+0x25a>
 8000a7a:	4644      	mov	r4, r8
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	d130      	bne.n	8000ae4 <__aeabi_dadd+0x63c>
 8000a82:	0742      	lsls	r2, r0, #29
 8000a84:	4313      	orrs	r3, r2
 8000a86:	08c0      	lsrs	r0, r0, #3
 8000a88:	e65c      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000a8a:	077b      	lsls	r3, r7, #29
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	08f8      	lsrs	r0, r7, #3
 8000a92:	e639      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a94:	185c      	adds	r4, r3, r1
 8000a96:	429c      	cmp	r4, r3
 8000a98:	419b      	sbcs	r3, r3
 8000a9a:	4440      	add	r0, r8
 8000a9c:	425b      	negs	r3, r3
 8000a9e:	18c7      	adds	r7, r0, r3
 8000aa0:	023b      	lsls	r3, r7, #8
 8000aa2:	d400      	bmi.n	8000aa6 <__aeabi_dadd+0x5fe>
 8000aa4:	e625      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <__aeabi_dadd+0x674>)
 8000aa8:	2601      	movs	r6, #1
 8000aaa:	401f      	ands	r7, r3
 8000aac:	e621      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aae:	0004      	movs	r4, r0
 8000ab0:	3a20      	subs	r2, #32
 8000ab2:	40d4      	lsrs	r4, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	2a20      	cmp	r2, #32
 8000ab8:	d004      	beq.n	8000ac4 <__aeabi_dadd+0x61c>
 8000aba:	2240      	movs	r2, #64	; 0x40
 8000abc:	4666      	mov	r6, ip
 8000abe:	1b92      	subs	r2, r2, r6
 8000ac0:	4090      	lsls	r0, r2
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	4193      	sbcs	r3, r2
 8000ac8:	431c      	orrs	r4, r3
 8000aca:	e67e      	b.n	80007ca <__aeabi_dadd+0x322>
 8000acc:	185c      	adds	r4, r3, r1
 8000ace:	428c      	cmp	r4, r1
 8000ad0:	4189      	sbcs	r1, r1
 8000ad2:	4440      	add	r0, r8
 8000ad4:	4249      	negs	r1, r1
 8000ad6:	1847      	adds	r7, r0, r1
 8000ad8:	e6dd      	b.n	8000896 <__aeabi_dadd+0x3ee>
 8000ada:	0023      	movs	r3, r4
 8000adc:	433b      	orrs	r3, r7
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x63a>
 8000ae0:	e6ad      	b.n	800083e <__aeabi_dadd+0x396>
 8000ae2:	e606      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000ae4:	0744      	lsls	r4, r0, #29
 8000ae6:	4323      	orrs	r3, r4
 8000ae8:	2480      	movs	r4, #128	; 0x80
 8000aea:	08c0      	lsrs	r0, r0, #3
 8000aec:	0324      	lsls	r4, r4, #12
 8000aee:	4220      	tst	r0, r4
 8000af0:	d008      	beq.n	8000b04 <__aeabi_dadd+0x65c>
 8000af2:	4642      	mov	r2, r8
 8000af4:	08d6      	lsrs	r6, r2, #3
 8000af6:	4226      	tst	r6, r4
 8000af8:	d104      	bne.n	8000b04 <__aeabi_dadd+0x65c>
 8000afa:	4655      	mov	r5, sl
 8000afc:	0030      	movs	r0, r6
 8000afe:	08cb      	lsrs	r3, r1, #3
 8000b00:	0751      	lsls	r1, r2, #29
 8000b02:	430b      	orrs	r3, r1
 8000b04:	0f5a      	lsrs	r2, r3, #29
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	0752      	lsls	r2, r2, #29
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	e619      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000b10:	2300      	movs	r3, #0
 8000b12:	4a01      	ldr	r2, [pc, #4]	; (8000b18 <__aeabi_dadd+0x670>)
 8000b14:	001f      	movs	r7, r3
 8000b16:	e55e      	b.n	80005d6 <__aeabi_dadd+0x12e>
 8000b18:	000007ff 	.word	0x000007ff
 8000b1c:	ff7fffff 	.word	0xff7fffff

08000b20 <__aeabi_ddiv>:
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	4657      	mov	r7, sl
 8000b24:	464e      	mov	r6, r9
 8000b26:	4645      	mov	r5, r8
 8000b28:	46de      	mov	lr, fp
 8000b2a:	b5e0      	push	{r5, r6, r7, lr}
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	0005      	movs	r5, r0
 8000b30:	030c      	lsls	r4, r1, #12
 8000b32:	0048      	lsls	r0, r1, #1
 8000b34:	4692      	mov	sl, r2
 8000b36:	001f      	movs	r7, r3
 8000b38:	b085      	sub	sp, #20
 8000b3a:	0b24      	lsrs	r4, r4, #12
 8000b3c:	0d40      	lsrs	r0, r0, #21
 8000b3e:	0fce      	lsrs	r6, r1, #31
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_ddiv+0x26>
 8000b44:	e156      	b.n	8000df4 <__aeabi_ddiv+0x2d4>
 8000b46:	4bd4      	ldr	r3, [pc, #848]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_ddiv+0x2e>
 8000b4c:	e172      	b.n	8000e34 <__aeabi_ddiv+0x314>
 8000b4e:	0f6b      	lsrs	r3, r5, #29
 8000b50:	00e4      	lsls	r4, r4, #3
 8000b52:	431c      	orrs	r4, r3
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	041b      	lsls	r3, r3, #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	4698      	mov	r8, r3
 8000b5c:	4bcf      	ldr	r3, [pc, #828]	; (8000e9c <__aeabi_ddiv+0x37c>)
 8000b5e:	00ed      	lsls	r5, r5, #3
 8000b60:	469b      	mov	fp, r3
 8000b62:	2300      	movs	r3, #0
 8000b64:	4699      	mov	r9, r3
 8000b66:	4483      	add	fp, r0
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	033c      	lsls	r4, r7, #12
 8000b6c:	007b      	lsls	r3, r7, #1
 8000b6e:	4650      	mov	r0, sl
 8000b70:	0b24      	lsrs	r4, r4, #12
 8000b72:	0d5b      	lsrs	r3, r3, #21
 8000b74:	0fff      	lsrs	r7, r7, #31
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_ddiv+0x5c>
 8000b7a:	e11f      	b.n	8000dbc <__aeabi_ddiv+0x29c>
 8000b7c:	4ac6      	ldr	r2, [pc, #792]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d100      	bne.n	8000b84 <__aeabi_ddiv+0x64>
 8000b82:	e162      	b.n	8000e4a <__aeabi_ddiv+0x32a>
 8000b84:	49c5      	ldr	r1, [pc, #788]	; (8000e9c <__aeabi_ddiv+0x37c>)
 8000b86:	0f42      	lsrs	r2, r0, #29
 8000b88:	468c      	mov	ip, r1
 8000b8a:	00e4      	lsls	r4, r4, #3
 8000b8c:	4659      	mov	r1, fp
 8000b8e:	4314      	orrs	r4, r2
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	4463      	add	r3, ip
 8000b94:	0412      	lsls	r2, r2, #16
 8000b96:	1acb      	subs	r3, r1, r3
 8000b98:	4314      	orrs	r4, r2
 8000b9a:	469b      	mov	fp, r3
 8000b9c:	00c2      	lsls	r2, r0, #3
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	407b      	eors	r3, r7
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d827      	bhi.n	8000bfc <__aeabi_ddiv+0xdc>
 8000bac:	49bc      	ldr	r1, [pc, #752]	; (8000ea0 <__aeabi_ddiv+0x380>)
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	58cb      	ldr	r3, [r1, r3]
 8000bb2:	469f      	mov	pc, r3
 8000bb4:	46b2      	mov	sl, r6
 8000bb6:	9b00      	ldr	r3, [sp, #0]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d016      	beq.n	8000bea <__aeabi_ddiv+0xca>
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_ddiv+0xa2>
 8000bc0:	e28e      	b.n	80010e0 <__aeabi_ddiv+0x5c0>
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_ddiv+0xa8>
 8000bc6:	e0d9      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2400      	movs	r4, #0
 8000bcc:	2500      	movs	r5, #0
 8000bce:	4652      	mov	r2, sl
 8000bd0:	051b      	lsls	r3, r3, #20
 8000bd2:	4323      	orrs	r3, r4
 8000bd4:	07d2      	lsls	r2, r2, #31
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	0028      	movs	r0, r5
 8000bda:	0019      	movs	r1, r3
 8000bdc:	b005      	add	sp, #20
 8000bde:	bcf0      	pop	{r4, r5, r6, r7}
 8000be0:	46bb      	mov	fp, r7
 8000be2:	46b2      	mov	sl, r6
 8000be4:	46a9      	mov	r9, r5
 8000be6:	46a0      	mov	r8, r4
 8000be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bea:	2400      	movs	r4, #0
 8000bec:	2500      	movs	r5, #0
 8000bee:	4baa      	ldr	r3, [pc, #680]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000bf0:	e7ed      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000bf2:	46ba      	mov	sl, r7
 8000bf4:	46a0      	mov	r8, r4
 8000bf6:	0015      	movs	r5, r2
 8000bf8:	9000      	str	r0, [sp, #0]
 8000bfa:	e7dc      	b.n	8000bb6 <__aeabi_ddiv+0x96>
 8000bfc:	4544      	cmp	r4, r8
 8000bfe:	d200      	bcs.n	8000c02 <__aeabi_ddiv+0xe2>
 8000c00:	e1c7      	b.n	8000f92 <__aeabi_ddiv+0x472>
 8000c02:	d100      	bne.n	8000c06 <__aeabi_ddiv+0xe6>
 8000c04:	e1c2      	b.n	8000f8c <__aeabi_ddiv+0x46c>
 8000c06:	2301      	movs	r3, #1
 8000c08:	425b      	negs	r3, r3
 8000c0a:	469c      	mov	ip, r3
 8000c0c:	002e      	movs	r6, r5
 8000c0e:	4640      	mov	r0, r8
 8000c10:	2500      	movs	r5, #0
 8000c12:	44e3      	add	fp, ip
 8000c14:	0223      	lsls	r3, r4, #8
 8000c16:	0e14      	lsrs	r4, r2, #24
 8000c18:	431c      	orrs	r4, r3
 8000c1a:	0c1b      	lsrs	r3, r3, #16
 8000c1c:	4699      	mov	r9, r3
 8000c1e:	0423      	lsls	r3, r4, #16
 8000c20:	0c1f      	lsrs	r7, r3, #16
 8000c22:	0212      	lsls	r2, r2, #8
 8000c24:	4649      	mov	r1, r9
 8000c26:	9200      	str	r2, [sp, #0]
 8000c28:	9701      	str	r7, [sp, #4]
 8000c2a:	f7ff fb0f 	bl	800024c <__aeabi_uidivmod>
 8000c2e:	0002      	movs	r2, r0
 8000c30:	437a      	muls	r2, r7
 8000c32:	040b      	lsls	r3, r1, #16
 8000c34:	0c31      	lsrs	r1, r6, #16
 8000c36:	4680      	mov	r8, r0
 8000c38:	4319      	orrs	r1, r3
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	d907      	bls.n	8000c4e <__aeabi_ddiv+0x12e>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	425b      	negs	r3, r3
 8000c42:	469c      	mov	ip, r3
 8000c44:	1909      	adds	r1, r1, r4
 8000c46:	44e0      	add	r8, ip
 8000c48:	428c      	cmp	r4, r1
 8000c4a:	d800      	bhi.n	8000c4e <__aeabi_ddiv+0x12e>
 8000c4c:	e207      	b.n	800105e <__aeabi_ddiv+0x53e>
 8000c4e:	1a88      	subs	r0, r1, r2
 8000c50:	4649      	mov	r1, r9
 8000c52:	f7ff fafb 	bl	800024c <__aeabi_uidivmod>
 8000c56:	0409      	lsls	r1, r1, #16
 8000c58:	468c      	mov	ip, r1
 8000c5a:	0431      	lsls	r1, r6, #16
 8000c5c:	4666      	mov	r6, ip
 8000c5e:	9a01      	ldr	r2, [sp, #4]
 8000c60:	0c09      	lsrs	r1, r1, #16
 8000c62:	4342      	muls	r2, r0
 8000c64:	0003      	movs	r3, r0
 8000c66:	4331      	orrs	r1, r6
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	d904      	bls.n	8000c76 <__aeabi_ddiv+0x156>
 8000c6c:	1909      	adds	r1, r1, r4
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	428c      	cmp	r4, r1
 8000c72:	d800      	bhi.n	8000c76 <__aeabi_ddiv+0x156>
 8000c74:	e1ed      	b.n	8001052 <__aeabi_ddiv+0x532>
 8000c76:	1a88      	subs	r0, r1, r2
 8000c78:	4642      	mov	r2, r8
 8000c7a:	0412      	lsls	r2, r2, #16
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	4690      	mov	r8, r2
 8000c80:	4641      	mov	r1, r8
 8000c82:	9b00      	ldr	r3, [sp, #0]
 8000c84:	040e      	lsls	r6, r1, #16
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	001f      	movs	r7, r3
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	9b00      	ldr	r3, [sp, #0]
 8000c8e:	0c36      	lsrs	r6, r6, #16
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	0c19      	lsrs	r1, r3, #16
 8000c94:	000b      	movs	r3, r1
 8000c96:	4373      	muls	r3, r6
 8000c98:	0c12      	lsrs	r2, r2, #16
 8000c9a:	437e      	muls	r6, r7
 8000c9c:	9103      	str	r1, [sp, #12]
 8000c9e:	4351      	muls	r1, r2
 8000ca0:	437a      	muls	r2, r7
 8000ca2:	0c1f      	lsrs	r7, r3, #16
 8000ca4:	46bc      	mov	ip, r7
 8000ca6:	1876      	adds	r6, r6, r1
 8000ca8:	4466      	add	r6, ip
 8000caa:	42b1      	cmp	r1, r6
 8000cac:	d903      	bls.n	8000cb6 <__aeabi_ddiv+0x196>
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	468c      	mov	ip, r1
 8000cb4:	4462      	add	r2, ip
 8000cb6:	0c31      	lsrs	r1, r6, #16
 8000cb8:	188a      	adds	r2, r1, r2
 8000cba:	0431      	lsls	r1, r6, #16
 8000cbc:	041e      	lsls	r6, r3, #16
 8000cbe:	0c36      	lsrs	r6, r6, #16
 8000cc0:	198e      	adds	r6, r1, r6
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	d302      	bcc.n	8000ccc <__aeabi_ddiv+0x1ac>
 8000cc6:	d112      	bne.n	8000cee <__aeabi_ddiv+0x1ce>
 8000cc8:	42b5      	cmp	r5, r6
 8000cca:	d210      	bcs.n	8000cee <__aeabi_ddiv+0x1ce>
 8000ccc:	4643      	mov	r3, r8
 8000cce:	1e59      	subs	r1, r3, #1
 8000cd0:	9b00      	ldr	r3, [sp, #0]
 8000cd2:	469c      	mov	ip, r3
 8000cd4:	4465      	add	r5, ip
 8000cd6:	001f      	movs	r7, r3
 8000cd8:	429d      	cmp	r5, r3
 8000cda:	419b      	sbcs	r3, r3
 8000cdc:	425b      	negs	r3, r3
 8000cde:	191b      	adds	r3, r3, r4
 8000ce0:	18c0      	adds	r0, r0, r3
 8000ce2:	4284      	cmp	r4, r0
 8000ce4:	d200      	bcs.n	8000ce8 <__aeabi_ddiv+0x1c8>
 8000ce6:	e1a0      	b.n	800102a <__aeabi_ddiv+0x50a>
 8000ce8:	d100      	bne.n	8000cec <__aeabi_ddiv+0x1cc>
 8000cea:	e19b      	b.n	8001024 <__aeabi_ddiv+0x504>
 8000cec:	4688      	mov	r8, r1
 8000cee:	1bae      	subs	r6, r5, r6
 8000cf0:	42b5      	cmp	r5, r6
 8000cf2:	41ad      	sbcs	r5, r5
 8000cf4:	1a80      	subs	r0, r0, r2
 8000cf6:	426d      	negs	r5, r5
 8000cf8:	1b40      	subs	r0, r0, r5
 8000cfa:	4284      	cmp	r4, r0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_ddiv+0x1e0>
 8000cfe:	e1d5      	b.n	80010ac <__aeabi_ddiv+0x58c>
 8000d00:	4649      	mov	r1, r9
 8000d02:	f7ff faa3 	bl	800024c <__aeabi_uidivmod>
 8000d06:	9a01      	ldr	r2, [sp, #4]
 8000d08:	040b      	lsls	r3, r1, #16
 8000d0a:	4342      	muls	r2, r0
 8000d0c:	0c31      	lsrs	r1, r6, #16
 8000d0e:	0005      	movs	r5, r0
 8000d10:	4319      	orrs	r1, r3
 8000d12:	428a      	cmp	r2, r1
 8000d14:	d900      	bls.n	8000d18 <__aeabi_ddiv+0x1f8>
 8000d16:	e16c      	b.n	8000ff2 <__aeabi_ddiv+0x4d2>
 8000d18:	1a88      	subs	r0, r1, r2
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	f7ff fa96 	bl	800024c <__aeabi_uidivmod>
 8000d20:	9a01      	ldr	r2, [sp, #4]
 8000d22:	0436      	lsls	r6, r6, #16
 8000d24:	4342      	muls	r2, r0
 8000d26:	0409      	lsls	r1, r1, #16
 8000d28:	0c36      	lsrs	r6, r6, #16
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	430e      	orrs	r6, r1
 8000d2e:	42b2      	cmp	r2, r6
 8000d30:	d900      	bls.n	8000d34 <__aeabi_ddiv+0x214>
 8000d32:	e153      	b.n	8000fdc <__aeabi_ddiv+0x4bc>
 8000d34:	9803      	ldr	r0, [sp, #12]
 8000d36:	1ab6      	subs	r6, r6, r2
 8000d38:	0002      	movs	r2, r0
 8000d3a:	042d      	lsls	r5, r5, #16
 8000d3c:	431d      	orrs	r5, r3
 8000d3e:	9f02      	ldr	r7, [sp, #8]
 8000d40:	042b      	lsls	r3, r5, #16
 8000d42:	0c1b      	lsrs	r3, r3, #16
 8000d44:	435a      	muls	r2, r3
 8000d46:	437b      	muls	r3, r7
 8000d48:	469c      	mov	ip, r3
 8000d4a:	0c29      	lsrs	r1, r5, #16
 8000d4c:	4348      	muls	r0, r1
 8000d4e:	0c13      	lsrs	r3, r2, #16
 8000d50:	4484      	add	ip, r0
 8000d52:	4463      	add	r3, ip
 8000d54:	4379      	muls	r1, r7
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d903      	bls.n	8000d62 <__aeabi_ddiv+0x242>
 8000d5a:	2080      	movs	r0, #128	; 0x80
 8000d5c:	0240      	lsls	r0, r0, #9
 8000d5e:	4684      	mov	ip, r0
 8000d60:	4461      	add	r1, ip
 8000d62:	0c18      	lsrs	r0, r3, #16
 8000d64:	0412      	lsls	r2, r2, #16
 8000d66:	041b      	lsls	r3, r3, #16
 8000d68:	0c12      	lsrs	r2, r2, #16
 8000d6a:	1841      	adds	r1, r0, r1
 8000d6c:	189b      	adds	r3, r3, r2
 8000d6e:	428e      	cmp	r6, r1
 8000d70:	d200      	bcs.n	8000d74 <__aeabi_ddiv+0x254>
 8000d72:	e0ff      	b.n	8000f74 <__aeabi_ddiv+0x454>
 8000d74:	d100      	bne.n	8000d78 <__aeabi_ddiv+0x258>
 8000d76:	e0fa      	b.n	8000f6e <__aeabi_ddiv+0x44e>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	431d      	orrs	r5, r3
 8000d7c:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <__aeabi_ddiv+0x384>)
 8000d7e:	445a      	add	r2, fp
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	dc00      	bgt.n	8000d86 <__aeabi_ddiv+0x266>
 8000d84:	e0aa      	b.n	8000edc <__aeabi_ddiv+0x3bc>
 8000d86:	076b      	lsls	r3, r5, #29
 8000d88:	d000      	beq.n	8000d8c <__aeabi_ddiv+0x26c>
 8000d8a:	e13d      	b.n	8001008 <__aeabi_ddiv+0x4e8>
 8000d8c:	08ed      	lsrs	r5, r5, #3
 8000d8e:	4643      	mov	r3, r8
 8000d90:	01db      	lsls	r3, r3, #7
 8000d92:	d506      	bpl.n	8000da2 <__aeabi_ddiv+0x282>
 8000d94:	4642      	mov	r2, r8
 8000d96:	4b44      	ldr	r3, [pc, #272]	; (8000ea8 <__aeabi_ddiv+0x388>)
 8000d98:	401a      	ands	r2, r3
 8000d9a:	4690      	mov	r8, r2
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	00d2      	lsls	r2, r2, #3
 8000da0:	445a      	add	r2, fp
 8000da2:	4b42      	ldr	r3, [pc, #264]	; (8000eac <__aeabi_ddiv+0x38c>)
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dd00      	ble.n	8000daa <__aeabi_ddiv+0x28a>
 8000da8:	e71f      	b.n	8000bea <__aeabi_ddiv+0xca>
 8000daa:	4643      	mov	r3, r8
 8000dac:	075b      	lsls	r3, r3, #29
 8000dae:	431d      	orrs	r5, r3
 8000db0:	4643      	mov	r3, r8
 8000db2:	0552      	lsls	r2, r2, #21
 8000db4:	025c      	lsls	r4, r3, #9
 8000db6:	0b24      	lsrs	r4, r4, #12
 8000db8:	0d53      	lsrs	r3, r2, #21
 8000dba:	e708      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000dbc:	4652      	mov	r2, sl
 8000dbe:	4322      	orrs	r2, r4
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_ddiv+0x2a4>
 8000dc2:	e07b      	b.n	8000ebc <__aeabi_ddiv+0x39c>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0x2aa>
 8000dc8:	e0fa      	b.n	8000fc0 <__aeabi_ddiv+0x4a0>
 8000dca:	0020      	movs	r0, r4
 8000dcc:	f001 f952 	bl	8002074 <__clzsi2>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	3a0b      	subs	r2, #11
 8000dd4:	231d      	movs	r3, #29
 8000dd6:	0001      	movs	r1, r0
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	4652      	mov	r2, sl
 8000ddc:	3908      	subs	r1, #8
 8000dde:	40da      	lsrs	r2, r3
 8000de0:	408c      	lsls	r4, r1
 8000de2:	4314      	orrs	r4, r2
 8000de4:	4652      	mov	r2, sl
 8000de6:	408a      	lsls	r2, r1
 8000de8:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <__aeabi_ddiv+0x390>)
 8000dea:	4458      	add	r0, fp
 8000dec:	469b      	mov	fp, r3
 8000dee:	4483      	add	fp, r0
 8000df0:	2000      	movs	r0, #0
 8000df2:	e6d5      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000df4:	464b      	mov	r3, r9
 8000df6:	4323      	orrs	r3, r4
 8000df8:	4698      	mov	r8, r3
 8000dfa:	d044      	beq.n	8000e86 <__aeabi_ddiv+0x366>
 8000dfc:	2c00      	cmp	r4, #0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0x2e2>
 8000e00:	e0ce      	b.n	8000fa0 <__aeabi_ddiv+0x480>
 8000e02:	0020      	movs	r0, r4
 8000e04:	f001 f936 	bl	8002074 <__clzsi2>
 8000e08:	0001      	movs	r1, r0
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	390b      	subs	r1, #11
 8000e0e:	231d      	movs	r3, #29
 8000e10:	1a5b      	subs	r3, r3, r1
 8000e12:	4649      	mov	r1, r9
 8000e14:	0010      	movs	r0, r2
 8000e16:	40d9      	lsrs	r1, r3
 8000e18:	3808      	subs	r0, #8
 8000e1a:	4084      	lsls	r4, r0
 8000e1c:	000b      	movs	r3, r1
 8000e1e:	464d      	mov	r5, r9
 8000e20:	4323      	orrs	r3, r4
 8000e22:	4698      	mov	r8, r3
 8000e24:	4085      	lsls	r5, r0
 8000e26:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <__aeabi_ddiv+0x394>)
 8000e28:	1a83      	subs	r3, r0, r2
 8000e2a:	469b      	mov	fp, r3
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4699      	mov	r9, r3
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	e69a      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e34:	464b      	mov	r3, r9
 8000e36:	4323      	orrs	r3, r4
 8000e38:	4698      	mov	r8, r3
 8000e3a:	d11d      	bne.n	8000e78 <__aeabi_ddiv+0x358>
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	4699      	mov	r9, r3
 8000e40:	3b06      	subs	r3, #6
 8000e42:	2500      	movs	r5, #0
 8000e44:	4683      	mov	fp, r0
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	e68f      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e4a:	4652      	mov	r2, sl
 8000e4c:	4322      	orrs	r2, r4
 8000e4e:	d109      	bne.n	8000e64 <__aeabi_ddiv+0x344>
 8000e50:	2302      	movs	r3, #2
 8000e52:	4649      	mov	r1, r9
 8000e54:	4319      	orrs	r1, r3
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <__aeabi_ddiv+0x398>)
 8000e58:	4689      	mov	r9, r1
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	2400      	movs	r4, #0
 8000e5e:	2002      	movs	r0, #2
 8000e60:	44e3      	add	fp, ip
 8000e62:	e69d      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000e64:	2303      	movs	r3, #3
 8000e66:	464a      	mov	r2, r9
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <__aeabi_ddiv+0x398>)
 8000e6c:	4691      	mov	r9, r2
 8000e6e:	469c      	mov	ip, r3
 8000e70:	4652      	mov	r2, sl
 8000e72:	2003      	movs	r0, #3
 8000e74:	44e3      	add	fp, ip
 8000e76:	e693      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000e78:	230c      	movs	r3, #12
 8000e7a:	4699      	mov	r9, r3
 8000e7c:	3b09      	subs	r3, #9
 8000e7e:	46a0      	mov	r8, r4
 8000e80:	4683      	mov	fp, r0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	e671      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e86:	2304      	movs	r3, #4
 8000e88:	4699      	mov	r9, r3
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	469b      	mov	fp, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	2500      	movs	r5, #0
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	e669      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	000007ff 	.word	0x000007ff
 8000e9c:	fffffc01 	.word	0xfffffc01
 8000ea0:	08008ea0 	.word	0x08008ea0
 8000ea4:	000003ff 	.word	0x000003ff
 8000ea8:	feffffff 	.word	0xfeffffff
 8000eac:	000007fe 	.word	0x000007fe
 8000eb0:	000003f3 	.word	0x000003f3
 8000eb4:	fffffc0d 	.word	0xfffffc0d
 8000eb8:	fffff801 	.word	0xfffff801
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	4319      	orrs	r1, r3
 8000ec2:	4689      	mov	r9, r1
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	e66a      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	2480      	movs	r4, #128	; 0x80
 8000ece:	469a      	mov	sl, r3
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	4b8a      	ldr	r3, [pc, #552]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000ed4:	0324      	lsls	r4, r4, #12
 8000ed6:	e67a      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000ed8:	2501      	movs	r5, #1
 8000eda:	426d      	negs	r5, r5
 8000edc:	2301      	movs	r3, #1
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	2b38      	cmp	r3, #56	; 0x38
 8000ee2:	dd00      	ble.n	8000ee6 <__aeabi_ddiv+0x3c6>
 8000ee4:	e670      	b.n	8000bc8 <__aeabi_ddiv+0xa8>
 8000ee6:	2b1f      	cmp	r3, #31
 8000ee8:	dc00      	bgt.n	8000eec <__aeabi_ddiv+0x3cc>
 8000eea:	e0bf      	b.n	800106c <__aeabi_ddiv+0x54c>
 8000eec:	211f      	movs	r1, #31
 8000eee:	4249      	negs	r1, r1
 8000ef0:	1a8a      	subs	r2, r1, r2
 8000ef2:	4641      	mov	r1, r8
 8000ef4:	40d1      	lsrs	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	2b20      	cmp	r3, #32
 8000efa:	d004      	beq.n	8000f06 <__aeabi_ddiv+0x3e6>
 8000efc:	4641      	mov	r1, r8
 8000efe:	4b80      	ldr	r3, [pc, #512]	; (8001100 <__aeabi_ddiv+0x5e0>)
 8000f00:	445b      	add	r3, fp
 8000f02:	4099      	lsls	r1, r3
 8000f04:	430d      	orrs	r5, r1
 8000f06:	1e6b      	subs	r3, r5, #1
 8000f08:	419d      	sbcs	r5, r3
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	432a      	orrs	r2, r5
 8000f0e:	001d      	movs	r5, r3
 8000f10:	2400      	movs	r4, #0
 8000f12:	4015      	ands	r5, r2
 8000f14:	4213      	tst	r3, r2
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0x3fa>
 8000f18:	e0d4      	b.n	80010c4 <__aeabi_ddiv+0x5a4>
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4011      	ands	r1, r2
 8000f20:	2904      	cmp	r1, #4
 8000f22:	d100      	bne.n	8000f26 <__aeabi_ddiv+0x406>
 8000f24:	e0cb      	b.n	80010be <__aeabi_ddiv+0x59e>
 8000f26:	1d11      	adds	r1, r2, #4
 8000f28:	4291      	cmp	r1, r2
 8000f2a:	4192      	sbcs	r2, r2
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	189b      	adds	r3, r3, r2
 8000f30:	000a      	movs	r2, r1
 8000f32:	0219      	lsls	r1, r3, #8
 8000f34:	d400      	bmi.n	8000f38 <__aeabi_ddiv+0x418>
 8000f36:	e0c2      	b.n	80010be <__aeabi_ddiv+0x59e>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	e646      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	4641      	mov	r1, r8
 8000f44:	031b      	lsls	r3, r3, #12
 8000f46:	4219      	tst	r1, r3
 8000f48:	d008      	beq.n	8000f5c <__aeabi_ddiv+0x43c>
 8000f4a:	421c      	tst	r4, r3
 8000f4c:	d106      	bne.n	8000f5c <__aeabi_ddiv+0x43c>
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	0324      	lsls	r4, r4, #12
 8000f52:	46ba      	mov	sl, r7
 8000f54:	0015      	movs	r5, r2
 8000f56:	4b69      	ldr	r3, [pc, #420]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000f58:	0b24      	lsrs	r4, r4, #12
 8000f5a:	e638      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f5c:	2480      	movs	r4, #128	; 0x80
 8000f5e:	4643      	mov	r3, r8
 8000f60:	0324      	lsls	r4, r4, #12
 8000f62:	431c      	orrs	r4, r3
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	46b2      	mov	sl, r6
 8000f68:	4b64      	ldr	r3, [pc, #400]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000f6a:	0b24      	lsrs	r4, r4, #12
 8000f6c:	e62f      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x454>
 8000f72:	e703      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 8000f74:	19a6      	adds	r6, r4, r6
 8000f76:	1e68      	subs	r0, r5, #1
 8000f78:	42a6      	cmp	r6, r4
 8000f7a:	d200      	bcs.n	8000f7e <__aeabi_ddiv+0x45e>
 8000f7c:	e08d      	b.n	800109a <__aeabi_ddiv+0x57a>
 8000f7e:	428e      	cmp	r6, r1
 8000f80:	d200      	bcs.n	8000f84 <__aeabi_ddiv+0x464>
 8000f82:	e0a3      	b.n	80010cc <__aeabi_ddiv+0x5ac>
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x468>
 8000f86:	e0b3      	b.n	80010f0 <__aeabi_ddiv+0x5d0>
 8000f88:	0005      	movs	r5, r0
 8000f8a:	e6f5      	b.n	8000d78 <__aeabi_ddiv+0x258>
 8000f8c:	42aa      	cmp	r2, r5
 8000f8e:	d900      	bls.n	8000f92 <__aeabi_ddiv+0x472>
 8000f90:	e639      	b.n	8000c06 <__aeabi_ddiv+0xe6>
 8000f92:	4643      	mov	r3, r8
 8000f94:	07de      	lsls	r6, r3, #31
 8000f96:	0858      	lsrs	r0, r3, #1
 8000f98:	086b      	lsrs	r3, r5, #1
 8000f9a:	431e      	orrs	r6, r3
 8000f9c:	07ed      	lsls	r5, r5, #31
 8000f9e:	e639      	b.n	8000c14 <__aeabi_ddiv+0xf4>
 8000fa0:	4648      	mov	r0, r9
 8000fa2:	f001 f867 	bl	8002074 <__clzsi2>
 8000fa6:	0001      	movs	r1, r0
 8000fa8:	0002      	movs	r2, r0
 8000faa:	3115      	adds	r1, #21
 8000fac:	3220      	adds	r2, #32
 8000fae:	291c      	cmp	r1, #28
 8000fb0:	dc00      	bgt.n	8000fb4 <__aeabi_ddiv+0x494>
 8000fb2:	e72c      	b.n	8000e0e <__aeabi_ddiv+0x2ee>
 8000fb4:	464b      	mov	r3, r9
 8000fb6:	3808      	subs	r0, #8
 8000fb8:	4083      	lsls	r3, r0
 8000fba:	2500      	movs	r5, #0
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	e732      	b.n	8000e26 <__aeabi_ddiv+0x306>
 8000fc0:	f001 f858 	bl	8002074 <__clzsi2>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	3215      	adds	r2, #21
 8000fca:	3020      	adds	r0, #32
 8000fcc:	2a1c      	cmp	r2, #28
 8000fce:	dc00      	bgt.n	8000fd2 <__aeabi_ddiv+0x4b2>
 8000fd0:	e700      	b.n	8000dd4 <__aeabi_ddiv+0x2b4>
 8000fd2:	4654      	mov	r4, sl
 8000fd4:	3b08      	subs	r3, #8
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	409c      	lsls	r4, r3
 8000fda:	e705      	b.n	8000de8 <__aeabi_ddiv+0x2c8>
 8000fdc:	1936      	adds	r6, r6, r4
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	42b4      	cmp	r4, r6
 8000fe2:	d900      	bls.n	8000fe6 <__aeabi_ddiv+0x4c6>
 8000fe4:	e6a6      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000fe6:	42b2      	cmp	r2, r6
 8000fe8:	d800      	bhi.n	8000fec <__aeabi_ddiv+0x4cc>
 8000fea:	e6a3      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000fec:	1e83      	subs	r3, r0, #2
 8000fee:	1936      	adds	r6, r6, r4
 8000ff0:	e6a0      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000ff2:	1909      	adds	r1, r1, r4
 8000ff4:	3d01      	subs	r5, #1
 8000ff6:	428c      	cmp	r4, r1
 8000ff8:	d900      	bls.n	8000ffc <__aeabi_ddiv+0x4dc>
 8000ffa:	e68d      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8000ffc:	428a      	cmp	r2, r1
 8000ffe:	d800      	bhi.n	8001002 <__aeabi_ddiv+0x4e2>
 8001000:	e68a      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8001002:	1e85      	subs	r5, r0, #2
 8001004:	1909      	adds	r1, r1, r4
 8001006:	e687      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8001008:	230f      	movs	r3, #15
 800100a:	402b      	ands	r3, r5
 800100c:	2b04      	cmp	r3, #4
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x4f2>
 8001010:	e6bc      	b.n	8000d8c <__aeabi_ddiv+0x26c>
 8001012:	2305      	movs	r3, #5
 8001014:	425b      	negs	r3, r3
 8001016:	42ab      	cmp	r3, r5
 8001018:	419b      	sbcs	r3, r3
 800101a:	3504      	adds	r5, #4
 800101c:	425b      	negs	r3, r3
 800101e:	08ed      	lsrs	r5, r5, #3
 8001020:	4498      	add	r8, r3
 8001022:	e6b4      	b.n	8000d8e <__aeabi_ddiv+0x26e>
 8001024:	42af      	cmp	r7, r5
 8001026:	d900      	bls.n	800102a <__aeabi_ddiv+0x50a>
 8001028:	e660      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 800102a:	4282      	cmp	r2, r0
 800102c:	d804      	bhi.n	8001038 <__aeabi_ddiv+0x518>
 800102e:	d000      	beq.n	8001032 <__aeabi_ddiv+0x512>
 8001030:	e65c      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 8001032:	42ae      	cmp	r6, r5
 8001034:	d800      	bhi.n	8001038 <__aeabi_ddiv+0x518>
 8001036:	e659      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 8001038:	2302      	movs	r3, #2
 800103a:	425b      	negs	r3, r3
 800103c:	469c      	mov	ip, r3
 800103e:	9b00      	ldr	r3, [sp, #0]
 8001040:	44e0      	add	r8, ip
 8001042:	469c      	mov	ip, r3
 8001044:	4465      	add	r5, ip
 8001046:	429d      	cmp	r5, r3
 8001048:	419b      	sbcs	r3, r3
 800104a:	425b      	negs	r3, r3
 800104c:	191b      	adds	r3, r3, r4
 800104e:	18c0      	adds	r0, r0, r3
 8001050:	e64d      	b.n	8000cee <__aeabi_ddiv+0x1ce>
 8001052:	428a      	cmp	r2, r1
 8001054:	d800      	bhi.n	8001058 <__aeabi_ddiv+0x538>
 8001056:	e60e      	b.n	8000c76 <__aeabi_ddiv+0x156>
 8001058:	1e83      	subs	r3, r0, #2
 800105a:	1909      	adds	r1, r1, r4
 800105c:	e60b      	b.n	8000c76 <__aeabi_ddiv+0x156>
 800105e:	428a      	cmp	r2, r1
 8001060:	d800      	bhi.n	8001064 <__aeabi_ddiv+0x544>
 8001062:	e5f4      	b.n	8000c4e <__aeabi_ddiv+0x12e>
 8001064:	1e83      	subs	r3, r0, #2
 8001066:	4698      	mov	r8, r3
 8001068:	1909      	adds	r1, r1, r4
 800106a:	e5f0      	b.n	8000c4e <__aeabi_ddiv+0x12e>
 800106c:	4925      	ldr	r1, [pc, #148]	; (8001104 <__aeabi_ddiv+0x5e4>)
 800106e:	0028      	movs	r0, r5
 8001070:	4459      	add	r1, fp
 8001072:	408d      	lsls	r5, r1
 8001074:	4642      	mov	r2, r8
 8001076:	408a      	lsls	r2, r1
 8001078:	1e69      	subs	r1, r5, #1
 800107a:	418d      	sbcs	r5, r1
 800107c:	4641      	mov	r1, r8
 800107e:	40d8      	lsrs	r0, r3
 8001080:	40d9      	lsrs	r1, r3
 8001082:	4302      	orrs	r2, r0
 8001084:	432a      	orrs	r2, r5
 8001086:	000b      	movs	r3, r1
 8001088:	0751      	lsls	r1, r2, #29
 800108a:	d100      	bne.n	800108e <__aeabi_ddiv+0x56e>
 800108c:	e751      	b.n	8000f32 <__aeabi_ddiv+0x412>
 800108e:	210f      	movs	r1, #15
 8001090:	4011      	ands	r1, r2
 8001092:	2904      	cmp	r1, #4
 8001094:	d000      	beq.n	8001098 <__aeabi_ddiv+0x578>
 8001096:	e746      	b.n	8000f26 <__aeabi_ddiv+0x406>
 8001098:	e74b      	b.n	8000f32 <__aeabi_ddiv+0x412>
 800109a:	0005      	movs	r5, r0
 800109c:	428e      	cmp	r6, r1
 800109e:	d000      	beq.n	80010a2 <__aeabi_ddiv+0x582>
 80010a0:	e66a      	b.n	8000d78 <__aeabi_ddiv+0x258>
 80010a2:	9a00      	ldr	r2, [sp, #0]
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d000      	beq.n	80010aa <__aeabi_ddiv+0x58a>
 80010a8:	e666      	b.n	8000d78 <__aeabi_ddiv+0x258>
 80010aa:	e667      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <__aeabi_ddiv+0x5e8>)
 80010ae:	445a      	add	r2, fp
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	dc00      	bgt.n	80010b6 <__aeabi_ddiv+0x596>
 80010b4:	e710      	b.n	8000ed8 <__aeabi_ddiv+0x3b8>
 80010b6:	2301      	movs	r3, #1
 80010b8:	2500      	movs	r5, #0
 80010ba:	4498      	add	r8, r3
 80010bc:	e667      	b.n	8000d8e <__aeabi_ddiv+0x26e>
 80010be:	075d      	lsls	r5, r3, #29
 80010c0:	025b      	lsls	r3, r3, #9
 80010c2:	0b1c      	lsrs	r4, r3, #12
 80010c4:	08d2      	lsrs	r2, r2, #3
 80010c6:	2300      	movs	r3, #0
 80010c8:	4315      	orrs	r5, r2
 80010ca:	e580      	b.n	8000bce <__aeabi_ddiv+0xae>
 80010cc:	9800      	ldr	r0, [sp, #0]
 80010ce:	3d02      	subs	r5, #2
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	4282      	cmp	r2, r0
 80010d4:	41bf      	sbcs	r7, r7
 80010d6:	427f      	negs	r7, r7
 80010d8:	193c      	adds	r4, r7, r4
 80010da:	1936      	adds	r6, r6, r4
 80010dc:	9200      	str	r2, [sp, #0]
 80010de:	e7dd      	b.n	800109c <__aeabi_ddiv+0x57c>
 80010e0:	2480      	movs	r4, #128	; 0x80
 80010e2:	4643      	mov	r3, r8
 80010e4:	0324      	lsls	r4, r4, #12
 80010e6:	431c      	orrs	r4, r3
 80010e8:	0324      	lsls	r4, r4, #12
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__aeabi_ddiv+0x5dc>)
 80010ec:	0b24      	lsrs	r4, r4, #12
 80010ee:	e56e      	b.n	8000bce <__aeabi_ddiv+0xae>
 80010f0:	9a00      	ldr	r2, [sp, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3ea      	bcc.n	80010cc <__aeabi_ddiv+0x5ac>
 80010f6:	0005      	movs	r5, r0
 80010f8:	e7d3      	b.n	80010a2 <__aeabi_ddiv+0x582>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	000007ff 	.word	0x000007ff
 8001100:	0000043e 	.word	0x0000043e
 8001104:	0000041e 	.word	0x0000041e
 8001108:	000003ff 	.word	0x000003ff

0800110c <__eqdf2>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	464e      	mov	r6, r9
 8001110:	4645      	mov	r5, r8
 8001112:	46de      	mov	lr, fp
 8001114:	4657      	mov	r7, sl
 8001116:	4690      	mov	r8, r2
 8001118:	b5e0      	push	{r5, r6, r7, lr}
 800111a:	0017      	movs	r7, r2
 800111c:	031a      	lsls	r2, r3, #12
 800111e:	0b12      	lsrs	r2, r2, #12
 8001120:	0005      	movs	r5, r0
 8001122:	4684      	mov	ip, r0
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <__eqdf2+0x80>)
 8001126:	030e      	lsls	r6, r1, #12
 8001128:	004c      	lsls	r4, r1, #1
 800112a:	4691      	mov	r9, r2
 800112c:	005a      	lsls	r2, r3, #1
 800112e:	0fdb      	lsrs	r3, r3, #31
 8001130:	469b      	mov	fp, r3
 8001132:	0b36      	lsrs	r6, r6, #12
 8001134:	0d64      	lsrs	r4, r4, #21
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	0d52      	lsrs	r2, r2, #21
 800113a:	4284      	cmp	r4, r0
 800113c:	d019      	beq.n	8001172 <__eqdf2+0x66>
 800113e:	4282      	cmp	r2, r0
 8001140:	d010      	beq.n	8001164 <__eqdf2+0x58>
 8001142:	2001      	movs	r0, #1
 8001144:	4294      	cmp	r4, r2
 8001146:	d10e      	bne.n	8001166 <__eqdf2+0x5a>
 8001148:	454e      	cmp	r6, r9
 800114a:	d10c      	bne.n	8001166 <__eqdf2+0x5a>
 800114c:	2001      	movs	r0, #1
 800114e:	45c4      	cmp	ip, r8
 8001150:	d109      	bne.n	8001166 <__eqdf2+0x5a>
 8001152:	4559      	cmp	r1, fp
 8001154:	d017      	beq.n	8001186 <__eqdf2+0x7a>
 8001156:	2c00      	cmp	r4, #0
 8001158:	d105      	bne.n	8001166 <__eqdf2+0x5a>
 800115a:	0030      	movs	r0, r6
 800115c:	4328      	orrs	r0, r5
 800115e:	1e43      	subs	r3, r0, #1
 8001160:	4198      	sbcs	r0, r3
 8001162:	e000      	b.n	8001166 <__eqdf2+0x5a>
 8001164:	2001      	movs	r0, #1
 8001166:	bcf0      	pop	{r4, r5, r6, r7}
 8001168:	46bb      	mov	fp, r7
 800116a:	46b2      	mov	sl, r6
 800116c:	46a9      	mov	r9, r5
 800116e:	46a0      	mov	r8, r4
 8001170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001172:	0033      	movs	r3, r6
 8001174:	2001      	movs	r0, #1
 8001176:	432b      	orrs	r3, r5
 8001178:	d1f5      	bne.n	8001166 <__eqdf2+0x5a>
 800117a:	42a2      	cmp	r2, r4
 800117c:	d1f3      	bne.n	8001166 <__eqdf2+0x5a>
 800117e:	464b      	mov	r3, r9
 8001180:	433b      	orrs	r3, r7
 8001182:	d1f0      	bne.n	8001166 <__eqdf2+0x5a>
 8001184:	e7e2      	b.n	800114c <__eqdf2+0x40>
 8001186:	2000      	movs	r0, #0
 8001188:	e7ed      	b.n	8001166 <__eqdf2+0x5a>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff

08001190 <__gedf2>:
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	4647      	mov	r7, r8
 8001194:	46ce      	mov	lr, r9
 8001196:	0004      	movs	r4, r0
 8001198:	0018      	movs	r0, r3
 800119a:	0016      	movs	r6, r2
 800119c:	031b      	lsls	r3, r3, #12
 800119e:	0b1b      	lsrs	r3, r3, #12
 80011a0:	4d2d      	ldr	r5, [pc, #180]	; (8001258 <__gedf2+0xc8>)
 80011a2:	004a      	lsls	r2, r1, #1
 80011a4:	4699      	mov	r9, r3
 80011a6:	b580      	push	{r7, lr}
 80011a8:	0043      	lsls	r3, r0, #1
 80011aa:	030f      	lsls	r7, r1, #12
 80011ac:	46a4      	mov	ip, r4
 80011ae:	46b0      	mov	r8, r6
 80011b0:	0b3f      	lsrs	r7, r7, #12
 80011b2:	0d52      	lsrs	r2, r2, #21
 80011b4:	0fc9      	lsrs	r1, r1, #31
 80011b6:	0d5b      	lsrs	r3, r3, #21
 80011b8:	0fc0      	lsrs	r0, r0, #31
 80011ba:	42aa      	cmp	r2, r5
 80011bc:	d021      	beq.n	8001202 <__gedf2+0x72>
 80011be:	42ab      	cmp	r3, r5
 80011c0:	d013      	beq.n	80011ea <__gedf2+0x5a>
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	d122      	bne.n	800120c <__gedf2+0x7c>
 80011c6:	433c      	orrs	r4, r7
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <__gedf2+0x42>
 80011cc:	464d      	mov	r5, r9
 80011ce:	432e      	orrs	r6, r5
 80011d0:	d022      	beq.n	8001218 <__gedf2+0x88>
 80011d2:	2c00      	cmp	r4, #0
 80011d4:	d010      	beq.n	80011f8 <__gedf2+0x68>
 80011d6:	4281      	cmp	r1, r0
 80011d8:	d022      	beq.n	8001220 <__gedf2+0x90>
 80011da:	2002      	movs	r0, #2
 80011dc:	3901      	subs	r1, #1
 80011de:	4008      	ands	r0, r1
 80011e0:	3801      	subs	r0, #1
 80011e2:	bcc0      	pop	{r6, r7}
 80011e4:	46b9      	mov	r9, r7
 80011e6:	46b0      	mov	r8, r6
 80011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ea:	464d      	mov	r5, r9
 80011ec:	432e      	orrs	r6, r5
 80011ee:	d129      	bne.n	8001244 <__gedf2+0xb4>
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d1f0      	bne.n	80011d6 <__gedf2+0x46>
 80011f4:	433c      	orrs	r4, r7
 80011f6:	d1ee      	bne.n	80011d6 <__gedf2+0x46>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d1f2      	bne.n	80011e2 <__gedf2+0x52>
 80011fc:	2001      	movs	r0, #1
 80011fe:	4240      	negs	r0, r0
 8001200:	e7ef      	b.n	80011e2 <__gedf2+0x52>
 8001202:	003d      	movs	r5, r7
 8001204:	4325      	orrs	r5, r4
 8001206:	d11d      	bne.n	8001244 <__gedf2+0xb4>
 8001208:	4293      	cmp	r3, r2
 800120a:	d0ee      	beq.n	80011ea <__gedf2+0x5a>
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1e2      	bne.n	80011d6 <__gedf2+0x46>
 8001210:	464c      	mov	r4, r9
 8001212:	4326      	orrs	r6, r4
 8001214:	d1df      	bne.n	80011d6 <__gedf2+0x46>
 8001216:	e7e0      	b.n	80011da <__gedf2+0x4a>
 8001218:	2000      	movs	r0, #0
 800121a:	2c00      	cmp	r4, #0
 800121c:	d0e1      	beq.n	80011e2 <__gedf2+0x52>
 800121e:	e7dc      	b.n	80011da <__gedf2+0x4a>
 8001220:	429a      	cmp	r2, r3
 8001222:	dc0a      	bgt.n	800123a <__gedf2+0xaa>
 8001224:	dbe8      	blt.n	80011f8 <__gedf2+0x68>
 8001226:	454f      	cmp	r7, r9
 8001228:	d8d7      	bhi.n	80011da <__gedf2+0x4a>
 800122a:	d00e      	beq.n	800124a <__gedf2+0xba>
 800122c:	2000      	movs	r0, #0
 800122e:	454f      	cmp	r7, r9
 8001230:	d2d7      	bcs.n	80011e2 <__gedf2+0x52>
 8001232:	2900      	cmp	r1, #0
 8001234:	d0e2      	beq.n	80011fc <__gedf2+0x6c>
 8001236:	0008      	movs	r0, r1
 8001238:	e7d3      	b.n	80011e2 <__gedf2+0x52>
 800123a:	4243      	negs	r3, r0
 800123c:	4158      	adcs	r0, r3
 800123e:	0040      	lsls	r0, r0, #1
 8001240:	3801      	subs	r0, #1
 8001242:	e7ce      	b.n	80011e2 <__gedf2+0x52>
 8001244:	2002      	movs	r0, #2
 8001246:	4240      	negs	r0, r0
 8001248:	e7cb      	b.n	80011e2 <__gedf2+0x52>
 800124a:	45c4      	cmp	ip, r8
 800124c:	d8c5      	bhi.n	80011da <__gedf2+0x4a>
 800124e:	2000      	movs	r0, #0
 8001250:	45c4      	cmp	ip, r8
 8001252:	d2c6      	bcs.n	80011e2 <__gedf2+0x52>
 8001254:	e7ed      	b.n	8001232 <__gedf2+0xa2>
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	000007ff 	.word	0x000007ff

0800125c <__ledf2>:
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	4647      	mov	r7, r8
 8001260:	46ce      	mov	lr, r9
 8001262:	0004      	movs	r4, r0
 8001264:	0018      	movs	r0, r3
 8001266:	0016      	movs	r6, r2
 8001268:	031b      	lsls	r3, r3, #12
 800126a:	0b1b      	lsrs	r3, r3, #12
 800126c:	4d2c      	ldr	r5, [pc, #176]	; (8001320 <__ledf2+0xc4>)
 800126e:	004a      	lsls	r2, r1, #1
 8001270:	4699      	mov	r9, r3
 8001272:	b580      	push	{r7, lr}
 8001274:	0043      	lsls	r3, r0, #1
 8001276:	030f      	lsls	r7, r1, #12
 8001278:	46a4      	mov	ip, r4
 800127a:	46b0      	mov	r8, r6
 800127c:	0b3f      	lsrs	r7, r7, #12
 800127e:	0d52      	lsrs	r2, r2, #21
 8001280:	0fc9      	lsrs	r1, r1, #31
 8001282:	0d5b      	lsrs	r3, r3, #21
 8001284:	0fc0      	lsrs	r0, r0, #31
 8001286:	42aa      	cmp	r2, r5
 8001288:	d00d      	beq.n	80012a6 <__ledf2+0x4a>
 800128a:	42ab      	cmp	r3, r5
 800128c:	d010      	beq.n	80012b0 <__ledf2+0x54>
 800128e:	2a00      	cmp	r2, #0
 8001290:	d127      	bne.n	80012e2 <__ledf2+0x86>
 8001292:	433c      	orrs	r4, r7
 8001294:	2b00      	cmp	r3, #0
 8001296:	d111      	bne.n	80012bc <__ledf2+0x60>
 8001298:	464d      	mov	r5, r9
 800129a:	432e      	orrs	r6, r5
 800129c:	d10e      	bne.n	80012bc <__ledf2+0x60>
 800129e:	2000      	movs	r0, #0
 80012a0:	2c00      	cmp	r4, #0
 80012a2:	d015      	beq.n	80012d0 <__ledf2+0x74>
 80012a4:	e00e      	b.n	80012c4 <__ledf2+0x68>
 80012a6:	003d      	movs	r5, r7
 80012a8:	4325      	orrs	r5, r4
 80012aa:	d110      	bne.n	80012ce <__ledf2+0x72>
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d118      	bne.n	80012e2 <__ledf2+0x86>
 80012b0:	464d      	mov	r5, r9
 80012b2:	432e      	orrs	r6, r5
 80012b4:	d10b      	bne.n	80012ce <__ledf2+0x72>
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	d102      	bne.n	80012c0 <__ledf2+0x64>
 80012ba:	433c      	orrs	r4, r7
 80012bc:	2c00      	cmp	r4, #0
 80012be:	d00b      	beq.n	80012d8 <__ledf2+0x7c>
 80012c0:	4281      	cmp	r1, r0
 80012c2:	d014      	beq.n	80012ee <__ledf2+0x92>
 80012c4:	2002      	movs	r0, #2
 80012c6:	3901      	subs	r1, #1
 80012c8:	4008      	ands	r0, r1
 80012ca:	3801      	subs	r0, #1
 80012cc:	e000      	b.n	80012d0 <__ledf2+0x74>
 80012ce:	2002      	movs	r0, #2
 80012d0:	bcc0      	pop	{r6, r7}
 80012d2:	46b9      	mov	r9, r7
 80012d4:	46b0      	mov	r8, r6
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1f9      	bne.n	80012d0 <__ledf2+0x74>
 80012dc:	2001      	movs	r0, #1
 80012de:	4240      	negs	r0, r0
 80012e0:	e7f6      	b.n	80012d0 <__ledf2+0x74>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1ec      	bne.n	80012c0 <__ledf2+0x64>
 80012e6:	464c      	mov	r4, r9
 80012e8:	4326      	orrs	r6, r4
 80012ea:	d1e9      	bne.n	80012c0 <__ledf2+0x64>
 80012ec:	e7ea      	b.n	80012c4 <__ledf2+0x68>
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dd04      	ble.n	80012fc <__ledf2+0xa0>
 80012f2:	4243      	negs	r3, r0
 80012f4:	4158      	adcs	r0, r3
 80012f6:	0040      	lsls	r0, r0, #1
 80012f8:	3801      	subs	r0, #1
 80012fa:	e7e9      	b.n	80012d0 <__ledf2+0x74>
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbeb      	blt.n	80012d8 <__ledf2+0x7c>
 8001300:	454f      	cmp	r7, r9
 8001302:	d8df      	bhi.n	80012c4 <__ledf2+0x68>
 8001304:	d006      	beq.n	8001314 <__ledf2+0xb8>
 8001306:	2000      	movs	r0, #0
 8001308:	454f      	cmp	r7, r9
 800130a:	d2e1      	bcs.n	80012d0 <__ledf2+0x74>
 800130c:	2900      	cmp	r1, #0
 800130e:	d0e5      	beq.n	80012dc <__ledf2+0x80>
 8001310:	0008      	movs	r0, r1
 8001312:	e7dd      	b.n	80012d0 <__ledf2+0x74>
 8001314:	45c4      	cmp	ip, r8
 8001316:	d8d5      	bhi.n	80012c4 <__ledf2+0x68>
 8001318:	2000      	movs	r0, #0
 800131a:	45c4      	cmp	ip, r8
 800131c:	d2d8      	bcs.n	80012d0 <__ledf2+0x74>
 800131e:	e7f5      	b.n	800130c <__ledf2+0xb0>
 8001320:	000007ff 	.word	0x000007ff

08001324 <__aeabi_dmul>:
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	4657      	mov	r7, sl
 8001328:	464e      	mov	r6, r9
 800132a:	4645      	mov	r5, r8
 800132c:	46de      	mov	lr, fp
 800132e:	b5e0      	push	{r5, r6, r7, lr}
 8001330:	4698      	mov	r8, r3
 8001332:	030c      	lsls	r4, r1, #12
 8001334:	004b      	lsls	r3, r1, #1
 8001336:	0006      	movs	r6, r0
 8001338:	4692      	mov	sl, r2
 800133a:	b087      	sub	sp, #28
 800133c:	0b24      	lsrs	r4, r4, #12
 800133e:	0d5b      	lsrs	r3, r3, #21
 8001340:	0fcf      	lsrs	r7, r1, #31
 8001342:	2b00      	cmp	r3, #0
 8001344:	d100      	bne.n	8001348 <__aeabi_dmul+0x24>
 8001346:	e15c      	b.n	8001602 <__aeabi_dmul+0x2de>
 8001348:	4ad9      	ldr	r2, [pc, #868]	; (80016b0 <__aeabi_dmul+0x38c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d100      	bne.n	8001350 <__aeabi_dmul+0x2c>
 800134e:	e175      	b.n	800163c <__aeabi_dmul+0x318>
 8001350:	0f42      	lsrs	r2, r0, #29
 8001352:	00e4      	lsls	r4, r4, #3
 8001354:	4314      	orrs	r4, r2
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	0412      	lsls	r2, r2, #16
 800135a:	4314      	orrs	r4, r2
 800135c:	4ad5      	ldr	r2, [pc, #852]	; (80016b4 <__aeabi_dmul+0x390>)
 800135e:	00c5      	lsls	r5, r0, #3
 8001360:	4694      	mov	ip, r2
 8001362:	4463      	add	r3, ip
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2300      	movs	r3, #0
 8001368:	4699      	mov	r9, r3
 800136a:	469b      	mov	fp, r3
 800136c:	4643      	mov	r3, r8
 800136e:	4642      	mov	r2, r8
 8001370:	031e      	lsls	r6, r3, #12
 8001372:	0fd2      	lsrs	r2, r2, #31
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4650      	mov	r0, sl
 8001378:	4690      	mov	r8, r2
 800137a:	0b36      	lsrs	r6, r6, #12
 800137c:	0d5b      	lsrs	r3, r3, #21
 800137e:	d100      	bne.n	8001382 <__aeabi_dmul+0x5e>
 8001380:	e120      	b.n	80015c4 <__aeabi_dmul+0x2a0>
 8001382:	4acb      	ldr	r2, [pc, #812]	; (80016b0 <__aeabi_dmul+0x38c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d100      	bne.n	800138a <__aeabi_dmul+0x66>
 8001388:	e162      	b.n	8001650 <__aeabi_dmul+0x32c>
 800138a:	49ca      	ldr	r1, [pc, #808]	; (80016b4 <__aeabi_dmul+0x390>)
 800138c:	0f42      	lsrs	r2, r0, #29
 800138e:	468c      	mov	ip, r1
 8001390:	9900      	ldr	r1, [sp, #0]
 8001392:	4463      	add	r3, ip
 8001394:	00f6      	lsls	r6, r6, #3
 8001396:	468c      	mov	ip, r1
 8001398:	4316      	orrs	r6, r2
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	449c      	add	ip, r3
 800139e:	0412      	lsls	r2, r2, #16
 80013a0:	4663      	mov	r3, ip
 80013a2:	4316      	orrs	r6, r2
 80013a4:	00c2      	lsls	r2, r0, #3
 80013a6:	2000      	movs	r0, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	9900      	ldr	r1, [sp, #0]
 80013ac:	4643      	mov	r3, r8
 80013ae:	3101      	adds	r1, #1
 80013b0:	468c      	mov	ip, r1
 80013b2:	4649      	mov	r1, r9
 80013b4:	407b      	eors	r3, r7
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	290f      	cmp	r1, #15
 80013ba:	d826      	bhi.n	800140a <__aeabi_dmul+0xe6>
 80013bc:	4bbe      	ldr	r3, [pc, #760]	; (80016b8 <__aeabi_dmul+0x394>)
 80013be:	0089      	lsls	r1, r1, #2
 80013c0:	5859      	ldr	r1, [r3, r1]
 80013c2:	468f      	mov	pc, r1
 80013c4:	4643      	mov	r3, r8
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	0034      	movs	r4, r6
 80013ca:	0015      	movs	r5, r2
 80013cc:	4683      	mov	fp, r0
 80013ce:	465b      	mov	r3, fp
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d016      	beq.n	8001402 <__aeabi_dmul+0xde>
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d100      	bne.n	80013da <__aeabi_dmul+0xb6>
 80013d8:	e203      	b.n	80017e2 <__aeabi_dmul+0x4be>
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d000      	beq.n	80013e0 <__aeabi_dmul+0xbc>
 80013de:	e0cd      	b.n	800157c <__aeabi_dmul+0x258>
 80013e0:	2200      	movs	r2, #0
 80013e2:	2400      	movs	r4, #0
 80013e4:	2500      	movs	r5, #0
 80013e6:	9b01      	ldr	r3, [sp, #4]
 80013e8:	0512      	lsls	r2, r2, #20
 80013ea:	4322      	orrs	r2, r4
 80013ec:	07db      	lsls	r3, r3, #31
 80013ee:	431a      	orrs	r2, r3
 80013f0:	0028      	movs	r0, r5
 80013f2:	0011      	movs	r1, r2
 80013f4:	b007      	add	sp, #28
 80013f6:	bcf0      	pop	{r4, r5, r6, r7}
 80013f8:	46bb      	mov	fp, r7
 80013fa:	46b2      	mov	sl, r6
 80013fc:	46a9      	mov	r9, r5
 80013fe:	46a0      	mov	r8, r4
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001402:	2400      	movs	r4, #0
 8001404:	2500      	movs	r5, #0
 8001406:	4aaa      	ldr	r2, [pc, #680]	; (80016b0 <__aeabi_dmul+0x38c>)
 8001408:	e7ed      	b.n	80013e6 <__aeabi_dmul+0xc2>
 800140a:	0c28      	lsrs	r0, r5, #16
 800140c:	042d      	lsls	r5, r5, #16
 800140e:	0c2d      	lsrs	r5, r5, #16
 8001410:	002b      	movs	r3, r5
 8001412:	0c11      	lsrs	r1, r2, #16
 8001414:	0412      	lsls	r2, r2, #16
 8001416:	0c12      	lsrs	r2, r2, #16
 8001418:	4353      	muls	r3, r2
 800141a:	4698      	mov	r8, r3
 800141c:	0013      	movs	r3, r2
 800141e:	002f      	movs	r7, r5
 8001420:	4343      	muls	r3, r0
 8001422:	4699      	mov	r9, r3
 8001424:	434f      	muls	r7, r1
 8001426:	444f      	add	r7, r9
 8001428:	46bb      	mov	fp, r7
 800142a:	4647      	mov	r7, r8
 800142c:	000b      	movs	r3, r1
 800142e:	0c3f      	lsrs	r7, r7, #16
 8001430:	46ba      	mov	sl, r7
 8001432:	4343      	muls	r3, r0
 8001434:	44da      	add	sl, fp
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	45d1      	cmp	r9, sl
 800143a:	d904      	bls.n	8001446 <__aeabi_dmul+0x122>
 800143c:	2780      	movs	r7, #128	; 0x80
 800143e:	027f      	lsls	r7, r7, #9
 8001440:	46b9      	mov	r9, r7
 8001442:	444b      	add	r3, r9
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	4653      	mov	r3, sl
 8001448:	0c1b      	lsrs	r3, r3, #16
 800144a:	469b      	mov	fp, r3
 800144c:	4653      	mov	r3, sl
 800144e:	041f      	lsls	r7, r3, #16
 8001450:	4643      	mov	r3, r8
 8001452:	041b      	lsls	r3, r3, #16
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	4698      	mov	r8, r3
 8001458:	003b      	movs	r3, r7
 800145a:	4443      	add	r3, r8
 800145c:	9304      	str	r3, [sp, #16]
 800145e:	0c33      	lsrs	r3, r6, #16
 8001460:	0436      	lsls	r6, r6, #16
 8001462:	0c36      	lsrs	r6, r6, #16
 8001464:	4698      	mov	r8, r3
 8001466:	0033      	movs	r3, r6
 8001468:	4343      	muls	r3, r0
 800146a:	4699      	mov	r9, r3
 800146c:	4643      	mov	r3, r8
 800146e:	4343      	muls	r3, r0
 8001470:	002f      	movs	r7, r5
 8001472:	469a      	mov	sl, r3
 8001474:	4643      	mov	r3, r8
 8001476:	4377      	muls	r7, r6
 8001478:	435d      	muls	r5, r3
 800147a:	0c38      	lsrs	r0, r7, #16
 800147c:	444d      	add	r5, r9
 800147e:	1945      	adds	r5, r0, r5
 8001480:	45a9      	cmp	r9, r5
 8001482:	d903      	bls.n	800148c <__aeabi_dmul+0x168>
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	025b      	lsls	r3, r3, #9
 8001488:	4699      	mov	r9, r3
 800148a:	44ca      	add	sl, r9
 800148c:	043f      	lsls	r7, r7, #16
 800148e:	0c28      	lsrs	r0, r5, #16
 8001490:	0c3f      	lsrs	r7, r7, #16
 8001492:	042d      	lsls	r5, r5, #16
 8001494:	19ed      	adds	r5, r5, r7
 8001496:	0c27      	lsrs	r7, r4, #16
 8001498:	0424      	lsls	r4, r4, #16
 800149a:	0c24      	lsrs	r4, r4, #16
 800149c:	0003      	movs	r3, r0
 800149e:	0020      	movs	r0, r4
 80014a0:	4350      	muls	r0, r2
 80014a2:	437a      	muls	r2, r7
 80014a4:	4691      	mov	r9, r2
 80014a6:	003a      	movs	r2, r7
 80014a8:	4453      	add	r3, sl
 80014aa:	9305      	str	r3, [sp, #20]
 80014ac:	0c03      	lsrs	r3, r0, #16
 80014ae:	469a      	mov	sl, r3
 80014b0:	434a      	muls	r2, r1
 80014b2:	4361      	muls	r1, r4
 80014b4:	4449      	add	r1, r9
 80014b6:	4451      	add	r1, sl
 80014b8:	44ab      	add	fp, r5
 80014ba:	4589      	cmp	r9, r1
 80014bc:	d903      	bls.n	80014c6 <__aeabi_dmul+0x1a2>
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	025b      	lsls	r3, r3, #9
 80014c2:	4699      	mov	r9, r3
 80014c4:	444a      	add	r2, r9
 80014c6:	0400      	lsls	r0, r0, #16
 80014c8:	0c0b      	lsrs	r3, r1, #16
 80014ca:	0c00      	lsrs	r0, r0, #16
 80014cc:	0409      	lsls	r1, r1, #16
 80014ce:	1809      	adds	r1, r1, r0
 80014d0:	0020      	movs	r0, r4
 80014d2:	4699      	mov	r9, r3
 80014d4:	4643      	mov	r3, r8
 80014d6:	4370      	muls	r0, r6
 80014d8:	435c      	muls	r4, r3
 80014da:	437e      	muls	r6, r7
 80014dc:	435f      	muls	r7, r3
 80014de:	0c03      	lsrs	r3, r0, #16
 80014e0:	4698      	mov	r8, r3
 80014e2:	19a4      	adds	r4, r4, r6
 80014e4:	4444      	add	r4, r8
 80014e6:	444a      	add	r2, r9
 80014e8:	9703      	str	r7, [sp, #12]
 80014ea:	42a6      	cmp	r6, r4
 80014ec:	d904      	bls.n	80014f8 <__aeabi_dmul+0x1d4>
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	025b      	lsls	r3, r3, #9
 80014f2:	4698      	mov	r8, r3
 80014f4:	4447      	add	r7, r8
 80014f6:	9703      	str	r7, [sp, #12]
 80014f8:	0423      	lsls	r3, r4, #16
 80014fa:	9e02      	ldr	r6, [sp, #8]
 80014fc:	469a      	mov	sl, r3
 80014fe:	9b05      	ldr	r3, [sp, #20]
 8001500:	445e      	add	r6, fp
 8001502:	4698      	mov	r8, r3
 8001504:	42ae      	cmp	r6, r5
 8001506:	41ad      	sbcs	r5, r5
 8001508:	1876      	adds	r6, r6, r1
 800150a:	428e      	cmp	r6, r1
 800150c:	4189      	sbcs	r1, r1
 800150e:	0400      	lsls	r0, r0, #16
 8001510:	0c00      	lsrs	r0, r0, #16
 8001512:	4450      	add	r0, sl
 8001514:	4440      	add	r0, r8
 8001516:	426d      	negs	r5, r5
 8001518:	1947      	adds	r7, r0, r5
 800151a:	46b8      	mov	r8, r7
 800151c:	4693      	mov	fp, r2
 800151e:	4249      	negs	r1, r1
 8001520:	4689      	mov	r9, r1
 8001522:	44c3      	add	fp, r8
 8001524:	44d9      	add	r9, fp
 8001526:	4298      	cmp	r0, r3
 8001528:	4180      	sbcs	r0, r0
 800152a:	45a8      	cmp	r8, r5
 800152c:	41ad      	sbcs	r5, r5
 800152e:	4593      	cmp	fp, r2
 8001530:	4192      	sbcs	r2, r2
 8001532:	4589      	cmp	r9, r1
 8001534:	4189      	sbcs	r1, r1
 8001536:	426d      	negs	r5, r5
 8001538:	4240      	negs	r0, r0
 800153a:	4328      	orrs	r0, r5
 800153c:	0c24      	lsrs	r4, r4, #16
 800153e:	4252      	negs	r2, r2
 8001540:	4249      	negs	r1, r1
 8001542:	430a      	orrs	r2, r1
 8001544:	9b03      	ldr	r3, [sp, #12]
 8001546:	1900      	adds	r0, r0, r4
 8001548:	1880      	adds	r0, r0, r2
 800154a:	18c7      	adds	r7, r0, r3
 800154c:	464b      	mov	r3, r9
 800154e:	0ddc      	lsrs	r4, r3, #23
 8001550:	9b04      	ldr	r3, [sp, #16]
 8001552:	0275      	lsls	r5, r6, #9
 8001554:	431d      	orrs	r5, r3
 8001556:	1e6a      	subs	r2, r5, #1
 8001558:	4195      	sbcs	r5, r2
 800155a:	464b      	mov	r3, r9
 800155c:	0df6      	lsrs	r6, r6, #23
 800155e:	027f      	lsls	r7, r7, #9
 8001560:	4335      	orrs	r5, r6
 8001562:	025a      	lsls	r2, r3, #9
 8001564:	433c      	orrs	r4, r7
 8001566:	4315      	orrs	r5, r2
 8001568:	01fb      	lsls	r3, r7, #7
 800156a:	d400      	bmi.n	800156e <__aeabi_dmul+0x24a>
 800156c:	e11c      	b.n	80017a8 <__aeabi_dmul+0x484>
 800156e:	2101      	movs	r1, #1
 8001570:	086a      	lsrs	r2, r5, #1
 8001572:	400d      	ands	r5, r1
 8001574:	4315      	orrs	r5, r2
 8001576:	07e2      	lsls	r2, r4, #31
 8001578:	4315      	orrs	r5, r2
 800157a:	0864      	lsrs	r4, r4, #1
 800157c:	494f      	ldr	r1, [pc, #316]	; (80016bc <__aeabi_dmul+0x398>)
 800157e:	4461      	add	r1, ip
 8001580:	2900      	cmp	r1, #0
 8001582:	dc00      	bgt.n	8001586 <__aeabi_dmul+0x262>
 8001584:	e0b0      	b.n	80016e8 <__aeabi_dmul+0x3c4>
 8001586:	076b      	lsls	r3, r5, #29
 8001588:	d009      	beq.n	800159e <__aeabi_dmul+0x27a>
 800158a:	220f      	movs	r2, #15
 800158c:	402a      	ands	r2, r5
 800158e:	2a04      	cmp	r2, #4
 8001590:	d005      	beq.n	800159e <__aeabi_dmul+0x27a>
 8001592:	1d2a      	adds	r2, r5, #4
 8001594:	42aa      	cmp	r2, r5
 8001596:	41ad      	sbcs	r5, r5
 8001598:	426d      	negs	r5, r5
 800159a:	1964      	adds	r4, r4, r5
 800159c:	0015      	movs	r5, r2
 800159e:	01e3      	lsls	r3, r4, #7
 80015a0:	d504      	bpl.n	80015ac <__aeabi_dmul+0x288>
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	4a46      	ldr	r2, [pc, #280]	; (80016c0 <__aeabi_dmul+0x39c>)
 80015a6:	00c9      	lsls	r1, r1, #3
 80015a8:	4014      	ands	r4, r2
 80015aa:	4461      	add	r1, ip
 80015ac:	4a45      	ldr	r2, [pc, #276]	; (80016c4 <__aeabi_dmul+0x3a0>)
 80015ae:	4291      	cmp	r1, r2
 80015b0:	dd00      	ble.n	80015b4 <__aeabi_dmul+0x290>
 80015b2:	e726      	b.n	8001402 <__aeabi_dmul+0xde>
 80015b4:	0762      	lsls	r2, r4, #29
 80015b6:	08ed      	lsrs	r5, r5, #3
 80015b8:	0264      	lsls	r4, r4, #9
 80015ba:	0549      	lsls	r1, r1, #21
 80015bc:	4315      	orrs	r5, r2
 80015be:	0b24      	lsrs	r4, r4, #12
 80015c0:	0d4a      	lsrs	r2, r1, #21
 80015c2:	e710      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80015c4:	4652      	mov	r2, sl
 80015c6:	4332      	orrs	r2, r6
 80015c8:	d100      	bne.n	80015cc <__aeabi_dmul+0x2a8>
 80015ca:	e07f      	b.n	80016cc <__aeabi_dmul+0x3a8>
 80015cc:	2e00      	cmp	r6, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x2ae>
 80015d0:	e0dc      	b.n	800178c <__aeabi_dmul+0x468>
 80015d2:	0030      	movs	r0, r6
 80015d4:	f000 fd4e 	bl	8002074 <__clzsi2>
 80015d8:	0002      	movs	r2, r0
 80015da:	3a0b      	subs	r2, #11
 80015dc:	231d      	movs	r3, #29
 80015de:	0001      	movs	r1, r0
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	4652      	mov	r2, sl
 80015e4:	3908      	subs	r1, #8
 80015e6:	40da      	lsrs	r2, r3
 80015e8:	408e      	lsls	r6, r1
 80015ea:	4316      	orrs	r6, r2
 80015ec:	4652      	mov	r2, sl
 80015ee:	408a      	lsls	r2, r1
 80015f0:	9b00      	ldr	r3, [sp, #0]
 80015f2:	4935      	ldr	r1, [pc, #212]	; (80016c8 <__aeabi_dmul+0x3a4>)
 80015f4:	1a18      	subs	r0, r3, r0
 80015f6:	0003      	movs	r3, r0
 80015f8:	468c      	mov	ip, r1
 80015fa:	4463      	add	r3, ip
 80015fc:	2000      	movs	r0, #0
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	e6d3      	b.n	80013aa <__aeabi_dmul+0x86>
 8001602:	0025      	movs	r5, r4
 8001604:	4305      	orrs	r5, r0
 8001606:	d04a      	beq.n	800169e <__aeabi_dmul+0x37a>
 8001608:	2c00      	cmp	r4, #0
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0x2ea>
 800160c:	e0b0      	b.n	8001770 <__aeabi_dmul+0x44c>
 800160e:	0020      	movs	r0, r4
 8001610:	f000 fd30 	bl	8002074 <__clzsi2>
 8001614:	0001      	movs	r1, r0
 8001616:	0002      	movs	r2, r0
 8001618:	390b      	subs	r1, #11
 800161a:	231d      	movs	r3, #29
 800161c:	0010      	movs	r0, r2
 800161e:	1a5b      	subs	r3, r3, r1
 8001620:	0031      	movs	r1, r6
 8001622:	0035      	movs	r5, r6
 8001624:	3808      	subs	r0, #8
 8001626:	4084      	lsls	r4, r0
 8001628:	40d9      	lsrs	r1, r3
 800162a:	4085      	lsls	r5, r0
 800162c:	430c      	orrs	r4, r1
 800162e:	4826      	ldr	r0, [pc, #152]	; (80016c8 <__aeabi_dmul+0x3a4>)
 8001630:	1a83      	subs	r3, r0, r2
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2300      	movs	r3, #0
 8001636:	4699      	mov	r9, r3
 8001638:	469b      	mov	fp, r3
 800163a:	e697      	b.n	800136c <__aeabi_dmul+0x48>
 800163c:	0005      	movs	r5, r0
 800163e:	4325      	orrs	r5, r4
 8001640:	d126      	bne.n	8001690 <__aeabi_dmul+0x36c>
 8001642:	2208      	movs	r2, #8
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2302      	movs	r3, #2
 8001648:	2400      	movs	r4, #0
 800164a:	4691      	mov	r9, r2
 800164c:	469b      	mov	fp, r3
 800164e:	e68d      	b.n	800136c <__aeabi_dmul+0x48>
 8001650:	4652      	mov	r2, sl
 8001652:	9b00      	ldr	r3, [sp, #0]
 8001654:	4332      	orrs	r2, r6
 8001656:	d110      	bne.n	800167a <__aeabi_dmul+0x356>
 8001658:	4915      	ldr	r1, [pc, #84]	; (80016b0 <__aeabi_dmul+0x38c>)
 800165a:	2600      	movs	r6, #0
 800165c:	468c      	mov	ip, r1
 800165e:	4463      	add	r3, ip
 8001660:	4649      	mov	r1, r9
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2302      	movs	r3, #2
 8001666:	4319      	orrs	r1, r3
 8001668:	4689      	mov	r9, r1
 800166a:	2002      	movs	r0, #2
 800166c:	e69d      	b.n	80013aa <__aeabi_dmul+0x86>
 800166e:	465b      	mov	r3, fp
 8001670:	9701      	str	r7, [sp, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d000      	beq.n	8001678 <__aeabi_dmul+0x354>
 8001676:	e6ad      	b.n	80013d4 <__aeabi_dmul+0xb0>
 8001678:	e6c3      	b.n	8001402 <__aeabi_dmul+0xde>
 800167a:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <__aeabi_dmul+0x38c>)
 800167c:	2003      	movs	r0, #3
 800167e:	4694      	mov	ip, r2
 8001680:	4463      	add	r3, ip
 8001682:	464a      	mov	r2, r9
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2303      	movs	r3, #3
 8001688:	431a      	orrs	r2, r3
 800168a:	4691      	mov	r9, r2
 800168c:	4652      	mov	r2, sl
 800168e:	e68c      	b.n	80013aa <__aeabi_dmul+0x86>
 8001690:	220c      	movs	r2, #12
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2303      	movs	r3, #3
 8001696:	0005      	movs	r5, r0
 8001698:	4691      	mov	r9, r2
 800169a:	469b      	mov	fp, r3
 800169c:	e666      	b.n	800136c <__aeabi_dmul+0x48>
 800169e:	2304      	movs	r3, #4
 80016a0:	4699      	mov	r9, r3
 80016a2:	2300      	movs	r3, #0
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	2400      	movs	r4, #0
 80016aa:	469b      	mov	fp, r3
 80016ac:	e65e      	b.n	800136c <__aeabi_dmul+0x48>
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	000007ff 	.word	0x000007ff
 80016b4:	fffffc01 	.word	0xfffffc01
 80016b8:	08008ee0 	.word	0x08008ee0
 80016bc:	000003ff 	.word	0x000003ff
 80016c0:	feffffff 	.word	0xfeffffff
 80016c4:	000007fe 	.word	0x000007fe
 80016c8:	fffffc0d 	.word	0xfffffc0d
 80016cc:	4649      	mov	r1, r9
 80016ce:	2301      	movs	r3, #1
 80016d0:	4319      	orrs	r1, r3
 80016d2:	4689      	mov	r9, r1
 80016d4:	2600      	movs	r6, #0
 80016d6:	2001      	movs	r0, #1
 80016d8:	e667      	b.n	80013aa <__aeabi_dmul+0x86>
 80016da:	2300      	movs	r3, #0
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	2500      	movs	r5, #0
 80016e0:	4a43      	ldr	r2, [pc, #268]	; (80017f0 <__aeabi_dmul+0x4cc>)
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	0324      	lsls	r4, r4, #12
 80016e6:	e67e      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80016e8:	2001      	movs	r0, #1
 80016ea:	1a40      	subs	r0, r0, r1
 80016ec:	2838      	cmp	r0, #56	; 0x38
 80016ee:	dd00      	ble.n	80016f2 <__aeabi_dmul+0x3ce>
 80016f0:	e676      	b.n	80013e0 <__aeabi_dmul+0xbc>
 80016f2:	281f      	cmp	r0, #31
 80016f4:	dd5b      	ble.n	80017ae <__aeabi_dmul+0x48a>
 80016f6:	221f      	movs	r2, #31
 80016f8:	0023      	movs	r3, r4
 80016fa:	4252      	negs	r2, r2
 80016fc:	1a51      	subs	r1, r2, r1
 80016fe:	40cb      	lsrs	r3, r1
 8001700:	0019      	movs	r1, r3
 8001702:	2820      	cmp	r0, #32
 8001704:	d003      	beq.n	800170e <__aeabi_dmul+0x3ea>
 8001706:	4a3b      	ldr	r2, [pc, #236]	; (80017f4 <__aeabi_dmul+0x4d0>)
 8001708:	4462      	add	r2, ip
 800170a:	4094      	lsls	r4, r2
 800170c:	4325      	orrs	r5, r4
 800170e:	1e6a      	subs	r2, r5, #1
 8001710:	4195      	sbcs	r5, r2
 8001712:	002a      	movs	r2, r5
 8001714:	430a      	orrs	r2, r1
 8001716:	2107      	movs	r1, #7
 8001718:	000d      	movs	r5, r1
 800171a:	2400      	movs	r4, #0
 800171c:	4015      	ands	r5, r2
 800171e:	4211      	tst	r1, r2
 8001720:	d05b      	beq.n	80017da <__aeabi_dmul+0x4b6>
 8001722:	210f      	movs	r1, #15
 8001724:	2400      	movs	r4, #0
 8001726:	4011      	ands	r1, r2
 8001728:	2904      	cmp	r1, #4
 800172a:	d053      	beq.n	80017d4 <__aeabi_dmul+0x4b0>
 800172c:	1d11      	adds	r1, r2, #4
 800172e:	4291      	cmp	r1, r2
 8001730:	4192      	sbcs	r2, r2
 8001732:	4252      	negs	r2, r2
 8001734:	18a4      	adds	r4, r4, r2
 8001736:	000a      	movs	r2, r1
 8001738:	0223      	lsls	r3, r4, #8
 800173a:	d54b      	bpl.n	80017d4 <__aeabi_dmul+0x4b0>
 800173c:	2201      	movs	r2, #1
 800173e:	2400      	movs	r4, #0
 8001740:	2500      	movs	r5, #0
 8001742:	e650      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	031b      	lsls	r3, r3, #12
 8001748:	421c      	tst	r4, r3
 800174a:	d009      	beq.n	8001760 <__aeabi_dmul+0x43c>
 800174c:	421e      	tst	r6, r3
 800174e:	d107      	bne.n	8001760 <__aeabi_dmul+0x43c>
 8001750:	4333      	orrs	r3, r6
 8001752:	031c      	lsls	r4, r3, #12
 8001754:	4643      	mov	r3, r8
 8001756:	0015      	movs	r5, r2
 8001758:	0b24      	lsrs	r4, r4, #12
 800175a:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <__aeabi_dmul+0x4cc>)
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	e642      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	0312      	lsls	r2, r2, #12
 8001764:	4314      	orrs	r4, r2
 8001766:	0324      	lsls	r4, r4, #12
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <__aeabi_dmul+0x4cc>)
 800176a:	0b24      	lsrs	r4, r4, #12
 800176c:	9701      	str	r7, [sp, #4]
 800176e:	e63a      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001770:	f000 fc80 	bl	8002074 <__clzsi2>
 8001774:	0001      	movs	r1, r0
 8001776:	0002      	movs	r2, r0
 8001778:	3115      	adds	r1, #21
 800177a:	3220      	adds	r2, #32
 800177c:	291c      	cmp	r1, #28
 800177e:	dc00      	bgt.n	8001782 <__aeabi_dmul+0x45e>
 8001780:	e74b      	b.n	800161a <__aeabi_dmul+0x2f6>
 8001782:	0034      	movs	r4, r6
 8001784:	3808      	subs	r0, #8
 8001786:	2500      	movs	r5, #0
 8001788:	4084      	lsls	r4, r0
 800178a:	e750      	b.n	800162e <__aeabi_dmul+0x30a>
 800178c:	f000 fc72 	bl	8002074 <__clzsi2>
 8001790:	0003      	movs	r3, r0
 8001792:	001a      	movs	r2, r3
 8001794:	3215      	adds	r2, #21
 8001796:	3020      	adds	r0, #32
 8001798:	2a1c      	cmp	r2, #28
 800179a:	dc00      	bgt.n	800179e <__aeabi_dmul+0x47a>
 800179c:	e71e      	b.n	80015dc <__aeabi_dmul+0x2b8>
 800179e:	4656      	mov	r6, sl
 80017a0:	3b08      	subs	r3, #8
 80017a2:	2200      	movs	r2, #0
 80017a4:	409e      	lsls	r6, r3
 80017a6:	e723      	b.n	80015f0 <__aeabi_dmul+0x2cc>
 80017a8:	9b00      	ldr	r3, [sp, #0]
 80017aa:	469c      	mov	ip, r3
 80017ac:	e6e6      	b.n	800157c <__aeabi_dmul+0x258>
 80017ae:	4912      	ldr	r1, [pc, #72]	; (80017f8 <__aeabi_dmul+0x4d4>)
 80017b0:	0022      	movs	r2, r4
 80017b2:	4461      	add	r1, ip
 80017b4:	002e      	movs	r6, r5
 80017b6:	408d      	lsls	r5, r1
 80017b8:	408a      	lsls	r2, r1
 80017ba:	40c6      	lsrs	r6, r0
 80017bc:	1e69      	subs	r1, r5, #1
 80017be:	418d      	sbcs	r5, r1
 80017c0:	4332      	orrs	r2, r6
 80017c2:	432a      	orrs	r2, r5
 80017c4:	40c4      	lsrs	r4, r0
 80017c6:	0753      	lsls	r3, r2, #29
 80017c8:	d0b6      	beq.n	8001738 <__aeabi_dmul+0x414>
 80017ca:	210f      	movs	r1, #15
 80017cc:	4011      	ands	r1, r2
 80017ce:	2904      	cmp	r1, #4
 80017d0:	d1ac      	bne.n	800172c <__aeabi_dmul+0x408>
 80017d2:	e7b1      	b.n	8001738 <__aeabi_dmul+0x414>
 80017d4:	0765      	lsls	r5, r4, #29
 80017d6:	0264      	lsls	r4, r4, #9
 80017d8:	0b24      	lsrs	r4, r4, #12
 80017da:	08d2      	lsrs	r2, r2, #3
 80017dc:	4315      	orrs	r5, r2
 80017de:	2200      	movs	r2, #0
 80017e0:	e601      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	0312      	lsls	r2, r2, #12
 80017e6:	4314      	orrs	r4, r2
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	4a01      	ldr	r2, [pc, #4]	; (80017f0 <__aeabi_dmul+0x4cc>)
 80017ec:	0b24      	lsrs	r4, r4, #12
 80017ee:	e5fa      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80017f0:	000007ff 	.word	0x000007ff
 80017f4:	0000043e 	.word	0x0000043e
 80017f8:	0000041e 	.word	0x0000041e

080017fc <__aeabi_dsub>:
 80017fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fe:	4657      	mov	r7, sl
 8001800:	464e      	mov	r6, r9
 8001802:	4645      	mov	r5, r8
 8001804:	46de      	mov	lr, fp
 8001806:	b5e0      	push	{r5, r6, r7, lr}
 8001808:	001e      	movs	r6, r3
 800180a:	0017      	movs	r7, r2
 800180c:	004a      	lsls	r2, r1, #1
 800180e:	030b      	lsls	r3, r1, #12
 8001810:	0d52      	lsrs	r2, r2, #21
 8001812:	0a5b      	lsrs	r3, r3, #9
 8001814:	4690      	mov	r8, r2
 8001816:	0f42      	lsrs	r2, r0, #29
 8001818:	431a      	orrs	r2, r3
 800181a:	0fcd      	lsrs	r5, r1, #31
 800181c:	4ccd      	ldr	r4, [pc, #820]	; (8001b54 <__aeabi_dsub+0x358>)
 800181e:	0331      	lsls	r1, r6, #12
 8001820:	00c3      	lsls	r3, r0, #3
 8001822:	4694      	mov	ip, r2
 8001824:	0070      	lsls	r0, r6, #1
 8001826:	0f7a      	lsrs	r2, r7, #29
 8001828:	0a49      	lsrs	r1, r1, #9
 800182a:	00ff      	lsls	r7, r7, #3
 800182c:	469a      	mov	sl, r3
 800182e:	46b9      	mov	r9, r7
 8001830:	0d40      	lsrs	r0, r0, #21
 8001832:	0ff6      	lsrs	r6, r6, #31
 8001834:	4311      	orrs	r1, r2
 8001836:	42a0      	cmp	r0, r4
 8001838:	d100      	bne.n	800183c <__aeabi_dsub+0x40>
 800183a:	e0b1      	b.n	80019a0 <__aeabi_dsub+0x1a4>
 800183c:	2201      	movs	r2, #1
 800183e:	4056      	eors	r6, r2
 8001840:	46b3      	mov	fp, r6
 8001842:	42b5      	cmp	r5, r6
 8001844:	d100      	bne.n	8001848 <__aeabi_dsub+0x4c>
 8001846:	e088      	b.n	800195a <__aeabi_dsub+0x15e>
 8001848:	4642      	mov	r2, r8
 800184a:	1a12      	subs	r2, r2, r0
 800184c:	2a00      	cmp	r2, #0
 800184e:	dc00      	bgt.n	8001852 <__aeabi_dsub+0x56>
 8001850:	e0ae      	b.n	80019b0 <__aeabi_dsub+0x1b4>
 8001852:	2800      	cmp	r0, #0
 8001854:	d100      	bne.n	8001858 <__aeabi_dsub+0x5c>
 8001856:	e0c1      	b.n	80019dc <__aeabi_dsub+0x1e0>
 8001858:	48be      	ldr	r0, [pc, #760]	; (8001b54 <__aeabi_dsub+0x358>)
 800185a:	4580      	cmp	r8, r0
 800185c:	d100      	bne.n	8001860 <__aeabi_dsub+0x64>
 800185e:	e151      	b.n	8001b04 <__aeabi_dsub+0x308>
 8001860:	2080      	movs	r0, #128	; 0x80
 8001862:	0400      	lsls	r0, r0, #16
 8001864:	4301      	orrs	r1, r0
 8001866:	2a38      	cmp	r2, #56	; 0x38
 8001868:	dd00      	ble.n	800186c <__aeabi_dsub+0x70>
 800186a:	e17b      	b.n	8001b64 <__aeabi_dsub+0x368>
 800186c:	2a1f      	cmp	r2, #31
 800186e:	dd00      	ble.n	8001872 <__aeabi_dsub+0x76>
 8001870:	e1ee      	b.n	8001c50 <__aeabi_dsub+0x454>
 8001872:	2020      	movs	r0, #32
 8001874:	003e      	movs	r6, r7
 8001876:	1a80      	subs	r0, r0, r2
 8001878:	000c      	movs	r4, r1
 800187a:	40d6      	lsrs	r6, r2
 800187c:	40d1      	lsrs	r1, r2
 800187e:	4087      	lsls	r7, r0
 8001880:	4662      	mov	r2, ip
 8001882:	4084      	lsls	r4, r0
 8001884:	1a52      	subs	r2, r2, r1
 8001886:	1e78      	subs	r0, r7, #1
 8001888:	4187      	sbcs	r7, r0
 800188a:	4694      	mov	ip, r2
 800188c:	4334      	orrs	r4, r6
 800188e:	4327      	orrs	r7, r4
 8001890:	1bdc      	subs	r4, r3, r7
 8001892:	42a3      	cmp	r3, r4
 8001894:	419b      	sbcs	r3, r3
 8001896:	4662      	mov	r2, ip
 8001898:	425b      	negs	r3, r3
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4699      	mov	r9, r3
 800189e:	464b      	mov	r3, r9
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	d400      	bmi.n	80018a6 <__aeabi_dsub+0xaa>
 80018a4:	e118      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 80018a6:	464b      	mov	r3, r9
 80018a8:	0258      	lsls	r0, r3, #9
 80018aa:	0a43      	lsrs	r3, r0, #9
 80018ac:	4699      	mov	r9, r3
 80018ae:	464b      	mov	r3, r9
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dsub+0xba>
 80018b4:	e137      	b.n	8001b26 <__aeabi_dsub+0x32a>
 80018b6:	4648      	mov	r0, r9
 80018b8:	f000 fbdc 	bl	8002074 <__clzsi2>
 80018bc:	0001      	movs	r1, r0
 80018be:	3908      	subs	r1, #8
 80018c0:	2320      	movs	r3, #32
 80018c2:	0022      	movs	r2, r4
 80018c4:	4648      	mov	r0, r9
 80018c6:	1a5b      	subs	r3, r3, r1
 80018c8:	40da      	lsrs	r2, r3
 80018ca:	4088      	lsls	r0, r1
 80018cc:	408c      	lsls	r4, r1
 80018ce:	4643      	mov	r3, r8
 80018d0:	4310      	orrs	r0, r2
 80018d2:	4588      	cmp	r8, r1
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0xdc>
 80018d6:	e136      	b.n	8001b46 <__aeabi_dsub+0x34a>
 80018d8:	1ac9      	subs	r1, r1, r3
 80018da:	1c4b      	adds	r3, r1, #1
 80018dc:	2b1f      	cmp	r3, #31
 80018de:	dd00      	ble.n	80018e2 <__aeabi_dsub+0xe6>
 80018e0:	e0ea      	b.n	8001ab8 <__aeabi_dsub+0x2bc>
 80018e2:	2220      	movs	r2, #32
 80018e4:	0026      	movs	r6, r4
 80018e6:	1ad2      	subs	r2, r2, r3
 80018e8:	0001      	movs	r1, r0
 80018ea:	4094      	lsls	r4, r2
 80018ec:	40de      	lsrs	r6, r3
 80018ee:	40d8      	lsrs	r0, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	4091      	lsls	r1, r2
 80018f4:	1e62      	subs	r2, r4, #1
 80018f6:	4194      	sbcs	r4, r2
 80018f8:	4681      	mov	r9, r0
 80018fa:	4698      	mov	r8, r3
 80018fc:	4331      	orrs	r1, r6
 80018fe:	430c      	orrs	r4, r1
 8001900:	0763      	lsls	r3, r4, #29
 8001902:	d009      	beq.n	8001918 <__aeabi_dsub+0x11c>
 8001904:	230f      	movs	r3, #15
 8001906:	4023      	ands	r3, r4
 8001908:	2b04      	cmp	r3, #4
 800190a:	d005      	beq.n	8001918 <__aeabi_dsub+0x11c>
 800190c:	1d23      	adds	r3, r4, #4
 800190e:	42a3      	cmp	r3, r4
 8001910:	41a4      	sbcs	r4, r4
 8001912:	4264      	negs	r4, r4
 8001914:	44a1      	add	r9, r4
 8001916:	001c      	movs	r4, r3
 8001918:	464b      	mov	r3, r9
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	d400      	bmi.n	8001920 <__aeabi_dsub+0x124>
 800191e:	e0de      	b.n	8001ade <__aeabi_dsub+0x2e2>
 8001920:	4641      	mov	r1, r8
 8001922:	4b8c      	ldr	r3, [pc, #560]	; (8001b54 <__aeabi_dsub+0x358>)
 8001924:	3101      	adds	r1, #1
 8001926:	4299      	cmp	r1, r3
 8001928:	d100      	bne.n	800192c <__aeabi_dsub+0x130>
 800192a:	e0e7      	b.n	8001afc <__aeabi_dsub+0x300>
 800192c:	464b      	mov	r3, r9
 800192e:	488a      	ldr	r0, [pc, #552]	; (8001b58 <__aeabi_dsub+0x35c>)
 8001930:	08e4      	lsrs	r4, r4, #3
 8001932:	4003      	ands	r3, r0
 8001934:	0018      	movs	r0, r3
 8001936:	0549      	lsls	r1, r1, #21
 8001938:	075b      	lsls	r3, r3, #29
 800193a:	0240      	lsls	r0, r0, #9
 800193c:	4323      	orrs	r3, r4
 800193e:	0d4a      	lsrs	r2, r1, #21
 8001940:	0b04      	lsrs	r4, r0, #12
 8001942:	0512      	lsls	r2, r2, #20
 8001944:	07ed      	lsls	r5, r5, #31
 8001946:	4322      	orrs	r2, r4
 8001948:	432a      	orrs	r2, r5
 800194a:	0018      	movs	r0, r3
 800194c:	0011      	movs	r1, r2
 800194e:	bcf0      	pop	{r4, r5, r6, r7}
 8001950:	46bb      	mov	fp, r7
 8001952:	46b2      	mov	sl, r6
 8001954:	46a9      	mov	r9, r5
 8001956:	46a0      	mov	r8, r4
 8001958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800195a:	4642      	mov	r2, r8
 800195c:	1a12      	subs	r2, r2, r0
 800195e:	2a00      	cmp	r2, #0
 8001960:	dd52      	ble.n	8001a08 <__aeabi_dsub+0x20c>
 8001962:	2800      	cmp	r0, #0
 8001964:	d100      	bne.n	8001968 <__aeabi_dsub+0x16c>
 8001966:	e09c      	b.n	8001aa2 <__aeabi_dsub+0x2a6>
 8001968:	45a0      	cmp	r8, r4
 800196a:	d100      	bne.n	800196e <__aeabi_dsub+0x172>
 800196c:	e0ca      	b.n	8001b04 <__aeabi_dsub+0x308>
 800196e:	2080      	movs	r0, #128	; 0x80
 8001970:	0400      	lsls	r0, r0, #16
 8001972:	4301      	orrs	r1, r0
 8001974:	2a38      	cmp	r2, #56	; 0x38
 8001976:	dd00      	ble.n	800197a <__aeabi_dsub+0x17e>
 8001978:	e149      	b.n	8001c0e <__aeabi_dsub+0x412>
 800197a:	2a1f      	cmp	r2, #31
 800197c:	dc00      	bgt.n	8001980 <__aeabi_dsub+0x184>
 800197e:	e197      	b.n	8001cb0 <__aeabi_dsub+0x4b4>
 8001980:	0010      	movs	r0, r2
 8001982:	000e      	movs	r6, r1
 8001984:	3820      	subs	r0, #32
 8001986:	40c6      	lsrs	r6, r0
 8001988:	2a20      	cmp	r2, #32
 800198a:	d004      	beq.n	8001996 <__aeabi_dsub+0x19a>
 800198c:	2040      	movs	r0, #64	; 0x40
 800198e:	1a82      	subs	r2, r0, r2
 8001990:	4091      	lsls	r1, r2
 8001992:	430f      	orrs	r7, r1
 8001994:	46b9      	mov	r9, r7
 8001996:	464c      	mov	r4, r9
 8001998:	1e62      	subs	r2, r4, #1
 800199a:	4194      	sbcs	r4, r2
 800199c:	4334      	orrs	r4, r6
 800199e:	e13a      	b.n	8001c16 <__aeabi_dsub+0x41a>
 80019a0:	000a      	movs	r2, r1
 80019a2:	433a      	orrs	r2, r7
 80019a4:	d028      	beq.n	80019f8 <__aeabi_dsub+0x1fc>
 80019a6:	46b3      	mov	fp, r6
 80019a8:	42b5      	cmp	r5, r6
 80019aa:	d02b      	beq.n	8001a04 <__aeabi_dsub+0x208>
 80019ac:	4a6b      	ldr	r2, [pc, #428]	; (8001b5c <__aeabi_dsub+0x360>)
 80019ae:	4442      	add	r2, r8
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	d05d      	beq.n	8001a70 <__aeabi_dsub+0x274>
 80019b4:	4642      	mov	r2, r8
 80019b6:	4644      	mov	r4, r8
 80019b8:	1a82      	subs	r2, r0, r2
 80019ba:	2c00      	cmp	r4, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dsub+0x1c4>
 80019be:	e0f5      	b.n	8001bac <__aeabi_dsub+0x3b0>
 80019c0:	4665      	mov	r5, ip
 80019c2:	431d      	orrs	r5, r3
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x1cc>
 80019c6:	e19c      	b.n	8001d02 <__aeabi_dsub+0x506>
 80019c8:	1e55      	subs	r5, r2, #1
 80019ca:	2a01      	cmp	r2, #1
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x1d4>
 80019ce:	e1fb      	b.n	8001dc8 <__aeabi_dsub+0x5cc>
 80019d0:	4c60      	ldr	r4, [pc, #384]	; (8001b54 <__aeabi_dsub+0x358>)
 80019d2:	42a2      	cmp	r2, r4
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x1dc>
 80019d6:	e1bd      	b.n	8001d54 <__aeabi_dsub+0x558>
 80019d8:	002a      	movs	r2, r5
 80019da:	e0f0      	b.n	8001bbe <__aeabi_dsub+0x3c2>
 80019dc:	0008      	movs	r0, r1
 80019de:	4338      	orrs	r0, r7
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x1e8>
 80019e2:	e0c3      	b.n	8001b6c <__aeabi_dsub+0x370>
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	2a01      	cmp	r2, #1
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x1f0>
 80019ea:	e1a8      	b.n	8001d3e <__aeabi_dsub+0x542>
 80019ec:	4c59      	ldr	r4, [pc, #356]	; (8001b54 <__aeabi_dsub+0x358>)
 80019ee:	42a2      	cmp	r2, r4
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dsub+0x1f8>
 80019f2:	e087      	b.n	8001b04 <__aeabi_dsub+0x308>
 80019f4:	0002      	movs	r2, r0
 80019f6:	e736      	b.n	8001866 <__aeabi_dsub+0x6a>
 80019f8:	2201      	movs	r2, #1
 80019fa:	4056      	eors	r6, r2
 80019fc:	46b3      	mov	fp, r6
 80019fe:	42b5      	cmp	r5, r6
 8001a00:	d000      	beq.n	8001a04 <__aeabi_dsub+0x208>
 8001a02:	e721      	b.n	8001848 <__aeabi_dsub+0x4c>
 8001a04:	4a55      	ldr	r2, [pc, #340]	; (8001b5c <__aeabi_dsub+0x360>)
 8001a06:	4442      	add	r2, r8
 8001a08:	2a00      	cmp	r2, #0
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dsub+0x212>
 8001a0c:	e0b5      	b.n	8001b7a <__aeabi_dsub+0x37e>
 8001a0e:	4642      	mov	r2, r8
 8001a10:	4644      	mov	r4, r8
 8001a12:	1a82      	subs	r2, r0, r2
 8001a14:	2c00      	cmp	r4, #0
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dsub+0x21e>
 8001a18:	e138      	b.n	8001c8c <__aeabi_dsub+0x490>
 8001a1a:	4e4e      	ldr	r6, [pc, #312]	; (8001b54 <__aeabi_dsub+0x358>)
 8001a1c:	42b0      	cmp	r0, r6
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x226>
 8001a20:	e1de      	b.n	8001de0 <__aeabi_dsub+0x5e4>
 8001a22:	2680      	movs	r6, #128	; 0x80
 8001a24:	4664      	mov	r4, ip
 8001a26:	0436      	lsls	r6, r6, #16
 8001a28:	4334      	orrs	r4, r6
 8001a2a:	46a4      	mov	ip, r4
 8001a2c:	2a38      	cmp	r2, #56	; 0x38
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dsub+0x236>
 8001a30:	e196      	b.n	8001d60 <__aeabi_dsub+0x564>
 8001a32:	2a1f      	cmp	r2, #31
 8001a34:	dd00      	ble.n	8001a38 <__aeabi_dsub+0x23c>
 8001a36:	e224      	b.n	8001e82 <__aeabi_dsub+0x686>
 8001a38:	2620      	movs	r6, #32
 8001a3a:	1ab4      	subs	r4, r6, r2
 8001a3c:	46a2      	mov	sl, r4
 8001a3e:	4664      	mov	r4, ip
 8001a40:	4656      	mov	r6, sl
 8001a42:	40b4      	lsls	r4, r6
 8001a44:	46a1      	mov	r9, r4
 8001a46:	001c      	movs	r4, r3
 8001a48:	464e      	mov	r6, r9
 8001a4a:	40d4      	lsrs	r4, r2
 8001a4c:	4326      	orrs	r6, r4
 8001a4e:	0034      	movs	r4, r6
 8001a50:	4656      	mov	r6, sl
 8001a52:	40b3      	lsls	r3, r6
 8001a54:	1e5e      	subs	r6, r3, #1
 8001a56:	41b3      	sbcs	r3, r6
 8001a58:	431c      	orrs	r4, r3
 8001a5a:	4663      	mov	r3, ip
 8001a5c:	40d3      	lsrs	r3, r2
 8001a5e:	18c9      	adds	r1, r1, r3
 8001a60:	19e4      	adds	r4, r4, r7
 8001a62:	42bc      	cmp	r4, r7
 8001a64:	41bf      	sbcs	r7, r7
 8001a66:	427f      	negs	r7, r7
 8001a68:	46b9      	mov	r9, r7
 8001a6a:	4680      	mov	r8, r0
 8001a6c:	4489      	add	r9, r1
 8001a6e:	e0d8      	b.n	8001c22 <__aeabi_dsub+0x426>
 8001a70:	4640      	mov	r0, r8
 8001a72:	4c3b      	ldr	r4, [pc, #236]	; (8001b60 <__aeabi_dsub+0x364>)
 8001a74:	3001      	adds	r0, #1
 8001a76:	4220      	tst	r0, r4
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dsub+0x280>
 8001a7a:	e0b4      	b.n	8001be6 <__aeabi_dsub+0x3ea>
 8001a7c:	4640      	mov	r0, r8
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d000      	beq.n	8001a84 <__aeabi_dsub+0x288>
 8001a82:	e144      	b.n	8001d0e <__aeabi_dsub+0x512>
 8001a84:	4660      	mov	r0, ip
 8001a86:	4318      	orrs	r0, r3
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x290>
 8001a8a:	e190      	b.n	8001dae <__aeabi_dsub+0x5b2>
 8001a8c:	0008      	movs	r0, r1
 8001a8e:	4338      	orrs	r0, r7
 8001a90:	d000      	beq.n	8001a94 <__aeabi_dsub+0x298>
 8001a92:	e1aa      	b.n	8001dea <__aeabi_dsub+0x5ee>
 8001a94:	4661      	mov	r1, ip
 8001a96:	08db      	lsrs	r3, r3, #3
 8001a98:	0749      	lsls	r1, r1, #29
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	4661      	mov	r1, ip
 8001a9e:	08cc      	lsrs	r4, r1, #3
 8001aa0:	e027      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001aa2:	0008      	movs	r0, r1
 8001aa4:	4338      	orrs	r0, r7
 8001aa6:	d061      	beq.n	8001b6c <__aeabi_dsub+0x370>
 8001aa8:	1e50      	subs	r0, r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x2b4>
 8001aae:	e139      	b.n	8001d24 <__aeabi_dsub+0x528>
 8001ab0:	42a2      	cmp	r2, r4
 8001ab2:	d027      	beq.n	8001b04 <__aeabi_dsub+0x308>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	e75d      	b.n	8001974 <__aeabi_dsub+0x178>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	391f      	subs	r1, #31
 8001abc:	40ca      	lsrs	r2, r1
 8001abe:	0011      	movs	r1, r2
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d003      	beq.n	8001acc <__aeabi_dsub+0x2d0>
 8001ac4:	2240      	movs	r2, #64	; 0x40
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	4098      	lsls	r0, r3
 8001aca:	4304      	orrs	r4, r0
 8001acc:	1e63      	subs	r3, r4, #1
 8001ace:	419c      	sbcs	r4, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	4699      	mov	r9, r3
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	430c      	orrs	r4, r1
 8001ad8:	0763      	lsls	r3, r4, #29
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x2e2>
 8001adc:	e712      	b.n	8001904 <__aeabi_dsub+0x108>
 8001ade:	464b      	mov	r3, r9
 8001ae0:	464a      	mov	r2, r9
 8001ae2:	08e4      	lsrs	r4, r4, #3
 8001ae4:	075b      	lsls	r3, r3, #29
 8001ae6:	4323      	orrs	r3, r4
 8001ae8:	08d4      	lsrs	r4, r2, #3
 8001aea:	4642      	mov	r2, r8
 8001aec:	4919      	ldr	r1, [pc, #100]	; (8001b54 <__aeabi_dsub+0x358>)
 8001aee:	428a      	cmp	r2, r1
 8001af0:	d00e      	beq.n	8001b10 <__aeabi_dsub+0x314>
 8001af2:	0324      	lsls	r4, r4, #12
 8001af4:	0552      	lsls	r2, r2, #21
 8001af6:	0b24      	lsrs	r4, r4, #12
 8001af8:	0d52      	lsrs	r2, r2, #21
 8001afa:	e722      	b.n	8001942 <__aeabi_dsub+0x146>
 8001afc:	000a      	movs	r2, r1
 8001afe:	2400      	movs	r4, #0
 8001b00:	2300      	movs	r3, #0
 8001b02:	e71e      	b.n	8001942 <__aeabi_dsub+0x146>
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	4662      	mov	r2, ip
 8001b08:	0752      	lsls	r2, r2, #29
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	4662      	mov	r2, ip
 8001b0e:	08d4      	lsrs	r4, r2, #3
 8001b10:	001a      	movs	r2, r3
 8001b12:	4322      	orrs	r2, r4
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x31c>
 8001b16:	e1fc      	b.n	8001f12 <__aeabi_dsub+0x716>
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	0312      	lsls	r2, r2, #12
 8001b1c:	4314      	orrs	r4, r2
 8001b1e:	0324      	lsls	r4, r4, #12
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <__aeabi_dsub+0x358>)
 8001b22:	0b24      	lsrs	r4, r4, #12
 8001b24:	e70d      	b.n	8001942 <__aeabi_dsub+0x146>
 8001b26:	0020      	movs	r0, r4
 8001b28:	f000 faa4 	bl	8002074 <__clzsi2>
 8001b2c:	0001      	movs	r1, r0
 8001b2e:	3118      	adds	r1, #24
 8001b30:	291f      	cmp	r1, #31
 8001b32:	dc00      	bgt.n	8001b36 <__aeabi_dsub+0x33a>
 8001b34:	e6c4      	b.n	80018c0 <__aeabi_dsub+0xc4>
 8001b36:	3808      	subs	r0, #8
 8001b38:	4084      	lsls	r4, r0
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	0020      	movs	r0, r4
 8001b3e:	2400      	movs	r4, #0
 8001b40:	4588      	cmp	r8, r1
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dsub+0x34a>
 8001b44:	e6c8      	b.n	80018d8 <__aeabi_dsub+0xdc>
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <__aeabi_dsub+0x35c>)
 8001b48:	1a5b      	subs	r3, r3, r1
 8001b4a:	4010      	ands	r0, r2
 8001b4c:	4698      	mov	r8, r3
 8001b4e:	4681      	mov	r9, r0
 8001b50:	e6d6      	b.n	8001900 <__aeabi_dsub+0x104>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	000007ff 	.word	0x000007ff
 8001b58:	ff7fffff 	.word	0xff7fffff
 8001b5c:	fffff801 	.word	0xfffff801
 8001b60:	000007fe 	.word	0x000007fe
 8001b64:	430f      	orrs	r7, r1
 8001b66:	1e7a      	subs	r2, r7, #1
 8001b68:	4197      	sbcs	r7, r2
 8001b6a:	e691      	b.n	8001890 <__aeabi_dsub+0x94>
 8001b6c:	4661      	mov	r1, ip
 8001b6e:	08db      	lsrs	r3, r3, #3
 8001b70:	0749      	lsls	r1, r1, #29
 8001b72:	430b      	orrs	r3, r1
 8001b74:	4661      	mov	r1, ip
 8001b76:	08cc      	lsrs	r4, r1, #3
 8001b78:	e7b8      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	4cd3      	ldr	r4, [pc, #844]	; (8001ecc <__aeabi_dsub+0x6d0>)
 8001b7e:	3001      	adds	r0, #1
 8001b80:	4220      	tst	r0, r4
 8001b82:	d000      	beq.n	8001b86 <__aeabi_dsub+0x38a>
 8001b84:	e0a2      	b.n	8001ccc <__aeabi_dsub+0x4d0>
 8001b86:	4640      	mov	r0, r8
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d000      	beq.n	8001b8e <__aeabi_dsub+0x392>
 8001b8c:	e101      	b.n	8001d92 <__aeabi_dsub+0x596>
 8001b8e:	4660      	mov	r0, ip
 8001b90:	4318      	orrs	r0, r3
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x39a>
 8001b94:	e15e      	b.n	8001e54 <__aeabi_dsub+0x658>
 8001b96:	0008      	movs	r0, r1
 8001b98:	4338      	orrs	r0, r7
 8001b9a:	d000      	beq.n	8001b9e <__aeabi_dsub+0x3a2>
 8001b9c:	e15f      	b.n	8001e5e <__aeabi_dsub+0x662>
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	0749      	lsls	r1, r1, #29
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	4661      	mov	r1, ip
 8001ba8:	08cc      	lsrs	r4, r1, #3
 8001baa:	e7a2      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001bac:	4dc8      	ldr	r5, [pc, #800]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001bae:	42a8      	cmp	r0, r5
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dsub+0x3b8>
 8001bb2:	e0cf      	b.n	8001d54 <__aeabi_dsub+0x558>
 8001bb4:	2580      	movs	r5, #128	; 0x80
 8001bb6:	4664      	mov	r4, ip
 8001bb8:	042d      	lsls	r5, r5, #16
 8001bba:	432c      	orrs	r4, r5
 8001bbc:	46a4      	mov	ip, r4
 8001bbe:	2a38      	cmp	r2, #56	; 0x38
 8001bc0:	dc56      	bgt.n	8001c70 <__aeabi_dsub+0x474>
 8001bc2:	2a1f      	cmp	r2, #31
 8001bc4:	dd00      	ble.n	8001bc8 <__aeabi_dsub+0x3cc>
 8001bc6:	e0d1      	b.n	8001d6c <__aeabi_dsub+0x570>
 8001bc8:	2520      	movs	r5, #32
 8001bca:	001e      	movs	r6, r3
 8001bcc:	1aad      	subs	r5, r5, r2
 8001bce:	4664      	mov	r4, ip
 8001bd0:	40ab      	lsls	r3, r5
 8001bd2:	40ac      	lsls	r4, r5
 8001bd4:	40d6      	lsrs	r6, r2
 8001bd6:	1e5d      	subs	r5, r3, #1
 8001bd8:	41ab      	sbcs	r3, r5
 8001bda:	4334      	orrs	r4, r6
 8001bdc:	4323      	orrs	r3, r4
 8001bde:	4664      	mov	r4, ip
 8001be0:	40d4      	lsrs	r4, r2
 8001be2:	1b09      	subs	r1, r1, r4
 8001be4:	e049      	b.n	8001c7a <__aeabi_dsub+0x47e>
 8001be6:	4660      	mov	r0, ip
 8001be8:	1bdc      	subs	r4, r3, r7
 8001bea:	1a46      	subs	r6, r0, r1
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	4180      	sbcs	r0, r0
 8001bf0:	4240      	negs	r0, r0
 8001bf2:	4681      	mov	r9, r0
 8001bf4:	0030      	movs	r0, r6
 8001bf6:	464e      	mov	r6, r9
 8001bf8:	1b80      	subs	r0, r0, r6
 8001bfa:	4681      	mov	r9, r0
 8001bfc:	0200      	lsls	r0, r0, #8
 8001bfe:	d476      	bmi.n	8001cee <__aeabi_dsub+0x4f2>
 8001c00:	464b      	mov	r3, r9
 8001c02:	4323      	orrs	r3, r4
 8001c04:	d000      	beq.n	8001c08 <__aeabi_dsub+0x40c>
 8001c06:	e652      	b.n	80018ae <__aeabi_dsub+0xb2>
 8001c08:	2400      	movs	r4, #0
 8001c0a:	2500      	movs	r5, #0
 8001c0c:	e771      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001c0e:	4339      	orrs	r1, r7
 8001c10:	000c      	movs	r4, r1
 8001c12:	1e62      	subs	r2, r4, #1
 8001c14:	4194      	sbcs	r4, r2
 8001c16:	18e4      	adds	r4, r4, r3
 8001c18:	429c      	cmp	r4, r3
 8001c1a:	419b      	sbcs	r3, r3
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	4463      	add	r3, ip
 8001c20:	4699      	mov	r9, r3
 8001c22:	464b      	mov	r3, r9
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	d400      	bmi.n	8001c2a <__aeabi_dsub+0x42e>
 8001c28:	e756      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	469c      	mov	ip, r3
 8001c2e:	4ba8      	ldr	r3, [pc, #672]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001c30:	44e0      	add	r8, ip
 8001c32:	4598      	cmp	r8, r3
 8001c34:	d038      	beq.n	8001ca8 <__aeabi_dsub+0x4ac>
 8001c36:	464b      	mov	r3, r9
 8001c38:	48a6      	ldr	r0, [pc, #664]	; (8001ed4 <__aeabi_dsub+0x6d8>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4003      	ands	r3, r0
 8001c3e:	0018      	movs	r0, r3
 8001c40:	0863      	lsrs	r3, r4, #1
 8001c42:	4014      	ands	r4, r2
 8001c44:	431c      	orrs	r4, r3
 8001c46:	07c3      	lsls	r3, r0, #31
 8001c48:	431c      	orrs	r4, r3
 8001c4a:	0843      	lsrs	r3, r0, #1
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	e657      	b.n	8001900 <__aeabi_dsub+0x104>
 8001c50:	0010      	movs	r0, r2
 8001c52:	000e      	movs	r6, r1
 8001c54:	3820      	subs	r0, #32
 8001c56:	40c6      	lsrs	r6, r0
 8001c58:	2a20      	cmp	r2, #32
 8001c5a:	d004      	beq.n	8001c66 <__aeabi_dsub+0x46a>
 8001c5c:	2040      	movs	r0, #64	; 0x40
 8001c5e:	1a82      	subs	r2, r0, r2
 8001c60:	4091      	lsls	r1, r2
 8001c62:	430f      	orrs	r7, r1
 8001c64:	46b9      	mov	r9, r7
 8001c66:	464f      	mov	r7, r9
 8001c68:	1e7a      	subs	r2, r7, #1
 8001c6a:	4197      	sbcs	r7, r2
 8001c6c:	4337      	orrs	r7, r6
 8001c6e:	e60f      	b.n	8001890 <__aeabi_dsub+0x94>
 8001c70:	4662      	mov	r2, ip
 8001c72:	431a      	orrs	r2, r3
 8001c74:	0013      	movs	r3, r2
 8001c76:	1e5a      	subs	r2, r3, #1
 8001c78:	4193      	sbcs	r3, r2
 8001c7a:	1afc      	subs	r4, r7, r3
 8001c7c:	42a7      	cmp	r7, r4
 8001c7e:	41bf      	sbcs	r7, r7
 8001c80:	427f      	negs	r7, r7
 8001c82:	1bcb      	subs	r3, r1, r7
 8001c84:	4699      	mov	r9, r3
 8001c86:	465d      	mov	r5, fp
 8001c88:	4680      	mov	r8, r0
 8001c8a:	e608      	b.n	800189e <__aeabi_dsub+0xa2>
 8001c8c:	4666      	mov	r6, ip
 8001c8e:	431e      	orrs	r6, r3
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x498>
 8001c92:	e0be      	b.n	8001e12 <__aeabi_dsub+0x616>
 8001c94:	1e56      	subs	r6, r2, #1
 8001c96:	2a01      	cmp	r2, #1
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x4a0>
 8001c9a:	e109      	b.n	8001eb0 <__aeabi_dsub+0x6b4>
 8001c9c:	4c8c      	ldr	r4, [pc, #560]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001c9e:	42a2      	cmp	r2, r4
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x4a8>
 8001ca2:	e119      	b.n	8001ed8 <__aeabi_dsub+0x6dc>
 8001ca4:	0032      	movs	r2, r6
 8001ca6:	e6c1      	b.n	8001a2c <__aeabi_dsub+0x230>
 8001ca8:	4642      	mov	r2, r8
 8001caa:	2400      	movs	r4, #0
 8001cac:	2300      	movs	r3, #0
 8001cae:	e648      	b.n	8001942 <__aeabi_dsub+0x146>
 8001cb0:	2020      	movs	r0, #32
 8001cb2:	000c      	movs	r4, r1
 8001cb4:	1a80      	subs	r0, r0, r2
 8001cb6:	003e      	movs	r6, r7
 8001cb8:	4087      	lsls	r7, r0
 8001cba:	4084      	lsls	r4, r0
 8001cbc:	40d6      	lsrs	r6, r2
 8001cbe:	1e78      	subs	r0, r7, #1
 8001cc0:	4187      	sbcs	r7, r0
 8001cc2:	40d1      	lsrs	r1, r2
 8001cc4:	4334      	orrs	r4, r6
 8001cc6:	433c      	orrs	r4, r7
 8001cc8:	448c      	add	ip, r1
 8001cca:	e7a4      	b.n	8001c16 <__aeabi_dsub+0x41a>
 8001ccc:	4a80      	ldr	r2, [pc, #512]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001cce:	4290      	cmp	r0, r2
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x4d8>
 8001cd2:	e0e9      	b.n	8001ea8 <__aeabi_dsub+0x6ac>
 8001cd4:	19df      	adds	r7, r3, r7
 8001cd6:	429f      	cmp	r7, r3
 8001cd8:	419b      	sbcs	r3, r3
 8001cda:	4461      	add	r1, ip
 8001cdc:	425b      	negs	r3, r3
 8001cde:	18c9      	adds	r1, r1, r3
 8001ce0:	07cc      	lsls	r4, r1, #31
 8001ce2:	087f      	lsrs	r7, r7, #1
 8001ce4:	084b      	lsrs	r3, r1, #1
 8001ce6:	4699      	mov	r9, r3
 8001ce8:	4680      	mov	r8, r0
 8001cea:	433c      	orrs	r4, r7
 8001cec:	e6f4      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001cee:	1afc      	subs	r4, r7, r3
 8001cf0:	42a7      	cmp	r7, r4
 8001cf2:	41bf      	sbcs	r7, r7
 8001cf4:	4663      	mov	r3, ip
 8001cf6:	427f      	negs	r7, r7
 8001cf8:	1ac9      	subs	r1, r1, r3
 8001cfa:	1bcb      	subs	r3, r1, r7
 8001cfc:	4699      	mov	r9, r3
 8001cfe:	465d      	mov	r5, fp
 8001d00:	e5d5      	b.n	80018ae <__aeabi_dsub+0xb2>
 8001d02:	08ff      	lsrs	r7, r7, #3
 8001d04:	074b      	lsls	r3, r1, #29
 8001d06:	465d      	mov	r5, fp
 8001d08:	433b      	orrs	r3, r7
 8001d0a:	08cc      	lsrs	r4, r1, #3
 8001d0c:	e6ee      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001d0e:	4662      	mov	r2, ip
 8001d10:	431a      	orrs	r2, r3
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x51a>
 8001d14:	e082      	b.n	8001e1c <__aeabi_dsub+0x620>
 8001d16:	000b      	movs	r3, r1
 8001d18:	433b      	orrs	r3, r7
 8001d1a:	d11b      	bne.n	8001d54 <__aeabi_dsub+0x558>
 8001d1c:	2480      	movs	r4, #128	; 0x80
 8001d1e:	2500      	movs	r5, #0
 8001d20:	0324      	lsls	r4, r4, #12
 8001d22:	e6f9      	b.n	8001b18 <__aeabi_dsub+0x31c>
 8001d24:	19dc      	adds	r4, r3, r7
 8001d26:	429c      	cmp	r4, r3
 8001d28:	419b      	sbcs	r3, r3
 8001d2a:	4461      	add	r1, ip
 8001d2c:	4689      	mov	r9, r1
 8001d2e:	425b      	negs	r3, r3
 8001d30:	4499      	add	r9, r3
 8001d32:	464b      	mov	r3, r9
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	d444      	bmi.n	8001dc2 <__aeabi_dsub+0x5c6>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	e6cc      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001d3e:	1bdc      	subs	r4, r3, r7
 8001d40:	4662      	mov	r2, ip
 8001d42:	42a3      	cmp	r3, r4
 8001d44:	419b      	sbcs	r3, r3
 8001d46:	1a51      	subs	r1, r2, r1
 8001d48:	425b      	negs	r3, r3
 8001d4a:	1acb      	subs	r3, r1, r3
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4698      	mov	r8, r3
 8001d52:	e5a4      	b.n	800189e <__aeabi_dsub+0xa2>
 8001d54:	08ff      	lsrs	r7, r7, #3
 8001d56:	074b      	lsls	r3, r1, #29
 8001d58:	465d      	mov	r5, fp
 8001d5a:	433b      	orrs	r3, r7
 8001d5c:	08cc      	lsrs	r4, r1, #3
 8001d5e:	e6d7      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001d60:	4662      	mov	r2, ip
 8001d62:	431a      	orrs	r2, r3
 8001d64:	0014      	movs	r4, r2
 8001d66:	1e63      	subs	r3, r4, #1
 8001d68:	419c      	sbcs	r4, r3
 8001d6a:	e679      	b.n	8001a60 <__aeabi_dsub+0x264>
 8001d6c:	0015      	movs	r5, r2
 8001d6e:	4664      	mov	r4, ip
 8001d70:	3d20      	subs	r5, #32
 8001d72:	40ec      	lsrs	r4, r5
 8001d74:	46a0      	mov	r8, r4
 8001d76:	2a20      	cmp	r2, #32
 8001d78:	d005      	beq.n	8001d86 <__aeabi_dsub+0x58a>
 8001d7a:	2540      	movs	r5, #64	; 0x40
 8001d7c:	4664      	mov	r4, ip
 8001d7e:	1aaa      	subs	r2, r5, r2
 8001d80:	4094      	lsls	r4, r2
 8001d82:	4323      	orrs	r3, r4
 8001d84:	469a      	mov	sl, r3
 8001d86:	4654      	mov	r4, sl
 8001d88:	1e63      	subs	r3, r4, #1
 8001d8a:	419c      	sbcs	r4, r3
 8001d8c:	4643      	mov	r3, r8
 8001d8e:	4323      	orrs	r3, r4
 8001d90:	e773      	b.n	8001c7a <__aeabi_dsub+0x47e>
 8001d92:	4662      	mov	r2, ip
 8001d94:	431a      	orrs	r2, r3
 8001d96:	d023      	beq.n	8001de0 <__aeabi_dsub+0x5e4>
 8001d98:	000a      	movs	r2, r1
 8001d9a:	433a      	orrs	r2, r7
 8001d9c:	d000      	beq.n	8001da0 <__aeabi_dsub+0x5a4>
 8001d9e:	e0a0      	b.n	8001ee2 <__aeabi_dsub+0x6e6>
 8001da0:	4662      	mov	r2, ip
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	0752      	lsls	r2, r2, #29
 8001da6:	4313      	orrs	r3, r2
 8001da8:	4662      	mov	r2, ip
 8001daa:	08d4      	lsrs	r4, r2, #3
 8001dac:	e6b0      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001dae:	000b      	movs	r3, r1
 8001db0:	433b      	orrs	r3, r7
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x5ba>
 8001db4:	e728      	b.n	8001c08 <__aeabi_dsub+0x40c>
 8001db6:	08ff      	lsrs	r7, r7, #3
 8001db8:	074b      	lsls	r3, r1, #29
 8001dba:	465d      	mov	r5, fp
 8001dbc:	433b      	orrs	r3, r7
 8001dbe:	08cc      	lsrs	r4, r1, #3
 8001dc0:	e697      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	e736      	b.n	8001c36 <__aeabi_dsub+0x43a>
 8001dc8:	1afc      	subs	r4, r7, r3
 8001dca:	42a7      	cmp	r7, r4
 8001dcc:	41bf      	sbcs	r7, r7
 8001dce:	4663      	mov	r3, ip
 8001dd0:	427f      	negs	r7, r7
 8001dd2:	1ac9      	subs	r1, r1, r3
 8001dd4:	1bcb      	subs	r3, r1, r7
 8001dd6:	4699      	mov	r9, r3
 8001dd8:	2301      	movs	r3, #1
 8001dda:	465d      	mov	r5, fp
 8001ddc:	4698      	mov	r8, r3
 8001dde:	e55e      	b.n	800189e <__aeabi_dsub+0xa2>
 8001de0:	074b      	lsls	r3, r1, #29
 8001de2:	08ff      	lsrs	r7, r7, #3
 8001de4:	433b      	orrs	r3, r7
 8001de6:	08cc      	lsrs	r4, r1, #3
 8001de8:	e692      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001dea:	1bdc      	subs	r4, r3, r7
 8001dec:	4660      	mov	r0, ip
 8001dee:	42a3      	cmp	r3, r4
 8001df0:	41b6      	sbcs	r6, r6
 8001df2:	1a40      	subs	r0, r0, r1
 8001df4:	4276      	negs	r6, r6
 8001df6:	1b80      	subs	r0, r0, r6
 8001df8:	4681      	mov	r9, r0
 8001dfa:	0200      	lsls	r0, r0, #8
 8001dfc:	d560      	bpl.n	8001ec0 <__aeabi_dsub+0x6c4>
 8001dfe:	1afc      	subs	r4, r7, r3
 8001e00:	42a7      	cmp	r7, r4
 8001e02:	41bf      	sbcs	r7, r7
 8001e04:	4663      	mov	r3, ip
 8001e06:	427f      	negs	r7, r7
 8001e08:	1ac9      	subs	r1, r1, r3
 8001e0a:	1bcb      	subs	r3, r1, r7
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	465d      	mov	r5, fp
 8001e10:	e576      	b.n	8001900 <__aeabi_dsub+0x104>
 8001e12:	08ff      	lsrs	r7, r7, #3
 8001e14:	074b      	lsls	r3, r1, #29
 8001e16:	433b      	orrs	r3, r7
 8001e18:	08cc      	lsrs	r4, r1, #3
 8001e1a:	e667      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001e1c:	000a      	movs	r2, r1
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	433a      	orrs	r2, r7
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x62a>
 8001e24:	e66f      	b.n	8001b06 <__aeabi_dsub+0x30a>
 8001e26:	4662      	mov	r2, ip
 8001e28:	0752      	lsls	r2, r2, #29
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	4662      	mov	r2, ip
 8001e2e:	08d4      	lsrs	r4, r2, #3
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	0312      	lsls	r2, r2, #12
 8001e34:	4214      	tst	r4, r2
 8001e36:	d007      	beq.n	8001e48 <__aeabi_dsub+0x64c>
 8001e38:	08c8      	lsrs	r0, r1, #3
 8001e3a:	4210      	tst	r0, r2
 8001e3c:	d104      	bne.n	8001e48 <__aeabi_dsub+0x64c>
 8001e3e:	465d      	mov	r5, fp
 8001e40:	0004      	movs	r4, r0
 8001e42:	08fb      	lsrs	r3, r7, #3
 8001e44:	0749      	lsls	r1, r1, #29
 8001e46:	430b      	orrs	r3, r1
 8001e48:	0f5a      	lsrs	r2, r3, #29
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	0752      	lsls	r2, r2, #29
 8001e50:	4313      	orrs	r3, r2
 8001e52:	e65d      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001e54:	074b      	lsls	r3, r1, #29
 8001e56:	08ff      	lsrs	r7, r7, #3
 8001e58:	433b      	orrs	r3, r7
 8001e5a:	08cc      	lsrs	r4, r1, #3
 8001e5c:	e649      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001e5e:	19dc      	adds	r4, r3, r7
 8001e60:	429c      	cmp	r4, r3
 8001e62:	419b      	sbcs	r3, r3
 8001e64:	4461      	add	r1, ip
 8001e66:	4689      	mov	r9, r1
 8001e68:	425b      	negs	r3, r3
 8001e6a:	4499      	add	r9, r3
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	d400      	bmi.n	8001e74 <__aeabi_dsub+0x678>
 8001e72:	e631      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001e74:	464a      	mov	r2, r9
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <__aeabi_dsub+0x6d8>)
 8001e78:	401a      	ands	r2, r3
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4691      	mov	r9, r2
 8001e7e:	4698      	mov	r8, r3
 8001e80:	e62a      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001e82:	0016      	movs	r6, r2
 8001e84:	4664      	mov	r4, ip
 8001e86:	3e20      	subs	r6, #32
 8001e88:	40f4      	lsrs	r4, r6
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d005      	beq.n	8001e9c <__aeabi_dsub+0x6a0>
 8001e90:	2640      	movs	r6, #64	; 0x40
 8001e92:	4664      	mov	r4, ip
 8001e94:	1ab2      	subs	r2, r6, r2
 8001e96:	4094      	lsls	r4, r2
 8001e98:	4323      	orrs	r3, r4
 8001e9a:	469a      	mov	sl, r3
 8001e9c:	4654      	mov	r4, sl
 8001e9e:	1e63      	subs	r3, r4, #1
 8001ea0:	419c      	sbcs	r4, r3
 8001ea2:	4643      	mov	r3, r8
 8001ea4:	431c      	orrs	r4, r3
 8001ea6:	e5db      	b.n	8001a60 <__aeabi_dsub+0x264>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	2400      	movs	r4, #0
 8001eac:	2300      	movs	r3, #0
 8001eae:	e548      	b.n	8001942 <__aeabi_dsub+0x146>
 8001eb0:	19dc      	adds	r4, r3, r7
 8001eb2:	42bc      	cmp	r4, r7
 8001eb4:	41bf      	sbcs	r7, r7
 8001eb6:	4461      	add	r1, ip
 8001eb8:	4689      	mov	r9, r1
 8001eba:	427f      	negs	r7, r7
 8001ebc:	44b9      	add	r9, r7
 8001ebe:	e738      	b.n	8001d32 <__aeabi_dsub+0x536>
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4323      	orrs	r3, r4
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x6cc>
 8001ec6:	e69f      	b.n	8001c08 <__aeabi_dsub+0x40c>
 8001ec8:	e606      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	000007fe 	.word	0x000007fe
 8001ed0:	000007ff 	.word	0x000007ff
 8001ed4:	ff7fffff 	.word	0xff7fffff
 8001ed8:	08ff      	lsrs	r7, r7, #3
 8001eda:	074b      	lsls	r3, r1, #29
 8001edc:	433b      	orrs	r3, r7
 8001ede:	08cc      	lsrs	r4, r1, #3
 8001ee0:	e616      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001ee2:	4662      	mov	r2, ip
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	0752      	lsls	r2, r2, #29
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	4662      	mov	r2, ip
 8001eec:	08d4      	lsrs	r4, r2, #3
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	0312      	lsls	r2, r2, #12
 8001ef2:	4214      	tst	r4, r2
 8001ef4:	d007      	beq.n	8001f06 <__aeabi_dsub+0x70a>
 8001ef6:	08c8      	lsrs	r0, r1, #3
 8001ef8:	4210      	tst	r0, r2
 8001efa:	d104      	bne.n	8001f06 <__aeabi_dsub+0x70a>
 8001efc:	465d      	mov	r5, fp
 8001efe:	0004      	movs	r4, r0
 8001f00:	08fb      	lsrs	r3, r7, #3
 8001f02:	0749      	lsls	r1, r1, #29
 8001f04:	430b      	orrs	r3, r1
 8001f06:	0f5a      	lsrs	r2, r3, #29
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	0752      	lsls	r2, r2, #29
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	e5fe      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001f12:	2300      	movs	r3, #0
 8001f14:	4a01      	ldr	r2, [pc, #4]	; (8001f1c <__aeabi_dsub+0x720>)
 8001f16:	001c      	movs	r4, r3
 8001f18:	e513      	b.n	8001942 <__aeabi_dsub+0x146>
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	000007ff 	.word	0x000007ff

08001f20 <__aeabi_dcmpun>:
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	0005      	movs	r5, r0
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <__aeabi_dcmpun+0x38>)
 8001f26:	031c      	lsls	r4, r3, #12
 8001f28:	0016      	movs	r6, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	030a      	lsls	r2, r1, #12
 8001f2e:	0049      	lsls	r1, r1, #1
 8001f30:	0b12      	lsrs	r2, r2, #12
 8001f32:	0d49      	lsrs	r1, r1, #21
 8001f34:	0b24      	lsrs	r4, r4, #12
 8001f36:	0d5b      	lsrs	r3, r3, #21
 8001f38:	4281      	cmp	r1, r0
 8001f3a:	d008      	beq.n	8001f4e <__aeabi_dcmpun+0x2e>
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <__aeabi_dcmpun+0x38>)
 8001f3e:	2000      	movs	r0, #0
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d103      	bne.n	8001f4c <__aeabi_dcmpun+0x2c>
 8001f44:	0020      	movs	r0, r4
 8001f46:	4330      	orrs	r0, r6
 8001f48:	1e43      	subs	r3, r0, #1
 8001f4a:	4198      	sbcs	r0, r3
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
 8001f4e:	2001      	movs	r0, #1
 8001f50:	432a      	orrs	r2, r5
 8001f52:	d1fb      	bne.n	8001f4c <__aeabi_dcmpun+0x2c>
 8001f54:	e7f2      	b.n	8001f3c <__aeabi_dcmpun+0x1c>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff

08001f5c <__aeabi_d2iz>:
 8001f5c:	000a      	movs	r2, r1
 8001f5e:	b530      	push	{r4, r5, lr}
 8001f60:	4c13      	ldr	r4, [pc, #76]	; (8001fb0 <__aeabi_d2iz+0x54>)
 8001f62:	0053      	lsls	r3, r2, #1
 8001f64:	0309      	lsls	r1, r1, #12
 8001f66:	0005      	movs	r5, r0
 8001f68:	0b09      	lsrs	r1, r1, #12
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	0d5b      	lsrs	r3, r3, #21
 8001f6e:	0fd2      	lsrs	r2, r2, #31
 8001f70:	42a3      	cmp	r3, r4
 8001f72:	dd04      	ble.n	8001f7e <__aeabi_d2iz+0x22>
 8001f74:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <__aeabi_d2iz+0x58>)
 8001f76:	4283      	cmp	r3, r0
 8001f78:	dd02      	ble.n	8001f80 <__aeabi_d2iz+0x24>
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <__aeabi_d2iz+0x5c>)
 8001f7c:	18d0      	adds	r0, r2, r3
 8001f7e:	bd30      	pop	{r4, r5, pc}
 8001f80:	2080      	movs	r0, #128	; 0x80
 8001f82:	0340      	lsls	r0, r0, #13
 8001f84:	4301      	orrs	r1, r0
 8001f86:	480d      	ldr	r0, [pc, #52]	; (8001fbc <__aeabi_d2iz+0x60>)
 8001f88:	1ac0      	subs	r0, r0, r3
 8001f8a:	281f      	cmp	r0, #31
 8001f8c:	dd08      	ble.n	8001fa0 <__aeabi_d2iz+0x44>
 8001f8e:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <__aeabi_d2iz+0x64>)
 8001f90:	1ac3      	subs	r3, r0, r3
 8001f92:	40d9      	lsrs	r1, r3
 8001f94:	000b      	movs	r3, r1
 8001f96:	4258      	negs	r0, r3
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	d1f0      	bne.n	8001f7e <__aeabi_d2iz+0x22>
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	e7ee      	b.n	8001f7e <__aeabi_d2iz+0x22>
 8001fa0:	4c08      	ldr	r4, [pc, #32]	; (8001fc4 <__aeabi_d2iz+0x68>)
 8001fa2:	40c5      	lsrs	r5, r0
 8001fa4:	46a4      	mov	ip, r4
 8001fa6:	4463      	add	r3, ip
 8001fa8:	4099      	lsls	r1, r3
 8001faa:	000b      	movs	r3, r1
 8001fac:	432b      	orrs	r3, r5
 8001fae:	e7f2      	b.n	8001f96 <__aeabi_d2iz+0x3a>
 8001fb0:	000003fe 	.word	0x000003fe
 8001fb4:	0000041d 	.word	0x0000041d
 8001fb8:	7fffffff 	.word	0x7fffffff
 8001fbc:	00000433 	.word	0x00000433
 8001fc0:	00000413 	.word	0x00000413
 8001fc4:	fffffbed 	.word	0xfffffbed

08001fc8 <__aeabi_i2d>:
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d016      	beq.n	8001ffc <__aeabi_i2d+0x34>
 8001fce:	17c3      	asrs	r3, r0, #31
 8001fd0:	18c5      	adds	r5, r0, r3
 8001fd2:	405d      	eors	r5, r3
 8001fd4:	0fc4      	lsrs	r4, r0, #31
 8001fd6:	0028      	movs	r0, r5
 8001fd8:	f000 f84c 	bl	8002074 <__clzsi2>
 8001fdc:	4a11      	ldr	r2, [pc, #68]	; (8002024 <__aeabi_i2d+0x5c>)
 8001fde:	1a12      	subs	r2, r2, r0
 8001fe0:	280a      	cmp	r0, #10
 8001fe2:	dc16      	bgt.n	8002012 <__aeabi_i2d+0x4a>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	002e      	movs	r6, r5
 8001fe8:	3315      	adds	r3, #21
 8001fea:	409e      	lsls	r6, r3
 8001fec:	230b      	movs	r3, #11
 8001fee:	1a18      	subs	r0, r3, r0
 8001ff0:	40c5      	lsrs	r5, r0
 8001ff2:	0552      	lsls	r2, r2, #21
 8001ff4:	032d      	lsls	r5, r5, #12
 8001ff6:	0b2d      	lsrs	r5, r5, #12
 8001ff8:	0d53      	lsrs	r3, r2, #21
 8001ffa:	e003      	b.n	8002004 <__aeabi_i2d+0x3c>
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	2300      	movs	r3, #0
 8002000:	2500      	movs	r5, #0
 8002002:	2600      	movs	r6, #0
 8002004:	051b      	lsls	r3, r3, #20
 8002006:	432b      	orrs	r3, r5
 8002008:	07e4      	lsls	r4, r4, #31
 800200a:	4323      	orrs	r3, r4
 800200c:	0030      	movs	r0, r6
 800200e:	0019      	movs	r1, r3
 8002010:	bd70      	pop	{r4, r5, r6, pc}
 8002012:	380b      	subs	r0, #11
 8002014:	4085      	lsls	r5, r0
 8002016:	0552      	lsls	r2, r2, #21
 8002018:	032d      	lsls	r5, r5, #12
 800201a:	2600      	movs	r6, #0
 800201c:	0b2d      	lsrs	r5, r5, #12
 800201e:	0d53      	lsrs	r3, r2, #21
 8002020:	e7f0      	b.n	8002004 <__aeabi_i2d+0x3c>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	0000041e 	.word	0x0000041e

08002028 <__aeabi_ui2d>:
 8002028:	b510      	push	{r4, lr}
 800202a:	1e04      	subs	r4, r0, #0
 800202c:	d010      	beq.n	8002050 <__aeabi_ui2d+0x28>
 800202e:	f000 f821 	bl	8002074 <__clzsi2>
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <__aeabi_ui2d+0x48>)
 8002034:	1a1b      	subs	r3, r3, r0
 8002036:	280a      	cmp	r0, #10
 8002038:	dc11      	bgt.n	800205e <__aeabi_ui2d+0x36>
 800203a:	220b      	movs	r2, #11
 800203c:	0021      	movs	r1, r4
 800203e:	1a12      	subs	r2, r2, r0
 8002040:	40d1      	lsrs	r1, r2
 8002042:	3015      	adds	r0, #21
 8002044:	030a      	lsls	r2, r1, #12
 8002046:	055b      	lsls	r3, r3, #21
 8002048:	4084      	lsls	r4, r0
 800204a:	0b12      	lsrs	r2, r2, #12
 800204c:	0d5b      	lsrs	r3, r3, #21
 800204e:	e001      	b.n	8002054 <__aeabi_ui2d+0x2c>
 8002050:	2300      	movs	r3, #0
 8002052:	2200      	movs	r2, #0
 8002054:	051b      	lsls	r3, r3, #20
 8002056:	4313      	orrs	r3, r2
 8002058:	0020      	movs	r0, r4
 800205a:	0019      	movs	r1, r3
 800205c:	bd10      	pop	{r4, pc}
 800205e:	0022      	movs	r2, r4
 8002060:	380b      	subs	r0, #11
 8002062:	4082      	lsls	r2, r0
 8002064:	055b      	lsls	r3, r3, #21
 8002066:	0312      	lsls	r2, r2, #12
 8002068:	2400      	movs	r4, #0
 800206a:	0b12      	lsrs	r2, r2, #12
 800206c:	0d5b      	lsrs	r3, r3, #21
 800206e:	e7f1      	b.n	8002054 <__aeabi_ui2d+0x2c>
 8002070:	0000041e 	.word	0x0000041e

08002074 <__clzsi2>:
 8002074:	211c      	movs	r1, #28
 8002076:	2301      	movs	r3, #1
 8002078:	041b      	lsls	r3, r3, #16
 800207a:	4298      	cmp	r0, r3
 800207c:	d301      	bcc.n	8002082 <__clzsi2+0xe>
 800207e:	0c00      	lsrs	r0, r0, #16
 8002080:	3910      	subs	r1, #16
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	4298      	cmp	r0, r3
 8002086:	d301      	bcc.n	800208c <__clzsi2+0x18>
 8002088:	0a00      	lsrs	r0, r0, #8
 800208a:	3908      	subs	r1, #8
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	4298      	cmp	r0, r3
 8002090:	d301      	bcc.n	8002096 <__clzsi2+0x22>
 8002092:	0900      	lsrs	r0, r0, #4
 8002094:	3904      	subs	r1, #4
 8002096:	a202      	add	r2, pc, #8	; (adr r2, 80020a0 <__clzsi2+0x2c>)
 8002098:	5c10      	ldrb	r0, [r2, r0]
 800209a:	1840      	adds	r0, r0, r1
 800209c:	4770      	bx	lr
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	02020304 	.word	0x02020304
 80020a4:	01010101 	.word	0x01010101
	...

080020b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020b6:	f000 fdf1 	bl	8002c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ba:	f000 f8b3 	bl	8002224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020be:	f000 fa09 	bl	80024d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80020c2:	f000 f9e1 	bl	8002488 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80020c6:	f000 f9af 	bl	8002428 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80020ca:	f000 f8fb 	bl	80022c4 <MX_ADC_Init>
  MX_TIM3_Init();
 80020ce:	f000 f955 	bl	800237c <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (ADCRead == 1) {
 80020d2:	4b48      	ldr	r3, [pc, #288]	; (80021f4 <main+0x144>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d15c      	bne.n	8002194 <main+0xe4>
		  	HAL_ADC_Start(&hadc); 	//start ADC
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <main+0x148>)
 80020dc:	0018      	movs	r0, r3
 80020de:	f000 ffa5 	bl	800302c <HAL_ADC_Start>
			reading = pollADC(); 	//get ADC value (this reads from the pot)
 80020e2:	f000 fa9b 	bl	800261c <pollADC>
 80020e6:	0003      	movs	r3, r0
 80020e8:	001a      	movs	r2, r3
 80020ea:	4b44      	ldr	r3, [pc, #272]	; (80021fc <main+0x14c>)
 80020ec:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop(&hadc); 	//stop ADC
 80020ee:	4b42      	ldr	r3, [pc, #264]	; (80021f8 <main+0x148>)
 80020f0:	0018      	movs	r0, r3
 80020f2:	f000 ffef 	bl	80030d4 <HAL_ADC_Stop>
			ADCRead = 0;			//reset ADCRead so that ADC only reads once
 80020f6:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <main+0x144>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]

			/*** TEST POINT ****/
			// format the message
			sprintf(buffer, "\r\nADC: %ld\r\n", reading);
 80020fc:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <main+0x14c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	001a      	movs	r2, r3
 8002102:	493f      	ldr	r1, [pc, #252]	; (8002200 <main+0x150>)
 8002104:	4b3f      	ldr	r3, [pc, #252]	; (8002204 <main+0x154>)
 8002106:	0018      	movs	r0, r3
 8002108:	f004 fb60 	bl	80067cc <siprintf>
			// Send ADC reading over UART
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sizeof(buffer), 1000);
 800210c:	23fa      	movs	r3, #250	; 0xfa
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	493c      	ldr	r1, [pc, #240]	; (8002204 <main+0x154>)
 8002112:	483d      	ldr	r0, [pc, #244]	; (8002208 <main+0x158>)
 8002114:	2214      	movs	r2, #20
 8002116:	f002 ff6f 	bl	8004ff8 <HAL_UART_Transmit>

			uint8_t value = 13;
 800211a:	210b      	movs	r1, #11
 800211c:	187b      	adds	r3, r7, r1
 800211e:	220d      	movs	r2, #13
 8002120:	701a      	strb	r2, [r3, #0]
			uint8_t *binaryArray = decToBinConvert(value);
 8002122:	187b      	adds	r3, r7, r1
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	0018      	movs	r0, r3
 8002128:	f000 fa90 	bl	800264c <decToBinConvert>
 800212c:	0003      	movs	r3, r0
 800212e:	607b      	str	r3, [r7, #4]
			/*** TEST POINT: prints out the binary bits****/
			for(int i =7;i>-1;i--){
 8002130:	2307      	movs	r3, #7
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	e013      	b.n	800215e <main+0xae>
				sprintf(buffer, "\r\nbinary: %d",*(binaryArray+i));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	18d3      	adds	r3, r2, r3
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	001a      	movs	r2, r3
 8002140:	4932      	ldr	r1, [pc, #200]	; (800220c <main+0x15c>)
 8002142:	4b30      	ldr	r3, [pc, #192]	; (8002204 <main+0x154>)
 8002144:	0018      	movs	r0, r3
 8002146:	f004 fb41 	bl	80067cc <siprintf>
				// Send ADC reading over UART
				HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sizeof(buffer), 1000);
 800214a:	23fa      	movs	r3, #250	; 0xfa
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	492d      	ldr	r1, [pc, #180]	; (8002204 <main+0x154>)
 8002150:	482d      	ldr	r0, [pc, #180]	; (8002208 <main+0x158>)
 8002152:	2214      	movs	r2, #20
 8002154:	f002 ff50 	bl	8004ff8 <HAL_UART_Transmit>
			for(int i =7;i>-1;i--){
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3b01      	subs	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b00      	cmp	r3, #0
 8002162:	dae8      	bge.n	8002136 <main+0x86>
			}

			// TRANSMIT the reading
			transmit(binaryArray);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	0018      	movs	r0, r3
 8002168:	f000 faa8 	bl	80026bc <transmit>
			transmissionCounter+=1; //increment the number of readings transmitted
 800216c:	4b28      	ldr	r3, [pc, #160]	; (8002210 <main+0x160>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	3301      	adds	r3, #1
 8002172:	b2da      	uxtb	r2, r3
 8002174:	4b26      	ldr	r3, [pc, #152]	; (8002210 <main+0x160>)
 8002176:	701a      	strb	r2, [r3, #0]

			sprintf(buffer, "Transmitted\r\n");
 8002178:	4a26      	ldr	r2, [pc, #152]	; (8002214 <main+0x164>)
 800217a:	4b22      	ldr	r3, [pc, #136]	; (8002204 <main+0x154>)
 800217c:	0011      	movs	r1, r2
 800217e:	0018      	movs	r0, r3
 8002180:	f004 fb24 	bl	80067cc <siprintf>
			// Send ADC reading over UART
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sizeof(buffer), 1000);
 8002184:	23fa      	movs	r3, #250	; 0xfa
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	491e      	ldr	r1, [pc, #120]	; (8002204 <main+0x154>)
 800218a:	481f      	ldr	r0, [pc, #124]	; (8002208 <main+0x158>)
 800218c:	2214      	movs	r2, #20
 800218e:	f002 ff33 	bl	8004ff8 <HAL_UART_Transmit>
 8002192:	e79e      	b.n	80020d2 <main+0x22>
	  }else if(HAL_GPIO_ReadPin(GPIOC, B2_Pin)){ // if transmitter is in counter transmission mode
 8002194:	4b20      	ldr	r3, [pc, #128]	; (8002218 <main+0x168>)
 8002196:	2102      	movs	r1, #2
 8002198:	0018      	movs	r0, r3
 800219a:	f001 ff71 	bl	8004080 <HAL_GPIO_ReadPin>
 800219e:	1e03      	subs	r3, r0, #0
 80021a0:	d097      	beq.n	80020d2 <main+0x22>
		  mode = 1;
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <main+0x16c>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
		  uint8_t *cbinaryArray = decToBinConvert(transmissionCounter); // convert counter value to binary bits
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <main+0x160>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f000 fa4d 	bl	800264c <decToBinConvert>
 80021b2:	0003      	movs	r3, r0
 80021b4:	60fb      	str	r3, [r7, #12]
		  /*** TEST POINT: prints out the binary bits****/
		  for(int i =7;i>-1;i--){
 80021b6:	2307      	movs	r3, #7
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	e013      	b.n	80021e4 <main+0x134>
			  sprintf(buffer, "\r\nc_binary: %d",*(cbinaryArray+i));
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	18d3      	adds	r3, r2, r3
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	001a      	movs	r2, r3
 80021c6:	4916      	ldr	r1, [pc, #88]	; (8002220 <main+0x170>)
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <main+0x154>)
 80021ca:	0018      	movs	r0, r3
 80021cc:	f004 fafe 	bl	80067cc <siprintf>
			  // Send ADC reading over UART
			  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sizeof(buffer), 1000);
 80021d0:	23fa      	movs	r3, #250	; 0xfa
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	490b      	ldr	r1, [pc, #44]	; (8002204 <main+0x154>)
 80021d6:	480c      	ldr	r0, [pc, #48]	; (8002208 <main+0x158>)
 80021d8:	2214      	movs	r2, #20
 80021da:	f002 ff0d 	bl	8004ff8 <HAL_UART_Transmit>
		  for(int i =7;i>-1;i--){
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	dae8      	bge.n	80021bc <main+0x10c>
		  }

		  // TRANSMIT the counter value
		  transmit(cbinaryArray);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f000 fa65 	bl	80026bc <transmit>
	  if (ADCRead == 1) {
 80021f2:	e76e      	b.n	80020d2 <main+0x22>
 80021f4:	2000038c 	.word	0x2000038c
 80021f8:	200001f8 	.word	0x200001f8
 80021fc:	2000038d 	.word	0x2000038d
 8002200:	08008e40 	.word	0x08008e40
 8002204:	20000390 	.word	0x20000390
 8002208:	200002c4 	.word	0x200002c4
 800220c:	08008e50 	.word	0x08008e50
 8002210:	200003b0 	.word	0x200003b0
 8002214:	08008e60 	.word	0x08008e60
 8002218:	48000800 	.word	0x48000800
 800221c:	200003a4 	.word	0x200003a4
 8002220:	08008e70 	.word	0x08008e70

08002224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b091      	sub	sp, #68	; 0x44
 8002228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800222a:	2410      	movs	r4, #16
 800222c:	193b      	adds	r3, r7, r4
 800222e:	0018      	movs	r0, r3
 8002230:	2330      	movs	r3, #48	; 0x30
 8002232:	001a      	movs	r2, r3
 8002234:	2100      	movs	r1, #0
 8002236:	f003 fe53 	bl	8005ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800223a:	003b      	movs	r3, r7
 800223c:	0018      	movs	r0, r3
 800223e:	2310      	movs	r3, #16
 8002240:	001a      	movs	r2, r3
 8002242:	2100      	movs	r1, #0
 8002244:	f003 fe4c 	bl	8005ee0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002248:	0021      	movs	r1, r4
 800224a:	187b      	adds	r3, r7, r1
 800224c:	2212      	movs	r2, #18
 800224e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002250:	187b      	adds	r3, r7, r1
 8002252:	2201      	movs	r2, #1
 8002254:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002256:	187b      	adds	r3, r7, r1
 8002258:	2201      	movs	r2, #1
 800225a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800225c:	187b      	adds	r3, r7, r1
 800225e:	2210      	movs	r2, #16
 8002260:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002262:	187b      	adds	r3, r7, r1
 8002264:	2210      	movs	r2, #16
 8002266:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002268:	187b      	adds	r3, r7, r1
 800226a:	2202      	movs	r2, #2
 800226c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800226e:	187b      	adds	r3, r7, r1
 8002270:	2200      	movs	r2, #0
 8002272:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002274:	187b      	adds	r3, r7, r1
 8002276:	22a0      	movs	r2, #160	; 0xa0
 8002278:	0392      	lsls	r2, r2, #14
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800227c:	187b      	adds	r3, r7, r1
 800227e:	2200      	movs	r2, #0
 8002280:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002282:	187b      	adds	r3, r7, r1
 8002284:	0018      	movs	r0, r3
 8002286:	f001 ff5b 	bl	8004140 <HAL_RCC_OscConfig>
 800228a:	1e03      	subs	r3, r0, #0
 800228c:	d001      	beq.n	8002292 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800228e:	f000 fa8f 	bl	80027b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002292:	003b      	movs	r3, r7
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002298:	003b      	movs	r3, r7
 800229a:	2202      	movs	r2, #2
 800229c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800229e:	003b      	movs	r3, r7
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022a4:	003b      	movs	r3, r7
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022aa:	003b      	movs	r3, r7
 80022ac:	2101      	movs	r1, #1
 80022ae:	0018      	movs	r0, r3
 80022b0:	f002 fa60 	bl	8004774 <HAL_RCC_ClockConfig>
 80022b4:	1e03      	subs	r3, r0, #0
 80022b6:	d001      	beq.n	80022bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80022b8:	f000 fa7a 	bl	80027b0 <Error_Handler>
  }
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	b011      	add	sp, #68	; 0x44
 80022c2:	bd90      	pop	{r4, r7, pc}

080022c4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	0018      	movs	r0, r3
 80022ce:	230c      	movs	r3, #12
 80022d0:	001a      	movs	r2, r3
 80022d2:	2100      	movs	r1, #0
 80022d4:	f003 fe04 	bl	8005ee0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80022d8:	4b26      	ldr	r3, [pc, #152]	; (8002374 <MX_ADC_Init+0xb0>)
 80022da:	4a27      	ldr	r2, [pc, #156]	; (8002378 <MX_ADC_Init+0xb4>)
 80022dc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80022de:	4b25      	ldr	r3, [pc, #148]	; (8002374 <MX_ADC_Init+0xb0>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80022e4:	4b23      	ldr	r3, [pc, #140]	; (8002374 <MX_ADC_Init+0xb0>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <MX_ADC_Init+0xb0>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80022f0:	4b20      	ldr	r3, [pc, #128]	; (8002374 <MX_ADC_Init+0xb0>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022f6:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <MX_ADC_Init+0xb0>)
 80022f8:	2204      	movs	r2, #4
 80022fa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <MX_ADC_Init+0xb0>)
 80022fe:	2200      	movs	r2, #0
 8002300:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002302:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <MX_ADC_Init+0xb0>)
 8002304:	2200      	movs	r2, #0
 8002306:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <MX_ADC_Init+0xb0>)
 800230a:	2200      	movs	r2, #0
 800230c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800230e:	4b19      	ldr	r3, [pc, #100]	; (8002374 <MX_ADC_Init+0xb0>)
 8002310:	2200      	movs	r2, #0
 8002312:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002314:	4b17      	ldr	r3, [pc, #92]	; (8002374 <MX_ADC_Init+0xb0>)
 8002316:	22c2      	movs	r2, #194	; 0xc2
 8002318:	32ff      	adds	r2, #255	; 0xff
 800231a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <MX_ADC_Init+0xb0>)
 800231e:	2200      	movs	r2, #0
 8002320:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <MX_ADC_Init+0xb0>)
 8002324:	2224      	movs	r2, #36	; 0x24
 8002326:	2100      	movs	r1, #0
 8002328:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <MX_ADC_Init+0xb0>)
 800232c:	2201      	movs	r2, #1
 800232e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002330:	4b10      	ldr	r3, [pc, #64]	; (8002374 <MX_ADC_Init+0xb0>)
 8002332:	0018      	movs	r0, r3
 8002334:	f000 fd3a 	bl	8002dac <HAL_ADC_Init>
 8002338:	1e03      	subs	r3, r0, #0
 800233a:	d001      	beq.n	8002340 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800233c:	f000 fa38 	bl	80027b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	2207      	movs	r2, #7
 8002344:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	0152      	lsls	r2, r2, #5
 800234c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	0552      	lsls	r2, r2, #21
 8002354:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002356:	1d3a      	adds	r2, r7, #4
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <MX_ADC_Init+0xb0>)
 800235a:	0011      	movs	r1, r2
 800235c:	0018      	movs	r0, r3
 800235e:	f001 f86d 	bl	800343c <HAL_ADC_ConfigChannel>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d001      	beq.n	800236a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002366:	f000 fa23 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	46bd      	mov	sp, r7
 800236e:	b004      	add	sp, #16
 8002370:	bd80      	pop	{r7, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	200001f8 	.word	0x200001f8
 8002378:	40012400 	.word	0x40012400

0800237c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002382:	2308      	movs	r3, #8
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	0018      	movs	r0, r3
 8002388:	2310      	movs	r3, #16
 800238a:	001a      	movs	r2, r3
 800238c:	2100      	movs	r1, #0
 800238e:	f003 fda7 	bl	8005ee0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002392:	003b      	movs	r3, r7
 8002394:	0018      	movs	r0, r3
 8002396:	2308      	movs	r3, #8
 8002398:	001a      	movs	r2, r3
 800239a:	2100      	movs	r1, #0
 800239c:	f003 fda0 	bl	8005ee0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023a0:	4b1e      	ldr	r3, [pc, #120]	; (800241c <MX_TIM3_Init+0xa0>)
 80023a2:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <MX_TIM3_Init+0xa4>)
 80023a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <MX_TIM3_Init+0xa0>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <MX_TIM3_Init+0xa0>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 47999;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_TIM3_Init+0xa0>)
 80023b4:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <MX_TIM3_Init+0xa8>)
 80023b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <MX_TIM3_Init+0xa0>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <MX_TIM3_Init+0xa0>)
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023c4:	4b15      	ldr	r3, [pc, #84]	; (800241c <MX_TIM3_Init+0xa0>)
 80023c6:	0018      	movs	r0, r3
 80023c8:	f002 fb26 	bl	8004a18 <HAL_TIM_Base_Init>
 80023cc:	1e03      	subs	r3, r0, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80023d0:	f000 f9ee 	bl	80027b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023d4:	2108      	movs	r1, #8
 80023d6:	187b      	adds	r3, r7, r1
 80023d8:	2280      	movs	r2, #128	; 0x80
 80023da:	0152      	lsls	r2, r2, #5
 80023dc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023de:	187a      	adds	r2, r7, r1
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_TIM3_Init+0xa0>)
 80023e2:	0011      	movs	r1, r2
 80023e4:	0018      	movs	r0, r3
 80023e6:	f002 fb67 	bl	8004ab8 <HAL_TIM_ConfigClockSource>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80023ee:	f000 f9df 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f2:	003b      	movs	r3, r7
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f8:	003b      	movs	r3, r7
 80023fa:	2200      	movs	r2, #0
 80023fc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023fe:	003a      	movs	r2, r7
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <MX_TIM3_Init+0xa0>)
 8002402:	0011      	movs	r1, r2
 8002404:	0018      	movs	r0, r3
 8002406:	f002 fd45 	bl	8004e94 <HAL_TIMEx_MasterConfigSynchronization>
 800240a:	1e03      	subs	r3, r0, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800240e:	f000 f9cf 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	b006      	add	sp, #24
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	2000027c 	.word	0x2000027c
 8002420:	40000400 	.word	0x40000400
 8002424:	0000bb7f 	.word	0x0000bb7f

08002428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <MX_USART2_UART_Init+0x58>)
 800242e:	4a15      	ldr	r2, [pc, #84]	; (8002484 <MX_USART2_UART_Init+0x5c>)
 8002430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <MX_USART2_UART_Init+0x58>)
 8002434:	2296      	movs	r2, #150	; 0x96
 8002436:	0192      	lsls	r2, r2, #6
 8002438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_USART2_UART_Init+0x58>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <MX_USART2_UART_Init+0x58>)
 8002442:	2200      	movs	r2, #0
 8002444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_USART2_UART_Init+0x58>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_USART2_UART_Init+0x58>)
 800244e:	220c      	movs	r2, #12
 8002450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MX_USART2_UART_Init+0x58>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_USART2_UART_Init+0x58>)
 800245a:	2200      	movs	r2, #0
 800245c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <MX_USART2_UART_Init+0x58>)
 8002460:	2200      	movs	r2, #0
 8002462:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_USART2_UART_Init+0x58>)
 8002466:	2200      	movs	r2, #0
 8002468:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <MX_USART2_UART_Init+0x58>)
 800246c:	0018      	movs	r0, r3
 800246e:	f002 fd6f 	bl	8004f50 <HAL_UART_Init>
 8002472:	1e03      	subs	r3, r0, #0
 8002474:	d001      	beq.n	800247a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002476:	f000 f99b 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	200002c4 	.word	0x200002c4
 8002484:	40004400 	.word	0x40004400

08002488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <MX_DMA_Init+0x48>)
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <MX_DMA_Init+0x48>)
 8002494:	2101      	movs	r1, #1
 8002496:	430a      	orrs	r2, r1
 8002498:	615a      	str	r2, [r3, #20]
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <MX_DMA_Init+0x48>)
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	2201      	movs	r2, #1
 80024a0:	4013      	ands	r3, r2
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	2009      	movs	r0, #9
 80024ac:	f001 fac2 	bl	8003a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024b0:	2009      	movs	r0, #9
 80024b2:	f001 fad4 	bl	8003a5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	200b      	movs	r0, #11
 80024bc:	f001 faba 	bl	8003a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80024c0:	200b      	movs	r0, #11
 80024c2:	f001 facc 	bl	8003a5e <HAL_NVIC_EnableIRQ>

}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b002      	add	sp, #8
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	40021000 	.word	0x40021000

080024d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024da:	240c      	movs	r4, #12
 80024dc:	193b      	adds	r3, r7, r4
 80024de:	0018      	movs	r0, r3
 80024e0:	2314      	movs	r3, #20
 80024e2:	001a      	movs	r2, r3
 80024e4:	2100      	movs	r1, #0
 80024e6:	f003 fcfb 	bl	8005ee0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ea:	4b38      	ldr	r3, [pc, #224]	; (80025cc <MX_GPIO_Init+0xf8>)
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	4b37      	ldr	r3, [pc, #220]	; (80025cc <MX_GPIO_Init+0xf8>)
 80024f0:	2180      	movs	r1, #128	; 0x80
 80024f2:	03c9      	lsls	r1, r1, #15
 80024f4:	430a      	orrs	r2, r1
 80024f6:	615a      	str	r2, [r3, #20]
 80024f8:	4b34      	ldr	r3, [pc, #208]	; (80025cc <MX_GPIO_Init+0xf8>)
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	03db      	lsls	r3, r3, #15
 8002500:	4013      	ands	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002506:	4b31      	ldr	r3, [pc, #196]	; (80025cc <MX_GPIO_Init+0xf8>)
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	4b30      	ldr	r3, [pc, #192]	; (80025cc <MX_GPIO_Init+0xf8>)
 800250c:	2180      	movs	r1, #128	; 0x80
 800250e:	0309      	lsls	r1, r1, #12
 8002510:	430a      	orrs	r2, r1
 8002512:	615a      	str	r2, [r3, #20]
 8002514:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <MX_GPIO_Init+0xf8>)
 8002516:	695a      	ldr	r2, [r3, #20]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	031b      	lsls	r3, r3, #12
 800251c:	4013      	ands	r3, r2
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002522:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <MX_GPIO_Init+0xf8>)
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	4b29      	ldr	r3, [pc, #164]	; (80025cc <MX_GPIO_Init+0xf8>)
 8002528:	2180      	movs	r1, #128	; 0x80
 800252a:	0289      	lsls	r1, r1, #10
 800252c:	430a      	orrs	r2, r1
 800252e:	615a      	str	r2, [r3, #20]
 8002530:	4b26      	ldr	r3, [pc, #152]	; (80025cc <MX_GPIO_Init+0xf8>)
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	029b      	lsls	r3, r3, #10
 8002538:	4013      	ands	r3, r2
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Laser_Diode_Pin|LD4_Pin, GPIO_PIN_RESET);
 800253e:	2390      	movs	r3, #144	; 0x90
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4823      	ldr	r0, [pc, #140]	; (80025d0 <MX_GPIO_Init+0xfc>)
 8002544:	2200      	movs	r2, #0
 8002546:	0019      	movs	r1, r3
 8002548:	f001 fdb7 	bl	80040ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 800254c:	193b      	adds	r3, r7, r4
 800254e:	2202      	movs	r2, #2
 8002550:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002552:	193b      	adds	r3, r7, r4
 8002554:	2200      	movs	r2, #0
 8002556:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002558:	193b      	adds	r3, r7, r4
 800255a:	2202      	movs	r2, #2
 800255c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 800255e:	193b      	adds	r3, r7, r4
 8002560:	4a1b      	ldr	r2, [pc, #108]	; (80025d0 <MX_GPIO_Init+0xfc>)
 8002562:	0019      	movs	r1, r3
 8002564:	0010      	movs	r0, r2
 8002566:	f001 fc1b 	bl	8003da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800256a:	193b      	adds	r3, r7, r4
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002570:	193b      	adds	r3, r7, r4
 8002572:	2284      	movs	r2, #132	; 0x84
 8002574:	0392      	lsls	r2, r2, #14
 8002576:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	193b      	adds	r3, r7, r4
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800257e:	193a      	adds	r2, r7, r4
 8002580:	2390      	movs	r3, #144	; 0x90
 8002582:	05db      	lsls	r3, r3, #23
 8002584:	0011      	movs	r1, r2
 8002586:	0018      	movs	r0, r3
 8002588:	f001 fc0a 	bl	8003da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Laser_Diode_Pin LD4_Pin */
  GPIO_InitStruct.Pin = Laser_Diode_Pin|LD4_Pin;
 800258c:	0021      	movs	r1, r4
 800258e:	187b      	adds	r3, r7, r1
 8002590:	2290      	movs	r2, #144	; 0x90
 8002592:	0052      	lsls	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002596:	187b      	adds	r3, r7, r1
 8002598:	2201      	movs	r2, #1
 800259a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	187b      	adds	r3, r7, r1
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	187b      	adds	r3, r7, r1
 80025a4:	2200      	movs	r2, #0
 80025a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <MX_GPIO_Init+0xfc>)
 80025ac:	0019      	movs	r1, r3
 80025ae:	0010      	movs	r0, r2
 80025b0:	f001 fbf6 	bl	8003da0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80025b4:	2200      	movs	r2, #0
 80025b6:	2100      	movs	r1, #0
 80025b8:	2005      	movs	r0, #5
 80025ba:	f001 fa3b 	bl	8003a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80025be:	2005      	movs	r0, #5
 80025c0:	f001 fa4d 	bl	8003a5e <HAL_NVIC_EnableIRQ>

}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b009      	add	sp, #36	; 0x24
 80025ca:	bd90      	pop	{r4, r7, pc}
 80025cc:	40021000 	.word	0x40021000
 80025d0:	48000800 	.word	0x48000800

080025d4 <EXTI0_1_IRQHandler>:
/*
 * This method takes is used to set the user transmit mode to 0 and set the ADCRead value
 * to one if the blue push button is pressed so that the ADC is read in the main method.
 */
void EXTI0_1_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
	// Correct debouncing:
	uint32_t current = HAL_GetTick();
 80025da:	f000 fbb9 	bl	8002d50 <HAL_GetTick>
 80025de:	0003      	movs	r3, r0
 80025e0:	603b      	str	r3, [r7, #0]
	for (int i = current; i < (current + 10); i++); //delay by 10 ticks
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	e002      	b.n	80025ee <EXTI0_1_IRQHandler+0x1a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3301      	adds	r3, #1
 80025ec:	607b      	str	r3, [r7, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	330a      	adds	r3, #10
 80025f2:	001a      	movs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d8f6      	bhi.n	80025e8 <EXTI0_1_IRQHandler+0x14>

	mode = 0; // enter "transmit reading mode" when blue pushbutton pressed
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <EXTI0_1_IRQHandler+0x40>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
	ADCRead = 1; //if blue push button pressed,  set ADCRead to 1 so that ADC read once
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <EXTI0_1_IRQHandler+0x44>)
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]

	// Clear interrupt flags
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002606:	2001      	movs	r0, #1
 8002608:	f001 fd74 	bl	80040f4 <HAL_GPIO_EXTI_IRQHandler>
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200003a4 	.word	0x200003a4
 8002618:	2000038c 	.word	0x2000038c

0800261c <pollADC>:

/*
 * This method takes polls the ADC, gets the value and returns the
 * 8 bit unsigned integer value.
 */
uint8_t pollADC(void){
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc, 500);
 8002622:	23fa      	movs	r3, #250	; 0xfa
 8002624:	005a      	lsls	r2, r3, #1
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <pollADC+0x2c>)
 8002628:	0011      	movs	r1, r2
 800262a:	0018      	movs	r0, r3
 800262c:	f000 fd92 	bl	8003154 <HAL_ADC_PollForConversion>
	// get digital value
	uint32_t val = HAL_ADC_GetValue(&hadc);
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <pollADC+0x2c>)
 8002632:	0018      	movs	r0, r3
 8002634:	f000 fe26 	bl	8003284 <HAL_ADC_GetValue>
 8002638:	0003      	movs	r3, r0
 800263a:	607b      	str	r3, [r7, #4]
	return val;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	b2db      	uxtb	r3, r3
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}
 8002648:	200001f8 	.word	0x200001f8

0800264c <decToBinConvert>:
 * This method takes in a decimal value and converts it to its decimal version. The
 * binary bits are then returned.
 * The system pulses light to transmit the data and so needs known logic levels (1s and 0s) to know
 * when to turn the light on and off.
 */
uint8_t* decToBinConvert(uint8_t decimalValue){
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	0002      	movs	r2, r0
 8002654:	1dfb      	adds	r3, r7, #7
 8002656:	701a      	strb	r2, [r3, #0]
	memset(binary, 0, sizeof(binary));
 8002658:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <decToBinConvert+0x6c>)
 800265a:	2208      	movs	r2, #8
 800265c:	2100      	movs	r1, #0
 800265e:	0018      	movs	r0, r3
 8002660:	f003 fc3e 	bl	8005ee0 <memset>
	int counter=0;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
	uint8_t temp = decimalValue;
 8002668:	2313      	movs	r3, #19
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	1dfa      	adds	r2, r7, #7
 800266e:	7812      	ldrb	r2, [r2, #0]
 8002670:	701a      	strb	r2, [r3, #0]
	if(decimalValue<256){
		  int remainder=0; // i is the scaling factor used to store the bit in the correct position.
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]

		  while (temp!=0) {
 8002676:	e014      	b.n	80026a2 <decToBinConvert+0x56>
		    remainder = temp % 2;
 8002678:	2113      	movs	r1, #19
 800267a:	187b      	adds	r3, r7, r1
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2201      	movs	r2, #1
 8002680:	4013      	ands	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
		    temp /= 2; // floors result of division because temp is integer
 8002684:	187b      	adds	r3, r7, r1
 8002686:	187a      	adds	r2, r7, r1
 8002688:	7812      	ldrb	r2, [r2, #0]
 800268a:	0852      	lsrs	r2, r2, #1
 800268c:	701a      	strb	r2, [r3, #0]

		    binary[counter] = remainder; // store the remainder in the binary number
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	b2d9      	uxtb	r1, r3
 8002692:	4a09      	ldr	r2, [pc, #36]	; (80026b8 <decToBinConvert+0x6c>)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	18d3      	adds	r3, r2, r3
 8002698:	1c0a      	adds	r2, r1, #0
 800269a:	701a      	strb	r2, [r3, #0]
		    counter++;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3301      	adds	r3, #1
 80026a0:	617b      	str	r3, [r7, #20]
		  while (temp!=0) {
 80026a2:	2313      	movs	r3, #19
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1e5      	bne.n	8002678 <decToBinConvert+0x2c>
		  }

		  return binary;
 80026ac:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <decToBinConvert+0x6c>)
	}
}
 80026ae:	0018      	movs	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b006      	add	sp, #24
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	200003a8 	.word	0x200003a8

080026bc <transmit>:
/*
 * This method transmits the data by pulsing a light. This transmission follows the LoT message
 * protocol structure:
 * 	Start bit (1)		Mode(0/1)		Message (8bits)			Stop/Continue (0/1)
 */
void transmit(uint8_t *binaryValue){
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	//Calc delay between transmits
	int delay = (1/RATE) *1000;
 80026c4:	23fa      	movs	r3, #250	; 0xfa
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	60fb      	str	r3, [r7, #12]

	// Transmit START Bit
	HAL_GPIO_WritePin(GPIOC, Laser_Diode_Pin,START);
 80026ca:	4b37      	ldr	r3, [pc, #220]	; (80027a8 <transmit+0xec>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	2120      	movs	r1, #32
 80026d0:	0018      	movs	r0, r3
 80026d2:	f001 fcf2 	bl	80040ba <HAL_GPIO_WritePin>
	HAL_Delay(delay);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 fb43 	bl	8002d64 <HAL_Delay>
	// Transmit mode and message
	if(mode){ //if mode ==1, enter counter transmission mode
 80026de:	4b33      	ldr	r3, [pc, #204]	; (80027ac <transmit+0xf0>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d032      	beq.n	800274c <transmit+0x90>
		// Transmit MODE bit
		// on board blue led is also switched on as visual indication that counter mode has been initiated
		HAL_GPIO_WritePin(GPIOC, Laser_Diode_Pin|LD4_Pin,COUNTER_MODE);
 80026e6:	2390      	movs	r3, #144	; 0x90
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	482f      	ldr	r0, [pc, #188]	; (80027a8 <transmit+0xec>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	0019      	movs	r1, r3
 80026f0:	f001 fce3 	bl	80040ba <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 fb34 	bl	8002d64 <HAL_Delay>

		// Transmit MESSAGE: the 8 bit binary counter value
		for(int i =7;i>=0;i--){
 80026fc:	2307      	movs	r3, #7
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	e00f      	b.n	8002722 <transmit+0x66>
			HAL_GPIO_WritePin(GPIOC, Laser_Diode_Pin,*(binaryValue+i));
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	18d3      	adds	r3, r2, r3
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	4827      	ldr	r0, [pc, #156]	; (80027a8 <transmit+0xec>)
 800270c:	001a      	movs	r2, r3
 800270e:	2120      	movs	r1, #32
 8002710:	f001 fcd3 	bl	80040ba <HAL_GPIO_WritePin>
			HAL_Delay(delay);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	0018      	movs	r0, r3
 8002718:	f000 fb24 	bl	8002d64 <HAL_Delay>
		for(int i =7;i>=0;i--){
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	3b01      	subs	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b00      	cmp	r3, #0
 8002726:	daec      	bge.n	8002702 <transmit+0x46>
		}

		// Transmit STOP/continue bit
		HAL_GPIO_WritePin(GPIOC, Laser_Diode_Pin,STOP);
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <transmit+0xec>)
 800272a:	2200      	movs	r2, #0
 800272c:	2120      	movs	r1, #32
 800272e:	0018      	movs	r0, r3
 8002730:	f001 fcc3 	bl	80040ba <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	0018      	movs	r0, r3
 8002738:	f000 fb14 	bl	8002d64 <HAL_Delay>


		HAL_GPIO_WritePin(GPIOC, Laser_Diode_Pin|LD4_Pin,GPIO_PIN_RESET); // Reset GPIO state and on board blue led
 800273c:	2390      	movs	r3, #144	; 0x90
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4819      	ldr	r0, [pc, #100]	; (80027a8 <transmit+0xec>)
 8002742:	2200      	movs	r2, #0
 8002744:	0019      	movs	r1, r3
 8002746:	f001 fcb8 	bl	80040ba <HAL_GPIO_WritePin>
		// Transmit STOP/continue bit
		HAL_GPIO_WritePin(GPIOC, Laser_Diode_Pin,STOP);
		HAL_Delay(delay);
	}

}
 800274a:	e029      	b.n	80027a0 <transmit+0xe4>
		HAL_GPIO_WritePin(GPIOC, Laser_Diode_Pin,READING_MODE);
 800274c:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <transmit+0xec>)
 800274e:	2200      	movs	r2, #0
 8002750:	2120      	movs	r1, #32
 8002752:	0018      	movs	r0, r3
 8002754:	f001 fcb1 	bl	80040ba <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	0018      	movs	r0, r3
 800275c:	f000 fb02 	bl	8002d64 <HAL_Delay>
		for(int i =7;i>=0;i--){
 8002760:	2307      	movs	r3, #7
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	e00f      	b.n	8002786 <transmit+0xca>
			HAL_GPIO_WritePin(GPIOC, Laser_Diode_Pin,*(binaryValue+i));
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	18d3      	adds	r3, r2, r3
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	480e      	ldr	r0, [pc, #56]	; (80027a8 <transmit+0xec>)
 8002770:	001a      	movs	r2, r3
 8002772:	2120      	movs	r1, #32
 8002774:	f001 fca1 	bl	80040ba <HAL_GPIO_WritePin>
			HAL_Delay(delay);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	0018      	movs	r0, r3
 800277c:	f000 faf2 	bl	8002d64 <HAL_Delay>
		for(int i =7;i>=0;i--){
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	3b01      	subs	r3, #1
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	daec      	bge.n	8002766 <transmit+0xaa>
		HAL_GPIO_WritePin(GPIOC, Laser_Diode_Pin,STOP);
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <transmit+0xec>)
 800278e:	2200      	movs	r2, #0
 8002790:	2120      	movs	r1, #32
 8002792:	0018      	movs	r0, r3
 8002794:	f001 fc91 	bl	80040ba <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	0018      	movs	r0, r3
 800279c:	f000 fae2 	bl	8002d64 <HAL_Delay>
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b006      	add	sp, #24
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	48000800 	.word	0x48000800
 80027ac:	200003a4 	.word	0x200003a4

080027b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b4:	b672      	cpsid	i
}
 80027b6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <Error_Handler+0x8>
	...

080027bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_MspInit+0x44>)
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <HAL_MspInit+0x44>)
 80027c8:	2101      	movs	r1, #1
 80027ca:	430a      	orrs	r2, r1
 80027cc:	619a      	str	r2, [r3, #24]
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <HAL_MspInit+0x44>)
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2201      	movs	r2, #1
 80027d4:	4013      	ands	r3, r2
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_MspInit+0x44>)
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <HAL_MspInit+0x44>)
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	0549      	lsls	r1, r1, #21
 80027e4:	430a      	orrs	r2, r1
 80027e6:	61da      	str	r2, [r3, #28]
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_MspInit+0x44>)
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	055b      	lsls	r3, r3, #21
 80027f0:	4013      	ands	r3, r2
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b002      	add	sp, #8
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	40021000 	.word	0x40021000

08002804 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b08b      	sub	sp, #44	; 0x2c
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	2414      	movs	r4, #20
 800280e:	193b      	adds	r3, r7, r4
 8002810:	0018      	movs	r0, r3
 8002812:	2314      	movs	r3, #20
 8002814:	001a      	movs	r2, r3
 8002816:	2100      	movs	r1, #0
 8002818:	f003 fb62 	bl	8005ee0 <memset>
  if(hadc->Instance==ADC1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a31      	ldr	r2, [pc, #196]	; (80028e8 <HAL_ADC_MspInit+0xe4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d15b      	bne.n	80028de <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002826:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_ADC_MspInit+0xe8>)
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	4b30      	ldr	r3, [pc, #192]	; (80028ec <HAL_ADC_MspInit+0xe8>)
 800282c:	2180      	movs	r1, #128	; 0x80
 800282e:	0089      	lsls	r1, r1, #2
 8002830:	430a      	orrs	r2, r1
 8002832:	619a      	str	r2, [r3, #24]
 8002834:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <HAL_ADC_MspInit+0xe8>)
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <HAL_ADC_MspInit+0xe8>)
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <HAL_ADC_MspInit+0xe8>)
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	0289      	lsls	r1, r1, #10
 800284c:	430a      	orrs	r2, r1
 800284e:	615a      	str	r2, [r3, #20]
 8002850:	4b26      	ldr	r3, [pc, #152]	; (80028ec <HAL_ADC_MspInit+0xe8>)
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	029b      	lsls	r3, r3, #10
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800285e:	193b      	adds	r3, r7, r4
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002864:	193b      	adds	r3, r7, r4
 8002866:	2203      	movs	r2, #3
 8002868:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	193b      	adds	r3, r7, r4
 800286c:	2200      	movs	r2, #0
 800286e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002870:	193a      	adds	r2, r7, r4
 8002872:	2390      	movs	r3, #144	; 0x90
 8002874:	05db      	lsls	r3, r3, #23
 8002876:	0011      	movs	r1, r2
 8002878:	0018      	movs	r0, r3
 800287a:	f001 fa91 	bl	8003da0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_ADC_MspInit+0xec>)
 8002880:	4a1c      	ldr	r2, [pc, #112]	; (80028f4 <HAL_ADC_MspInit+0xf0>)
 8002882:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002884:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <HAL_ADC_MspInit+0xec>)
 8002886:	2200      	movs	r2, #0
 8002888:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800288a:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_ADC_MspInit+0xec>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <HAL_ADC_MspInit+0xec>)
 8002892:	2280      	movs	r2, #128	; 0x80
 8002894:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002896:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <HAL_ADC_MspInit+0xec>)
 8002898:	2280      	movs	r2, #128	; 0x80
 800289a:	0052      	lsls	r2, r2, #1
 800289c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <HAL_ADC_MspInit+0xec>)
 80028a0:	2280      	movs	r2, #128	; 0x80
 80028a2:	00d2      	lsls	r2, r2, #3
 80028a4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_ADC_MspInit+0xec>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80028ac:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <HAL_ADC_MspInit+0xec>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80028b2:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <HAL_ADC_MspInit+0xec>)
 80028b4:	0018      	movs	r0, r3
 80028b6:	f001 f8ef 	bl	8003a98 <HAL_DMA_Init>
 80028ba:	1e03      	subs	r3, r0, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80028be:	f7ff ff77 	bl	80027b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <HAL_ADC_MspInit+0xec>)
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_ADC_MspInit+0xec>)
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80028ce:	2200      	movs	r2, #0
 80028d0:	2100      	movs	r1, #0
 80028d2:	200c      	movs	r0, #12
 80028d4:	f001 f8ae 	bl	8003a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80028d8:	200c      	movs	r0, #12
 80028da:	f001 f8c0 	bl	8003a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b00b      	add	sp, #44	; 0x2c
 80028e4:	bd90      	pop	{r4, r7, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	40012400 	.word	0x40012400
 80028ec:	40021000 	.word	0x40021000
 80028f0:	20000238 	.word	0x20000238
 80028f4:	40020008 	.word	0x40020008

080028f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a09      	ldr	r2, [pc, #36]	; (800292c <HAL_TIM_Base_MspInit+0x34>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10b      	bne.n	8002922 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_TIM_Base_MspInit+0x38>)
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_TIM_Base_MspInit+0x38>)
 8002910:	2102      	movs	r1, #2
 8002912:	430a      	orrs	r2, r1
 8002914:	61da      	str	r2, [r3, #28]
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_TIM_Base_MspInit+0x38>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	2202      	movs	r2, #2
 800291c:	4013      	ands	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b004      	add	sp, #16
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	40000400 	.word	0x40000400
 8002930:	40021000 	.word	0x40021000

08002934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b08b      	sub	sp, #44	; 0x2c
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	2414      	movs	r4, #20
 800293e:	193b      	adds	r3, r7, r4
 8002940:	0018      	movs	r0, r3
 8002942:	2314      	movs	r3, #20
 8002944:	001a      	movs	r2, r3
 8002946:	2100      	movs	r1, #0
 8002948:	f003 faca 	bl	8005ee0 <memset>
  if(huart->Instance==USART2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a33      	ldr	r2, [pc, #204]	; (8002a20 <HAL_UART_MspInit+0xec>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d160      	bne.n	8002a18 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002956:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <HAL_UART_MspInit+0xf0>)
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	4b32      	ldr	r3, [pc, #200]	; (8002a24 <HAL_UART_MspInit+0xf0>)
 800295c:	2180      	movs	r1, #128	; 0x80
 800295e:	0289      	lsls	r1, r1, #10
 8002960:	430a      	orrs	r2, r1
 8002962:	61da      	str	r2, [r3, #28]
 8002964:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <HAL_UART_MspInit+0xf0>)
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	029b      	lsls	r3, r3, #10
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <HAL_UART_MspInit+0xf0>)
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_UART_MspInit+0xf0>)
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	0289      	lsls	r1, r1, #10
 800297c:	430a      	orrs	r2, r1
 800297e:	615a      	str	r2, [r3, #20]
 8002980:	4b28      	ldr	r3, [pc, #160]	; (8002a24 <HAL_UART_MspInit+0xf0>)
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	029b      	lsls	r3, r3, #10
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800298e:	0021      	movs	r1, r4
 8002990:	187b      	adds	r3, r7, r1
 8002992:	220c      	movs	r2, #12
 8002994:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	187b      	adds	r3, r7, r1
 8002998:	2202      	movs	r2, #2
 800299a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	187b      	adds	r3, r7, r1
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029a2:	187b      	adds	r3, r7, r1
 80029a4:	2203      	movs	r2, #3
 80029a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	2201      	movs	r2, #1
 80029ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ae:	187a      	adds	r2, r7, r1
 80029b0:	2390      	movs	r3, #144	; 0x90
 80029b2:	05db      	lsls	r3, r3, #23
 80029b4:	0011      	movs	r1, r2
 80029b6:	0018      	movs	r0, r3
 80029b8:	f001 f9f2 	bl	8003da0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80029bc:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <HAL_UART_MspInit+0xf4>)
 80029be:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <HAL_UART_MspInit+0xf8>)
 80029c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_UART_MspInit+0xf4>)
 80029c4:	2210      	movs	r2, #16
 80029c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_UART_MspInit+0xf4>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029ce:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_UART_MspInit+0xf4>)
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <HAL_UART_MspInit+0xf4>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029da:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <HAL_UART_MspInit+0xf4>)
 80029dc:	2200      	movs	r2, #0
 80029de:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_UART_MspInit+0xf4>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <HAL_UART_MspInit+0xf4>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80029ec:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <HAL_UART_MspInit+0xf4>)
 80029ee:	0018      	movs	r0, r3
 80029f0:	f001 f852 	bl	8003a98 <HAL_DMA_Init>
 80029f4:	1e03      	subs	r3, r0, #0
 80029f6:	d001      	beq.n	80029fc <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80029f8:	f7ff feda 	bl	80027b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <HAL_UART_MspInit+0xf4>)
 8002a00:	66da      	str	r2, [r3, #108]	; 0x6c
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_UART_MspInit+0xf4>)
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	201c      	movs	r0, #28
 8002a0e:	f001 f811 	bl	8003a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a12:	201c      	movs	r0, #28
 8002a14:	f001 f823 	bl	8003a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a18:	46c0      	nop			; (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b00b      	add	sp, #44	; 0x2c
 8002a1e:	bd90      	pop	{r4, r7, pc}
 8002a20:	40004400 	.word	0x40004400
 8002a24:	40021000 	.word	0x40021000
 8002a28:	20000348 	.word	0x20000348
 8002a2c:	40020044 	.word	0x40020044

08002a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <NMI_Handler+0x4>

08002a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a3a:	e7fe      	b.n	8002a3a <HardFault_Handler+0x4>

08002a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a54:	f000 f96a 	bl	8002d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <DMA1_Channel1_IRQHandler>:
  */
/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <DMA1_Channel1_IRQHandler+0x14>)
 8002a66:	0018      	movs	r0, r3
 8002a68:	f001 f8db 	bl	8003c22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	20000238 	.word	0x20000238

08002a78 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002a7c:	4b03      	ldr	r3, [pc, #12]	; (8002a8c <DMA1_Channel4_5_IRQHandler+0x14>)
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f001 f8cf 	bl	8003c22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	20000348 	.word	0x20000348

08002a90 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <ADC1_COMP_IRQHandler+0x14>)
 8002a96:	0018      	movs	r0, r3
 8002a98:	f000 fc00 	bl	800329c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	200001f8 	.word	0x200001f8

08002aa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <USART2_IRQHandler+0x14>)
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f002 fb4c 	bl	800514c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ab4:	46c0      	nop			; (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	200002c4 	.word	0x200002c4

08002ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
	return 1;
 8002ac4:	2301      	movs	r3, #1
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <_kill>:

int _kill(int pid, int sig)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ad6:	f003 f9d9 	bl	8005e8c <__errno>
 8002ada:	0003      	movs	r3, r0
 8002adc:	2216      	movs	r2, #22
 8002ade:	601a      	str	r2, [r3, #0]
	return -1;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	425b      	negs	r3, r3
}
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b002      	add	sp, #8
 8002aea:	bd80      	pop	{r7, pc}

08002aec <_exit>:

void _exit (int status)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002af4:	2301      	movs	r3, #1
 8002af6:	425a      	negs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	0011      	movs	r1, r2
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7ff ffe5 	bl	8002acc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b02:	e7fe      	b.n	8002b02 <_exit+0x16>

08002b04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	e00a      	b.n	8002b2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b16:	e000      	b.n	8002b1a <_read+0x16>
 8002b18:	bf00      	nop
 8002b1a:	0001      	movs	r1, r0
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	60ba      	str	r2, [r7, #8]
 8002b22:	b2ca      	uxtb	r2, r1
 8002b24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	dbf0      	blt.n	8002b16 <_read+0x12>
	}

return len;
 8002b34:	687b      	ldr	r3, [r7, #4]
}
 8002b36:	0018      	movs	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b006      	add	sp, #24
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b086      	sub	sp, #24
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	e009      	b.n	8002b64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	60ba      	str	r2, [r7, #8]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	e000      	b.n	8002b5e <_write+0x20>
 8002b5c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3301      	adds	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	dbf1      	blt.n	8002b50 <_write+0x12>
	}
	return len;
 8002b6c:	687b      	ldr	r3, [r7, #4]
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b006      	add	sp, #24
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <_close>:

int _close(int file)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
	return -1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	425b      	negs	r3, r3
}
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b002      	add	sp, #8
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2280      	movs	r2, #128	; 0x80
 8002b98:	0192      	lsls	r2, r2, #6
 8002b9a:	605a      	str	r2, [r3, #4]
	return 0;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b002      	add	sp, #8
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <_isatty>:

int _isatty(int file)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
	return 1;
 8002bae:	2301      	movs	r3, #1
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b002      	add	sp, #8
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
	return 0;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b004      	add	sp, #16
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd8:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <_sbrk+0x5c>)
 8002bda:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <_sbrk+0x60>)
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <_sbrk+0x64>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bec:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <_sbrk+0x64>)
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <_sbrk+0x68>)
 8002bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <_sbrk+0x64>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	18d3      	adds	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d207      	bcs.n	8002c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c00:	f003 f944 	bl	8005e8c <__errno>
 8002c04:	0003      	movs	r3, r0
 8002c06:	220c      	movs	r2, #12
 8002c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	425b      	negs	r3, r3
 8002c0e:	e009      	b.n	8002c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <_sbrk+0x64>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c16:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <_sbrk+0x64>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	18d2      	adds	r2, r2, r3
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <_sbrk+0x64>)
 8002c20:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c22:	68fb      	ldr	r3, [r7, #12]
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b006      	add	sp, #24
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20002000 	.word	0x20002000
 8002c30:	00000400 	.word	0x00000400
 8002c34:	200003b4 	.word	0x200003b4
 8002c38:	200003d0 	.word	0x200003d0

08002c3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c48:	480d      	ldr	r0, [pc, #52]	; (8002c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c4c:	480d      	ldr	r0, [pc, #52]	; (8002c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c4e:	490e      	ldr	r1, [pc, #56]	; (8002c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c50:	4a0e      	ldr	r2, [pc, #56]	; (8002c8c <LoopForever+0xe>)
  movs r3, #0
 8002c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c54:	e002      	b.n	8002c5c <LoopCopyDataInit>

08002c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5a:	3304      	adds	r3, #4

08002c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c60:	d3f9      	bcc.n	8002c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c62:	4a0b      	ldr	r2, [pc, #44]	; (8002c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c64:	4c0b      	ldr	r4, [pc, #44]	; (8002c94 <LoopForever+0x16>)
  movs r3, #0
 8002c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c68:	e001      	b.n	8002c6e <LoopFillZerobss>

08002c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c6c:	3204      	adds	r2, #4

08002c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c70:	d3fb      	bcc.n	8002c6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002c72:	f7ff ffe3 	bl	8002c3c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002c76:	f003 f90f 	bl	8005e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c7a:	f7ff fa19 	bl	80020b0 <main>

08002c7e <LoopForever>:

LoopForever:
    b LoopForever
 8002c7e:	e7fe      	b.n	8002c7e <LoopForever>
  ldr   r0, =_estack
 8002c80:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c88:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002c8c:	0800931c 	.word	0x0800931c
  ldr r2, =_sbss
 8002c90:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002c94:	200003cc 	.word	0x200003cc

08002c98 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <CEC_CAN_IRQHandler>
	...

08002c9c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <HAL_Init+0x24>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_Init+0x24>)
 8002ca6:	2110      	movs	r1, #16
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f000 f809 	bl	8002cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb2:	f7ff fd83 	bl	80027bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	0018      	movs	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	40022000 	.word	0x40022000

08002cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc4:	b590      	push	{r4, r7, lr}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_InitTick+0x5c>)
 8002cce:	681c      	ldr	r4, [r3, #0]
 8002cd0:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <HAL_InitTick+0x60>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	23fa      	movs	r3, #250	; 0xfa
 8002cd8:	0098      	lsls	r0, r3, #2
 8002cda:	f7fd fa31 	bl	8000140 <__udivsi3>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	0019      	movs	r1, r3
 8002ce2:	0020      	movs	r0, r4
 8002ce4:	f7fd fa2c 	bl	8000140 <__udivsi3>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	0018      	movs	r0, r3
 8002cec:	f000 fec7 	bl	8003a7e <HAL_SYSTICK_Config>
 8002cf0:	1e03      	subs	r3, r0, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e00f      	b.n	8002d18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d80b      	bhi.n	8002d16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	2301      	movs	r3, #1
 8002d02:	425b      	negs	r3, r3
 8002d04:	2200      	movs	r2, #0
 8002d06:	0018      	movs	r0, r3
 8002d08:	f000 fe94 	bl	8003a34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_InitTick+0x64>)
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e000      	b.n	8002d18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b003      	add	sp, #12
 8002d1e:	bd90      	pop	{r4, r7, pc}
 8002d20:	20000000 	.word	0x20000000
 8002d24:	20000008 	.word	0x20000008
 8002d28:	20000004 	.word	0x20000004

08002d2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_IncTick+0x1c>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	001a      	movs	r2, r3
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_IncTick+0x20>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	18d2      	adds	r2, r2, r3
 8002d3c:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <HAL_IncTick+0x20>)
 8002d3e:	601a      	str	r2, [r3, #0]
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	20000008 	.word	0x20000008
 8002d4c:	200003b8 	.word	0x200003b8

08002d50 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  return uwTick;
 8002d54:	4b02      	ldr	r3, [pc, #8]	; (8002d60 <HAL_GetTick+0x10>)
 8002d56:	681b      	ldr	r3, [r3, #0]
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	200003b8 	.word	0x200003b8

08002d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7ff fff0 	bl	8002d50 <HAL_GetTick>
 8002d70:	0003      	movs	r3, r0
 8002d72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	d005      	beq.n	8002d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_Delay+0x44>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	001a      	movs	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	189b      	adds	r3, r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	f7ff ffe0 	bl	8002d50 <HAL_GetTick>
 8002d90:	0002      	movs	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d8f7      	bhi.n	8002d8c <HAL_Delay+0x28>
  {
  }
}
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b004      	add	sp, #16
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	20000008 	.word	0x20000008

08002dac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db4:	230f      	movs	r3, #15
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e125      	b.n	8003016 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10a      	bne.n	8002de8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2234      	movs	r2, #52	; 0x34
 8002ddc:	2100      	movs	r1, #0
 8002dde:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7ff fd0e 	bl	8002804 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	2210      	movs	r2, #16
 8002dee:	4013      	ands	r3, r2
 8002df0:	d000      	beq.n	8002df4 <HAL_ADC_Init+0x48>
 8002df2:	e103      	b.n	8002ffc <HAL_ADC_Init+0x250>
 8002df4:	230f      	movs	r3, #15
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d000      	beq.n	8002e00 <HAL_ADC_Init+0x54>
 8002dfe:	e0fd      	b.n	8002ffc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2204      	movs	r2, #4
 8002e08:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002e0a:	d000      	beq.n	8002e0e <HAL_ADC_Init+0x62>
 8002e0c:	e0f6      	b.n	8002ffc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	4a83      	ldr	r2, [pc, #524]	; (8003020 <HAL_ADC_Init+0x274>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	2202      	movs	r2, #2
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2203      	movs	r2, #3
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d112      	bne.n	8002e52 <HAL_ADC_Init+0xa6>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2201      	movs	r2, #1
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d009      	beq.n	8002e4e <HAL_ADC_Init+0xa2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	401a      	ands	r2, r3
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_Init+0xa6>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <HAL_ADC_Init+0xa8>
 8002e52:	2300      	movs	r3, #0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d116      	bne.n	8002e86 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2218      	movs	r2, #24
 8002e60:	4393      	bics	r3, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	0899      	lsrs	r1, r3, #2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4964      	ldr	r1, [pc, #400]	; (8003024 <HAL_ADC_Init+0x278>)
 8002e92:	400a      	ands	r2, r1
 8002e94:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7e1b      	ldrb	r3, [r3, #24]
 8002e9a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	7e5b      	ldrb	r3, [r3, #25]
 8002ea0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ea2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7e9b      	ldrb	r3, [r3, #26]
 8002ea8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002eaa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d002      	beq.n	8002eba <HAL_ADC_Init+0x10e>
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	015b      	lsls	r3, r3, #5
 8002eb8:	e000      	b.n	8002ebc <HAL_ADC_Init+0x110>
 8002eba:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ebc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002ec2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d101      	bne.n	8002ed0 <HAL_ADC_Init+0x124>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	e000      	b.n	8002ed2 <HAL_ADC_Init+0x126>
 8002ed0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002ed2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2124      	movs	r1, #36	; 0x24
 8002ed8:	5c5b      	ldrb	r3, [r3, r1]
 8002eda:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002edc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	7edb      	ldrb	r3, [r3, #27]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d115      	bne.n	8002f18 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	7e9b      	ldrb	r3, [r3, #26]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2280      	movs	r2, #128	; 0x80
 8002ef8:	0252      	lsls	r2, r2, #9
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	e00b      	b.n	8002f18 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	2220      	movs	r2, #32
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	2201      	movs	r2, #1
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	23c2      	movs	r3, #194	; 0xc2
 8002f1e:	33ff      	adds	r3, #255	; 0xff
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d007      	beq.n	8002f34 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68d9      	ldr	r1, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	055b      	lsls	r3, r3, #21
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d01b      	beq.n	8002f88 <HAL_ADC_Init+0x1dc>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d017      	beq.n	8002f88 <HAL_ADC_Init+0x1dc>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d013      	beq.n	8002f88 <HAL_ADC_Init+0x1dc>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d00f      	beq.n	8002f88 <HAL_ADC_Init+0x1dc>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d00b      	beq.n	8002f88 <HAL_ADC_Init+0x1dc>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	2b05      	cmp	r3, #5
 8002f76:	d007      	beq.n	8002f88 <HAL_ADC_Init+0x1dc>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	2b06      	cmp	r3, #6
 8002f7e:	d003      	beq.n	8002f88 <HAL_ADC_Init+0x1dc>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	2b07      	cmp	r3, #7
 8002f86:	d112      	bne.n	8002fae <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2107      	movs	r1, #7
 8002f94:	438a      	bics	r2, r1
 8002f96:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6959      	ldr	r1, [r3, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	2207      	movs	r2, #7
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <HAL_ADC_Init+0x27c>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	2203      	movs	r2, #3
 8002fca:	4393      	bics	r3, r2
 8002fcc:	2201      	movs	r2, #1
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002fd4:	e01c      	b.n	8003010 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	2212      	movs	r2, #18
 8002fdc:	4393      	bics	r3, r2
 8002fde:	2210      	movs	r2, #16
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	2201      	movs	r2, #1
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002ff2:	230f      	movs	r3, #15
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ffa:	e009      	b.n	8003010 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	2210      	movs	r2, #16
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003008:	230f      	movs	r3, #15
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003010:	230f      	movs	r3, #15
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	781b      	ldrb	r3, [r3, #0]
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b004      	add	sp, #16
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	fffffefd 	.word	0xfffffefd
 8003024:	fffe0219 	.word	0xfffe0219
 8003028:	833fffe7 	.word	0x833fffe7

0800302c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003034:	230f      	movs	r3, #15
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2204      	movs	r2, #4
 8003044:	4013      	ands	r3, r2
 8003046:	d138      	bne.n	80030ba <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2234      	movs	r2, #52	; 0x34
 800304c:	5c9b      	ldrb	r3, [r3, r2]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_ADC_Start+0x2a>
 8003052:	2302      	movs	r3, #2
 8003054:	e038      	b.n	80030c8 <HAL_ADC_Start+0x9c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2234      	movs	r2, #52	; 0x34
 800305a:	2101      	movs	r1, #1
 800305c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7e5b      	ldrb	r3, [r3, #25]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d007      	beq.n	8003076 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003066:	230f      	movs	r3, #15
 8003068:	18fc      	adds	r4, r7, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	0018      	movs	r0, r3
 800306e:	f000 faf3 	bl	8003658 <ADC_Enable>
 8003072:	0003      	movs	r3, r0
 8003074:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003076:	230f      	movs	r3, #15
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d120      	bne.n	80030c2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	4a12      	ldr	r2, [pc, #72]	; (80030d0 <HAL_ADC_Start+0xa4>)
 8003086:	4013      	ands	r3, r2
 8003088:	2280      	movs	r2, #128	; 0x80
 800308a:	0052      	lsls	r2, r2, #1
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2234      	movs	r2, #52	; 0x34
 800309c:	2100      	movs	r1, #0
 800309e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	221c      	movs	r2, #28
 80030a6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2104      	movs	r1, #4
 80030b4:	430a      	orrs	r2, r1
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	e003      	b.n	80030c2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030ba:	230f      	movs	r3, #15
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	2202      	movs	r2, #2
 80030c0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030c2:	230f      	movs	r3, #15
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	781b      	ldrb	r3, [r3, #0]
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b005      	add	sp, #20
 80030ce:	bd90      	pop	{r4, r7, pc}
 80030d0:	fffff0fe 	.word	0xfffff0fe

080030d4 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80030d4:	b5b0      	push	{r4, r5, r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030dc:	230f      	movs	r3, #15
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2234      	movs	r2, #52	; 0x34
 80030e8:	5c9b      	ldrb	r3, [r3, r2]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_Stop+0x1e>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e029      	b.n	8003146 <HAL_ADC_Stop+0x72>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2234      	movs	r2, #52	; 0x34
 80030f6:	2101      	movs	r1, #1
 80030f8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80030fa:	250f      	movs	r5, #15
 80030fc:	197c      	adds	r4, r7, r5
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	0018      	movs	r0, r3
 8003102:	f000 fb9e 	bl	8003842 <ADC_ConversionStop>
 8003106:	0003      	movs	r3, r0
 8003108:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800310a:	197b      	adds	r3, r7, r5
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d112      	bne.n	8003138 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003112:	197c      	adds	r4, r7, r5
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	0018      	movs	r0, r3
 8003118:	f000 fb22 	bl	8003760 <ADC_Disable>
 800311c:	0003      	movs	r3, r0
 800311e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003120:	197b      	adds	r3, r7, r5
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	4a08      	ldr	r2, [pc, #32]	; (8003150 <HAL_ADC_Stop+0x7c>)
 800312e:	4013      	ands	r3, r2
 8003130:	2201      	movs	r2, #1
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2234      	movs	r2, #52	; 0x34
 800313c:	2100      	movs	r1, #0
 800313e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003140:	230f      	movs	r3, #15
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	781b      	ldrb	r3, [r3, #0]
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	b004      	add	sp, #16
 800314c:	bdb0      	pop	{r4, r5, r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	fffffefe 	.word	0xfffffefe

08003154 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	2b08      	cmp	r3, #8
 8003164:	d102      	bne.n	800316c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003166:	2308      	movs	r3, #8
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	e014      	b.n	8003196 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	4013      	ands	r3, r2
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10b      	bne.n	8003192 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	2220      	movs	r2, #32
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2234      	movs	r2, #52	; 0x34
 800318a:	2100      	movs	r1, #0
 800318c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e071      	b.n	8003276 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003192:	230c      	movs	r3, #12
 8003194:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003196:	f7ff fddb 	bl	8002d50 <HAL_GetTick>
 800319a:	0003      	movs	r3, r0
 800319c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800319e:	e01f      	b.n	80031e0 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	3301      	adds	r3, #1
 80031a4:	d01c      	beq.n	80031e0 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <HAL_ADC_PollForConversion+0x68>
 80031ac:	f7ff fdd0 	bl	8002d50 <HAL_GetTick>
 80031b0:	0002      	movs	r2, r0
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d211      	bcs.n	80031e0 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4013      	ands	r3, r2
 80031c6:	d10b      	bne.n	80031e0 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	2204      	movs	r2, #4
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2234      	movs	r2, #52	; 0x34
 80031d8:	2100      	movs	r1, #0
 80031da:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e04a      	b.n	8003276 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4013      	ands	r3, r2
 80031ea:	d0d9      	beq.n	80031a0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	0092      	lsls	r2, r2, #2
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	23c0      	movs	r3, #192	; 0xc0
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	4013      	ands	r3, r2
 8003206:	d12d      	bne.n	8003264 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800320c:	2b00      	cmp	r3, #0
 800320e:	d129      	bne.n	8003264 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2208      	movs	r2, #8
 8003218:	4013      	ands	r3, r2
 800321a:	2b08      	cmp	r3, #8
 800321c:	d122      	bne.n	8003264 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2204      	movs	r2, #4
 8003226:	4013      	ands	r3, r2
 8003228:	d110      	bne.n	800324c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	210c      	movs	r1, #12
 8003236:	438a      	bics	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	4a10      	ldr	r2, [pc, #64]	; (8003280 <HAL_ADC_PollForConversion+0x12c>)
 8003240:	4013      	ands	r3, r2
 8003242:	2201      	movs	r2, #1
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	639a      	str	r2, [r3, #56]	; 0x38
 800324a:	e00b      	b.n	8003264 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	2220      	movs	r2, #32
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	2201      	movs	r2, #1
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7e1b      	ldrb	r3, [r3, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d103      	bne.n	8003274 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	220c      	movs	r2, #12
 8003272:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	0018      	movs	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	b004      	add	sp, #16
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	fffffefe 	.word	0xfffffefe

08003284 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b002      	add	sp, #8
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2204      	movs	r2, #4
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d106      	bne.n	80032c0 <HAL_ADC_IRQHandler+0x24>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2204      	movs	r2, #4
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d00d      	beq.n	80032dc <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2208      	movs	r2, #8
 80032c8:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d14f      	bne.n	800336e <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2208      	movs	r2, #8
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d148      	bne.n	800336e <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	2210      	movs	r2, #16
 80032e2:	4013      	ands	r3, r2
 80032e4:	d106      	bne.n	80032f4 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ea:	2280      	movs	r2, #128	; 0x80
 80032ec:	0092      	lsls	r2, r2, #2
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	23c0      	movs	r3, #192	; 0xc0
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	4013      	ands	r3, r2
 8003300:	d12d      	bne.n	800335e <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003306:	2b00      	cmp	r3, #0
 8003308:	d129      	bne.n	800335e <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2208      	movs	r2, #8
 8003312:	4013      	ands	r3, r2
 8003314:	2b08      	cmp	r3, #8
 8003316:	d122      	bne.n	800335e <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2204      	movs	r2, #4
 8003320:	4013      	ands	r3, r2
 8003322:	d110      	bne.n	8003346 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	210c      	movs	r1, #12
 8003330:	438a      	bics	r2, r1
 8003332:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	4a33      	ldr	r2, [pc, #204]	; (8003408 <HAL_ADC_IRQHandler+0x16c>)
 800333a:	4013      	ands	r3, r2
 800333c:	2201      	movs	r2, #1
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
 8003344:	e00b      	b.n	800335e <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	2220      	movs	r2, #32
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003356:	2201      	movs	r2, #1
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	0018      	movs	r0, r3
 8003362:	f000 f853 	bl	800340c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	220c      	movs	r2, #12
 800336c:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2280      	movs	r2, #128	; 0x80
 8003376:	4013      	ands	r3, r2
 8003378:	2b80      	cmp	r3, #128	; 0x80
 800337a:	d115      	bne.n	80033a8 <HAL_ADC_IRQHandler+0x10c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2280      	movs	r2, #128	; 0x80
 8003384:	4013      	ands	r3, r2
 8003386:	2b80      	cmp	r3, #128	; 0x80
 8003388:	d10e      	bne.n	80033a8 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	2280      	movs	r2, #128	; 0x80
 8003390:	0252      	lsls	r2, r2, #9
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	0018      	movs	r0, r3
 800339c:	f000 f83e 	bl	800341c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2210      	movs	r2, #16
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d123      	bne.n	80033fe <HAL_ADC_IRQHandler+0x162>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2210      	movs	r2, #16
 80033be:	4013      	ands	r3, r2
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d11c      	bne.n	80033fe <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d006      	beq.n	80033da <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d10d      	bne.n	80033f6 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	2202      	movs	r2, #2
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2210      	movs	r2, #16
 80033ec:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 f81b 	bl	800342c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2210      	movs	r2, #16
 80033fc:	601a      	str	r2, [r3, #0]
  }

}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46bd      	mov	sp, r7
 8003402:	b002      	add	sp, #8
 8003404:	bd80      	pop	{r7, pc}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	fffffefe 	.word	0xfffffefe

0800340c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	46bd      	mov	sp, r7
 8003418:	b002      	add	sp, #8
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003424:	46c0      	nop			; (mov r8, r8)
 8003426:	46bd      	mov	sp, r7
 8003428:	b002      	add	sp, #8
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b002      	add	sp, #8
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003446:	230f      	movs	r3, #15
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	055b      	lsls	r3, r3, #21
 800345a:	429a      	cmp	r2, r3
 800345c:	d011      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x46>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d00d      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x46>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	2b02      	cmp	r3, #2
 800346c:	d009      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x46>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	2b03      	cmp	r3, #3
 8003474:	d005      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x46>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	2b04      	cmp	r3, #4
 800347c:	d001      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x46>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2234      	movs	r2, #52	; 0x34
 8003486:	5c9b      	ldrb	r3, [r3, r2]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x54>
 800348c:	2302      	movs	r3, #2
 800348e:	e0d0      	b.n	8003632 <HAL_ADC_ConfigChannel+0x1f6>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2234      	movs	r2, #52	; 0x34
 8003494:	2101      	movs	r1, #1
 8003496:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2204      	movs	r2, #4
 80034a0:	4013      	ands	r3, r2
 80034a2:	d000      	beq.n	80034a6 <HAL_ADC_ConfigChannel+0x6a>
 80034a4:	e0b4      	b.n	8003610 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4a64      	ldr	r2, [pc, #400]	; (800363c <HAL_ADC_ConfigChannel+0x200>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d100      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x76>
 80034b0:	e082      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2201      	movs	r2, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	055b      	lsls	r3, r3, #21
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d037      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d033      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d02f      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d02b      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d027      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d023      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	2b06      	cmp	r3, #6
 8003502:	d01f      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	2b07      	cmp	r3, #7
 800350a:	d01b      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	2107      	movs	r1, #7
 8003518:	400b      	ands	r3, r1
 800351a:	429a      	cmp	r2, r3
 800351c:	d012      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2107      	movs	r1, #7
 800352a:	438a      	bics	r2, r1
 800352c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6959      	ldr	r1, [r3, #20]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2207      	movs	r2, #7
 800353a:	401a      	ands	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b10      	cmp	r3, #16
 800354a:	d007      	beq.n	800355c <HAL_ADC_ConfigChannel+0x120>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b11      	cmp	r3, #17
 8003552:	d003      	beq.n	800355c <HAL_ADC_ConfigChannel+0x120>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b12      	cmp	r3, #18
 800355a:	d163      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800355c:	4b38      	ldr	r3, [pc, #224]	; (8003640 <HAL_ADC_ConfigChannel+0x204>)
 800355e:	6819      	ldr	r1, [r3, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b10      	cmp	r3, #16
 8003566:	d009      	beq.n	800357c <HAL_ADC_ConfigChannel+0x140>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b11      	cmp	r3, #17
 800356e:	d102      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x13a>
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	03db      	lsls	r3, r3, #15
 8003574:	e004      	b.n	8003580 <HAL_ADC_ConfigChannel+0x144>
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	045b      	lsls	r3, r3, #17
 800357a:	e001      	b.n	8003580 <HAL_ADC_ConfigChannel+0x144>
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	041b      	lsls	r3, r3, #16
 8003580:	4a2f      	ldr	r2, [pc, #188]	; (8003640 <HAL_ADC_ConfigChannel+0x204>)
 8003582:	430b      	orrs	r3, r1
 8003584:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b10      	cmp	r3, #16
 800358c:	d14a      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800358e:	4b2d      	ldr	r3, [pc, #180]	; (8003644 <HAL_ADC_ConfigChannel+0x208>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	492d      	ldr	r1, [pc, #180]	; (8003648 <HAL_ADC_ConfigChannel+0x20c>)
 8003594:	0018      	movs	r0, r3
 8003596:	f7fc fdd3 	bl	8000140 <__udivsi3>
 800359a:	0003      	movs	r3, r0
 800359c:	001a      	movs	r2, r3
 800359e:	0013      	movs	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	189b      	adds	r3, r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035a8:	e002      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f9      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x16e>
 80035b6:	e035      	b.n	8003624 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2101      	movs	r1, #1
 80035c4:	4099      	lsls	r1, r3
 80035c6:	000b      	movs	r3, r1
 80035c8:	43d9      	mvns	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	400a      	ands	r2, r1
 80035d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b10      	cmp	r3, #16
 80035d8:	d007      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x1ae>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b11      	cmp	r3, #17
 80035e0:	d003      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x1ae>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b12      	cmp	r3, #18
 80035e8:	d11c      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80035ea:	4b15      	ldr	r3, [pc, #84]	; (8003640 <HAL_ADC_ConfigChannel+0x204>)
 80035ec:	6819      	ldr	r1, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d007      	beq.n	8003606 <HAL_ADC_ConfigChannel+0x1ca>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b11      	cmp	r3, #17
 80035fc:	d101      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x1c6>
 80035fe:	4b13      	ldr	r3, [pc, #76]	; (800364c <HAL_ADC_ConfigChannel+0x210>)
 8003600:	e002      	b.n	8003608 <HAL_ADC_ConfigChannel+0x1cc>
 8003602:	4b13      	ldr	r3, [pc, #76]	; (8003650 <HAL_ADC_ConfigChannel+0x214>)
 8003604:	e000      	b.n	8003608 <HAL_ADC_ConfigChannel+0x1cc>
 8003606:	4b13      	ldr	r3, [pc, #76]	; (8003654 <HAL_ADC_ConfigChannel+0x218>)
 8003608:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <HAL_ADC_ConfigChannel+0x204>)
 800360a:	400b      	ands	r3, r1
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e009      	b.n	8003624 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	2220      	movs	r2, #32
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800361c:	230f      	movs	r3, #15
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2234      	movs	r2, #52	; 0x34
 8003628:	2100      	movs	r1, #0
 800362a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800362c:	230f      	movs	r3, #15
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	781b      	ldrb	r3, [r3, #0]
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b004      	add	sp, #16
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	00001001 	.word	0x00001001
 8003640:	40012708 	.word	0x40012708
 8003644:	20000000 	.word	0x20000000
 8003648:	000f4240 	.word	0x000f4240
 800364c:	ffbfffff 	.word	0xffbfffff
 8003650:	feffffff 	.word	0xfeffffff
 8003654:	ff7fffff 	.word	0xff7fffff

08003658 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2203      	movs	r2, #3
 8003670:	4013      	ands	r3, r2
 8003672:	2b01      	cmp	r3, #1
 8003674:	d112      	bne.n	800369c <ADC_Enable+0x44>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2201      	movs	r2, #1
 800367e:	4013      	ands	r3, r2
 8003680:	2b01      	cmp	r3, #1
 8003682:	d009      	beq.n	8003698 <ADC_Enable+0x40>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	401a      	ands	r2, r3
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	429a      	cmp	r2, r3
 8003696:	d101      	bne.n	800369c <ADC_Enable+0x44>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <ADC_Enable+0x46>
 800369c:	2300      	movs	r3, #0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d152      	bne.n	8003748 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a2a      	ldr	r2, [pc, #168]	; (8003754 <ADC_Enable+0xfc>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	d00d      	beq.n	80036ca <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	2210      	movs	r2, #16
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	2201      	movs	r2, #1
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e03f      	b.n	800374a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2101      	movs	r1, #1
 80036d6:	430a      	orrs	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036da:	4b1f      	ldr	r3, [pc, #124]	; (8003758 <ADC_Enable+0x100>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	491f      	ldr	r1, [pc, #124]	; (800375c <ADC_Enable+0x104>)
 80036e0:	0018      	movs	r0, r3
 80036e2:	f7fc fd2d 	bl	8000140 <__udivsi3>
 80036e6:	0003      	movs	r3, r0
 80036e8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036ea:	e002      	b.n	80036f2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f9      	bne.n	80036ec <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80036f8:	f7ff fb2a 	bl	8002d50 <HAL_GetTick>
 80036fc:	0003      	movs	r3, r0
 80036fe:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003700:	e01b      	b.n	800373a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003702:	f7ff fb25 	bl	8002d50 <HAL_GetTick>
 8003706:	0002      	movs	r2, r0
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d914      	bls.n	800373a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2201      	movs	r2, #1
 8003718:	4013      	ands	r3, r2
 800371a:	2b01      	cmp	r3, #1
 800371c:	d00d      	beq.n	800373a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	2210      	movs	r2, #16
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372e:	2201      	movs	r2, #1
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e007      	b.n	800374a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2201      	movs	r2, #1
 8003742:	4013      	ands	r3, r2
 8003744:	2b01      	cmp	r3, #1
 8003746:	d1dc      	bne.n	8003702 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	0018      	movs	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	b004      	add	sp, #16
 8003750:	bd80      	pop	{r7, pc}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	80000017 	.word	0x80000017
 8003758:	20000000 	.word	0x20000000
 800375c:	000f4240 	.word	0x000f4240

08003760 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2203      	movs	r2, #3
 8003774:	4013      	ands	r3, r2
 8003776:	2b01      	cmp	r3, #1
 8003778:	d112      	bne.n	80037a0 <ADC_Disable+0x40>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2201      	movs	r2, #1
 8003782:	4013      	ands	r3, r2
 8003784:	2b01      	cmp	r3, #1
 8003786:	d009      	beq.n	800379c <ADC_Disable+0x3c>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	401a      	ands	r2, r3
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	429a      	cmp	r2, r3
 800379a:	d101      	bne.n	80037a0 <ADC_Disable+0x40>
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <ADC_Disable+0x42>
 80037a0:	2300      	movs	r3, #0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d048      	beq.n	8003838 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2205      	movs	r2, #5
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d110      	bne.n	80037d6 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2102      	movs	r1, #2
 80037c0:	430a      	orrs	r2, r1
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2203      	movs	r2, #3
 80037ca:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037cc:	f7ff fac0 	bl	8002d50 <HAL_GetTick>
 80037d0:	0003      	movs	r3, r0
 80037d2:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80037d4:	e029      	b.n	800382a <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	2210      	movs	r2, #16
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e6:	2201      	movs	r2, #1
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e023      	b.n	800383a <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037f2:	f7ff faad 	bl	8002d50 <HAL_GetTick>
 80037f6:	0002      	movs	r2, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d914      	bls.n	800382a <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2201      	movs	r2, #1
 8003808:	4013      	ands	r3, r2
 800380a:	2b01      	cmp	r3, #1
 800380c:	d10d      	bne.n	800382a <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	2210      	movs	r2, #16
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	2201      	movs	r2, #1
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e007      	b.n	800383a <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2201      	movs	r2, #1
 8003832:	4013      	ands	r3, r2
 8003834:	2b01      	cmp	r3, #1
 8003836:	d0dc      	beq.n	80037f2 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	0018      	movs	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	b004      	add	sp, #16
 8003840:	bd80      	pop	{r7, pc}

08003842 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2204      	movs	r2, #4
 8003856:	4013      	ands	r3, r2
 8003858:	d03a      	beq.n	80038d0 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2204      	movs	r2, #4
 8003862:	4013      	ands	r3, r2
 8003864:	2b04      	cmp	r3, #4
 8003866:	d10d      	bne.n	8003884 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2202      	movs	r2, #2
 8003870:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003872:	d107      	bne.n	8003884 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2110      	movs	r1, #16
 8003880:	430a      	orrs	r2, r1
 8003882:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003884:	f7ff fa64 	bl	8002d50 <HAL_GetTick>
 8003888:	0003      	movs	r3, r0
 800388a:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800388c:	e01a      	b.n	80038c4 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800388e:	f7ff fa5f 	bl	8002d50 <HAL_GetTick>
 8003892:	0002      	movs	r2, r0
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d913      	bls.n	80038c4 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2204      	movs	r2, #4
 80038a4:	4013      	ands	r3, r2
 80038a6:	d00d      	beq.n	80038c4 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	2210      	movs	r2, #16
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	2201      	movs	r2, #1
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e006      	b.n	80038d2 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2204      	movs	r2, #4
 80038cc:	4013      	ands	r3, r2
 80038ce:	d1de      	bne.n	800388e <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	0002      	movs	r2, r0
 80038e4:	1dfb      	adds	r3, r7, #7
 80038e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038e8:	1dfb      	adds	r3, r7, #7
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b7f      	cmp	r3, #127	; 0x7f
 80038ee:	d809      	bhi.n	8003904 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f0:	1dfb      	adds	r3, r7, #7
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	001a      	movs	r2, r3
 80038f6:	231f      	movs	r3, #31
 80038f8:	401a      	ands	r2, r3
 80038fa:	4b04      	ldr	r3, [pc, #16]	; (800390c <__NVIC_EnableIRQ+0x30>)
 80038fc:	2101      	movs	r1, #1
 80038fe:	4091      	lsls	r1, r2
 8003900:	000a      	movs	r2, r1
 8003902:	601a      	str	r2, [r3, #0]
  }
}
 8003904:	46c0      	nop			; (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}
 800390c:	e000e100 	.word	0xe000e100

08003910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	0002      	movs	r2, r0
 8003918:	6039      	str	r1, [r7, #0]
 800391a:	1dfb      	adds	r3, r7, #7
 800391c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800391e:	1dfb      	adds	r3, r7, #7
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b7f      	cmp	r3, #127	; 0x7f
 8003924:	d828      	bhi.n	8003978 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003926:	4a2f      	ldr	r2, [pc, #188]	; (80039e4 <__NVIC_SetPriority+0xd4>)
 8003928:	1dfb      	adds	r3, r7, #7
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	b25b      	sxtb	r3, r3
 800392e:	089b      	lsrs	r3, r3, #2
 8003930:	33c0      	adds	r3, #192	; 0xc0
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	589b      	ldr	r3, [r3, r2]
 8003936:	1dfa      	adds	r2, r7, #7
 8003938:	7812      	ldrb	r2, [r2, #0]
 800393a:	0011      	movs	r1, r2
 800393c:	2203      	movs	r2, #3
 800393e:	400a      	ands	r2, r1
 8003940:	00d2      	lsls	r2, r2, #3
 8003942:	21ff      	movs	r1, #255	; 0xff
 8003944:	4091      	lsls	r1, r2
 8003946:	000a      	movs	r2, r1
 8003948:	43d2      	mvns	r2, r2
 800394a:	401a      	ands	r2, r3
 800394c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	019b      	lsls	r3, r3, #6
 8003952:	22ff      	movs	r2, #255	; 0xff
 8003954:	401a      	ands	r2, r3
 8003956:	1dfb      	adds	r3, r7, #7
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	0018      	movs	r0, r3
 800395c:	2303      	movs	r3, #3
 800395e:	4003      	ands	r3, r0
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003964:	481f      	ldr	r0, [pc, #124]	; (80039e4 <__NVIC_SetPriority+0xd4>)
 8003966:	1dfb      	adds	r3, r7, #7
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	b25b      	sxtb	r3, r3
 800396c:	089b      	lsrs	r3, r3, #2
 800396e:	430a      	orrs	r2, r1
 8003970:	33c0      	adds	r3, #192	; 0xc0
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003976:	e031      	b.n	80039dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003978:	4a1b      	ldr	r2, [pc, #108]	; (80039e8 <__NVIC_SetPriority+0xd8>)
 800397a:	1dfb      	adds	r3, r7, #7
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	0019      	movs	r1, r3
 8003980:	230f      	movs	r3, #15
 8003982:	400b      	ands	r3, r1
 8003984:	3b08      	subs	r3, #8
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	3306      	adds	r3, #6
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	18d3      	adds	r3, r2, r3
 800398e:	3304      	adds	r3, #4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	1dfa      	adds	r2, r7, #7
 8003994:	7812      	ldrb	r2, [r2, #0]
 8003996:	0011      	movs	r1, r2
 8003998:	2203      	movs	r2, #3
 800399a:	400a      	ands	r2, r1
 800399c:	00d2      	lsls	r2, r2, #3
 800399e:	21ff      	movs	r1, #255	; 0xff
 80039a0:	4091      	lsls	r1, r2
 80039a2:	000a      	movs	r2, r1
 80039a4:	43d2      	mvns	r2, r2
 80039a6:	401a      	ands	r2, r3
 80039a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	019b      	lsls	r3, r3, #6
 80039ae:	22ff      	movs	r2, #255	; 0xff
 80039b0:	401a      	ands	r2, r3
 80039b2:	1dfb      	adds	r3, r7, #7
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	0018      	movs	r0, r3
 80039b8:	2303      	movs	r3, #3
 80039ba:	4003      	ands	r3, r0
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039c0:	4809      	ldr	r0, [pc, #36]	; (80039e8 <__NVIC_SetPriority+0xd8>)
 80039c2:	1dfb      	adds	r3, r7, #7
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	001c      	movs	r4, r3
 80039c8:	230f      	movs	r3, #15
 80039ca:	4023      	ands	r3, r4
 80039cc:	3b08      	subs	r3, #8
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	430a      	orrs	r2, r1
 80039d2:	3306      	adds	r3, #6
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	18c3      	adds	r3, r0, r3
 80039d8:	3304      	adds	r3, #4
 80039da:	601a      	str	r2, [r3, #0]
}
 80039dc:	46c0      	nop			; (mov r8, r8)
 80039de:	46bd      	mov	sp, r7
 80039e0:	b003      	add	sp, #12
 80039e2:	bd90      	pop	{r4, r7, pc}
 80039e4:	e000e100 	.word	0xe000e100
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	1e5a      	subs	r2, r3, #1
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	045b      	lsls	r3, r3, #17
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d301      	bcc.n	8003a04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a00:	2301      	movs	r3, #1
 8003a02:	e010      	b.n	8003a26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <SysTick_Config+0x44>)
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	3a01      	subs	r2, #1
 8003a0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	425b      	negs	r3, r3
 8003a10:	2103      	movs	r1, #3
 8003a12:	0018      	movs	r0, r3
 8003a14:	f7ff ff7c 	bl	8003910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <SysTick_Config+0x44>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a1e:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <SysTick_Config+0x44>)
 8003a20:	2207      	movs	r2, #7
 8003a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	0018      	movs	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b002      	add	sp, #8
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	e000e010 	.word	0xe000e010

08003a34 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	210f      	movs	r1, #15
 8003a40:	187b      	adds	r3, r7, r1
 8003a42:	1c02      	adds	r2, r0, #0
 8003a44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	187b      	adds	r3, r7, r1
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	b25b      	sxtb	r3, r3
 8003a4e:	0011      	movs	r1, r2
 8003a50:	0018      	movs	r0, r3
 8003a52:	f7ff ff5d 	bl	8003910 <__NVIC_SetPriority>
}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b004      	add	sp, #16
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	0002      	movs	r2, r0
 8003a66:	1dfb      	adds	r3, r7, #7
 8003a68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a6a:	1dfb      	adds	r3, r7, #7
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	b25b      	sxtb	r3, r3
 8003a70:	0018      	movs	r0, r3
 8003a72:	f7ff ff33 	bl	80038dc <__NVIC_EnableIRQ>
}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b002      	add	sp, #8
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f7ff ffaf 	bl	80039ec <SysTick_Config>
 8003a8e:	0003      	movs	r3, r0
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e036      	b.n	8003b1c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2221      	movs	r2, #33	; 0x21
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <HAL_DMA_Init+0x8c>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	0018      	movs	r0, r3
 8003b00:	f000 f932 	bl	8003d68 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2221      	movs	r2, #33	; 0x21
 8003b0e:	2101      	movs	r1, #1
 8003b10:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	2100      	movs	r1, #0
 8003b18:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}  
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b004      	add	sp, #16
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	ffffc00f 	.word	0xffffc00f

08003b28 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2221      	movs	r2, #33	; 0x21
 8003b34:	5c9b      	ldrb	r3, [r3, r2]
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d008      	beq.n	8003b4e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	2100      	movs	r1, #0
 8003b48:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e020      	b.n	8003b90 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	210e      	movs	r1, #14
 8003b5a:	438a      	bics	r2, r1
 8003b5c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2101      	movs	r1, #1
 8003b6a:	438a      	bics	r2, r1
 8003b6c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	2101      	movs	r1, #1
 8003b78:	4091      	lsls	r1, r2
 8003b7a:	000a      	movs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2221      	movs	r2, #33	; 0x21
 8003b82:	2101      	movs	r1, #1
 8003b84:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b002      	add	sp, #8
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba0:	210f      	movs	r1, #15
 8003ba2:	187b      	adds	r3, r7, r1
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2221      	movs	r2, #33	; 0x21
 8003bac:	5c9b      	ldrb	r3, [r3, r2]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d006      	beq.n	8003bc2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003bba:	187b      	adds	r3, r7, r1
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	e028      	b.n	8003c14 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	210e      	movs	r1, #14
 8003bce:	438a      	bics	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2101      	movs	r1, #1
 8003bde:	438a      	bics	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	2101      	movs	r1, #1
 8003bec:	4091      	lsls	r1, r2
 8003bee:	000a      	movs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2221      	movs	r2, #33	; 0x21
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	2100      	movs	r1, #0
 8003c00:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d004      	beq.n	8003c14 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	0010      	movs	r0, r2
 8003c12:	4798      	blx	r3
    } 
  }
  return status;
 8003c14:	230f      	movs	r3, #15
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	781b      	ldrb	r3, [r3, #0]
}
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b004      	add	sp, #16
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2204      	movs	r2, #4
 8003c40:	409a      	lsls	r2, r3
 8003c42:	0013      	movs	r3, r2
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4013      	ands	r3, r2
 8003c48:	d024      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x72>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d020      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d107      	bne.n	8003c6e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2104      	movs	r1, #4
 8003c6a:	438a      	bics	r2, r1
 8003c6c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	2104      	movs	r1, #4
 8003c78:	4091      	lsls	r1, r2
 8003c7a:	000a      	movs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d100      	bne.n	8003c88 <HAL_DMA_IRQHandler+0x66>
 8003c86:	e06a      	b.n	8003d5e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	0010      	movs	r0, r2
 8003c90:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003c92:	e064      	b.n	8003d5e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	2202      	movs	r2, #2
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	0013      	movs	r3, r2
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d02b      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xda>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d027      	beq.n	8003cfc <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	210a      	movs	r1, #10
 8003cc4:	438a      	bics	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2221      	movs	r2, #33	; 0x21
 8003ccc:	2101      	movs	r1, #1
 8003cce:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	2102      	movs	r1, #2
 8003cda:	4091      	lsls	r1, r2
 8003cdc:	000a      	movs	r2, r1
 8003cde:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d036      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	0010      	movs	r0, r2
 8003cf8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003cfa:	e030      	b.n	8003d5e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	2208      	movs	r2, #8
 8003d02:	409a      	lsls	r2, r3
 8003d04:	0013      	movs	r3, r2
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d028      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x13c>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2208      	movs	r2, #8
 8003d10:	4013      	ands	r3, r2
 8003d12:	d024      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	210e      	movs	r1, #14
 8003d20:	438a      	bics	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	4091      	lsls	r1, r2
 8003d30:	000a      	movs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2221      	movs	r2, #33	; 0x21
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	2100      	movs	r1, #0
 8003d48:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	0010      	movs	r0, r2
 8003d5a:	4798      	blx	r3
    }
   }
}  
 8003d5c:	e7ff      	b.n	8003d5e <HAL_DMA_IRQHandler+0x13c>
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b004      	add	sp, #16
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <DMA_CalcBaseAndBitshift+0x30>)
 8003d76:	4694      	mov	ip, r2
 8003d78:	4463      	add	r3, ip
 8003d7a:	2114      	movs	r1, #20
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7fc f9df 	bl	8000140 <__udivsi3>
 8003d82:	0003      	movs	r3, r0
 8003d84:	009a      	lsls	r2, r3, #2
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a03      	ldr	r2, [pc, #12]	; (8003d9c <DMA_CalcBaseAndBitshift+0x34>)
 8003d8e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b002      	add	sp, #8
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	bffdfff8 	.word	0xbffdfff8
 8003d9c:	40020000 	.word	0x40020000

08003da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dae:	e14f      	b.n	8004050 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2101      	movs	r1, #1
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4091      	lsls	r1, r2
 8003dba:	000a      	movs	r2, r1
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d100      	bne.n	8003dc8 <HAL_GPIO_Init+0x28>
 8003dc6:	e140      	b.n	800404a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2203      	movs	r2, #3
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d005      	beq.n	8003de0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2203      	movs	r2, #3
 8003dda:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d130      	bne.n	8003e42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	2203      	movs	r2, #3
 8003dec:	409a      	lsls	r2, r3
 8003dee:	0013      	movs	r3, r2
 8003df0:	43da      	mvns	r2, r3
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	409a      	lsls	r2, r3
 8003e02:	0013      	movs	r3, r2
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e16:	2201      	movs	r2, #1
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	091b      	lsrs	r3, r3, #4
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	401a      	ands	r2, r3
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	409a      	lsls	r2, r3
 8003e34:	0013      	movs	r3, r2
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2203      	movs	r2, #3
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d017      	beq.n	8003e7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	2203      	movs	r2, #3
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	0013      	movs	r3, r2
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4013      	ands	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	0013      	movs	r3, r2
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2203      	movs	r2, #3
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d123      	bne.n	8003ed2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	08da      	lsrs	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3208      	adds	r2, #8
 8003e92:	0092      	lsls	r2, r2, #2
 8003e94:	58d3      	ldr	r3, [r2, r3]
 8003e96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2207      	movs	r2, #7
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	220f      	movs	r2, #15
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	0013      	movs	r3, r2
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2107      	movs	r1, #7
 8003eb6:	400b      	ands	r3, r1
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	0013      	movs	r3, r2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	08da      	lsrs	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3208      	adds	r2, #8
 8003ecc:	0092      	lsls	r2, r2, #2
 8003ece:	6939      	ldr	r1, [r7, #16]
 8003ed0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	2203      	movs	r2, #3
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	0013      	movs	r3, r2
 8003ee2:	43da      	mvns	r2, r3
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2203      	movs	r2, #3
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	0013      	movs	r3, r2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	23c0      	movs	r3, #192	; 0xc0
 8003f0c:	029b      	lsls	r3, r3, #10
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d100      	bne.n	8003f14 <HAL_GPIO_Init+0x174>
 8003f12:	e09a      	b.n	800404a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f14:	4b54      	ldr	r3, [pc, #336]	; (8004068 <HAL_GPIO_Init+0x2c8>)
 8003f16:	699a      	ldr	r2, [r3, #24]
 8003f18:	4b53      	ldr	r3, [pc, #332]	; (8004068 <HAL_GPIO_Init+0x2c8>)
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	619a      	str	r2, [r3, #24]
 8003f20:	4b51      	ldr	r3, [pc, #324]	; (8004068 <HAL_GPIO_Init+0x2c8>)
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2201      	movs	r2, #1
 8003f26:	4013      	ands	r3, r2
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f2c:	4a4f      	ldr	r2, [pc, #316]	; (800406c <HAL_GPIO_Init+0x2cc>)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	089b      	lsrs	r3, r3, #2
 8003f32:	3302      	adds	r3, #2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	589b      	ldr	r3, [r3, r2]
 8003f38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	4013      	ands	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	220f      	movs	r2, #15
 8003f44:	409a      	lsls	r2, r3
 8003f46:	0013      	movs	r3, r2
 8003f48:	43da      	mvns	r2, r3
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	2390      	movs	r3, #144	; 0x90
 8003f54:	05db      	lsls	r3, r3, #23
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d013      	beq.n	8003f82 <HAL_GPIO_Init+0x1e2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a44      	ldr	r2, [pc, #272]	; (8004070 <HAL_GPIO_Init+0x2d0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00d      	beq.n	8003f7e <HAL_GPIO_Init+0x1de>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a43      	ldr	r2, [pc, #268]	; (8004074 <HAL_GPIO_Init+0x2d4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d007      	beq.n	8003f7a <HAL_GPIO_Init+0x1da>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a42      	ldr	r2, [pc, #264]	; (8004078 <HAL_GPIO_Init+0x2d8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d101      	bne.n	8003f76 <HAL_GPIO_Init+0x1d6>
 8003f72:	2303      	movs	r3, #3
 8003f74:	e006      	b.n	8003f84 <HAL_GPIO_Init+0x1e4>
 8003f76:	2305      	movs	r3, #5
 8003f78:	e004      	b.n	8003f84 <HAL_GPIO_Init+0x1e4>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e002      	b.n	8003f84 <HAL_GPIO_Init+0x1e4>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <HAL_GPIO_Init+0x1e4>
 8003f82:	2300      	movs	r3, #0
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	2103      	movs	r1, #3
 8003f88:	400a      	ands	r2, r1
 8003f8a:	0092      	lsls	r2, r2, #2
 8003f8c:	4093      	lsls	r3, r2
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f94:	4935      	ldr	r1, [pc, #212]	; (800406c <HAL_GPIO_Init+0x2cc>)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	089b      	lsrs	r3, r3, #2
 8003f9a:	3302      	adds	r3, #2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fa2:	4b36      	ldr	r3, [pc, #216]	; (800407c <HAL_GPIO_Init+0x2dc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	43da      	mvns	r2, r3
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	025b      	lsls	r3, r3, #9
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d003      	beq.n	8003fc6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003fc6:	4b2d      	ldr	r3, [pc, #180]	; (800407c <HAL_GPIO_Init+0x2dc>)
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	; (800407c <HAL_GPIO_Init+0x2dc>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	43da      	mvns	r2, r3
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	029b      	lsls	r3, r3, #10
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ff0:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_GPIO_Init+0x2dc>)
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ff6:	4b21      	ldr	r3, [pc, #132]	; (800407c <HAL_GPIO_Init+0x2dc>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	43da      	mvns	r2, r3
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4013      	ands	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	035b      	lsls	r3, r3, #13
 800400e:	4013      	ands	r3, r2
 8004010:	d003      	beq.n	800401a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800401a:	4b18      	ldr	r3, [pc, #96]	; (800407c <HAL_GPIO_Init+0x2dc>)
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004020:	4b16      	ldr	r3, [pc, #88]	; (800407c <HAL_GPIO_Init+0x2dc>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	43da      	mvns	r2, r3
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	039b      	lsls	r3, r3, #14
 8004038:	4013      	ands	r3, r2
 800403a:	d003      	beq.n	8004044 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004044:	4b0d      	ldr	r3, [pc, #52]	; (800407c <HAL_GPIO_Init+0x2dc>)
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	3301      	adds	r3, #1
 800404e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	40da      	lsrs	r2, r3
 8004058:	1e13      	subs	r3, r2, #0
 800405a:	d000      	beq.n	800405e <HAL_GPIO_Init+0x2be>
 800405c:	e6a8      	b.n	8003db0 <HAL_GPIO_Init+0x10>
  } 
}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	46bd      	mov	sp, r7
 8004064:	b006      	add	sp, #24
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000
 800406c:	40010000 	.word	0x40010000
 8004070:	48000400 	.word	0x48000400
 8004074:	48000800 	.word	0x48000800
 8004078:	48000c00 	.word	0x48000c00
 800407c:	40010400 	.word	0x40010400

08004080 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	000a      	movs	r2, r1
 800408a:	1cbb      	adds	r3, r7, #2
 800408c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	1cba      	adds	r2, r7, #2
 8004094:	8812      	ldrh	r2, [r2, #0]
 8004096:	4013      	ands	r3, r2
 8004098:	d004      	beq.n	80040a4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800409a:	230f      	movs	r3, #15
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	2201      	movs	r2, #1
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	e003      	b.n	80040ac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040a4:	230f      	movs	r3, #15
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80040ac:	230f      	movs	r3, #15
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	781b      	ldrb	r3, [r3, #0]
  }
 80040b2:	0018      	movs	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b004      	add	sp, #16
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	0008      	movs	r0, r1
 80040c4:	0011      	movs	r1, r2
 80040c6:	1cbb      	adds	r3, r7, #2
 80040c8:	1c02      	adds	r2, r0, #0
 80040ca:	801a      	strh	r2, [r3, #0]
 80040cc:	1c7b      	adds	r3, r7, #1
 80040ce:	1c0a      	adds	r2, r1, #0
 80040d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040d2:	1c7b      	adds	r3, r7, #1
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040da:	1cbb      	adds	r3, r7, #2
 80040dc:	881a      	ldrh	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040e2:	e003      	b.n	80040ec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040e4:	1cbb      	adds	r3, r7, #2
 80040e6:	881a      	ldrh	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b002      	add	sp, #8
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	0002      	movs	r2, r0
 80040fc:	1dbb      	adds	r3, r7, #6
 80040fe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	1dba      	adds	r2, r7, #6
 8004106:	8812      	ldrh	r2, [r2, #0]
 8004108:	4013      	ands	r3, r2
 800410a:	d008      	beq.n	800411e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800410e:	1dba      	adds	r2, r7, #6
 8004110:	8812      	ldrh	r2, [r2, #0]
 8004112:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004114:	1dbb      	adds	r3, r7, #6
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	0018      	movs	r0, r3
 800411a:	f000 f807 	bl	800412c <HAL_GPIO_EXTI_Callback>
  }
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	b002      	add	sp, #8
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	40010400 	.word	0x40010400

0800412c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	0002      	movs	r2, r0
 8004134:	1dbb      	adds	r3, r7, #6
 8004136:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8004138:	46c0      	nop			; (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	b002      	add	sp, #8
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e301      	b.n	8004756 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2201      	movs	r2, #1
 8004158:	4013      	ands	r3, r2
 800415a:	d100      	bne.n	800415e <HAL_RCC_OscConfig+0x1e>
 800415c:	e08d      	b.n	800427a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800415e:	4bc3      	ldr	r3, [pc, #780]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	220c      	movs	r2, #12
 8004164:	4013      	ands	r3, r2
 8004166:	2b04      	cmp	r3, #4
 8004168:	d00e      	beq.n	8004188 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800416a:	4bc0      	ldr	r3, [pc, #768]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	220c      	movs	r2, #12
 8004170:	4013      	ands	r3, r2
 8004172:	2b08      	cmp	r3, #8
 8004174:	d116      	bne.n	80041a4 <HAL_RCC_OscConfig+0x64>
 8004176:	4bbd      	ldr	r3, [pc, #756]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	2380      	movs	r3, #128	; 0x80
 800417c:	025b      	lsls	r3, r3, #9
 800417e:	401a      	ands	r2, r3
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	025b      	lsls	r3, r3, #9
 8004184:	429a      	cmp	r2, r3
 8004186:	d10d      	bne.n	80041a4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	4bb8      	ldr	r3, [pc, #736]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	2380      	movs	r3, #128	; 0x80
 800418e:	029b      	lsls	r3, r3, #10
 8004190:	4013      	ands	r3, r2
 8004192:	d100      	bne.n	8004196 <HAL_RCC_OscConfig+0x56>
 8004194:	e070      	b.n	8004278 <HAL_RCC_OscConfig+0x138>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d000      	beq.n	80041a0 <HAL_RCC_OscConfig+0x60>
 800419e:	e06b      	b.n	8004278 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e2d8      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_OscConfig+0x7c>
 80041ac:	4baf      	ldr	r3, [pc, #700]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4bae      	ldr	r3, [pc, #696]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80041b2:	2180      	movs	r1, #128	; 0x80
 80041b4:	0249      	lsls	r1, r1, #9
 80041b6:	430a      	orrs	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e02f      	b.n	800421c <HAL_RCC_OscConfig+0xdc>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10c      	bne.n	80041de <HAL_RCC_OscConfig+0x9e>
 80041c4:	4ba9      	ldr	r3, [pc, #676]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4ba8      	ldr	r3, [pc, #672]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80041ca:	49a9      	ldr	r1, [pc, #676]	; (8004470 <HAL_RCC_OscConfig+0x330>)
 80041cc:	400a      	ands	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	4ba6      	ldr	r3, [pc, #664]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4ba5      	ldr	r3, [pc, #660]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80041d6:	49a7      	ldr	r1, [pc, #668]	; (8004474 <HAL_RCC_OscConfig+0x334>)
 80041d8:	400a      	ands	r2, r1
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e01e      	b.n	800421c <HAL_RCC_OscConfig+0xdc>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b05      	cmp	r3, #5
 80041e4:	d10e      	bne.n	8004204 <HAL_RCC_OscConfig+0xc4>
 80041e6:	4ba1      	ldr	r3, [pc, #644]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	4ba0      	ldr	r3, [pc, #640]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80041ec:	2180      	movs	r1, #128	; 0x80
 80041ee:	02c9      	lsls	r1, r1, #11
 80041f0:	430a      	orrs	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	4b9d      	ldr	r3, [pc, #628]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	4b9c      	ldr	r3, [pc, #624]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80041fa:	2180      	movs	r1, #128	; 0x80
 80041fc:	0249      	lsls	r1, r1, #9
 80041fe:	430a      	orrs	r2, r1
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	e00b      	b.n	800421c <HAL_RCC_OscConfig+0xdc>
 8004204:	4b99      	ldr	r3, [pc, #612]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4b98      	ldr	r3, [pc, #608]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 800420a:	4999      	ldr	r1, [pc, #612]	; (8004470 <HAL_RCC_OscConfig+0x330>)
 800420c:	400a      	ands	r2, r1
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	4b96      	ldr	r3, [pc, #600]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b95      	ldr	r3, [pc, #596]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004216:	4997      	ldr	r1, [pc, #604]	; (8004474 <HAL_RCC_OscConfig+0x334>)
 8004218:	400a      	ands	r2, r1
 800421a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d014      	beq.n	800424e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004224:	f7fe fd94 	bl	8002d50 <HAL_GetTick>
 8004228:	0003      	movs	r3, r0
 800422a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800422e:	f7fe fd8f 	bl	8002d50 <HAL_GetTick>
 8004232:	0002      	movs	r2, r0
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b64      	cmp	r3, #100	; 0x64
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e28a      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004240:	4b8a      	ldr	r3, [pc, #552]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	029b      	lsls	r3, r3, #10
 8004248:	4013      	ands	r3, r2
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0xee>
 800424c:	e015      	b.n	800427a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424e:	f7fe fd7f 	bl	8002d50 <HAL_GetTick>
 8004252:	0003      	movs	r3, r0
 8004254:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004258:	f7fe fd7a 	bl	8002d50 <HAL_GetTick>
 800425c:	0002      	movs	r2, r0
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b64      	cmp	r3, #100	; 0x64
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e275      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426a:	4b80      	ldr	r3, [pc, #512]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	2380      	movs	r3, #128	; 0x80
 8004270:	029b      	lsls	r3, r3, #10
 8004272:	4013      	ands	r3, r2
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x118>
 8004276:	e000      	b.n	800427a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004278:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2202      	movs	r2, #2
 8004280:	4013      	ands	r3, r2
 8004282:	d100      	bne.n	8004286 <HAL_RCC_OscConfig+0x146>
 8004284:	e069      	b.n	800435a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004286:	4b79      	ldr	r3, [pc, #484]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	220c      	movs	r2, #12
 800428c:	4013      	ands	r3, r2
 800428e:	d00b      	beq.n	80042a8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004290:	4b76      	ldr	r3, [pc, #472]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	220c      	movs	r2, #12
 8004296:	4013      	ands	r3, r2
 8004298:	2b08      	cmp	r3, #8
 800429a:	d11c      	bne.n	80042d6 <HAL_RCC_OscConfig+0x196>
 800429c:	4b73      	ldr	r3, [pc, #460]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	025b      	lsls	r3, r3, #9
 80042a4:	4013      	ands	r3, r2
 80042a6:	d116      	bne.n	80042d6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a8:	4b70      	ldr	r3, [pc, #448]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2202      	movs	r2, #2
 80042ae:	4013      	ands	r3, r2
 80042b0:	d005      	beq.n	80042be <HAL_RCC_OscConfig+0x17e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d001      	beq.n	80042be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e24b      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042be:	4b6b      	ldr	r3, [pc, #428]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	22f8      	movs	r2, #248	; 0xf8
 80042c4:	4393      	bics	r3, r2
 80042c6:	0019      	movs	r1, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	00da      	lsls	r2, r3, #3
 80042ce:	4b67      	ldr	r3, [pc, #412]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80042d0:	430a      	orrs	r2, r1
 80042d2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d4:	e041      	b.n	800435a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d024      	beq.n	8004328 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042de:	4b63      	ldr	r3, [pc, #396]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	4b62      	ldr	r3, [pc, #392]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80042e4:	2101      	movs	r1, #1
 80042e6:	430a      	orrs	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ea:	f7fe fd31 	bl	8002d50 <HAL_GetTick>
 80042ee:	0003      	movs	r3, r0
 80042f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f4:	f7fe fd2c 	bl	8002d50 <HAL_GetTick>
 80042f8:	0002      	movs	r2, r0
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e227      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004306:	4b59      	ldr	r3, [pc, #356]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2202      	movs	r2, #2
 800430c:	4013      	ands	r3, r2
 800430e:	d0f1      	beq.n	80042f4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004310:	4b56      	ldr	r3, [pc, #344]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	22f8      	movs	r2, #248	; 0xf8
 8004316:	4393      	bics	r3, r2
 8004318:	0019      	movs	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	00da      	lsls	r2, r3, #3
 8004320:	4b52      	ldr	r3, [pc, #328]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004322:	430a      	orrs	r2, r1
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	e018      	b.n	800435a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004328:	4b50      	ldr	r3, [pc, #320]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	4b4f      	ldr	r3, [pc, #316]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 800432e:	2101      	movs	r1, #1
 8004330:	438a      	bics	r2, r1
 8004332:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fe fd0c 	bl	8002d50 <HAL_GetTick>
 8004338:	0003      	movs	r3, r0
 800433a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800433e:	f7fe fd07 	bl	8002d50 <HAL_GetTick>
 8004342:	0002      	movs	r2, r0
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e202      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004350:	4b46      	ldr	r3, [pc, #280]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2202      	movs	r2, #2
 8004356:	4013      	ands	r3, r2
 8004358:	d1f1      	bne.n	800433e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2208      	movs	r2, #8
 8004360:	4013      	ands	r3, r2
 8004362:	d036      	beq.n	80043d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d019      	beq.n	80043a0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800436c:	4b3f      	ldr	r3, [pc, #252]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 800436e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004370:	4b3e      	ldr	r3, [pc, #248]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004372:	2101      	movs	r1, #1
 8004374:	430a      	orrs	r2, r1
 8004376:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004378:	f7fe fcea 	bl	8002d50 <HAL_GetTick>
 800437c:	0003      	movs	r3, r0
 800437e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004382:	f7fe fce5 	bl	8002d50 <HAL_GetTick>
 8004386:	0002      	movs	r2, r0
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e1e0      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004394:	4b35      	ldr	r3, [pc, #212]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	2202      	movs	r2, #2
 800439a:	4013      	ands	r3, r2
 800439c:	d0f1      	beq.n	8004382 <HAL_RCC_OscConfig+0x242>
 800439e:	e018      	b.n	80043d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a0:	4b32      	ldr	r3, [pc, #200]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80043a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043a4:	4b31      	ldr	r3, [pc, #196]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80043a6:	2101      	movs	r1, #1
 80043a8:	438a      	bics	r2, r1
 80043aa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ac:	f7fe fcd0 	bl	8002d50 <HAL_GetTick>
 80043b0:	0003      	movs	r3, r0
 80043b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b6:	f7fe fccb 	bl	8002d50 <HAL_GetTick>
 80043ba:	0002      	movs	r2, r0
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e1c6      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c8:	4b28      	ldr	r3, [pc, #160]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	2202      	movs	r2, #2
 80043ce:	4013      	ands	r3, r2
 80043d0:	d1f1      	bne.n	80043b6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2204      	movs	r2, #4
 80043d8:	4013      	ands	r3, r2
 80043da:	d100      	bne.n	80043de <HAL_RCC_OscConfig+0x29e>
 80043dc:	e0b4      	b.n	8004548 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043de:	201f      	movs	r0, #31
 80043e0:	183b      	adds	r3, r7, r0
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e6:	4b21      	ldr	r3, [pc, #132]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80043e8:	69da      	ldr	r2, [r3, #28]
 80043ea:	2380      	movs	r3, #128	; 0x80
 80043ec:	055b      	lsls	r3, r3, #21
 80043ee:	4013      	ands	r3, r2
 80043f0:	d110      	bne.n	8004414 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f2:	4b1e      	ldr	r3, [pc, #120]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	4b1d      	ldr	r3, [pc, #116]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 80043f8:	2180      	movs	r1, #128	; 0x80
 80043fa:	0549      	lsls	r1, r1, #21
 80043fc:	430a      	orrs	r2, r1
 80043fe:	61da      	str	r2, [r3, #28]
 8004400:	4b1a      	ldr	r3, [pc, #104]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004402:	69da      	ldr	r2, [r3, #28]
 8004404:	2380      	movs	r3, #128	; 0x80
 8004406:	055b      	lsls	r3, r3, #21
 8004408:	4013      	ands	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800440e:	183b      	adds	r3, r7, r0
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004414:	4b18      	ldr	r3, [pc, #96]	; (8004478 <HAL_RCC_OscConfig+0x338>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	4013      	ands	r3, r2
 800441e:	d11a      	bne.n	8004456 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004420:	4b15      	ldr	r3, [pc, #84]	; (8004478 <HAL_RCC_OscConfig+0x338>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b14      	ldr	r3, [pc, #80]	; (8004478 <HAL_RCC_OscConfig+0x338>)
 8004426:	2180      	movs	r1, #128	; 0x80
 8004428:	0049      	lsls	r1, r1, #1
 800442a:	430a      	orrs	r2, r1
 800442c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800442e:	f7fe fc8f 	bl	8002d50 <HAL_GetTick>
 8004432:	0003      	movs	r3, r0
 8004434:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004438:	f7fe fc8a 	bl	8002d50 <HAL_GetTick>
 800443c:	0002      	movs	r2, r0
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	; 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e185      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <HAL_RCC_OscConfig+0x338>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4013      	ands	r3, r2
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d10e      	bne.n	800447c <HAL_RCC_OscConfig+0x33c>
 800445e:	4b03      	ldr	r3, [pc, #12]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004460:	6a1a      	ldr	r2, [r3, #32]
 8004462:	4b02      	ldr	r3, [pc, #8]	; (800446c <HAL_RCC_OscConfig+0x32c>)
 8004464:	2101      	movs	r1, #1
 8004466:	430a      	orrs	r2, r1
 8004468:	621a      	str	r2, [r3, #32]
 800446a:	e035      	b.n	80044d8 <HAL_RCC_OscConfig+0x398>
 800446c:	40021000 	.word	0x40021000
 8004470:	fffeffff 	.word	0xfffeffff
 8004474:	fffbffff 	.word	0xfffbffff
 8004478:	40007000 	.word	0x40007000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10c      	bne.n	800449e <HAL_RCC_OscConfig+0x35e>
 8004484:	4bb6      	ldr	r3, [pc, #728]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004486:	6a1a      	ldr	r2, [r3, #32]
 8004488:	4bb5      	ldr	r3, [pc, #724]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 800448a:	2101      	movs	r1, #1
 800448c:	438a      	bics	r2, r1
 800448e:	621a      	str	r2, [r3, #32]
 8004490:	4bb3      	ldr	r3, [pc, #716]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	4bb2      	ldr	r3, [pc, #712]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004496:	2104      	movs	r1, #4
 8004498:	438a      	bics	r2, r1
 800449a:	621a      	str	r2, [r3, #32]
 800449c:	e01c      	b.n	80044d8 <HAL_RCC_OscConfig+0x398>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2b05      	cmp	r3, #5
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x380>
 80044a6:	4bae      	ldr	r3, [pc, #696]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80044a8:	6a1a      	ldr	r2, [r3, #32]
 80044aa:	4bad      	ldr	r3, [pc, #692]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80044ac:	2104      	movs	r1, #4
 80044ae:	430a      	orrs	r2, r1
 80044b0:	621a      	str	r2, [r3, #32]
 80044b2:	4bab      	ldr	r3, [pc, #684]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80044b4:	6a1a      	ldr	r2, [r3, #32]
 80044b6:	4baa      	ldr	r3, [pc, #680]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80044b8:	2101      	movs	r1, #1
 80044ba:	430a      	orrs	r2, r1
 80044bc:	621a      	str	r2, [r3, #32]
 80044be:	e00b      	b.n	80044d8 <HAL_RCC_OscConfig+0x398>
 80044c0:	4ba7      	ldr	r3, [pc, #668]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80044c2:	6a1a      	ldr	r2, [r3, #32]
 80044c4:	4ba6      	ldr	r3, [pc, #664]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80044c6:	2101      	movs	r1, #1
 80044c8:	438a      	bics	r2, r1
 80044ca:	621a      	str	r2, [r3, #32]
 80044cc:	4ba4      	ldr	r3, [pc, #656]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80044ce:	6a1a      	ldr	r2, [r3, #32]
 80044d0:	4ba3      	ldr	r3, [pc, #652]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80044d2:	2104      	movs	r1, #4
 80044d4:	438a      	bics	r2, r1
 80044d6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d014      	beq.n	800450a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e0:	f7fe fc36 	bl	8002d50 <HAL_GetTick>
 80044e4:	0003      	movs	r3, r0
 80044e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e8:	e009      	b.n	80044fe <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ea:	f7fe fc31 	bl	8002d50 <HAL_GetTick>
 80044ee:	0002      	movs	r2, r0
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	4a9b      	ldr	r2, [pc, #620]	; (8004764 <HAL_RCC_OscConfig+0x624>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e12b      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fe:	4b98      	ldr	r3, [pc, #608]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	2202      	movs	r2, #2
 8004504:	4013      	ands	r3, r2
 8004506:	d0f0      	beq.n	80044ea <HAL_RCC_OscConfig+0x3aa>
 8004508:	e013      	b.n	8004532 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450a:	f7fe fc21 	bl	8002d50 <HAL_GetTick>
 800450e:	0003      	movs	r3, r0
 8004510:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004512:	e009      	b.n	8004528 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004514:	f7fe fc1c 	bl	8002d50 <HAL_GetTick>
 8004518:	0002      	movs	r2, r0
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	4a91      	ldr	r2, [pc, #580]	; (8004764 <HAL_RCC_OscConfig+0x624>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e116      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004528:	4b8d      	ldr	r3, [pc, #564]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	2202      	movs	r2, #2
 800452e:	4013      	ands	r3, r2
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004532:	231f      	movs	r3, #31
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d105      	bne.n	8004548 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800453c:	4b88      	ldr	r3, [pc, #544]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	4b87      	ldr	r3, [pc, #540]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004542:	4989      	ldr	r1, [pc, #548]	; (8004768 <HAL_RCC_OscConfig+0x628>)
 8004544:	400a      	ands	r2, r1
 8004546:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2210      	movs	r2, #16
 800454e:	4013      	ands	r3, r2
 8004550:	d063      	beq.n	800461a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d12a      	bne.n	80045b0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800455a:	4b81      	ldr	r3, [pc, #516]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 800455c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800455e:	4b80      	ldr	r3, [pc, #512]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004560:	2104      	movs	r1, #4
 8004562:	430a      	orrs	r2, r1
 8004564:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004566:	4b7e      	ldr	r3, [pc, #504]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800456a:	4b7d      	ldr	r3, [pc, #500]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 800456c:	2101      	movs	r1, #1
 800456e:	430a      	orrs	r2, r1
 8004570:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004572:	f7fe fbed 	bl	8002d50 <HAL_GetTick>
 8004576:	0003      	movs	r3, r0
 8004578:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800457c:	f7fe fbe8 	bl	8002d50 <HAL_GetTick>
 8004580:	0002      	movs	r2, r0
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e0e3      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800458e:	4b74      	ldr	r3, [pc, #464]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	2202      	movs	r2, #2
 8004594:	4013      	ands	r3, r2
 8004596:	d0f1      	beq.n	800457c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004598:	4b71      	ldr	r3, [pc, #452]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 800459a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459c:	22f8      	movs	r2, #248	; 0xf8
 800459e:	4393      	bics	r3, r2
 80045a0:	0019      	movs	r1, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	00da      	lsls	r2, r3, #3
 80045a8:	4b6d      	ldr	r3, [pc, #436]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80045aa:	430a      	orrs	r2, r1
 80045ac:	635a      	str	r2, [r3, #52]	; 0x34
 80045ae:	e034      	b.n	800461a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	3305      	adds	r3, #5
 80045b6:	d111      	bne.n	80045dc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80045b8:	4b69      	ldr	r3, [pc, #420]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80045ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045bc:	4b68      	ldr	r3, [pc, #416]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80045be:	2104      	movs	r1, #4
 80045c0:	438a      	bics	r2, r1
 80045c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80045c4:	4b66      	ldr	r3, [pc, #408]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80045c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c8:	22f8      	movs	r2, #248	; 0xf8
 80045ca:	4393      	bics	r3, r2
 80045cc:	0019      	movs	r1, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	00da      	lsls	r2, r3, #3
 80045d4:	4b62      	ldr	r3, [pc, #392]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80045d6:	430a      	orrs	r2, r1
 80045d8:	635a      	str	r2, [r3, #52]	; 0x34
 80045da:	e01e      	b.n	800461a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80045dc:	4b60      	ldr	r3, [pc, #384]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80045de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e0:	4b5f      	ldr	r3, [pc, #380]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80045e2:	2104      	movs	r1, #4
 80045e4:	430a      	orrs	r2, r1
 80045e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80045e8:	4b5d      	ldr	r3, [pc, #372]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80045ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ec:	4b5c      	ldr	r3, [pc, #368]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80045ee:	2101      	movs	r1, #1
 80045f0:	438a      	bics	r2, r1
 80045f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f4:	f7fe fbac 	bl	8002d50 <HAL_GetTick>
 80045f8:	0003      	movs	r3, r0
 80045fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80045fe:	f7fe fba7 	bl	8002d50 <HAL_GetTick>
 8004602:	0002      	movs	r2, r0
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e0a2      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004610:	4b53      	ldr	r3, [pc, #332]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004614:	2202      	movs	r2, #2
 8004616:	4013      	ands	r3, r2
 8004618:	d1f1      	bne.n	80045fe <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d100      	bne.n	8004624 <HAL_RCC_OscConfig+0x4e4>
 8004622:	e097      	b.n	8004754 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004624:	4b4e      	ldr	r3, [pc, #312]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	220c      	movs	r2, #12
 800462a:	4013      	ands	r3, r2
 800462c:	2b08      	cmp	r3, #8
 800462e:	d100      	bne.n	8004632 <HAL_RCC_OscConfig+0x4f2>
 8004630:	e06b      	b.n	800470a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d14c      	bne.n	80046d4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463a:	4b49      	ldr	r3, [pc, #292]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4b48      	ldr	r3, [pc, #288]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004640:	494a      	ldr	r1, [pc, #296]	; (800476c <HAL_RCC_OscConfig+0x62c>)
 8004642:	400a      	ands	r2, r1
 8004644:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004646:	f7fe fb83 	bl	8002d50 <HAL_GetTick>
 800464a:	0003      	movs	r3, r0
 800464c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004650:	f7fe fb7e 	bl	8002d50 <HAL_GetTick>
 8004654:	0002      	movs	r2, r0
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e079      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004662:	4b3f      	ldr	r3, [pc, #252]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	2380      	movs	r3, #128	; 0x80
 8004668:	049b      	lsls	r3, r3, #18
 800466a:	4013      	ands	r3, r2
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800466e:	4b3c      	ldr	r3, [pc, #240]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	220f      	movs	r2, #15
 8004674:	4393      	bics	r3, r2
 8004676:	0019      	movs	r1, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467c:	4b38      	ldr	r3, [pc, #224]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 800467e:	430a      	orrs	r2, r1
 8004680:	62da      	str	r2, [r3, #44]	; 0x2c
 8004682:	4b37      	ldr	r3, [pc, #220]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	4a3a      	ldr	r2, [pc, #232]	; (8004770 <HAL_RCC_OscConfig+0x630>)
 8004688:	4013      	ands	r3, r2
 800468a:	0019      	movs	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	431a      	orrs	r2, r3
 8004696:	4b32      	ldr	r3, [pc, #200]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004698:	430a      	orrs	r2, r1
 800469a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800469c:	4b30      	ldr	r3, [pc, #192]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4b2f      	ldr	r3, [pc, #188]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80046a2:	2180      	movs	r1, #128	; 0x80
 80046a4:	0449      	lsls	r1, r1, #17
 80046a6:	430a      	orrs	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046aa:	f7fe fb51 	bl	8002d50 <HAL_GetTick>
 80046ae:	0003      	movs	r3, r0
 80046b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fe fb4c 	bl	8002d50 <HAL_GetTick>
 80046b8:	0002      	movs	r2, r0
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e047      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046c6:	4b26      	ldr	r3, [pc, #152]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	049b      	lsls	r3, r3, #18
 80046ce:	4013      	ands	r3, r2
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x574>
 80046d2:	e03f      	b.n	8004754 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d4:	4b22      	ldr	r3, [pc, #136]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4b21      	ldr	r3, [pc, #132]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80046da:	4924      	ldr	r1, [pc, #144]	; (800476c <HAL_RCC_OscConfig+0x62c>)
 80046dc:	400a      	ands	r2, r1
 80046de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7fe fb36 	bl	8002d50 <HAL_GetTick>
 80046e4:	0003      	movs	r3, r0
 80046e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ea:	f7fe fb31 	bl	8002d50 <HAL_GetTick>
 80046ee:	0002      	movs	r2, r0
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e02c      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046fc:	4b18      	ldr	r3, [pc, #96]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	049b      	lsls	r3, r3, #18
 8004704:	4013      	ands	r3, r2
 8004706:	d1f0      	bne.n	80046ea <HAL_RCC_OscConfig+0x5aa>
 8004708:	e024      	b.n	8004754 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e01f      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004716:	4b12      	ldr	r3, [pc, #72]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800471c:	4b10      	ldr	r3, [pc, #64]	; (8004760 <HAL_RCC_OscConfig+0x620>)
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	025b      	lsls	r3, r3, #9
 8004728:	401a      	ands	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	429a      	cmp	r2, r3
 8004730:	d10e      	bne.n	8004750 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	220f      	movs	r2, #15
 8004736:	401a      	ands	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d107      	bne.n	8004750 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	23f0      	movs	r3, #240	; 0xf0
 8004744:	039b      	lsls	r3, r3, #14
 8004746:	401a      	ands	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	0018      	movs	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	b008      	add	sp, #32
 800475c:	bd80      	pop	{r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	40021000 	.word	0x40021000
 8004764:	00001388 	.word	0x00001388
 8004768:	efffffff 	.word	0xefffffff
 800476c:	feffffff 	.word	0xfeffffff
 8004770:	ffc2ffff 	.word	0xffc2ffff

08004774 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0b3      	b.n	80048f0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004788:	4b5b      	ldr	r3, [pc, #364]	; (80048f8 <HAL_RCC_ClockConfig+0x184>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2201      	movs	r2, #1
 800478e:	4013      	ands	r3, r2
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d911      	bls.n	80047ba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b58      	ldr	r3, [pc, #352]	; (80048f8 <HAL_RCC_ClockConfig+0x184>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2201      	movs	r2, #1
 800479c:	4393      	bics	r3, r2
 800479e:	0019      	movs	r1, r3
 80047a0:	4b55      	ldr	r3, [pc, #340]	; (80048f8 <HAL_RCC_ClockConfig+0x184>)
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a8:	4b53      	ldr	r3, [pc, #332]	; (80048f8 <HAL_RCC_ClockConfig+0x184>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2201      	movs	r2, #1
 80047ae:	4013      	ands	r3, r2
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d001      	beq.n	80047ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e09a      	b.n	80048f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2202      	movs	r2, #2
 80047c0:	4013      	ands	r3, r2
 80047c2:	d015      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2204      	movs	r2, #4
 80047ca:	4013      	ands	r3, r2
 80047cc:	d006      	beq.n	80047dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80047ce:	4b4b      	ldr	r3, [pc, #300]	; (80048fc <HAL_RCC_ClockConfig+0x188>)
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	4b4a      	ldr	r3, [pc, #296]	; (80048fc <HAL_RCC_ClockConfig+0x188>)
 80047d4:	21e0      	movs	r1, #224	; 0xe0
 80047d6:	00c9      	lsls	r1, r1, #3
 80047d8:	430a      	orrs	r2, r1
 80047da:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047dc:	4b47      	ldr	r3, [pc, #284]	; (80048fc <HAL_RCC_ClockConfig+0x188>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	22f0      	movs	r2, #240	; 0xf0
 80047e2:	4393      	bics	r3, r2
 80047e4:	0019      	movs	r1, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	4b44      	ldr	r3, [pc, #272]	; (80048fc <HAL_RCC_ClockConfig+0x188>)
 80047ec:	430a      	orrs	r2, r1
 80047ee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2201      	movs	r2, #1
 80047f6:	4013      	ands	r3, r2
 80047f8:	d040      	beq.n	800487c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d107      	bne.n	8004812 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004802:	4b3e      	ldr	r3, [pc, #248]	; (80048fc <HAL_RCC_ClockConfig+0x188>)
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	2380      	movs	r3, #128	; 0x80
 8004808:	029b      	lsls	r3, r3, #10
 800480a:	4013      	ands	r3, r2
 800480c:	d114      	bne.n	8004838 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e06e      	b.n	80048f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d107      	bne.n	800482a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481a:	4b38      	ldr	r3, [pc, #224]	; (80048fc <HAL_RCC_ClockConfig+0x188>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	049b      	lsls	r3, r3, #18
 8004822:	4013      	ands	r3, r2
 8004824:	d108      	bne.n	8004838 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e062      	b.n	80048f0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482a:	4b34      	ldr	r3, [pc, #208]	; (80048fc <HAL_RCC_ClockConfig+0x188>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2202      	movs	r2, #2
 8004830:	4013      	ands	r3, r2
 8004832:	d101      	bne.n	8004838 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e05b      	b.n	80048f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004838:	4b30      	ldr	r3, [pc, #192]	; (80048fc <HAL_RCC_ClockConfig+0x188>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2203      	movs	r2, #3
 800483e:	4393      	bics	r3, r2
 8004840:	0019      	movs	r1, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	4b2d      	ldr	r3, [pc, #180]	; (80048fc <HAL_RCC_ClockConfig+0x188>)
 8004848:	430a      	orrs	r2, r1
 800484a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800484c:	f7fe fa80 	bl	8002d50 <HAL_GetTick>
 8004850:	0003      	movs	r3, r0
 8004852:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004854:	e009      	b.n	800486a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004856:	f7fe fa7b 	bl	8002d50 <HAL_GetTick>
 800485a:	0002      	movs	r2, r0
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	4a27      	ldr	r2, [pc, #156]	; (8004900 <HAL_RCC_ClockConfig+0x18c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e042      	b.n	80048f0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486a:	4b24      	ldr	r3, [pc, #144]	; (80048fc <HAL_RCC_ClockConfig+0x188>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	220c      	movs	r2, #12
 8004870:	401a      	ands	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	429a      	cmp	r2, r3
 800487a:	d1ec      	bne.n	8004856 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800487c:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <HAL_RCC_ClockConfig+0x184>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2201      	movs	r2, #1
 8004882:	4013      	ands	r3, r2
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d211      	bcs.n	80048ae <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488a:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <HAL_RCC_ClockConfig+0x184>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2201      	movs	r2, #1
 8004890:	4393      	bics	r3, r2
 8004892:	0019      	movs	r1, r3
 8004894:	4b18      	ldr	r3, [pc, #96]	; (80048f8 <HAL_RCC_ClockConfig+0x184>)
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800489c:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <HAL_RCC_ClockConfig+0x184>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2201      	movs	r2, #1
 80048a2:	4013      	ands	r3, r2
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d001      	beq.n	80048ae <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e020      	b.n	80048f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2204      	movs	r2, #4
 80048b4:	4013      	ands	r3, r2
 80048b6:	d009      	beq.n	80048cc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80048b8:	4b10      	ldr	r3, [pc, #64]	; (80048fc <HAL_RCC_ClockConfig+0x188>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4a11      	ldr	r2, [pc, #68]	; (8004904 <HAL_RCC_ClockConfig+0x190>)
 80048be:	4013      	ands	r3, r2
 80048c0:	0019      	movs	r1, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <HAL_RCC_ClockConfig+0x188>)
 80048c8:	430a      	orrs	r2, r1
 80048ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80048cc:	f000 f820 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 80048d0:	0001      	movs	r1, r0
 80048d2:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <HAL_RCC_ClockConfig+0x188>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	091b      	lsrs	r3, r3, #4
 80048d8:	220f      	movs	r2, #15
 80048da:	4013      	ands	r3, r2
 80048dc:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <HAL_RCC_ClockConfig+0x194>)
 80048de:	5cd3      	ldrb	r3, [r2, r3]
 80048e0:	000a      	movs	r2, r1
 80048e2:	40da      	lsrs	r2, r3
 80048e4:	4b09      	ldr	r3, [pc, #36]	; (800490c <HAL_RCC_ClockConfig+0x198>)
 80048e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80048e8:	2000      	movs	r0, #0
 80048ea:	f7fe f9eb 	bl	8002cc4 <HAL_InitTick>
  
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	0018      	movs	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	b004      	add	sp, #16
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40022000 	.word	0x40022000
 80048fc:	40021000 	.word	0x40021000
 8004900:	00001388 	.word	0x00001388
 8004904:	fffff8ff 	.word	0xfffff8ff
 8004908:	08008f20 	.word	0x08008f20
 800490c:	20000000 	.word	0x20000000

08004910 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004910:	b590      	push	{r4, r7, lr}
 8004912:	b08f      	sub	sp, #60	; 0x3c
 8004914:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004916:	2314      	movs	r3, #20
 8004918:	18fb      	adds	r3, r7, r3
 800491a:	4a2b      	ldr	r2, [pc, #172]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800491c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800491e:	c313      	stmia	r3!, {r0, r1, r4}
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004924:	1d3b      	adds	r3, r7, #4
 8004926:	4a29      	ldr	r2, [pc, #164]	; (80049cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004928:	ca13      	ldmia	r2!, {r0, r1, r4}
 800492a:	c313      	stmia	r3!, {r0, r1, r4}
 800492c:	6812      	ldr	r2, [r2, #0]
 800492e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004934:	2300      	movs	r3, #0
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28
 8004938:	2300      	movs	r3, #0
 800493a:	637b      	str	r3, [r7, #52]	; 0x34
 800493c:	2300      	movs	r3, #0
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004944:	4b22      	ldr	r3, [pc, #136]	; (80049d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494c:	220c      	movs	r2, #12
 800494e:	4013      	ands	r3, r2
 8004950:	2b04      	cmp	r3, #4
 8004952:	d002      	beq.n	800495a <HAL_RCC_GetSysClockFreq+0x4a>
 8004954:	2b08      	cmp	r3, #8
 8004956:	d003      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0x50>
 8004958:	e02d      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800495a:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800495c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800495e:	e02d      	b.n	80049bc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004962:	0c9b      	lsrs	r3, r3, #18
 8004964:	220f      	movs	r2, #15
 8004966:	4013      	ands	r3, r2
 8004968:	2214      	movs	r2, #20
 800496a:	18ba      	adds	r2, r7, r2
 800496c:	5cd3      	ldrb	r3, [r2, r3]
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004970:	4b17      	ldr	r3, [pc, #92]	; (80049d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	220f      	movs	r2, #15
 8004976:	4013      	ands	r3, r2
 8004978:	1d3a      	adds	r2, r7, #4
 800497a:	5cd3      	ldrb	r3, [r2, r3]
 800497c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800497e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004980:	2380      	movs	r3, #128	; 0x80
 8004982:	025b      	lsls	r3, r3, #9
 8004984:	4013      	ands	r3, r2
 8004986:	d009      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800498a:	4812      	ldr	r0, [pc, #72]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800498c:	f7fb fbd8 	bl	8000140 <__udivsi3>
 8004990:	0003      	movs	r3, r0
 8004992:	001a      	movs	r2, r3
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	4353      	muls	r3, r2
 8004998:	637b      	str	r3, [r7, #52]	; 0x34
 800499a:	e009      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800499c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800499e:	000a      	movs	r2, r1
 80049a0:	0152      	lsls	r2, r2, #5
 80049a2:	1a52      	subs	r2, r2, r1
 80049a4:	0193      	lsls	r3, r2, #6
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	185b      	adds	r3, r3, r1
 80049ac:	021b      	lsls	r3, r3, #8
 80049ae:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80049b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049b4:	e002      	b.n	80049bc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049b6:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80049b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049ba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80049be:	0018      	movs	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b00f      	add	sp, #60	; 0x3c
 80049c4:	bd90      	pop	{r4, r7, pc}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	08008e80 	.word	0x08008e80
 80049cc:	08008e90 	.word	0x08008e90
 80049d0:	40021000 	.word	0x40021000
 80049d4:	007a1200 	.word	0x007a1200

080049d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049dc:	4b02      	ldr	r3, [pc, #8]	; (80049e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80049de:	681b      	ldr	r3, [r3, #0]
}
 80049e0:	0018      	movs	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	20000000 	.word	0x20000000

080049ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80049f0:	f7ff fff2 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 80049f4:	0001      	movs	r1, r0
 80049f6:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	2207      	movs	r2, #7
 80049fe:	4013      	ands	r3, r2
 8004a00:	4a04      	ldr	r2, [pc, #16]	; (8004a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a02:	5cd3      	ldrb	r3, [r2, r3]
 8004a04:	40d9      	lsrs	r1, r3
 8004a06:	000b      	movs	r3, r1
}    
 8004a08:	0018      	movs	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	40021000 	.word	0x40021000
 8004a14:	08008f30 	.word	0x08008f30

08004a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e042      	b.n	8004ab0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	223d      	movs	r2, #61	; 0x3d
 8004a2e:	5c9b      	ldrb	r3, [r3, r2]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d107      	bne.n	8004a46 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	223c      	movs	r2, #60	; 0x3c
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	0018      	movs	r0, r3
 8004a42:	f7fd ff59 	bl	80028f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	223d      	movs	r2, #61	; 0x3d
 8004a4a:	2102      	movs	r1, #2
 8004a4c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	0019      	movs	r1, r3
 8004a58:	0010      	movs	r0, r2
 8004a5a:	f000 f901 	bl	8004c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2246      	movs	r2, #70	; 0x46
 8004a62:	2101      	movs	r1, #1
 8004a64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	223e      	movs	r2, #62	; 0x3e
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	5499      	strb	r1, [r3, r2]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	223f      	movs	r2, #63	; 0x3f
 8004a72:	2101      	movs	r1, #1
 8004a74:	5499      	strb	r1, [r3, r2]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2240      	movs	r2, #64	; 0x40
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	5499      	strb	r1, [r3, r2]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2241      	movs	r2, #65	; 0x41
 8004a82:	2101      	movs	r1, #1
 8004a84:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2242      	movs	r2, #66	; 0x42
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	5499      	strb	r1, [r3, r2]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2243      	movs	r2, #67	; 0x43
 8004a92:	2101      	movs	r1, #1
 8004a94:	5499      	strb	r1, [r3, r2]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2244      	movs	r2, #68	; 0x44
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	5499      	strb	r1, [r3, r2]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2245      	movs	r2, #69	; 0x45
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	223d      	movs	r2, #61	; 0x3d
 8004aaa:	2101      	movs	r1, #1
 8004aac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b002      	add	sp, #8
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	230f      	movs	r3, #15
 8004ac4:	18fb      	adds	r3, r7, r3
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	223c      	movs	r2, #60	; 0x3c
 8004ace:	5c9b      	ldrb	r3, [r3, r2]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_TIM_ConfigClockSource+0x20>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e0bc      	b.n	8004c52 <HAL_TIM_ConfigClockSource+0x19a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	223c      	movs	r2, #60	; 0x3c
 8004adc:	2101      	movs	r1, #1
 8004ade:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	223d      	movs	r2, #61	; 0x3d
 8004ae4:	2102      	movs	r1, #2
 8004ae6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2277      	movs	r2, #119	; 0x77
 8004af4:	4393      	bics	r3, r2
 8004af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4a58      	ldr	r2, [pc, #352]	; (8004c5c <HAL_TIM_ConfigClockSource+0x1a4>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2280      	movs	r2, #128	; 0x80
 8004b0e:	0192      	lsls	r2, r2, #6
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d040      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0xde>
 8004b14:	2280      	movs	r2, #128	; 0x80
 8004b16:	0192      	lsls	r2, r2, #6
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d900      	bls.n	8004b1e <HAL_TIM_ConfigClockSource+0x66>
 8004b1c:	e088      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x178>
 8004b1e:	2280      	movs	r2, #128	; 0x80
 8004b20:	0152      	lsls	r2, r2, #5
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d100      	bne.n	8004b28 <HAL_TIM_ConfigClockSource+0x70>
 8004b26:	e088      	b.n	8004c3a <HAL_TIM_ConfigClockSource+0x182>
 8004b28:	2280      	movs	r2, #128	; 0x80
 8004b2a:	0152      	lsls	r2, r2, #5
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d900      	bls.n	8004b32 <HAL_TIM_ConfigClockSource+0x7a>
 8004b30:	e07e      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x178>
 8004b32:	2b70      	cmp	r3, #112	; 0x70
 8004b34:	d018      	beq.n	8004b68 <HAL_TIM_ConfigClockSource+0xb0>
 8004b36:	d900      	bls.n	8004b3a <HAL_TIM_ConfigClockSource+0x82>
 8004b38:	e07a      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x178>
 8004b3a:	2b60      	cmp	r3, #96	; 0x60
 8004b3c:	d04f      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x126>
 8004b3e:	d900      	bls.n	8004b42 <HAL_TIM_ConfigClockSource+0x8a>
 8004b40:	e076      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x178>
 8004b42:	2b50      	cmp	r3, #80	; 0x50
 8004b44:	d03b      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x106>
 8004b46:	d900      	bls.n	8004b4a <HAL_TIM_ConfigClockSource+0x92>
 8004b48:	e072      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x178>
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	d057      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x146>
 8004b4e:	d900      	bls.n	8004b52 <HAL_TIM_ConfigClockSource+0x9a>
 8004b50:	e06e      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x178>
 8004b52:	2b30      	cmp	r3, #48	; 0x30
 8004b54:	d063      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x166>
 8004b56:	d86b      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x178>
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d060      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x166>
 8004b5c:	d868      	bhi.n	8004c30 <HAL_TIM_ConfigClockSource+0x178>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d05d      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x166>
 8004b62:	2b10      	cmp	r3, #16
 8004b64:	d05b      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x166>
 8004b66:	e063      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	6899      	ldr	r1, [r3, #8]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f000 f96c 	bl	8004e54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2277      	movs	r2, #119	; 0x77
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	609a      	str	r2, [r3, #8]
      break;
 8004b94:	e052      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6899      	ldr	r1, [r3, #8]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f000 f955 	bl	8004e54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2180      	movs	r1, #128	; 0x80
 8004bb6:	01c9      	lsls	r1, r1, #7
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	609a      	str	r2, [r3, #8]
      break;
 8004bbc:	e03e      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6859      	ldr	r1, [r3, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	001a      	movs	r2, r3
 8004bcc:	f000 f8c8 	bl	8004d60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2150      	movs	r1, #80	; 0x50
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 f922 	bl	8004e20 <TIM_ITRx_SetConfig>
      break;
 8004bdc:	e02e      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	001a      	movs	r2, r3
 8004bec:	f000 f8e6 	bl	8004dbc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2160      	movs	r1, #96	; 0x60
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f000 f912 	bl	8004e20 <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e01e      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	001a      	movs	r2, r3
 8004c0c:	f000 f8a8 	bl	8004d60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2140      	movs	r1, #64	; 0x40
 8004c16:	0018      	movs	r0, r3
 8004c18:	f000 f902 	bl	8004e20 <TIM_ITRx_SetConfig>
      break;
 8004c1c:	e00e      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	0019      	movs	r1, r3
 8004c28:	0010      	movs	r0, r2
 8004c2a:	f000 f8f9 	bl	8004e20 <TIM_ITRx_SetConfig>
      break;
 8004c2e:	e005      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004c30:	230f      	movs	r3, #15
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	2201      	movs	r2, #1
 8004c36:	701a      	strb	r2, [r3, #0]
      break;
 8004c38:	e000      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004c3a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	223d      	movs	r2, #61	; 0x3d
 8004c40:	2101      	movs	r1, #1
 8004c42:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	223c      	movs	r2, #60	; 0x3c
 8004c48:	2100      	movs	r1, #0
 8004c4a:	5499      	strb	r1, [r3, r2]

  return status;
 8004c4c:	230f      	movs	r3, #15
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	781b      	ldrb	r3, [r3, #0]
}
 8004c52:	0018      	movs	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b004      	add	sp, #16
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	ffff00ff 	.word	0xffff00ff

08004c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a34      	ldr	r2, [pc, #208]	; (8004d44 <TIM_Base_SetConfig+0xe4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d008      	beq.n	8004c8a <TIM_Base_SetConfig+0x2a>
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	2380      	movs	r3, #128	; 0x80
 8004c7c:	05db      	lsls	r3, r3, #23
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d003      	beq.n	8004c8a <TIM_Base_SetConfig+0x2a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a30      	ldr	r2, [pc, #192]	; (8004d48 <TIM_Base_SetConfig+0xe8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d108      	bne.n	8004c9c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2270      	movs	r2, #112	; 0x70
 8004c8e:	4393      	bics	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a29      	ldr	r2, [pc, #164]	; (8004d44 <TIM_Base_SetConfig+0xe4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d018      	beq.n	8004cd6 <TIM_Base_SetConfig+0x76>
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	2380      	movs	r3, #128	; 0x80
 8004ca8:	05db      	lsls	r3, r3, #23
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d013      	beq.n	8004cd6 <TIM_Base_SetConfig+0x76>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a25      	ldr	r2, [pc, #148]	; (8004d48 <TIM_Base_SetConfig+0xe8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00f      	beq.n	8004cd6 <TIM_Base_SetConfig+0x76>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a24      	ldr	r2, [pc, #144]	; (8004d4c <TIM_Base_SetConfig+0xec>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00b      	beq.n	8004cd6 <TIM_Base_SetConfig+0x76>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a23      	ldr	r2, [pc, #140]	; (8004d50 <TIM_Base_SetConfig+0xf0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d007      	beq.n	8004cd6 <TIM_Base_SetConfig+0x76>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a22      	ldr	r2, [pc, #136]	; (8004d54 <TIM_Base_SetConfig+0xf4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d003      	beq.n	8004cd6 <TIM_Base_SetConfig+0x76>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a21      	ldr	r2, [pc, #132]	; (8004d58 <TIM_Base_SetConfig+0xf8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d108      	bne.n	8004ce8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4a20      	ldr	r2, [pc, #128]	; (8004d5c <TIM_Base_SetConfig+0xfc>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2280      	movs	r2, #128	; 0x80
 8004cec:	4393      	bics	r3, r2
 8004cee:	001a      	movs	r2, r3
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a0c      	ldr	r2, [pc, #48]	; (8004d44 <TIM_Base_SetConfig+0xe4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00b      	beq.n	8004d2e <TIM_Base_SetConfig+0xce>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a0d      	ldr	r2, [pc, #52]	; (8004d50 <TIM_Base_SetConfig+0xf0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d007      	beq.n	8004d2e <TIM_Base_SetConfig+0xce>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a0c      	ldr	r2, [pc, #48]	; (8004d54 <TIM_Base_SetConfig+0xf4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_Base_SetConfig+0xce>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a0b      	ldr	r2, [pc, #44]	; (8004d58 <TIM_Base_SetConfig+0xf8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d103      	bne.n	8004d36 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	615a      	str	r2, [r3, #20]
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b004      	add	sp, #16
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40012c00 	.word	0x40012c00
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	40002000 	.word	0x40002000
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40014400 	.word	0x40014400
 8004d58:	40014800 	.word	0x40014800
 8004d5c:	fffffcff 	.word	0xfffffcff

08004d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	2201      	movs	r2, #1
 8004d78:	4393      	bics	r3, r2
 8004d7a:	001a      	movs	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	22f0      	movs	r2, #240	; 0xf0
 8004d8a:	4393      	bics	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	220a      	movs	r2, #10
 8004d9c:	4393      	bics	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	621a      	str	r2, [r3, #32]
}
 8004db4:	46c0      	nop			; (mov r8, r8)
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b006      	add	sp, #24
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	2210      	movs	r2, #16
 8004dce:	4393      	bics	r3, r2
 8004dd0:	001a      	movs	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	4a0d      	ldr	r2, [pc, #52]	; (8004e1c <TIM_TI2_ConfigInputStage+0x60>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	031b      	lsls	r3, r3, #12
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	22a0      	movs	r2, #160	; 0xa0
 8004df8:	4393      	bics	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b006      	add	sp, #24
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	ffff0fff 	.word	0xffff0fff

08004e20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2270      	movs	r2, #112	; 0x70
 8004e34:	4393      	bics	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	2207      	movs	r2, #7
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	609a      	str	r2, [r3, #8]
}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	b004      	add	sp, #16
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	4a09      	ldr	r2, [pc, #36]	; (8004e90 <TIM_ETR_SetConfig+0x3c>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	021a      	lsls	r2, r3, #8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	609a      	str	r2, [r3, #8]
}
 8004e88:	46c0      	nop			; (mov r8, r8)
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b006      	add	sp, #24
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	ffff00ff 	.word	0xffff00ff

08004e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	223c      	movs	r2, #60	; 0x3c
 8004ea2:	5c9b      	ldrb	r3, [r3, r2]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e047      	b.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	223c      	movs	r2, #60	; 0x3c
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	223d      	movs	r2, #61	; 0x3d
 8004eb8:	2102      	movs	r1, #2
 8004eba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2270      	movs	r2, #112	; 0x70
 8004ed0:	4393      	bics	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a16      	ldr	r2, [pc, #88]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00f      	beq.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	05db      	lsls	r3, r3, #23
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d009      	beq.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a11      	ldr	r2, [pc, #68]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d004      	beq.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a10      	ldr	r2, [pc, #64]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d10c      	bne.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2280      	movs	r2, #128	; 0x80
 8004f14:	4393      	bics	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	223d      	movs	r2, #61	; 0x3d
 8004f2e:	2101      	movs	r1, #1
 8004f30:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	223c      	movs	r2, #60	; 0x3c
 8004f36:	2100      	movs	r1, #0
 8004f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b004      	add	sp, #16
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40012c00 	.word	0x40012c00
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40014000 	.word	0x40014000

08004f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e044      	b.n	8004fec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d107      	bne.n	8004f7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2274      	movs	r2, #116	; 0x74
 8004f6e:	2100      	movs	r1, #0
 8004f70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	0018      	movs	r0, r3
 8004f76:	f7fd fcdd 	bl	8002934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2224      	movs	r2, #36	; 0x24
 8004f7e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	438a      	bics	r2, r1
 8004f8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	0018      	movs	r0, r3
 8004f94:	f000 fbce 	bl	8005734 <UART_SetConfig>
 8004f98:	0003      	movs	r3, r0
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e024      	b.n	8004fec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	0018      	movs	r0, r3
 8004fae:	f000 fd01 	bl	80059b4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	490d      	ldr	r1, [pc, #52]	; (8004ff4 <HAL_UART_Init+0xa4>)
 8004fbe:	400a      	ands	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	212a      	movs	r1, #42	; 0x2a
 8004fce:	438a      	bics	r2, r1
 8004fd0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2101      	movs	r1, #1
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f000 fd99 	bl	8005b1c <UART_CheckIdleState>
 8004fea:	0003      	movs	r3, r0
}
 8004fec:	0018      	movs	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b002      	add	sp, #8
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	ffffb7ff 	.word	0xffffb7ff

08004ff8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08a      	sub	sp, #40	; 0x28
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	1dbb      	adds	r3, r7, #6
 8005006:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800500c:	2b20      	cmp	r3, #32
 800500e:	d000      	beq.n	8005012 <HAL_UART_Transmit+0x1a>
 8005010:	e096      	b.n	8005140 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_UART_Transmit+0x28>
 8005018:	1dbb      	adds	r3, r7, #6
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e08e      	b.n	8005142 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	015b      	lsls	r3, r3, #5
 800502c:	429a      	cmp	r2, r3
 800502e:	d109      	bne.n	8005044 <HAL_UART_Transmit+0x4c>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d105      	bne.n	8005044 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2201      	movs	r2, #1
 800503c:	4013      	ands	r3, r2
 800503e:	d001      	beq.n	8005044 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e07e      	b.n	8005142 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2274      	movs	r2, #116	; 0x74
 8005048:	5c9b      	ldrb	r3, [r3, r2]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_UART_Transmit+0x5a>
 800504e:	2302      	movs	r3, #2
 8005050:	e077      	b.n	8005142 <HAL_UART_Transmit+0x14a>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2274      	movs	r2, #116	; 0x74
 8005056:	2101      	movs	r1, #1
 8005058:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2280      	movs	r2, #128	; 0x80
 800505e:	2100      	movs	r1, #0
 8005060:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2221      	movs	r2, #33	; 0x21
 8005066:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005068:	f7fd fe72 	bl	8002d50 <HAL_GetTick>
 800506c:	0003      	movs	r3, r0
 800506e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	1dba      	adds	r2, r7, #6
 8005074:	2150      	movs	r1, #80	; 0x50
 8005076:	8812      	ldrh	r2, [r2, #0]
 8005078:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1dba      	adds	r2, r7, #6
 800507e:	2152      	movs	r1, #82	; 0x52
 8005080:	8812      	ldrh	r2, [r2, #0]
 8005082:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	015b      	lsls	r3, r3, #5
 800508c:	429a      	cmp	r2, r3
 800508e:	d108      	bne.n	80050a2 <HAL_UART_Transmit+0xaa>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d104      	bne.n	80050a2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005098:	2300      	movs	r3, #0
 800509a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	e003      	b.n	80050aa <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2274      	movs	r2, #116	; 0x74
 80050ae:	2100      	movs	r1, #0
 80050b0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80050b2:	e02d      	b.n	8005110 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	0013      	movs	r3, r2
 80050be:	2200      	movs	r2, #0
 80050c0:	2180      	movs	r1, #128	; 0x80
 80050c2:	f000 fd73 	bl	8005bac <UART_WaitOnFlagUntilTimeout>
 80050c6:	1e03      	subs	r3, r0, #0
 80050c8:	d001      	beq.n	80050ce <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e039      	b.n	8005142 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10b      	bne.n	80050ec <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	881a      	ldrh	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	05d2      	lsls	r2, r2, #23
 80050de:	0dd2      	lsrs	r2, r2, #23
 80050e0:	b292      	uxth	r2, r2
 80050e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	3302      	adds	r3, #2
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	e008      	b.n	80050fe <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	781a      	ldrb	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	b292      	uxth	r2, r2
 80050f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	3301      	adds	r3, #1
 80050fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2252      	movs	r2, #82	; 0x52
 8005102:	5a9b      	ldrh	r3, [r3, r2]
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b299      	uxth	r1, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2252      	movs	r2, #82	; 0x52
 800510e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2252      	movs	r2, #82	; 0x52
 8005114:	5a9b      	ldrh	r3, [r3, r2]
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1cb      	bne.n	80050b4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	0013      	movs	r3, r2
 8005126:	2200      	movs	r2, #0
 8005128:	2140      	movs	r1, #64	; 0x40
 800512a:	f000 fd3f 	bl	8005bac <UART_WaitOnFlagUntilTimeout>
 800512e:	1e03      	subs	r3, r0, #0
 8005130:	d001      	beq.n	8005136 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e005      	b.n	8005142 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2220      	movs	r2, #32
 800513a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	e000      	b.n	8005142 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005140:	2302      	movs	r3, #2
  }
}
 8005142:	0018      	movs	r0, r3
 8005144:	46bd      	mov	sp, r7
 8005146:	b008      	add	sp, #32
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800514c:	b590      	push	{r4, r7, lr}
 800514e:	b0ab      	sub	sp, #172	; 0xac
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	22a4      	movs	r2, #164	; 0xa4
 800515c:	18b9      	adds	r1, r7, r2
 800515e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	20a0      	movs	r0, #160	; 0xa0
 8005168:	1839      	adds	r1, r7, r0
 800516a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	219c      	movs	r1, #156	; 0x9c
 8005174:	1879      	adds	r1, r7, r1
 8005176:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005178:	0011      	movs	r1, r2
 800517a:	18bb      	adds	r3, r7, r2
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a99      	ldr	r2, [pc, #612]	; (80053e4 <HAL_UART_IRQHandler+0x298>)
 8005180:	4013      	ands	r3, r2
 8005182:	2298      	movs	r2, #152	; 0x98
 8005184:	18bc      	adds	r4, r7, r2
 8005186:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005188:	18bb      	adds	r3, r7, r2
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d114      	bne.n	80051ba <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005190:	187b      	adds	r3, r7, r1
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2220      	movs	r2, #32
 8005196:	4013      	ands	r3, r2
 8005198:	d00f      	beq.n	80051ba <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800519a:	183b      	adds	r3, r7, r0
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2220      	movs	r2, #32
 80051a0:	4013      	ands	r3, r2
 80051a2:	d00a      	beq.n	80051ba <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d100      	bne.n	80051ae <HAL_UART_IRQHandler+0x62>
 80051ac:	e296      	b.n	80056dc <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	0010      	movs	r0, r2
 80051b6:	4798      	blx	r3
      }
      return;
 80051b8:	e290      	b.n	80056dc <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051ba:	2398      	movs	r3, #152	; 0x98
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d100      	bne.n	80051c6 <HAL_UART_IRQHandler+0x7a>
 80051c4:	e114      	b.n	80053f0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80051c6:	239c      	movs	r3, #156	; 0x9c
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2201      	movs	r2, #1
 80051ce:	4013      	ands	r3, r2
 80051d0:	d106      	bne.n	80051e0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80051d2:	23a0      	movs	r3, #160	; 0xa0
 80051d4:	18fb      	adds	r3, r7, r3
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a83      	ldr	r2, [pc, #524]	; (80053e8 <HAL_UART_IRQHandler+0x29c>)
 80051da:	4013      	ands	r3, r2
 80051dc:	d100      	bne.n	80051e0 <HAL_UART_IRQHandler+0x94>
 80051de:	e107      	b.n	80053f0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051e0:	23a4      	movs	r3, #164	; 0xa4
 80051e2:	18fb      	adds	r3, r7, r3
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2201      	movs	r2, #1
 80051e8:	4013      	ands	r3, r2
 80051ea:	d012      	beq.n	8005212 <HAL_UART_IRQHandler+0xc6>
 80051ec:	23a0      	movs	r3, #160	; 0xa0
 80051ee:	18fb      	adds	r3, r7, r3
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	2380      	movs	r3, #128	; 0x80
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	4013      	ands	r3, r2
 80051f8:	d00b      	beq.n	8005212 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2201      	movs	r2, #1
 8005200:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2280      	movs	r2, #128	; 0x80
 8005206:	589b      	ldr	r3, [r3, r2]
 8005208:	2201      	movs	r2, #1
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2180      	movs	r1, #128	; 0x80
 8005210:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005212:	23a4      	movs	r3, #164	; 0xa4
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2202      	movs	r2, #2
 800521a:	4013      	ands	r3, r2
 800521c:	d011      	beq.n	8005242 <HAL_UART_IRQHandler+0xf6>
 800521e:	239c      	movs	r3, #156	; 0x9c
 8005220:	18fb      	adds	r3, r7, r3
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2201      	movs	r2, #1
 8005226:	4013      	ands	r3, r2
 8005228:	d00b      	beq.n	8005242 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2202      	movs	r2, #2
 8005230:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2280      	movs	r2, #128	; 0x80
 8005236:	589b      	ldr	r3, [r3, r2]
 8005238:	2204      	movs	r2, #4
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2180      	movs	r1, #128	; 0x80
 8005240:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005242:	23a4      	movs	r3, #164	; 0xa4
 8005244:	18fb      	adds	r3, r7, r3
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2204      	movs	r2, #4
 800524a:	4013      	ands	r3, r2
 800524c:	d011      	beq.n	8005272 <HAL_UART_IRQHandler+0x126>
 800524e:	239c      	movs	r3, #156	; 0x9c
 8005250:	18fb      	adds	r3, r7, r3
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2201      	movs	r2, #1
 8005256:	4013      	ands	r3, r2
 8005258:	d00b      	beq.n	8005272 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2204      	movs	r2, #4
 8005260:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2280      	movs	r2, #128	; 0x80
 8005266:	589b      	ldr	r3, [r3, r2]
 8005268:	2202      	movs	r2, #2
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2180      	movs	r1, #128	; 0x80
 8005270:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005272:	23a4      	movs	r3, #164	; 0xa4
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2208      	movs	r2, #8
 800527a:	4013      	ands	r3, r2
 800527c:	d017      	beq.n	80052ae <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800527e:	23a0      	movs	r3, #160	; 0xa0
 8005280:	18fb      	adds	r3, r7, r3
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2220      	movs	r2, #32
 8005286:	4013      	ands	r3, r2
 8005288:	d105      	bne.n	8005296 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800528a:	239c      	movs	r3, #156	; 0x9c
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2201      	movs	r2, #1
 8005292:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005294:	d00b      	beq.n	80052ae <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2208      	movs	r2, #8
 800529c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2280      	movs	r2, #128	; 0x80
 80052a2:	589b      	ldr	r3, [r3, r2]
 80052a4:	2208      	movs	r2, #8
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2180      	movs	r1, #128	; 0x80
 80052ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052ae:	23a4      	movs	r3, #164	; 0xa4
 80052b0:	18fb      	adds	r3, r7, r3
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	4013      	ands	r3, r2
 80052ba:	d013      	beq.n	80052e4 <HAL_UART_IRQHandler+0x198>
 80052bc:	23a0      	movs	r3, #160	; 0xa0
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	2380      	movs	r3, #128	; 0x80
 80052c4:	04db      	lsls	r3, r3, #19
 80052c6:	4013      	ands	r3, r2
 80052c8:	d00c      	beq.n	80052e4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2280      	movs	r2, #128	; 0x80
 80052d0:	0112      	lsls	r2, r2, #4
 80052d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2280      	movs	r2, #128	; 0x80
 80052d8:	589b      	ldr	r3, [r3, r2]
 80052da:	2220      	movs	r2, #32
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2180      	movs	r1, #128	; 0x80
 80052e2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2280      	movs	r2, #128	; 0x80
 80052e8:	589b      	ldr	r3, [r3, r2]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d100      	bne.n	80052f0 <HAL_UART_IRQHandler+0x1a4>
 80052ee:	e1f7      	b.n	80056e0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80052f0:	23a4      	movs	r3, #164	; 0xa4
 80052f2:	18fb      	adds	r3, r7, r3
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2220      	movs	r2, #32
 80052f8:	4013      	ands	r3, r2
 80052fa:	d00e      	beq.n	800531a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052fc:	23a0      	movs	r3, #160	; 0xa0
 80052fe:	18fb      	adds	r3, r7, r3
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2220      	movs	r2, #32
 8005304:	4013      	ands	r3, r2
 8005306:	d008      	beq.n	800531a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800530c:	2b00      	cmp	r3, #0
 800530e:	d004      	beq.n	800531a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	0010      	movs	r0, r2
 8005318:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2280      	movs	r2, #128	; 0x80
 800531e:	589b      	ldr	r3, [r3, r2]
 8005320:	2194      	movs	r1, #148	; 0x94
 8005322:	187a      	adds	r2, r7, r1
 8005324:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2240      	movs	r2, #64	; 0x40
 800532e:	4013      	ands	r3, r2
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d004      	beq.n	800533e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005334:	187b      	adds	r3, r7, r1
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2228      	movs	r2, #40	; 0x28
 800533a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800533c:	d047      	beq.n	80053ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	0018      	movs	r0, r3
 8005342:	f000 fcf7 	bl	8005d34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2240      	movs	r2, #64	; 0x40
 800534e:	4013      	ands	r3, r2
 8005350:	2b40      	cmp	r3, #64	; 0x40
 8005352:	d137      	bne.n	80053c4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005354:	f3ef 8310 	mrs	r3, PRIMASK
 8005358:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800535a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800535c:	2090      	movs	r0, #144	; 0x90
 800535e:	183a      	adds	r2, r7, r0
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	2301      	movs	r3, #1
 8005364:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005368:	f383 8810 	msr	PRIMASK, r3
}
 800536c:	46c0      	nop			; (mov r8, r8)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2140      	movs	r1, #64	; 0x40
 800537a:	438a      	bics	r2, r1
 800537c:	609a      	str	r2, [r3, #8]
 800537e:	183b      	adds	r3, r7, r0
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005386:	f383 8810 	msr	PRIMASK, r3
}
 800538a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005390:	2b00      	cmp	r3, #0
 8005392:	d012      	beq.n	80053ba <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005398:	4a14      	ldr	r2, [pc, #80]	; (80053ec <HAL_UART_IRQHandler+0x2a0>)
 800539a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a0:	0018      	movs	r0, r3
 80053a2:	f7fe fbf9 	bl	8003b98 <HAL_DMA_Abort_IT>
 80053a6:	1e03      	subs	r3, r0, #0
 80053a8:	d01a      	beq.n	80053e0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b4:	0018      	movs	r0, r3
 80053b6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b8:	e012      	b.n	80053e0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	0018      	movs	r0, r3
 80053be:	f000 f9a5 	bl	800570c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c2:	e00d      	b.n	80053e0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	0018      	movs	r0, r3
 80053c8:	f000 f9a0 	bl	800570c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053cc:	e008      	b.n	80053e0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	0018      	movs	r0, r3
 80053d2:	f000 f99b 	bl	800570c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2280      	movs	r2, #128	; 0x80
 80053da:	2100      	movs	r1, #0
 80053dc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80053de:	e17f      	b.n	80056e0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e0:	46c0      	nop			; (mov r8, r8)
    return;
 80053e2:	e17d      	b.n	80056e0 <HAL_UART_IRQHandler+0x594>
 80053e4:	0000080f 	.word	0x0000080f
 80053e8:	04000120 	.word	0x04000120
 80053ec:	08005df9 	.word	0x08005df9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d000      	beq.n	80053fa <HAL_UART_IRQHandler+0x2ae>
 80053f8:	e131      	b.n	800565e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053fa:	23a4      	movs	r3, #164	; 0xa4
 80053fc:	18fb      	adds	r3, r7, r3
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2210      	movs	r2, #16
 8005402:	4013      	ands	r3, r2
 8005404:	d100      	bne.n	8005408 <HAL_UART_IRQHandler+0x2bc>
 8005406:	e12a      	b.n	800565e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005408:	23a0      	movs	r3, #160	; 0xa0
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2210      	movs	r2, #16
 8005410:	4013      	ands	r3, r2
 8005412:	d100      	bne.n	8005416 <HAL_UART_IRQHandler+0x2ca>
 8005414:	e123      	b.n	800565e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2210      	movs	r2, #16
 800541c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	2240      	movs	r2, #64	; 0x40
 8005426:	4013      	ands	r3, r2
 8005428:	2b40      	cmp	r3, #64	; 0x40
 800542a:	d000      	beq.n	800542e <HAL_UART_IRQHandler+0x2e2>
 800542c:	e09b      	b.n	8005566 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	217e      	movs	r1, #126	; 0x7e
 8005438:	187b      	adds	r3, r7, r1
 800543a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800543c:	187b      	adds	r3, r7, r1
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d100      	bne.n	8005446 <HAL_UART_IRQHandler+0x2fa>
 8005444:	e14e      	b.n	80056e4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2258      	movs	r2, #88	; 0x58
 800544a:	5a9b      	ldrh	r3, [r3, r2]
 800544c:	187a      	adds	r2, r7, r1
 800544e:	8812      	ldrh	r2, [r2, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d300      	bcc.n	8005456 <HAL_UART_IRQHandler+0x30a>
 8005454:	e146      	b.n	80056e4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	187a      	adds	r2, r7, r1
 800545a:	215a      	movs	r1, #90	; 0x5a
 800545c:	8812      	ldrh	r2, [r2, #0]
 800545e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	2b20      	cmp	r3, #32
 8005468:	d06e      	beq.n	8005548 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800546a:	f3ef 8310 	mrs	r3, PRIMASK
 800546e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005472:	67bb      	str	r3, [r7, #120]	; 0x78
 8005474:	2301      	movs	r3, #1
 8005476:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547a:	f383 8810 	msr	PRIMASK, r3
}
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	499a      	ldr	r1, [pc, #616]	; (80056f4 <HAL_UART_IRQHandler+0x5a8>)
 800548c:	400a      	ands	r2, r1
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005492:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	f383 8810 	msr	PRIMASK, r3
}
 800549a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800549c:	f3ef 8310 	mrs	r3, PRIMASK
 80054a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80054a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a4:	677b      	str	r3, [r7, #116]	; 0x74
 80054a6:	2301      	movs	r3, #1
 80054a8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ac:	f383 8810 	msr	PRIMASK, r3
}
 80054b0:	46c0      	nop			; (mov r8, r8)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2101      	movs	r1, #1
 80054be:	438a      	bics	r2, r1
 80054c0:	609a      	str	r2, [r3, #8]
 80054c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054c4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c8:	f383 8810 	msr	PRIMASK, r3
}
 80054cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ce:	f3ef 8310 	mrs	r3, PRIMASK
 80054d2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80054d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054d6:	673b      	str	r3, [r7, #112]	; 0x70
 80054d8:	2301      	movs	r3, #1
 80054da:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054de:	f383 8810 	msr	PRIMASK, r3
}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2140      	movs	r1, #64	; 0x40
 80054f0:	438a      	bics	r2, r1
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054f6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054fa:	f383 8810 	msr	PRIMASK, r3
}
 80054fe:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800550c:	f3ef 8310 	mrs	r3, PRIMASK
 8005510:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005512:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005514:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005516:	2301      	movs	r3, #1
 8005518:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800551c:	f383 8810 	msr	PRIMASK, r3
}
 8005520:	46c0      	nop			; (mov r8, r8)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2110      	movs	r1, #16
 800552e:	438a      	bics	r2, r1
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005534:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005538:	f383 8810 	msr	PRIMASK, r3
}
 800553c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	0018      	movs	r0, r3
 8005544:	f7fe faf0 	bl	8003b28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2258      	movs	r2, #88	; 0x58
 800554c:	5a9a      	ldrh	r2, [r3, r2]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	215a      	movs	r1, #90	; 0x5a
 8005552:	5a5b      	ldrh	r3, [r3, r1]
 8005554:	b29b      	uxth	r3, r3
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	b29a      	uxth	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	0011      	movs	r1, r2
 800555e:	0018      	movs	r0, r3
 8005560:	f000 f8dc 	bl	800571c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005564:	e0be      	b.n	80056e4 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2258      	movs	r2, #88	; 0x58
 800556a:	5a99      	ldrh	r1, [r3, r2]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	225a      	movs	r2, #90	; 0x5a
 8005570:	5a9b      	ldrh	r3, [r3, r2]
 8005572:	b29a      	uxth	r2, r3
 8005574:	208e      	movs	r0, #142	; 0x8e
 8005576:	183b      	adds	r3, r7, r0
 8005578:	1a8a      	subs	r2, r1, r2
 800557a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	225a      	movs	r2, #90	; 0x5a
 8005580:	5a9b      	ldrh	r3, [r3, r2]
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d100      	bne.n	800558a <HAL_UART_IRQHandler+0x43e>
 8005588:	e0ae      	b.n	80056e8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800558a:	183b      	adds	r3, r7, r0
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d100      	bne.n	8005594 <HAL_UART_IRQHandler+0x448>
 8005592:	e0a9      	b.n	80056e8 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005594:	f3ef 8310 	mrs	r3, PRIMASK
 8005598:	60fb      	str	r3, [r7, #12]
  return(result);
 800559a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800559c:	2488      	movs	r4, #136	; 0x88
 800559e:	193a      	adds	r2, r7, r4
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	2301      	movs	r3, #1
 80055a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f383 8810 	msr	PRIMASK, r3
}
 80055ac:	46c0      	nop			; (mov r8, r8)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	494f      	ldr	r1, [pc, #316]	; (80056f8 <HAL_UART_IRQHandler+0x5ac>)
 80055ba:	400a      	ands	r2, r1
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	193b      	adds	r3, r7, r4
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f383 8810 	msr	PRIMASK, r3
}
 80055ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055cc:	f3ef 8310 	mrs	r3, PRIMASK
 80055d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80055d2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d4:	2484      	movs	r4, #132	; 0x84
 80055d6:	193a      	adds	r2, r7, r4
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	2301      	movs	r3, #1
 80055dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	f383 8810 	msr	PRIMASK, r3
}
 80055e4:	46c0      	nop			; (mov r8, r8)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2101      	movs	r1, #1
 80055f2:	438a      	bics	r2, r1
 80055f4:	609a      	str	r2, [r3, #8]
 80055f6:	193b      	adds	r3, r7, r4
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	f383 8810 	msr	PRIMASK, r3
}
 8005602:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005616:	f3ef 8310 	mrs	r3, PRIMASK
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800561e:	2480      	movs	r4, #128	; 0x80
 8005620:	193a      	adds	r2, r7, r4
 8005622:	6013      	str	r3, [r2, #0]
 8005624:	2301      	movs	r3, #1
 8005626:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	f383 8810 	msr	PRIMASK, r3
}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2110      	movs	r1, #16
 800563c:	438a      	bics	r2, r1
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	193b      	adds	r3, r7, r4
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005648:	f383 8810 	msr	PRIMASK, r3
}
 800564c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800564e:	183b      	adds	r3, r7, r0
 8005650:	881a      	ldrh	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	0011      	movs	r1, r2
 8005656:	0018      	movs	r0, r3
 8005658:	f000 f860 	bl	800571c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800565c:	e044      	b.n	80056e8 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800565e:	23a4      	movs	r3, #164	; 0xa4
 8005660:	18fb      	adds	r3, r7, r3
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	2380      	movs	r3, #128	; 0x80
 8005666:	035b      	lsls	r3, r3, #13
 8005668:	4013      	ands	r3, r2
 800566a:	d010      	beq.n	800568e <HAL_UART_IRQHandler+0x542>
 800566c:	239c      	movs	r3, #156	; 0x9c
 800566e:	18fb      	adds	r3, r7, r3
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	2380      	movs	r3, #128	; 0x80
 8005674:	03db      	lsls	r3, r3, #15
 8005676:	4013      	ands	r3, r2
 8005678:	d009      	beq.n	800568e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2280      	movs	r2, #128	; 0x80
 8005680:	0352      	lsls	r2, r2, #13
 8005682:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	0018      	movs	r0, r3
 8005688:	f000 fbf8 	bl	8005e7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800568c:	e02f      	b.n	80056ee <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800568e:	23a4      	movs	r3, #164	; 0xa4
 8005690:	18fb      	adds	r3, r7, r3
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2280      	movs	r2, #128	; 0x80
 8005696:	4013      	ands	r3, r2
 8005698:	d00f      	beq.n	80056ba <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800569a:	23a0      	movs	r3, #160	; 0xa0
 800569c:	18fb      	adds	r3, r7, r3
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2280      	movs	r2, #128	; 0x80
 80056a2:	4013      	ands	r3, r2
 80056a4:	d009      	beq.n	80056ba <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d01e      	beq.n	80056ec <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	0010      	movs	r0, r2
 80056b6:	4798      	blx	r3
    }
    return;
 80056b8:	e018      	b.n	80056ec <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056ba:	23a4      	movs	r3, #164	; 0xa4
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2240      	movs	r2, #64	; 0x40
 80056c2:	4013      	ands	r3, r2
 80056c4:	d013      	beq.n	80056ee <HAL_UART_IRQHandler+0x5a2>
 80056c6:	23a0      	movs	r3, #160	; 0xa0
 80056c8:	18fb      	adds	r3, r7, r3
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2240      	movs	r2, #64	; 0x40
 80056ce:	4013      	ands	r3, r2
 80056d0:	d00d      	beq.n	80056ee <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	0018      	movs	r0, r3
 80056d6:	f000 fba6 	bl	8005e26 <UART_EndTransmit_IT>
    return;
 80056da:	e008      	b.n	80056ee <HAL_UART_IRQHandler+0x5a2>
      return;
 80056dc:	46c0      	nop			; (mov r8, r8)
 80056de:	e006      	b.n	80056ee <HAL_UART_IRQHandler+0x5a2>
    return;
 80056e0:	46c0      	nop			; (mov r8, r8)
 80056e2:	e004      	b.n	80056ee <HAL_UART_IRQHandler+0x5a2>
      return;
 80056e4:	46c0      	nop			; (mov r8, r8)
 80056e6:	e002      	b.n	80056ee <HAL_UART_IRQHandler+0x5a2>
      return;
 80056e8:	46c0      	nop			; (mov r8, r8)
 80056ea:	e000      	b.n	80056ee <HAL_UART_IRQHandler+0x5a2>
    return;
 80056ec:	46c0      	nop			; (mov r8, r8)
  }

}
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b02b      	add	sp, #172	; 0xac
 80056f2:	bd90      	pop	{r4, r7, pc}
 80056f4:	fffffeff 	.word	0xfffffeff
 80056f8:	fffffedf 	.word	0xfffffedf

080056fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005704:	46c0      	nop			; (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	b002      	add	sp, #8
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005714:	46c0      	nop			; (mov r8, r8)
 8005716:	46bd      	mov	sp, r7
 8005718:	b002      	add	sp, #8
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	000a      	movs	r2, r1
 8005726:	1cbb      	adds	r3, r7, #2
 8005728:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	46bd      	mov	sp, r7
 800572e:	b002      	add	sp, #8
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800573c:	231e      	movs	r3, #30
 800573e:	18fb      	adds	r3, r7, r3
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	431a      	orrs	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a8d      	ldr	r2, [pc, #564]	; (8005998 <UART_SetConfig+0x264>)
 8005764:	4013      	ands	r3, r2
 8005766:	0019      	movs	r1, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	430a      	orrs	r2, r1
 8005770:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	4a88      	ldr	r2, [pc, #544]	; (800599c <UART_SetConfig+0x268>)
 800577a:	4013      	ands	r3, r2
 800577c:	0019      	movs	r1, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	4a7f      	ldr	r2, [pc, #508]	; (80059a0 <UART_SetConfig+0x26c>)
 80057a2:	4013      	ands	r3, r2
 80057a4:	0019      	movs	r1, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a7b      	ldr	r2, [pc, #492]	; (80059a4 <UART_SetConfig+0x270>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d127      	bne.n	800580a <UART_SetConfig+0xd6>
 80057ba:	4b7b      	ldr	r3, [pc, #492]	; (80059a8 <UART_SetConfig+0x274>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	2203      	movs	r2, #3
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d00d      	beq.n	80057e2 <UART_SetConfig+0xae>
 80057c6:	d81b      	bhi.n	8005800 <UART_SetConfig+0xcc>
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d014      	beq.n	80057f6 <UART_SetConfig+0xc2>
 80057cc:	d818      	bhi.n	8005800 <UART_SetConfig+0xcc>
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <UART_SetConfig+0xa4>
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d00a      	beq.n	80057ec <UART_SetConfig+0xb8>
 80057d6:	e013      	b.n	8005800 <UART_SetConfig+0xcc>
 80057d8:	231f      	movs	r3, #31
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	2200      	movs	r2, #0
 80057de:	701a      	strb	r2, [r3, #0]
 80057e0:	e021      	b.n	8005826 <UART_SetConfig+0xf2>
 80057e2:	231f      	movs	r3, #31
 80057e4:	18fb      	adds	r3, r7, r3
 80057e6:	2202      	movs	r2, #2
 80057e8:	701a      	strb	r2, [r3, #0]
 80057ea:	e01c      	b.n	8005826 <UART_SetConfig+0xf2>
 80057ec:	231f      	movs	r3, #31
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	2204      	movs	r2, #4
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	e017      	b.n	8005826 <UART_SetConfig+0xf2>
 80057f6:	231f      	movs	r3, #31
 80057f8:	18fb      	adds	r3, r7, r3
 80057fa:	2208      	movs	r2, #8
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e012      	b.n	8005826 <UART_SetConfig+0xf2>
 8005800:	231f      	movs	r3, #31
 8005802:	18fb      	adds	r3, r7, r3
 8005804:	2210      	movs	r2, #16
 8005806:	701a      	strb	r2, [r3, #0]
 8005808:	e00d      	b.n	8005826 <UART_SetConfig+0xf2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a67      	ldr	r2, [pc, #412]	; (80059ac <UART_SetConfig+0x278>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d104      	bne.n	800581e <UART_SetConfig+0xea>
 8005814:	231f      	movs	r3, #31
 8005816:	18fb      	adds	r3, r7, r3
 8005818:	2200      	movs	r2, #0
 800581a:	701a      	strb	r2, [r3, #0]
 800581c:	e003      	b.n	8005826 <UART_SetConfig+0xf2>
 800581e:	231f      	movs	r3, #31
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	2210      	movs	r2, #16
 8005824:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69da      	ldr	r2, [r3, #28]
 800582a:	2380      	movs	r3, #128	; 0x80
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	429a      	cmp	r2, r3
 8005830:	d15d      	bne.n	80058ee <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005832:	231f      	movs	r3, #31
 8005834:	18fb      	adds	r3, r7, r3
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b08      	cmp	r3, #8
 800583a:	d015      	beq.n	8005868 <UART_SetConfig+0x134>
 800583c:	dc18      	bgt.n	8005870 <UART_SetConfig+0x13c>
 800583e:	2b04      	cmp	r3, #4
 8005840:	d00d      	beq.n	800585e <UART_SetConfig+0x12a>
 8005842:	dc15      	bgt.n	8005870 <UART_SetConfig+0x13c>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <UART_SetConfig+0x11a>
 8005848:	2b02      	cmp	r3, #2
 800584a:	d005      	beq.n	8005858 <UART_SetConfig+0x124>
 800584c:	e010      	b.n	8005870 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800584e:	f7ff f8cd 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 8005852:	0003      	movs	r3, r0
 8005854:	61bb      	str	r3, [r7, #24]
        break;
 8005856:	e012      	b.n	800587e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005858:	4b55      	ldr	r3, [pc, #340]	; (80059b0 <UART_SetConfig+0x27c>)
 800585a:	61bb      	str	r3, [r7, #24]
        break;
 800585c:	e00f      	b.n	800587e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800585e:	f7ff f857 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 8005862:	0003      	movs	r3, r0
 8005864:	61bb      	str	r3, [r7, #24]
        break;
 8005866:	e00a      	b.n	800587e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005868:	2380      	movs	r3, #128	; 0x80
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	61bb      	str	r3, [r7, #24]
        break;
 800586e:	e006      	b.n	800587e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005874:	231e      	movs	r3, #30
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	2201      	movs	r2, #1
 800587a:	701a      	strb	r2, [r3, #0]
        break;
 800587c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d100      	bne.n	8005886 <UART_SetConfig+0x152>
 8005884:	e07b      	b.n	800597e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	005a      	lsls	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	18d2      	adds	r2, r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	0019      	movs	r1, r3
 8005898:	0010      	movs	r0, r2
 800589a:	f7fa fc51 	bl	8000140 <__udivsi3>
 800589e:	0003      	movs	r3, r0
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b0f      	cmp	r3, #15
 80058a8:	d91c      	bls.n	80058e4 <UART_SetConfig+0x1b0>
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	2380      	movs	r3, #128	; 0x80
 80058ae:	025b      	lsls	r3, r3, #9
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d217      	bcs.n	80058e4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	200e      	movs	r0, #14
 80058ba:	183b      	adds	r3, r7, r0
 80058bc:	210f      	movs	r1, #15
 80058be:	438a      	bics	r2, r1
 80058c0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	085b      	lsrs	r3, r3, #1
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2207      	movs	r2, #7
 80058ca:	4013      	ands	r3, r2
 80058cc:	b299      	uxth	r1, r3
 80058ce:	183b      	adds	r3, r7, r0
 80058d0:	183a      	adds	r2, r7, r0
 80058d2:	8812      	ldrh	r2, [r2, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	183a      	adds	r2, r7, r0
 80058de:	8812      	ldrh	r2, [r2, #0]
 80058e0:	60da      	str	r2, [r3, #12]
 80058e2:	e04c      	b.n	800597e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80058e4:	231e      	movs	r3, #30
 80058e6:	18fb      	adds	r3, r7, r3
 80058e8:	2201      	movs	r2, #1
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	e047      	b.n	800597e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058ee:	231f      	movs	r3, #31
 80058f0:	18fb      	adds	r3, r7, r3
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d015      	beq.n	8005924 <UART_SetConfig+0x1f0>
 80058f8:	dc18      	bgt.n	800592c <UART_SetConfig+0x1f8>
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d00d      	beq.n	800591a <UART_SetConfig+0x1e6>
 80058fe:	dc15      	bgt.n	800592c <UART_SetConfig+0x1f8>
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <UART_SetConfig+0x1d6>
 8005904:	2b02      	cmp	r3, #2
 8005906:	d005      	beq.n	8005914 <UART_SetConfig+0x1e0>
 8005908:	e010      	b.n	800592c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800590a:	f7ff f86f 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 800590e:	0003      	movs	r3, r0
 8005910:	61bb      	str	r3, [r7, #24]
        break;
 8005912:	e012      	b.n	800593a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005914:	4b26      	ldr	r3, [pc, #152]	; (80059b0 <UART_SetConfig+0x27c>)
 8005916:	61bb      	str	r3, [r7, #24]
        break;
 8005918:	e00f      	b.n	800593a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800591a:	f7fe fff9 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 800591e:	0003      	movs	r3, r0
 8005920:	61bb      	str	r3, [r7, #24]
        break;
 8005922:	e00a      	b.n	800593a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005924:	2380      	movs	r3, #128	; 0x80
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	61bb      	str	r3, [r7, #24]
        break;
 800592a:	e006      	b.n	800593a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005930:	231e      	movs	r3, #30
 8005932:	18fb      	adds	r3, r7, r3
 8005934:	2201      	movs	r2, #1
 8005936:	701a      	strb	r2, [r3, #0]
        break;
 8005938:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01e      	beq.n	800597e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	085a      	lsrs	r2, r3, #1
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	18d2      	adds	r2, r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	0019      	movs	r1, r3
 8005950:	0010      	movs	r0, r2
 8005952:	f7fa fbf5 	bl	8000140 <__udivsi3>
 8005956:	0003      	movs	r3, r0
 8005958:	b29b      	uxth	r3, r3
 800595a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	2b0f      	cmp	r3, #15
 8005960:	d909      	bls.n	8005976 <UART_SetConfig+0x242>
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	025b      	lsls	r3, r3, #9
 8005968:	429a      	cmp	r2, r3
 800596a:	d204      	bcs.n	8005976 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	60da      	str	r2, [r3, #12]
 8005974:	e003      	b.n	800597e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005976:	231e      	movs	r3, #30
 8005978:	18fb      	adds	r3, r7, r3
 800597a:	2201      	movs	r2, #1
 800597c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800598a:	231e      	movs	r3, #30
 800598c:	18fb      	adds	r3, r7, r3
 800598e:	781b      	ldrb	r3, [r3, #0]
}
 8005990:	0018      	movs	r0, r3
 8005992:	46bd      	mov	sp, r7
 8005994:	b008      	add	sp, #32
 8005996:	bd80      	pop	{r7, pc}
 8005998:	ffff69f3 	.word	0xffff69f3
 800599c:	ffffcfff 	.word	0xffffcfff
 80059a0:	fffff4ff 	.word	0xfffff4ff
 80059a4:	40013800 	.word	0x40013800
 80059a8:	40021000 	.word	0x40021000
 80059ac:	40004400 	.word	0x40004400
 80059b0:	007a1200 	.word	0x007a1200

080059b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	2201      	movs	r2, #1
 80059c2:	4013      	ands	r3, r2
 80059c4:	d00b      	beq.n	80059de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4a4a      	ldr	r2, [pc, #296]	; (8005af8 <UART_AdvFeatureConfig+0x144>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	0019      	movs	r1, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	2202      	movs	r2, #2
 80059e4:	4013      	ands	r3, r2
 80059e6:	d00b      	beq.n	8005a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4a43      	ldr	r2, [pc, #268]	; (8005afc <UART_AdvFeatureConfig+0x148>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	0019      	movs	r1, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	2204      	movs	r2, #4
 8005a06:	4013      	ands	r3, r2
 8005a08:	d00b      	beq.n	8005a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	4a3b      	ldr	r2, [pc, #236]	; (8005b00 <UART_AdvFeatureConfig+0x14c>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	0019      	movs	r1, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	2208      	movs	r2, #8
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d00b      	beq.n	8005a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	4a34      	ldr	r2, [pc, #208]	; (8005b04 <UART_AdvFeatureConfig+0x150>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	0019      	movs	r1, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	2210      	movs	r2, #16
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	d00b      	beq.n	8005a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <UART_AdvFeatureConfig+0x154>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	0019      	movs	r1, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	d00b      	beq.n	8005a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	4a25      	ldr	r2, [pc, #148]	; (8005b0c <UART_AdvFeatureConfig+0x158>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	0019      	movs	r1, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2240      	movs	r2, #64	; 0x40
 8005a8e:	4013      	ands	r3, r2
 8005a90:	d01d      	beq.n	8005ace <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	4a1d      	ldr	r2, [pc, #116]	; (8005b10 <UART_AdvFeatureConfig+0x15c>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	0019      	movs	r1, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aae:	2380      	movs	r3, #128	; 0x80
 8005ab0:	035b      	lsls	r3, r3, #13
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d10b      	bne.n	8005ace <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	4a15      	ldr	r2, [pc, #84]	; (8005b14 <UART_AdvFeatureConfig+0x160>)
 8005abe:	4013      	ands	r3, r2
 8005ac0:	0019      	movs	r1, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	2280      	movs	r2, #128	; 0x80
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	d00b      	beq.n	8005af0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	4a0e      	ldr	r2, [pc, #56]	; (8005b18 <UART_AdvFeatureConfig+0x164>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	0019      	movs	r1, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	605a      	str	r2, [r3, #4]
  }
}
 8005af0:	46c0      	nop			; (mov r8, r8)
 8005af2:	46bd      	mov	sp, r7
 8005af4:	b002      	add	sp, #8
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	fffdffff 	.word	0xfffdffff
 8005afc:	fffeffff 	.word	0xfffeffff
 8005b00:	fffbffff 	.word	0xfffbffff
 8005b04:	ffff7fff 	.word	0xffff7fff
 8005b08:	ffffefff 	.word	0xffffefff
 8005b0c:	ffffdfff 	.word	0xffffdfff
 8005b10:	ffefffff 	.word	0xffefffff
 8005b14:	ff9fffff 	.word	0xff9fffff
 8005b18:	fff7ffff 	.word	0xfff7ffff

08005b1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2280      	movs	r2, #128	; 0x80
 8005b28:	2100      	movs	r1, #0
 8005b2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b2c:	f7fd f910 	bl	8002d50 <HAL_GetTick>
 8005b30:	0003      	movs	r3, r0
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2208      	movs	r2, #8
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	d10c      	bne.n	8005b5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2280      	movs	r2, #128	; 0x80
 8005b46:	0391      	lsls	r1, r2, #14
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	4a17      	ldr	r2, [pc, #92]	; (8005ba8 <UART_CheckIdleState+0x8c>)
 8005b4c:	9200      	str	r2, [sp, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f000 f82c 	bl	8005bac <UART_WaitOnFlagUntilTimeout>
 8005b54:	1e03      	subs	r3, r0, #0
 8005b56:	d001      	beq.n	8005b5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e021      	b.n	8005ba0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2204      	movs	r2, #4
 8005b64:	4013      	ands	r3, r2
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d10c      	bne.n	8005b84 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2280      	movs	r2, #128	; 0x80
 8005b6e:	03d1      	lsls	r1, r2, #15
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	4a0d      	ldr	r2, [pc, #52]	; (8005ba8 <UART_CheckIdleState+0x8c>)
 8005b74:	9200      	str	r2, [sp, #0]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f000 f818 	bl	8005bac <UART_WaitOnFlagUntilTimeout>
 8005b7c:	1e03      	subs	r3, r0, #0
 8005b7e:	d001      	beq.n	8005b84 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e00d      	b.n	8005ba0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2220      	movs	r2, #32
 8005b88:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2274      	movs	r2, #116	; 0x74
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	b004      	add	sp, #16
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	01ffffff 	.word	0x01ffffff

08005bac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b094      	sub	sp, #80	; 0x50
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	603b      	str	r3, [r7, #0]
 8005bb8:	1dfb      	adds	r3, r7, #7
 8005bba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bbc:	e0a3      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	d100      	bne.n	8005bc6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005bc4:	e09f      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc6:	f7fd f8c3 	bl	8002d50 <HAL_GetTick>
 8005bca:	0002      	movs	r2, r0
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d302      	bcc.n	8005bdc <UART_WaitOnFlagUntilTimeout+0x30>
 8005bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d13d      	bne.n	8005c58 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8005be0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005be4:	647b      	str	r3, [r7, #68]	; 0x44
 8005be6:	2301      	movs	r3, #1
 8005be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bec:	f383 8810 	msr	PRIMASK, r3
}
 8005bf0:	46c0      	nop			; (mov r8, r8)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	494c      	ldr	r1, [pc, #304]	; (8005d30 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005bfe:	400a      	ands	r2, r1
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c04:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	f383 8810 	msr	PRIMASK, r3
}
 8005c0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c12:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c16:	643b      	str	r3, [r7, #64]	; 0x40
 8005c18:	2301      	movs	r3, #1
 8005c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1e:	f383 8810 	msr	PRIMASK, r3
}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2101      	movs	r1, #1
 8005c30:	438a      	bics	r2, r1
 8005c32:	609a      	str	r2, [r3, #8]
 8005c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3a:	f383 8810 	msr	PRIMASK, r3
}
 8005c3e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2274      	movs	r2, #116	; 0x74
 8005c50:	2100      	movs	r1, #0
 8005c52:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e067      	b.n	8005d28 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2204      	movs	r2, #4
 8005c60:	4013      	ands	r3, r2
 8005c62:	d050      	beq.n	8005d06 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69da      	ldr	r2, [r3, #28]
 8005c6a:	2380      	movs	r3, #128	; 0x80
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	401a      	ands	r2, r3
 8005c70:	2380      	movs	r3, #128	; 0x80
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d146      	bne.n	8005d06 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2280      	movs	r2, #128	; 0x80
 8005c7e:	0112      	lsls	r2, r2, #4
 8005c80:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c82:	f3ef 8310 	mrs	r3, PRIMASK
 8005c86:	613b      	str	r3, [r7, #16]
  return(result);
 8005c88:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f383 8810 	msr	PRIMASK, r3
}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4923      	ldr	r1, [pc, #140]	; (8005d30 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005ca4:	400a      	ands	r2, r1
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005caa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f383 8810 	msr	PRIMASK, r3
}
 8005cb2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb8:	61fb      	str	r3, [r7, #28]
  return(result);
 8005cba:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	f383 8810 	msr	PRIMASK, r3
}
 8005cc8:	46c0      	nop			; (mov r8, r8)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	438a      	bics	r2, r1
 8005cd8:	609a      	str	r2, [r3, #8]
 8005cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	f383 8810 	msr	PRIMASK, r3
}
 8005ce4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2280      	movs	r2, #128	; 0x80
 8005cf6:	2120      	movs	r1, #32
 8005cf8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2274      	movs	r2, #116	; 0x74
 8005cfe:	2100      	movs	r1, #0
 8005d00:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e010      	b.n	8005d28 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	425a      	negs	r2, r3
 8005d16:	4153      	adcs	r3, r2
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	001a      	movs	r2, r3
 8005d1c:	1dfb      	adds	r3, r7, #7
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d100      	bne.n	8005d26 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005d24:	e74b      	b.n	8005bbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	0018      	movs	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	b014      	add	sp, #80	; 0x50
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	fffffe5f 	.word	0xfffffe5f

08005d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08e      	sub	sp, #56	; 0x38
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d40:	617b      	str	r3, [r7, #20]
  return(result);
 8005d42:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
 8005d46:	2301      	movs	r3, #1
 8005d48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	f383 8810 	msr	PRIMASK, r3
}
 8005d50:	46c0      	nop			; (mov r8, r8)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4925      	ldr	r1, [pc, #148]	; (8005df4 <UART_EndRxTransfer+0xc0>)
 8005d5e:	400a      	ands	r2, r1
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	f383 8810 	msr	PRIMASK, r3
}
 8005d6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d72:	623b      	str	r3, [r7, #32]
  return(result);
 8005d74:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d76:	633b      	str	r3, [r7, #48]	; 0x30
 8005d78:	2301      	movs	r3, #1
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	f383 8810 	msr	PRIMASK, r3
}
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2101      	movs	r1, #1
 8005d90:	438a      	bics	r2, r1
 8005d92:	609a      	str	r2, [r3, #8]
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	f383 8810 	msr	PRIMASK, r3
}
 8005d9e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d118      	bne.n	8005dda <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dac:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005db2:	2301      	movs	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f383 8810 	msr	PRIMASK, r3
}
 8005dbc:	46c0      	nop			; (mov r8, r8)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2110      	movs	r1, #16
 8005dca:	438a      	bics	r2, r1
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f383 8810 	msr	PRIMASK, r3
}
 8005dd8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005dec:	46c0      	nop			; (mov r8, r8)
 8005dee:	46bd      	mov	sp, r7
 8005df0:	b00e      	add	sp, #56	; 0x38
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	fffffedf 	.word	0xfffffedf

08005df8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	225a      	movs	r2, #90	; 0x5a
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2252      	movs	r2, #82	; 0x52
 8005e12:	2100      	movs	r1, #0
 8005e14:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	0018      	movs	r0, r3
 8005e1a:	f7ff fc77 	bl	800570c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	46bd      	mov	sp, r7
 8005e22:	b004      	add	sp, #16
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b086      	sub	sp, #24
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e32:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e34:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	2301      	movs	r3, #1
 8005e3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f383 8810 	msr	PRIMASK, r3
}
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2140      	movs	r1, #64	; 0x40
 8005e50:	438a      	bics	r2, r1
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f383 8810 	msr	PRIMASK, r3
}
 8005e5e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	0018      	movs	r0, r3
 8005e70:	f7ff fc44 	bl	80056fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e74:	46c0      	nop			; (mov r8, r8)
 8005e76:	46bd      	mov	sp, r7
 8005e78:	b006      	add	sp, #24
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e84:	46c0      	nop			; (mov r8, r8)
 8005e86:	46bd      	mov	sp, r7
 8005e88:	b002      	add	sp, #8
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <__errno>:
 8005e8c:	4b01      	ldr	r3, [pc, #4]	; (8005e94 <__errno+0x8>)
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	4770      	bx	lr
 8005e92:	46c0      	nop			; (mov r8, r8)
 8005e94:	2000000c 	.word	0x2000000c

08005e98 <__libc_init_array>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	2600      	movs	r6, #0
 8005e9c:	4d0c      	ldr	r5, [pc, #48]	; (8005ed0 <__libc_init_array+0x38>)
 8005e9e:	4c0d      	ldr	r4, [pc, #52]	; (8005ed4 <__libc_init_array+0x3c>)
 8005ea0:	1b64      	subs	r4, r4, r5
 8005ea2:	10a4      	asrs	r4, r4, #2
 8005ea4:	42a6      	cmp	r6, r4
 8005ea6:	d109      	bne.n	8005ebc <__libc_init_array+0x24>
 8005ea8:	2600      	movs	r6, #0
 8005eaa:	f002 ffbb 	bl	8008e24 <_init>
 8005eae:	4d0a      	ldr	r5, [pc, #40]	; (8005ed8 <__libc_init_array+0x40>)
 8005eb0:	4c0a      	ldr	r4, [pc, #40]	; (8005edc <__libc_init_array+0x44>)
 8005eb2:	1b64      	subs	r4, r4, r5
 8005eb4:	10a4      	asrs	r4, r4, #2
 8005eb6:	42a6      	cmp	r6, r4
 8005eb8:	d105      	bne.n	8005ec6 <__libc_init_array+0x2e>
 8005eba:	bd70      	pop	{r4, r5, r6, pc}
 8005ebc:	00b3      	lsls	r3, r6, #2
 8005ebe:	58eb      	ldr	r3, [r5, r3]
 8005ec0:	4798      	blx	r3
 8005ec2:	3601      	adds	r6, #1
 8005ec4:	e7ee      	b.n	8005ea4 <__libc_init_array+0xc>
 8005ec6:	00b3      	lsls	r3, r6, #2
 8005ec8:	58eb      	ldr	r3, [r5, r3]
 8005eca:	4798      	blx	r3
 8005ecc:	3601      	adds	r6, #1
 8005ece:	e7f2      	b.n	8005eb6 <__libc_init_array+0x1e>
 8005ed0:	08009314 	.word	0x08009314
 8005ed4:	08009314 	.word	0x08009314
 8005ed8:	08009314 	.word	0x08009314
 8005edc:	08009318 	.word	0x08009318

08005ee0 <memset>:
 8005ee0:	0003      	movs	r3, r0
 8005ee2:	1882      	adds	r2, r0, r2
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d100      	bne.n	8005eea <memset+0xa>
 8005ee8:	4770      	bx	lr
 8005eea:	7019      	strb	r1, [r3, #0]
 8005eec:	3301      	adds	r3, #1
 8005eee:	e7f9      	b.n	8005ee4 <memset+0x4>

08005ef0 <__cvt>:
 8005ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ef2:	001e      	movs	r6, r3
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	0014      	movs	r4, r2
 8005ef8:	b08b      	sub	sp, #44	; 0x2c
 8005efa:	429e      	cmp	r6, r3
 8005efc:	da04      	bge.n	8005f08 <__cvt+0x18>
 8005efe:	2180      	movs	r1, #128	; 0x80
 8005f00:	0609      	lsls	r1, r1, #24
 8005f02:	1873      	adds	r3, r6, r1
 8005f04:	001e      	movs	r6, r3
 8005f06:	232d      	movs	r3, #45	; 0x2d
 8005f08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005f0c:	7013      	strb	r3, [r2, #0]
 8005f0e:	2320      	movs	r3, #32
 8005f10:	2203      	movs	r2, #3
 8005f12:	439f      	bics	r7, r3
 8005f14:	2f46      	cmp	r7, #70	; 0x46
 8005f16:	d007      	beq.n	8005f28 <__cvt+0x38>
 8005f18:	003b      	movs	r3, r7
 8005f1a:	3b45      	subs	r3, #69	; 0x45
 8005f1c:	4259      	negs	r1, r3
 8005f1e:	414b      	adcs	r3, r1
 8005f20:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005f22:	3a01      	subs	r2, #1
 8005f24:	18cb      	adds	r3, r1, r3
 8005f26:	9310      	str	r3, [sp, #64]	; 0x40
 8005f28:	ab09      	add	r3, sp, #36	; 0x24
 8005f2a:	9304      	str	r3, [sp, #16]
 8005f2c:	ab08      	add	r3, sp, #32
 8005f2e:	9303      	str	r3, [sp, #12]
 8005f30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f32:	9200      	str	r2, [sp, #0]
 8005f34:	9302      	str	r3, [sp, #8]
 8005f36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f38:	0022      	movs	r2, r4
 8005f3a:	9301      	str	r3, [sp, #4]
 8005f3c:	0033      	movs	r3, r6
 8005f3e:	f000 fcf1 	bl	8006924 <_dtoa_r>
 8005f42:	0005      	movs	r5, r0
 8005f44:	2f47      	cmp	r7, #71	; 0x47
 8005f46:	d102      	bne.n	8005f4e <__cvt+0x5e>
 8005f48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f4a:	07db      	lsls	r3, r3, #31
 8005f4c:	d528      	bpl.n	8005fa0 <__cvt+0xb0>
 8005f4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f50:	18eb      	adds	r3, r5, r3
 8005f52:	9307      	str	r3, [sp, #28]
 8005f54:	2f46      	cmp	r7, #70	; 0x46
 8005f56:	d114      	bne.n	8005f82 <__cvt+0x92>
 8005f58:	782b      	ldrb	r3, [r5, #0]
 8005f5a:	2b30      	cmp	r3, #48	; 0x30
 8005f5c:	d10c      	bne.n	8005f78 <__cvt+0x88>
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2300      	movs	r3, #0
 8005f62:	0020      	movs	r0, r4
 8005f64:	0031      	movs	r1, r6
 8005f66:	f7fa fa71 	bl	800044c <__aeabi_dcmpeq>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d104      	bne.n	8005f78 <__cvt+0x88>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f7a:	9a07      	ldr	r2, [sp, #28]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	18d3      	adds	r3, r2, r3
 8005f80:	9307      	str	r3, [sp, #28]
 8005f82:	2200      	movs	r2, #0
 8005f84:	2300      	movs	r3, #0
 8005f86:	0020      	movs	r0, r4
 8005f88:	0031      	movs	r1, r6
 8005f8a:	f7fa fa5f 	bl	800044c <__aeabi_dcmpeq>
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d001      	beq.n	8005f96 <__cvt+0xa6>
 8005f92:	9b07      	ldr	r3, [sp, #28]
 8005f94:	9309      	str	r3, [sp, #36]	; 0x24
 8005f96:	2230      	movs	r2, #48	; 0x30
 8005f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f9a:	9907      	ldr	r1, [sp, #28]
 8005f9c:	428b      	cmp	r3, r1
 8005f9e:	d306      	bcc.n	8005fae <__cvt+0xbe>
 8005fa0:	0028      	movs	r0, r5
 8005fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005fa6:	1b5b      	subs	r3, r3, r5
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	b00b      	add	sp, #44	; 0x2c
 8005fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fae:	1c59      	adds	r1, r3, #1
 8005fb0:	9109      	str	r1, [sp, #36]	; 0x24
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	e7f0      	b.n	8005f98 <__cvt+0xa8>

08005fb6 <__exponent>:
 8005fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fb8:	1c83      	adds	r3, r0, #2
 8005fba:	b087      	sub	sp, #28
 8005fbc:	9303      	str	r3, [sp, #12]
 8005fbe:	0005      	movs	r5, r0
 8005fc0:	000c      	movs	r4, r1
 8005fc2:	232b      	movs	r3, #43	; 0x2b
 8005fc4:	7002      	strb	r2, [r0, #0]
 8005fc6:	2900      	cmp	r1, #0
 8005fc8:	da01      	bge.n	8005fce <__exponent+0x18>
 8005fca:	424c      	negs	r4, r1
 8005fcc:	3302      	adds	r3, #2
 8005fce:	706b      	strb	r3, [r5, #1]
 8005fd0:	2c09      	cmp	r4, #9
 8005fd2:	dd31      	ble.n	8006038 <__exponent+0x82>
 8005fd4:	270a      	movs	r7, #10
 8005fd6:	ab04      	add	r3, sp, #16
 8005fd8:	1dde      	adds	r6, r3, #7
 8005fda:	0020      	movs	r0, r4
 8005fdc:	0039      	movs	r1, r7
 8005fde:	9601      	str	r6, [sp, #4]
 8005fe0:	f7fa fa1e 	bl	8000420 <__aeabi_idivmod>
 8005fe4:	3e01      	subs	r6, #1
 8005fe6:	3130      	adds	r1, #48	; 0x30
 8005fe8:	0020      	movs	r0, r4
 8005fea:	7031      	strb	r1, [r6, #0]
 8005fec:	0039      	movs	r1, r7
 8005fee:	9402      	str	r4, [sp, #8]
 8005ff0:	f7fa f930 	bl	8000254 <__divsi3>
 8005ff4:	9b02      	ldr	r3, [sp, #8]
 8005ff6:	0004      	movs	r4, r0
 8005ff8:	2b63      	cmp	r3, #99	; 0x63
 8005ffa:	dcee      	bgt.n	8005fda <__exponent+0x24>
 8005ffc:	9b01      	ldr	r3, [sp, #4]
 8005ffe:	3430      	adds	r4, #48	; 0x30
 8006000:	1e9a      	subs	r2, r3, #2
 8006002:	0013      	movs	r3, r2
 8006004:	9903      	ldr	r1, [sp, #12]
 8006006:	7014      	strb	r4, [r2, #0]
 8006008:	a804      	add	r0, sp, #16
 800600a:	3007      	adds	r0, #7
 800600c:	4298      	cmp	r0, r3
 800600e:	d80e      	bhi.n	800602e <__exponent+0x78>
 8006010:	ab04      	add	r3, sp, #16
 8006012:	3307      	adds	r3, #7
 8006014:	2000      	movs	r0, #0
 8006016:	429a      	cmp	r2, r3
 8006018:	d804      	bhi.n	8006024 <__exponent+0x6e>
 800601a:	ab04      	add	r3, sp, #16
 800601c:	3009      	adds	r0, #9
 800601e:	18c0      	adds	r0, r0, r3
 8006020:	9b01      	ldr	r3, [sp, #4]
 8006022:	1ac0      	subs	r0, r0, r3
 8006024:	9b03      	ldr	r3, [sp, #12]
 8006026:	1818      	adds	r0, r3, r0
 8006028:	1b40      	subs	r0, r0, r5
 800602a:	b007      	add	sp, #28
 800602c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800602e:	7818      	ldrb	r0, [r3, #0]
 8006030:	3301      	adds	r3, #1
 8006032:	7008      	strb	r0, [r1, #0]
 8006034:	3101      	adds	r1, #1
 8006036:	e7e7      	b.n	8006008 <__exponent+0x52>
 8006038:	2330      	movs	r3, #48	; 0x30
 800603a:	18e4      	adds	r4, r4, r3
 800603c:	70ab      	strb	r3, [r5, #2]
 800603e:	1d28      	adds	r0, r5, #4
 8006040:	70ec      	strb	r4, [r5, #3]
 8006042:	e7f1      	b.n	8006028 <__exponent+0x72>

08006044 <_printf_float>:
 8006044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006046:	b095      	sub	sp, #84	; 0x54
 8006048:	000c      	movs	r4, r1
 800604a:	9209      	str	r2, [sp, #36]	; 0x24
 800604c:	001e      	movs	r6, r3
 800604e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006050:	0007      	movs	r7, r0
 8006052:	f001 fa81 	bl	8007558 <_localeconv_r>
 8006056:	6803      	ldr	r3, [r0, #0]
 8006058:	0018      	movs	r0, r3
 800605a:	930c      	str	r3, [sp, #48]	; 0x30
 800605c:	f7fa f854 	bl	8000108 <strlen>
 8006060:	2300      	movs	r3, #0
 8006062:	9312      	str	r3, [sp, #72]	; 0x48
 8006064:	7e23      	ldrb	r3, [r4, #24]
 8006066:	2207      	movs	r2, #7
 8006068:	930a      	str	r3, [sp, #40]	; 0x28
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	900e      	str	r0, [sp, #56]	; 0x38
 800606e:	930d      	str	r3, [sp, #52]	; 0x34
 8006070:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006072:	682b      	ldr	r3, [r5, #0]
 8006074:	05c9      	lsls	r1, r1, #23
 8006076:	d547      	bpl.n	8006108 <_printf_float+0xc4>
 8006078:	189b      	adds	r3, r3, r2
 800607a:	4393      	bics	r3, r2
 800607c:	001a      	movs	r2, r3
 800607e:	3208      	adds	r2, #8
 8006080:	602a      	str	r2, [r5, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	64a2      	str	r2, [r4, #72]	; 0x48
 8006088:	64e3      	str	r3, [r4, #76]	; 0x4c
 800608a:	2201      	movs	r2, #1
 800608c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800608e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006090:	930b      	str	r3, [sp, #44]	; 0x2c
 8006092:	006b      	lsls	r3, r5, #1
 8006094:	085b      	lsrs	r3, r3, #1
 8006096:	930f      	str	r3, [sp, #60]	; 0x3c
 8006098:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800609a:	4ba7      	ldr	r3, [pc, #668]	; (8006338 <_printf_float+0x2f4>)
 800609c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800609e:	4252      	negs	r2, r2
 80060a0:	f7fb ff3e 	bl	8001f20 <__aeabi_dcmpun>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d131      	bne.n	800610c <_printf_float+0xc8>
 80060a8:	2201      	movs	r2, #1
 80060aa:	4ba3      	ldr	r3, [pc, #652]	; (8006338 <_printf_float+0x2f4>)
 80060ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80060ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80060b0:	4252      	negs	r2, r2
 80060b2:	f7fa f9db 	bl	800046c <__aeabi_dcmple>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d128      	bne.n	800610c <_printf_float+0xc8>
 80060ba:	2200      	movs	r2, #0
 80060bc:	2300      	movs	r3, #0
 80060be:	0029      	movs	r1, r5
 80060c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80060c2:	f7fa f9c9 	bl	8000458 <__aeabi_dcmplt>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d003      	beq.n	80060d2 <_printf_float+0x8e>
 80060ca:	0023      	movs	r3, r4
 80060cc:	222d      	movs	r2, #45	; 0x2d
 80060ce:	3343      	adds	r3, #67	; 0x43
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d4:	4d99      	ldr	r5, [pc, #612]	; (800633c <_printf_float+0x2f8>)
 80060d6:	2b47      	cmp	r3, #71	; 0x47
 80060d8:	d900      	bls.n	80060dc <_printf_float+0x98>
 80060da:	4d99      	ldr	r5, [pc, #612]	; (8006340 <_printf_float+0x2fc>)
 80060dc:	2303      	movs	r3, #3
 80060de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060e0:	6123      	str	r3, [r4, #16]
 80060e2:	3301      	adds	r3, #1
 80060e4:	439a      	bics	r2, r3
 80060e6:	2300      	movs	r3, #0
 80060e8:	6022      	str	r2, [r4, #0]
 80060ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80060ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ee:	0021      	movs	r1, r4
 80060f0:	0038      	movs	r0, r7
 80060f2:	9600      	str	r6, [sp, #0]
 80060f4:	aa13      	add	r2, sp, #76	; 0x4c
 80060f6:	f000 f9e7 	bl	80064c8 <_printf_common>
 80060fa:	1c43      	adds	r3, r0, #1
 80060fc:	d000      	beq.n	8006100 <_printf_float+0xbc>
 80060fe:	e0a2      	b.n	8006246 <_printf_float+0x202>
 8006100:	2001      	movs	r0, #1
 8006102:	4240      	negs	r0, r0
 8006104:	b015      	add	sp, #84	; 0x54
 8006106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006108:	3307      	adds	r3, #7
 800610a:	e7b6      	b.n	800607a <_printf_float+0x36>
 800610c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800610e:	002b      	movs	r3, r5
 8006110:	0010      	movs	r0, r2
 8006112:	0029      	movs	r1, r5
 8006114:	f7fb ff04 	bl	8001f20 <__aeabi_dcmpun>
 8006118:	2800      	cmp	r0, #0
 800611a:	d00b      	beq.n	8006134 <_printf_float+0xf0>
 800611c:	2d00      	cmp	r5, #0
 800611e:	da03      	bge.n	8006128 <_printf_float+0xe4>
 8006120:	0023      	movs	r3, r4
 8006122:	222d      	movs	r2, #45	; 0x2d
 8006124:	3343      	adds	r3, #67	; 0x43
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800612a:	4d86      	ldr	r5, [pc, #536]	; (8006344 <_printf_float+0x300>)
 800612c:	2b47      	cmp	r3, #71	; 0x47
 800612e:	d9d5      	bls.n	80060dc <_printf_float+0x98>
 8006130:	4d85      	ldr	r5, [pc, #532]	; (8006348 <_printf_float+0x304>)
 8006132:	e7d3      	b.n	80060dc <_printf_float+0x98>
 8006134:	2220      	movs	r2, #32
 8006136:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006138:	6863      	ldr	r3, [r4, #4]
 800613a:	4391      	bics	r1, r2
 800613c:	910f      	str	r1, [sp, #60]	; 0x3c
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	d149      	bne.n	80061d6 <_printf_float+0x192>
 8006142:	3307      	adds	r3, #7
 8006144:	6063      	str	r3, [r4, #4]
 8006146:	2380      	movs	r3, #128	; 0x80
 8006148:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	4313      	orrs	r3, r2
 800614e:	2200      	movs	r2, #0
 8006150:	9206      	str	r2, [sp, #24]
 8006152:	aa12      	add	r2, sp, #72	; 0x48
 8006154:	9205      	str	r2, [sp, #20]
 8006156:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006158:	a908      	add	r1, sp, #32
 800615a:	9204      	str	r2, [sp, #16]
 800615c:	aa11      	add	r2, sp, #68	; 0x44
 800615e:	9203      	str	r2, [sp, #12]
 8006160:	2223      	movs	r2, #35	; 0x23
 8006162:	6023      	str	r3, [r4, #0]
 8006164:	9301      	str	r3, [sp, #4]
 8006166:	6863      	ldr	r3, [r4, #4]
 8006168:	1852      	adds	r2, r2, r1
 800616a:	9202      	str	r2, [sp, #8]
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	0038      	movs	r0, r7
 8006170:	002b      	movs	r3, r5
 8006172:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006174:	f7ff febc 	bl	8005ef0 <__cvt>
 8006178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800617a:	0005      	movs	r5, r0
 800617c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800617e:	2b47      	cmp	r3, #71	; 0x47
 8006180:	d108      	bne.n	8006194 <_printf_float+0x150>
 8006182:	1ccb      	adds	r3, r1, #3
 8006184:	db02      	blt.n	800618c <_printf_float+0x148>
 8006186:	6863      	ldr	r3, [r4, #4]
 8006188:	4299      	cmp	r1, r3
 800618a:	dd48      	ble.n	800621e <_printf_float+0x1da>
 800618c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800618e:	3b02      	subs	r3, #2
 8006190:	b2db      	uxtb	r3, r3
 8006192:	930a      	str	r3, [sp, #40]	; 0x28
 8006194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006196:	2b65      	cmp	r3, #101	; 0x65
 8006198:	d824      	bhi.n	80061e4 <_printf_float+0x1a0>
 800619a:	0020      	movs	r0, r4
 800619c:	001a      	movs	r2, r3
 800619e:	3901      	subs	r1, #1
 80061a0:	3050      	adds	r0, #80	; 0x50
 80061a2:	9111      	str	r1, [sp, #68]	; 0x44
 80061a4:	f7ff ff07 	bl	8005fb6 <__exponent>
 80061a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80061ac:	1813      	adds	r3, r2, r0
 80061ae:	6123      	str	r3, [r4, #16]
 80061b0:	2a01      	cmp	r2, #1
 80061b2:	dc02      	bgt.n	80061ba <_printf_float+0x176>
 80061b4:	6822      	ldr	r2, [r4, #0]
 80061b6:	07d2      	lsls	r2, r2, #31
 80061b8:	d501      	bpl.n	80061be <_printf_float+0x17a>
 80061ba:	3301      	adds	r3, #1
 80061bc:	6123      	str	r3, [r4, #16]
 80061be:	2323      	movs	r3, #35	; 0x23
 80061c0:	aa08      	add	r2, sp, #32
 80061c2:	189b      	adds	r3, r3, r2
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d100      	bne.n	80061cc <_printf_float+0x188>
 80061ca:	e78f      	b.n	80060ec <_printf_float+0xa8>
 80061cc:	0023      	movs	r3, r4
 80061ce:	222d      	movs	r2, #45	; 0x2d
 80061d0:	3343      	adds	r3, #67	; 0x43
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	e78a      	b.n	80060ec <_printf_float+0xa8>
 80061d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061d8:	2a47      	cmp	r2, #71	; 0x47
 80061da:	d1b4      	bne.n	8006146 <_printf_float+0x102>
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1b2      	bne.n	8006146 <_printf_float+0x102>
 80061e0:	3301      	adds	r3, #1
 80061e2:	e7af      	b.n	8006144 <_printf_float+0x100>
 80061e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e6:	2b66      	cmp	r3, #102	; 0x66
 80061e8:	d11b      	bne.n	8006222 <_printf_float+0x1de>
 80061ea:	6863      	ldr	r3, [r4, #4]
 80061ec:	2900      	cmp	r1, #0
 80061ee:	dd0d      	ble.n	800620c <_printf_float+0x1c8>
 80061f0:	6121      	str	r1, [r4, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d102      	bne.n	80061fc <_printf_float+0x1b8>
 80061f6:	6822      	ldr	r2, [r4, #0]
 80061f8:	07d2      	lsls	r2, r2, #31
 80061fa:	d502      	bpl.n	8006202 <_printf_float+0x1be>
 80061fc:	3301      	adds	r3, #1
 80061fe:	1859      	adds	r1, r3, r1
 8006200:	6121      	str	r1, [r4, #16]
 8006202:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006204:	65a3      	str	r3, [r4, #88]	; 0x58
 8006206:	2300      	movs	r3, #0
 8006208:	930b      	str	r3, [sp, #44]	; 0x2c
 800620a:	e7d8      	b.n	80061be <_printf_float+0x17a>
 800620c:	2b00      	cmp	r3, #0
 800620e:	d103      	bne.n	8006218 <_printf_float+0x1d4>
 8006210:	2201      	movs	r2, #1
 8006212:	6821      	ldr	r1, [r4, #0]
 8006214:	4211      	tst	r1, r2
 8006216:	d000      	beq.n	800621a <_printf_float+0x1d6>
 8006218:	1c9a      	adds	r2, r3, #2
 800621a:	6122      	str	r2, [r4, #16]
 800621c:	e7f1      	b.n	8006202 <_printf_float+0x1be>
 800621e:	2367      	movs	r3, #103	; 0x67
 8006220:	930a      	str	r3, [sp, #40]	; 0x28
 8006222:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006224:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006226:	4293      	cmp	r3, r2
 8006228:	db06      	blt.n	8006238 <_printf_float+0x1f4>
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	6123      	str	r3, [r4, #16]
 800622e:	07d2      	lsls	r2, r2, #31
 8006230:	d5e7      	bpl.n	8006202 <_printf_float+0x1be>
 8006232:	3301      	adds	r3, #1
 8006234:	6123      	str	r3, [r4, #16]
 8006236:	e7e4      	b.n	8006202 <_printf_float+0x1be>
 8006238:	2101      	movs	r1, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	dc01      	bgt.n	8006242 <_printf_float+0x1fe>
 800623e:	1849      	adds	r1, r1, r1
 8006240:	1ac9      	subs	r1, r1, r3
 8006242:	1852      	adds	r2, r2, r1
 8006244:	e7e9      	b.n	800621a <_printf_float+0x1d6>
 8006246:	6822      	ldr	r2, [r4, #0]
 8006248:	0553      	lsls	r3, r2, #21
 800624a:	d407      	bmi.n	800625c <_printf_float+0x218>
 800624c:	6923      	ldr	r3, [r4, #16]
 800624e:	002a      	movs	r2, r5
 8006250:	0038      	movs	r0, r7
 8006252:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006254:	47b0      	blx	r6
 8006256:	1c43      	adds	r3, r0, #1
 8006258:	d128      	bne.n	80062ac <_printf_float+0x268>
 800625a:	e751      	b.n	8006100 <_printf_float+0xbc>
 800625c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800625e:	2b65      	cmp	r3, #101	; 0x65
 8006260:	d800      	bhi.n	8006264 <_printf_float+0x220>
 8006262:	e0e1      	b.n	8006428 <_printf_float+0x3e4>
 8006264:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006266:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006268:	2200      	movs	r2, #0
 800626a:	2300      	movs	r3, #0
 800626c:	f7fa f8ee 	bl	800044c <__aeabi_dcmpeq>
 8006270:	2800      	cmp	r0, #0
 8006272:	d031      	beq.n	80062d8 <_printf_float+0x294>
 8006274:	2301      	movs	r3, #1
 8006276:	0038      	movs	r0, r7
 8006278:	4a34      	ldr	r2, [pc, #208]	; (800634c <_printf_float+0x308>)
 800627a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800627c:	47b0      	blx	r6
 800627e:	1c43      	adds	r3, r0, #1
 8006280:	d100      	bne.n	8006284 <_printf_float+0x240>
 8006282:	e73d      	b.n	8006100 <_printf_float+0xbc>
 8006284:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006286:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006288:	4293      	cmp	r3, r2
 800628a:	db02      	blt.n	8006292 <_printf_float+0x24e>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	07db      	lsls	r3, r3, #31
 8006290:	d50c      	bpl.n	80062ac <_printf_float+0x268>
 8006292:	0038      	movs	r0, r7
 8006294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006298:	9909      	ldr	r1, [sp, #36]	; 0x24
 800629a:	47b0      	blx	r6
 800629c:	2500      	movs	r5, #0
 800629e:	1c43      	adds	r3, r0, #1
 80062a0:	d100      	bne.n	80062a4 <_printf_float+0x260>
 80062a2:	e72d      	b.n	8006100 <_printf_float+0xbc>
 80062a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062a6:	3b01      	subs	r3, #1
 80062a8:	42ab      	cmp	r3, r5
 80062aa:	dc0a      	bgt.n	80062c2 <_printf_float+0x27e>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	079b      	lsls	r3, r3, #30
 80062b0:	d500      	bpl.n	80062b4 <_printf_float+0x270>
 80062b2:	e106      	b.n	80064c2 <_printf_float+0x47e>
 80062b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062b6:	68e0      	ldr	r0, [r4, #12]
 80062b8:	4298      	cmp	r0, r3
 80062ba:	db00      	blt.n	80062be <_printf_float+0x27a>
 80062bc:	e722      	b.n	8006104 <_printf_float+0xc0>
 80062be:	0018      	movs	r0, r3
 80062c0:	e720      	b.n	8006104 <_printf_float+0xc0>
 80062c2:	0022      	movs	r2, r4
 80062c4:	2301      	movs	r3, #1
 80062c6:	0038      	movs	r0, r7
 80062c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062ca:	321a      	adds	r2, #26
 80062cc:	47b0      	blx	r6
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	d100      	bne.n	80062d4 <_printf_float+0x290>
 80062d2:	e715      	b.n	8006100 <_printf_float+0xbc>
 80062d4:	3501      	adds	r5, #1
 80062d6:	e7e5      	b.n	80062a4 <_printf_float+0x260>
 80062d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062da:	2b00      	cmp	r3, #0
 80062dc:	dc38      	bgt.n	8006350 <_printf_float+0x30c>
 80062de:	2301      	movs	r3, #1
 80062e0:	0038      	movs	r0, r7
 80062e2:	4a1a      	ldr	r2, [pc, #104]	; (800634c <_printf_float+0x308>)
 80062e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062e6:	47b0      	blx	r6
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	d100      	bne.n	80062ee <_printf_float+0x2aa>
 80062ec:	e708      	b.n	8006100 <_printf_float+0xbc>
 80062ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062f2:	4313      	orrs	r3, r2
 80062f4:	d102      	bne.n	80062fc <_printf_float+0x2b8>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	07db      	lsls	r3, r3, #31
 80062fa:	d5d7      	bpl.n	80062ac <_printf_float+0x268>
 80062fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062fe:	0038      	movs	r0, r7
 8006300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006302:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006304:	47b0      	blx	r6
 8006306:	1c43      	adds	r3, r0, #1
 8006308:	d100      	bne.n	800630c <_printf_float+0x2c8>
 800630a:	e6f9      	b.n	8006100 <_printf_float+0xbc>
 800630c:	2300      	movs	r3, #0
 800630e:	930a      	str	r3, [sp, #40]	; 0x28
 8006310:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006314:	425b      	negs	r3, r3
 8006316:	4293      	cmp	r3, r2
 8006318:	dc01      	bgt.n	800631e <_printf_float+0x2da>
 800631a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800631c:	e797      	b.n	800624e <_printf_float+0x20a>
 800631e:	0022      	movs	r2, r4
 8006320:	2301      	movs	r3, #1
 8006322:	0038      	movs	r0, r7
 8006324:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006326:	321a      	adds	r2, #26
 8006328:	47b0      	blx	r6
 800632a:	1c43      	adds	r3, r0, #1
 800632c:	d100      	bne.n	8006330 <_printf_float+0x2ec>
 800632e:	e6e7      	b.n	8006100 <_printf_float+0xbc>
 8006330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006332:	3301      	adds	r3, #1
 8006334:	e7eb      	b.n	800630e <_printf_float+0x2ca>
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	7fefffff 	.word	0x7fefffff
 800633c:	08008f3c 	.word	0x08008f3c
 8006340:	08008f40 	.word	0x08008f40
 8006344:	08008f44 	.word	0x08008f44
 8006348:	08008f48 	.word	0x08008f48
 800634c:	08008f4c 	.word	0x08008f4c
 8006350:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006352:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006354:	920a      	str	r2, [sp, #40]	; 0x28
 8006356:	429a      	cmp	r2, r3
 8006358:	dd00      	ble.n	800635c <_printf_float+0x318>
 800635a:	930a      	str	r3, [sp, #40]	; 0x28
 800635c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800635e:	2b00      	cmp	r3, #0
 8006360:	dc3c      	bgt.n	80063dc <_printf_float+0x398>
 8006362:	2300      	movs	r3, #0
 8006364:	930d      	str	r3, [sp, #52]	; 0x34
 8006366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006368:	43db      	mvns	r3, r3
 800636a:	17db      	asrs	r3, r3, #31
 800636c:	930f      	str	r3, [sp, #60]	; 0x3c
 800636e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006370:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006372:	930b      	str	r3, [sp, #44]	; 0x2c
 8006374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006376:	4013      	ands	r3, r2
 8006378:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800637e:	4293      	cmp	r3, r2
 8006380:	dc34      	bgt.n	80063ec <_printf_float+0x3a8>
 8006382:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006384:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006386:	4293      	cmp	r3, r2
 8006388:	db3d      	blt.n	8006406 <_printf_float+0x3c2>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	07db      	lsls	r3, r3, #31
 800638e:	d43a      	bmi.n	8006406 <_printf_float+0x3c2>
 8006390:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006394:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	1a52      	subs	r2, r2, r1
 800639a:	920a      	str	r2, [sp, #40]	; 0x28
 800639c:	429a      	cmp	r2, r3
 800639e:	dd00      	ble.n	80063a2 <_printf_float+0x35e>
 80063a0:	930a      	str	r3, [sp, #40]	; 0x28
 80063a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	dc36      	bgt.n	8006416 <_printf_float+0x3d2>
 80063a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063aa:	2500      	movs	r5, #0
 80063ac:	43db      	mvns	r3, r3
 80063ae:	17db      	asrs	r3, r3, #31
 80063b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80063b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80063b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063b8:	1a9b      	subs	r3, r3, r2
 80063ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063bc:	400a      	ands	r2, r1
 80063be:	1a9b      	subs	r3, r3, r2
 80063c0:	42ab      	cmp	r3, r5
 80063c2:	dc00      	bgt.n	80063c6 <_printf_float+0x382>
 80063c4:	e772      	b.n	80062ac <_printf_float+0x268>
 80063c6:	0022      	movs	r2, r4
 80063c8:	2301      	movs	r3, #1
 80063ca:	0038      	movs	r0, r7
 80063cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063ce:	321a      	adds	r2, #26
 80063d0:	47b0      	blx	r6
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	d100      	bne.n	80063d8 <_printf_float+0x394>
 80063d6:	e693      	b.n	8006100 <_printf_float+0xbc>
 80063d8:	3501      	adds	r5, #1
 80063da:	e7ea      	b.n	80063b2 <_printf_float+0x36e>
 80063dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063de:	002a      	movs	r2, r5
 80063e0:	0038      	movs	r0, r7
 80063e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063e4:	47b0      	blx	r6
 80063e6:	1c43      	adds	r3, r0, #1
 80063e8:	d1bb      	bne.n	8006362 <_printf_float+0x31e>
 80063ea:	e689      	b.n	8006100 <_printf_float+0xbc>
 80063ec:	0022      	movs	r2, r4
 80063ee:	2301      	movs	r3, #1
 80063f0:	0038      	movs	r0, r7
 80063f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063f4:	321a      	adds	r2, #26
 80063f6:	47b0      	blx	r6
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d100      	bne.n	80063fe <_printf_float+0x3ba>
 80063fc:	e680      	b.n	8006100 <_printf_float+0xbc>
 80063fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006400:	3301      	adds	r3, #1
 8006402:	930d      	str	r3, [sp, #52]	; 0x34
 8006404:	e7b3      	b.n	800636e <_printf_float+0x32a>
 8006406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006408:	0038      	movs	r0, r7
 800640a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800640c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800640e:	47b0      	blx	r6
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d1bd      	bne.n	8006390 <_printf_float+0x34c>
 8006414:	e674      	b.n	8006100 <_printf_float+0xbc>
 8006416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006418:	0038      	movs	r0, r7
 800641a:	18ea      	adds	r2, r5, r3
 800641c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800641e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006420:	47b0      	blx	r6
 8006422:	1c43      	adds	r3, r0, #1
 8006424:	d1c0      	bne.n	80063a8 <_printf_float+0x364>
 8006426:	e66b      	b.n	8006100 <_printf_float+0xbc>
 8006428:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800642a:	2b01      	cmp	r3, #1
 800642c:	dc02      	bgt.n	8006434 <_printf_float+0x3f0>
 800642e:	2301      	movs	r3, #1
 8006430:	421a      	tst	r2, r3
 8006432:	d034      	beq.n	800649e <_printf_float+0x45a>
 8006434:	2301      	movs	r3, #1
 8006436:	002a      	movs	r2, r5
 8006438:	0038      	movs	r0, r7
 800643a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800643c:	47b0      	blx	r6
 800643e:	1c43      	adds	r3, r0, #1
 8006440:	d100      	bne.n	8006444 <_printf_float+0x400>
 8006442:	e65d      	b.n	8006100 <_printf_float+0xbc>
 8006444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006446:	0038      	movs	r0, r7
 8006448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800644a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800644c:	47b0      	blx	r6
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	d100      	bne.n	8006454 <_printf_float+0x410>
 8006452:	e655      	b.n	8006100 <_printf_float+0xbc>
 8006454:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006456:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006458:	2200      	movs	r2, #0
 800645a:	2300      	movs	r3, #0
 800645c:	f7f9 fff6 	bl	800044c <__aeabi_dcmpeq>
 8006460:	2800      	cmp	r0, #0
 8006462:	d11a      	bne.n	800649a <_printf_float+0x456>
 8006464:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006466:	1c6a      	adds	r2, r5, #1
 8006468:	3b01      	subs	r3, #1
 800646a:	0038      	movs	r0, r7
 800646c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800646e:	47b0      	blx	r6
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d10e      	bne.n	8006492 <_printf_float+0x44e>
 8006474:	e644      	b.n	8006100 <_printf_float+0xbc>
 8006476:	0022      	movs	r2, r4
 8006478:	2301      	movs	r3, #1
 800647a:	0038      	movs	r0, r7
 800647c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800647e:	321a      	adds	r2, #26
 8006480:	47b0      	blx	r6
 8006482:	1c43      	adds	r3, r0, #1
 8006484:	d100      	bne.n	8006488 <_printf_float+0x444>
 8006486:	e63b      	b.n	8006100 <_printf_float+0xbc>
 8006488:	3501      	adds	r5, #1
 800648a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800648c:	3b01      	subs	r3, #1
 800648e:	42ab      	cmp	r3, r5
 8006490:	dcf1      	bgt.n	8006476 <_printf_float+0x432>
 8006492:	0022      	movs	r2, r4
 8006494:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006496:	3250      	adds	r2, #80	; 0x50
 8006498:	e6da      	b.n	8006250 <_printf_float+0x20c>
 800649a:	2500      	movs	r5, #0
 800649c:	e7f5      	b.n	800648a <_printf_float+0x446>
 800649e:	002a      	movs	r2, r5
 80064a0:	e7e3      	b.n	800646a <_printf_float+0x426>
 80064a2:	0022      	movs	r2, r4
 80064a4:	2301      	movs	r3, #1
 80064a6:	0038      	movs	r0, r7
 80064a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064aa:	3219      	adds	r2, #25
 80064ac:	47b0      	blx	r6
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	d100      	bne.n	80064b4 <_printf_float+0x470>
 80064b2:	e625      	b.n	8006100 <_printf_float+0xbc>
 80064b4:	3501      	adds	r5, #1
 80064b6:	68e3      	ldr	r3, [r4, #12]
 80064b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80064ba:	1a9b      	subs	r3, r3, r2
 80064bc:	42ab      	cmp	r3, r5
 80064be:	dcf0      	bgt.n	80064a2 <_printf_float+0x45e>
 80064c0:	e6f8      	b.n	80062b4 <_printf_float+0x270>
 80064c2:	2500      	movs	r5, #0
 80064c4:	e7f7      	b.n	80064b6 <_printf_float+0x472>
 80064c6:	46c0      	nop			; (mov r8, r8)

080064c8 <_printf_common>:
 80064c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064ca:	0015      	movs	r5, r2
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	688a      	ldr	r2, [r1, #8]
 80064d0:	690b      	ldr	r3, [r1, #16]
 80064d2:	000c      	movs	r4, r1
 80064d4:	9000      	str	r0, [sp, #0]
 80064d6:	4293      	cmp	r3, r2
 80064d8:	da00      	bge.n	80064dc <_printf_common+0x14>
 80064da:	0013      	movs	r3, r2
 80064dc:	0022      	movs	r2, r4
 80064de:	602b      	str	r3, [r5, #0]
 80064e0:	3243      	adds	r2, #67	; 0x43
 80064e2:	7812      	ldrb	r2, [r2, #0]
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	d001      	beq.n	80064ec <_printf_common+0x24>
 80064e8:	3301      	adds	r3, #1
 80064ea:	602b      	str	r3, [r5, #0]
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	069b      	lsls	r3, r3, #26
 80064f0:	d502      	bpl.n	80064f8 <_printf_common+0x30>
 80064f2:	682b      	ldr	r3, [r5, #0]
 80064f4:	3302      	adds	r3, #2
 80064f6:	602b      	str	r3, [r5, #0]
 80064f8:	6822      	ldr	r2, [r4, #0]
 80064fa:	2306      	movs	r3, #6
 80064fc:	0017      	movs	r7, r2
 80064fe:	401f      	ands	r7, r3
 8006500:	421a      	tst	r2, r3
 8006502:	d027      	beq.n	8006554 <_printf_common+0x8c>
 8006504:	0023      	movs	r3, r4
 8006506:	3343      	adds	r3, #67	; 0x43
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	1e5a      	subs	r2, r3, #1
 800650c:	4193      	sbcs	r3, r2
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	0692      	lsls	r2, r2, #26
 8006512:	d430      	bmi.n	8006576 <_printf_common+0xae>
 8006514:	0022      	movs	r2, r4
 8006516:	9901      	ldr	r1, [sp, #4]
 8006518:	9800      	ldr	r0, [sp, #0]
 800651a:	9e08      	ldr	r6, [sp, #32]
 800651c:	3243      	adds	r2, #67	; 0x43
 800651e:	47b0      	blx	r6
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d025      	beq.n	8006570 <_printf_common+0xa8>
 8006524:	2306      	movs	r3, #6
 8006526:	6820      	ldr	r0, [r4, #0]
 8006528:	682a      	ldr	r2, [r5, #0]
 800652a:	68e1      	ldr	r1, [r4, #12]
 800652c:	2500      	movs	r5, #0
 800652e:	4003      	ands	r3, r0
 8006530:	2b04      	cmp	r3, #4
 8006532:	d103      	bne.n	800653c <_printf_common+0x74>
 8006534:	1a8d      	subs	r5, r1, r2
 8006536:	43eb      	mvns	r3, r5
 8006538:	17db      	asrs	r3, r3, #31
 800653a:	401d      	ands	r5, r3
 800653c:	68a3      	ldr	r3, [r4, #8]
 800653e:	6922      	ldr	r2, [r4, #16]
 8006540:	4293      	cmp	r3, r2
 8006542:	dd01      	ble.n	8006548 <_printf_common+0x80>
 8006544:	1a9b      	subs	r3, r3, r2
 8006546:	18ed      	adds	r5, r5, r3
 8006548:	2700      	movs	r7, #0
 800654a:	42bd      	cmp	r5, r7
 800654c:	d120      	bne.n	8006590 <_printf_common+0xc8>
 800654e:	2000      	movs	r0, #0
 8006550:	e010      	b.n	8006574 <_printf_common+0xac>
 8006552:	3701      	adds	r7, #1
 8006554:	68e3      	ldr	r3, [r4, #12]
 8006556:	682a      	ldr	r2, [r5, #0]
 8006558:	1a9b      	subs	r3, r3, r2
 800655a:	42bb      	cmp	r3, r7
 800655c:	ddd2      	ble.n	8006504 <_printf_common+0x3c>
 800655e:	0022      	movs	r2, r4
 8006560:	2301      	movs	r3, #1
 8006562:	9901      	ldr	r1, [sp, #4]
 8006564:	9800      	ldr	r0, [sp, #0]
 8006566:	9e08      	ldr	r6, [sp, #32]
 8006568:	3219      	adds	r2, #25
 800656a:	47b0      	blx	r6
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d1f0      	bne.n	8006552 <_printf_common+0x8a>
 8006570:	2001      	movs	r0, #1
 8006572:	4240      	negs	r0, r0
 8006574:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006576:	2030      	movs	r0, #48	; 0x30
 8006578:	18e1      	adds	r1, r4, r3
 800657a:	3143      	adds	r1, #67	; 0x43
 800657c:	7008      	strb	r0, [r1, #0]
 800657e:	0021      	movs	r1, r4
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	3145      	adds	r1, #69	; 0x45
 8006584:	7809      	ldrb	r1, [r1, #0]
 8006586:	18a2      	adds	r2, r4, r2
 8006588:	3243      	adds	r2, #67	; 0x43
 800658a:	3302      	adds	r3, #2
 800658c:	7011      	strb	r1, [r2, #0]
 800658e:	e7c1      	b.n	8006514 <_printf_common+0x4c>
 8006590:	0022      	movs	r2, r4
 8006592:	2301      	movs	r3, #1
 8006594:	9901      	ldr	r1, [sp, #4]
 8006596:	9800      	ldr	r0, [sp, #0]
 8006598:	9e08      	ldr	r6, [sp, #32]
 800659a:	321a      	adds	r2, #26
 800659c:	47b0      	blx	r6
 800659e:	1c43      	adds	r3, r0, #1
 80065a0:	d0e6      	beq.n	8006570 <_printf_common+0xa8>
 80065a2:	3701      	adds	r7, #1
 80065a4:	e7d1      	b.n	800654a <_printf_common+0x82>
	...

080065a8 <_printf_i>:
 80065a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065aa:	b08b      	sub	sp, #44	; 0x2c
 80065ac:	9206      	str	r2, [sp, #24]
 80065ae:	000a      	movs	r2, r1
 80065b0:	3243      	adds	r2, #67	; 0x43
 80065b2:	9307      	str	r3, [sp, #28]
 80065b4:	9005      	str	r0, [sp, #20]
 80065b6:	9204      	str	r2, [sp, #16]
 80065b8:	7e0a      	ldrb	r2, [r1, #24]
 80065ba:	000c      	movs	r4, r1
 80065bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065be:	2a78      	cmp	r2, #120	; 0x78
 80065c0:	d807      	bhi.n	80065d2 <_printf_i+0x2a>
 80065c2:	2a62      	cmp	r2, #98	; 0x62
 80065c4:	d809      	bhi.n	80065da <_printf_i+0x32>
 80065c6:	2a00      	cmp	r2, #0
 80065c8:	d100      	bne.n	80065cc <_printf_i+0x24>
 80065ca:	e0c1      	b.n	8006750 <_printf_i+0x1a8>
 80065cc:	2a58      	cmp	r2, #88	; 0x58
 80065ce:	d100      	bne.n	80065d2 <_printf_i+0x2a>
 80065d0:	e08c      	b.n	80066ec <_printf_i+0x144>
 80065d2:	0026      	movs	r6, r4
 80065d4:	3642      	adds	r6, #66	; 0x42
 80065d6:	7032      	strb	r2, [r6, #0]
 80065d8:	e022      	b.n	8006620 <_printf_i+0x78>
 80065da:	0010      	movs	r0, r2
 80065dc:	3863      	subs	r0, #99	; 0x63
 80065de:	2815      	cmp	r0, #21
 80065e0:	d8f7      	bhi.n	80065d2 <_printf_i+0x2a>
 80065e2:	f7f9 fda3 	bl	800012c <__gnu_thumb1_case_shi>
 80065e6:	0016      	.short	0x0016
 80065e8:	fff6001f 	.word	0xfff6001f
 80065ec:	fff6fff6 	.word	0xfff6fff6
 80065f0:	001ffff6 	.word	0x001ffff6
 80065f4:	fff6fff6 	.word	0xfff6fff6
 80065f8:	fff6fff6 	.word	0xfff6fff6
 80065fc:	003600a8 	.word	0x003600a8
 8006600:	fff6009a 	.word	0xfff6009a
 8006604:	00b9fff6 	.word	0x00b9fff6
 8006608:	0036fff6 	.word	0x0036fff6
 800660c:	fff6fff6 	.word	0xfff6fff6
 8006610:	009e      	.short	0x009e
 8006612:	0026      	movs	r6, r4
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	3642      	adds	r6, #66	; 0x42
 8006618:	1d11      	adds	r1, r2, #4
 800661a:	6019      	str	r1, [r3, #0]
 800661c:	6813      	ldr	r3, [r2, #0]
 800661e:	7033      	strb	r3, [r6, #0]
 8006620:	2301      	movs	r3, #1
 8006622:	e0a7      	b.n	8006774 <_printf_i+0x1cc>
 8006624:	6808      	ldr	r0, [r1, #0]
 8006626:	6819      	ldr	r1, [r3, #0]
 8006628:	1d0a      	adds	r2, r1, #4
 800662a:	0605      	lsls	r5, r0, #24
 800662c:	d50b      	bpl.n	8006646 <_printf_i+0x9e>
 800662e:	680d      	ldr	r5, [r1, #0]
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	2d00      	cmp	r5, #0
 8006634:	da03      	bge.n	800663e <_printf_i+0x96>
 8006636:	232d      	movs	r3, #45	; 0x2d
 8006638:	9a04      	ldr	r2, [sp, #16]
 800663a:	426d      	negs	r5, r5
 800663c:	7013      	strb	r3, [r2, #0]
 800663e:	4b61      	ldr	r3, [pc, #388]	; (80067c4 <_printf_i+0x21c>)
 8006640:	270a      	movs	r7, #10
 8006642:	9303      	str	r3, [sp, #12]
 8006644:	e01b      	b.n	800667e <_printf_i+0xd6>
 8006646:	680d      	ldr	r5, [r1, #0]
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	0641      	lsls	r1, r0, #25
 800664c:	d5f1      	bpl.n	8006632 <_printf_i+0x8a>
 800664e:	b22d      	sxth	r5, r5
 8006650:	e7ef      	b.n	8006632 <_printf_i+0x8a>
 8006652:	680d      	ldr	r5, [r1, #0]
 8006654:	6819      	ldr	r1, [r3, #0]
 8006656:	1d08      	adds	r0, r1, #4
 8006658:	6018      	str	r0, [r3, #0]
 800665a:	062e      	lsls	r6, r5, #24
 800665c:	d501      	bpl.n	8006662 <_printf_i+0xba>
 800665e:	680d      	ldr	r5, [r1, #0]
 8006660:	e003      	b.n	800666a <_printf_i+0xc2>
 8006662:	066d      	lsls	r5, r5, #25
 8006664:	d5fb      	bpl.n	800665e <_printf_i+0xb6>
 8006666:	680d      	ldr	r5, [r1, #0]
 8006668:	b2ad      	uxth	r5, r5
 800666a:	4b56      	ldr	r3, [pc, #344]	; (80067c4 <_printf_i+0x21c>)
 800666c:	2708      	movs	r7, #8
 800666e:	9303      	str	r3, [sp, #12]
 8006670:	2a6f      	cmp	r2, #111	; 0x6f
 8006672:	d000      	beq.n	8006676 <_printf_i+0xce>
 8006674:	3702      	adds	r7, #2
 8006676:	0023      	movs	r3, r4
 8006678:	2200      	movs	r2, #0
 800667a:	3343      	adds	r3, #67	; 0x43
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	6863      	ldr	r3, [r4, #4]
 8006680:	60a3      	str	r3, [r4, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	db03      	blt.n	800668e <_printf_i+0xe6>
 8006686:	2204      	movs	r2, #4
 8006688:	6821      	ldr	r1, [r4, #0]
 800668a:	4391      	bics	r1, r2
 800668c:	6021      	str	r1, [r4, #0]
 800668e:	2d00      	cmp	r5, #0
 8006690:	d102      	bne.n	8006698 <_printf_i+0xf0>
 8006692:	9e04      	ldr	r6, [sp, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00c      	beq.n	80066b2 <_printf_i+0x10a>
 8006698:	9e04      	ldr	r6, [sp, #16]
 800669a:	0028      	movs	r0, r5
 800669c:	0039      	movs	r1, r7
 800669e:	f7f9 fdd5 	bl	800024c <__aeabi_uidivmod>
 80066a2:	9b03      	ldr	r3, [sp, #12]
 80066a4:	3e01      	subs	r6, #1
 80066a6:	5c5b      	ldrb	r3, [r3, r1]
 80066a8:	7033      	strb	r3, [r6, #0]
 80066aa:	002b      	movs	r3, r5
 80066ac:	0005      	movs	r5, r0
 80066ae:	429f      	cmp	r7, r3
 80066b0:	d9f3      	bls.n	800669a <_printf_i+0xf2>
 80066b2:	2f08      	cmp	r7, #8
 80066b4:	d109      	bne.n	80066ca <_printf_i+0x122>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	07db      	lsls	r3, r3, #31
 80066ba:	d506      	bpl.n	80066ca <_printf_i+0x122>
 80066bc:	6863      	ldr	r3, [r4, #4]
 80066be:	6922      	ldr	r2, [r4, #16]
 80066c0:	4293      	cmp	r3, r2
 80066c2:	dc02      	bgt.n	80066ca <_printf_i+0x122>
 80066c4:	2330      	movs	r3, #48	; 0x30
 80066c6:	3e01      	subs	r6, #1
 80066c8:	7033      	strb	r3, [r6, #0]
 80066ca:	9b04      	ldr	r3, [sp, #16]
 80066cc:	1b9b      	subs	r3, r3, r6
 80066ce:	6123      	str	r3, [r4, #16]
 80066d0:	9b07      	ldr	r3, [sp, #28]
 80066d2:	0021      	movs	r1, r4
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	9805      	ldr	r0, [sp, #20]
 80066d8:	9b06      	ldr	r3, [sp, #24]
 80066da:	aa09      	add	r2, sp, #36	; 0x24
 80066dc:	f7ff fef4 	bl	80064c8 <_printf_common>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d14c      	bne.n	800677e <_printf_i+0x1d6>
 80066e4:	2001      	movs	r0, #1
 80066e6:	4240      	negs	r0, r0
 80066e8:	b00b      	add	sp, #44	; 0x2c
 80066ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ec:	3145      	adds	r1, #69	; 0x45
 80066ee:	700a      	strb	r2, [r1, #0]
 80066f0:	4a34      	ldr	r2, [pc, #208]	; (80067c4 <_printf_i+0x21c>)
 80066f2:	9203      	str	r2, [sp, #12]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	6821      	ldr	r1, [r4, #0]
 80066f8:	ca20      	ldmia	r2!, {r5}
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	0608      	lsls	r0, r1, #24
 80066fe:	d516      	bpl.n	800672e <_printf_i+0x186>
 8006700:	07cb      	lsls	r3, r1, #31
 8006702:	d502      	bpl.n	800670a <_printf_i+0x162>
 8006704:	2320      	movs	r3, #32
 8006706:	4319      	orrs	r1, r3
 8006708:	6021      	str	r1, [r4, #0]
 800670a:	2710      	movs	r7, #16
 800670c:	2d00      	cmp	r5, #0
 800670e:	d1b2      	bne.n	8006676 <_printf_i+0xce>
 8006710:	2320      	movs	r3, #32
 8006712:	6822      	ldr	r2, [r4, #0]
 8006714:	439a      	bics	r2, r3
 8006716:	6022      	str	r2, [r4, #0]
 8006718:	e7ad      	b.n	8006676 <_printf_i+0xce>
 800671a:	2220      	movs	r2, #32
 800671c:	6809      	ldr	r1, [r1, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	6022      	str	r2, [r4, #0]
 8006722:	0022      	movs	r2, r4
 8006724:	2178      	movs	r1, #120	; 0x78
 8006726:	3245      	adds	r2, #69	; 0x45
 8006728:	7011      	strb	r1, [r2, #0]
 800672a:	4a27      	ldr	r2, [pc, #156]	; (80067c8 <_printf_i+0x220>)
 800672c:	e7e1      	b.n	80066f2 <_printf_i+0x14a>
 800672e:	0648      	lsls	r0, r1, #25
 8006730:	d5e6      	bpl.n	8006700 <_printf_i+0x158>
 8006732:	b2ad      	uxth	r5, r5
 8006734:	e7e4      	b.n	8006700 <_printf_i+0x158>
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	680d      	ldr	r5, [r1, #0]
 800673a:	1d10      	adds	r0, r2, #4
 800673c:	6949      	ldr	r1, [r1, #20]
 800673e:	6018      	str	r0, [r3, #0]
 8006740:	6813      	ldr	r3, [r2, #0]
 8006742:	062e      	lsls	r6, r5, #24
 8006744:	d501      	bpl.n	800674a <_printf_i+0x1a2>
 8006746:	6019      	str	r1, [r3, #0]
 8006748:	e002      	b.n	8006750 <_printf_i+0x1a8>
 800674a:	066d      	lsls	r5, r5, #25
 800674c:	d5fb      	bpl.n	8006746 <_printf_i+0x19e>
 800674e:	8019      	strh	r1, [r3, #0]
 8006750:	2300      	movs	r3, #0
 8006752:	9e04      	ldr	r6, [sp, #16]
 8006754:	6123      	str	r3, [r4, #16]
 8006756:	e7bb      	b.n	80066d0 <_printf_i+0x128>
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	1d11      	adds	r1, r2, #4
 800675c:	6019      	str	r1, [r3, #0]
 800675e:	6816      	ldr	r6, [r2, #0]
 8006760:	2100      	movs	r1, #0
 8006762:	0030      	movs	r0, r6
 8006764:	6862      	ldr	r2, [r4, #4]
 8006766:	f000 ff05 	bl	8007574 <memchr>
 800676a:	2800      	cmp	r0, #0
 800676c:	d001      	beq.n	8006772 <_printf_i+0x1ca>
 800676e:	1b80      	subs	r0, r0, r6
 8006770:	6060      	str	r0, [r4, #4]
 8006772:	6863      	ldr	r3, [r4, #4]
 8006774:	6123      	str	r3, [r4, #16]
 8006776:	2300      	movs	r3, #0
 8006778:	9a04      	ldr	r2, [sp, #16]
 800677a:	7013      	strb	r3, [r2, #0]
 800677c:	e7a8      	b.n	80066d0 <_printf_i+0x128>
 800677e:	6923      	ldr	r3, [r4, #16]
 8006780:	0032      	movs	r2, r6
 8006782:	9906      	ldr	r1, [sp, #24]
 8006784:	9805      	ldr	r0, [sp, #20]
 8006786:	9d07      	ldr	r5, [sp, #28]
 8006788:	47a8      	blx	r5
 800678a:	1c43      	adds	r3, r0, #1
 800678c:	d0aa      	beq.n	80066e4 <_printf_i+0x13c>
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	079b      	lsls	r3, r3, #30
 8006792:	d415      	bmi.n	80067c0 <_printf_i+0x218>
 8006794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006796:	68e0      	ldr	r0, [r4, #12]
 8006798:	4298      	cmp	r0, r3
 800679a:	daa5      	bge.n	80066e8 <_printf_i+0x140>
 800679c:	0018      	movs	r0, r3
 800679e:	e7a3      	b.n	80066e8 <_printf_i+0x140>
 80067a0:	0022      	movs	r2, r4
 80067a2:	2301      	movs	r3, #1
 80067a4:	9906      	ldr	r1, [sp, #24]
 80067a6:	9805      	ldr	r0, [sp, #20]
 80067a8:	9e07      	ldr	r6, [sp, #28]
 80067aa:	3219      	adds	r2, #25
 80067ac:	47b0      	blx	r6
 80067ae:	1c43      	adds	r3, r0, #1
 80067b0:	d098      	beq.n	80066e4 <_printf_i+0x13c>
 80067b2:	3501      	adds	r5, #1
 80067b4:	68e3      	ldr	r3, [r4, #12]
 80067b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067b8:	1a9b      	subs	r3, r3, r2
 80067ba:	42ab      	cmp	r3, r5
 80067bc:	dcf0      	bgt.n	80067a0 <_printf_i+0x1f8>
 80067be:	e7e9      	b.n	8006794 <_printf_i+0x1ec>
 80067c0:	2500      	movs	r5, #0
 80067c2:	e7f7      	b.n	80067b4 <_printf_i+0x20c>
 80067c4:	08008f4e 	.word	0x08008f4e
 80067c8:	08008f5f 	.word	0x08008f5f

080067cc <siprintf>:
 80067cc:	b40e      	push	{r1, r2, r3}
 80067ce:	b500      	push	{lr}
 80067d0:	490b      	ldr	r1, [pc, #44]	; (8006800 <siprintf+0x34>)
 80067d2:	b09c      	sub	sp, #112	; 0x70
 80067d4:	ab1d      	add	r3, sp, #116	; 0x74
 80067d6:	9002      	str	r0, [sp, #8]
 80067d8:	9006      	str	r0, [sp, #24]
 80067da:	9107      	str	r1, [sp, #28]
 80067dc:	9104      	str	r1, [sp, #16]
 80067de:	4809      	ldr	r0, [pc, #36]	; (8006804 <siprintf+0x38>)
 80067e0:	4909      	ldr	r1, [pc, #36]	; (8006808 <siprintf+0x3c>)
 80067e2:	cb04      	ldmia	r3!, {r2}
 80067e4:	9105      	str	r1, [sp, #20]
 80067e6:	6800      	ldr	r0, [r0, #0]
 80067e8:	a902      	add	r1, sp, #8
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	f001 fbe2 	bl	8007fb4 <_svfiprintf_r>
 80067f0:	2300      	movs	r3, #0
 80067f2:	9a02      	ldr	r2, [sp, #8]
 80067f4:	7013      	strb	r3, [r2, #0]
 80067f6:	b01c      	add	sp, #112	; 0x70
 80067f8:	bc08      	pop	{r3}
 80067fa:	b003      	add	sp, #12
 80067fc:	4718      	bx	r3
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	7fffffff 	.word	0x7fffffff
 8006804:	2000000c 	.word	0x2000000c
 8006808:	ffff0208 	.word	0xffff0208

0800680c <quorem>:
 800680c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800680e:	0006      	movs	r6, r0
 8006810:	690b      	ldr	r3, [r1, #16]
 8006812:	6932      	ldr	r2, [r6, #16]
 8006814:	b087      	sub	sp, #28
 8006816:	2000      	movs	r0, #0
 8006818:	9103      	str	r1, [sp, #12]
 800681a:	429a      	cmp	r2, r3
 800681c:	db65      	blt.n	80068ea <quorem+0xde>
 800681e:	3b01      	subs	r3, #1
 8006820:	009c      	lsls	r4, r3, #2
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	000b      	movs	r3, r1
 8006826:	3314      	adds	r3, #20
 8006828:	9305      	str	r3, [sp, #20]
 800682a:	191b      	adds	r3, r3, r4
 800682c:	9304      	str	r3, [sp, #16]
 800682e:	0033      	movs	r3, r6
 8006830:	3314      	adds	r3, #20
 8006832:	9302      	str	r3, [sp, #8]
 8006834:	191c      	adds	r4, r3, r4
 8006836:	9b04      	ldr	r3, [sp, #16]
 8006838:	6827      	ldr	r7, [r4, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	0038      	movs	r0, r7
 800683e:	1c5d      	adds	r5, r3, #1
 8006840:	0029      	movs	r1, r5
 8006842:	9301      	str	r3, [sp, #4]
 8006844:	f7f9 fc7c 	bl	8000140 <__udivsi3>
 8006848:	9001      	str	r0, [sp, #4]
 800684a:	42af      	cmp	r7, r5
 800684c:	d324      	bcc.n	8006898 <quorem+0x8c>
 800684e:	2500      	movs	r5, #0
 8006850:	46ac      	mov	ip, r5
 8006852:	9802      	ldr	r0, [sp, #8]
 8006854:	9f05      	ldr	r7, [sp, #20]
 8006856:	cf08      	ldmia	r7!, {r3}
 8006858:	9a01      	ldr	r2, [sp, #4]
 800685a:	b299      	uxth	r1, r3
 800685c:	4351      	muls	r1, r2
 800685e:	0c1b      	lsrs	r3, r3, #16
 8006860:	4353      	muls	r3, r2
 8006862:	1949      	adds	r1, r1, r5
 8006864:	0c0a      	lsrs	r2, r1, #16
 8006866:	189b      	adds	r3, r3, r2
 8006868:	6802      	ldr	r2, [r0, #0]
 800686a:	b289      	uxth	r1, r1
 800686c:	b292      	uxth	r2, r2
 800686e:	4462      	add	r2, ip
 8006870:	1a52      	subs	r2, r2, r1
 8006872:	6801      	ldr	r1, [r0, #0]
 8006874:	0c1d      	lsrs	r5, r3, #16
 8006876:	0c09      	lsrs	r1, r1, #16
 8006878:	b29b      	uxth	r3, r3
 800687a:	1acb      	subs	r3, r1, r3
 800687c:	1411      	asrs	r1, r2, #16
 800687e:	185b      	adds	r3, r3, r1
 8006880:	1419      	asrs	r1, r3, #16
 8006882:	b292      	uxth	r2, r2
 8006884:	041b      	lsls	r3, r3, #16
 8006886:	431a      	orrs	r2, r3
 8006888:	9b04      	ldr	r3, [sp, #16]
 800688a:	468c      	mov	ip, r1
 800688c:	c004      	stmia	r0!, {r2}
 800688e:	42bb      	cmp	r3, r7
 8006890:	d2e1      	bcs.n	8006856 <quorem+0x4a>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d030      	beq.n	80068fa <quorem+0xee>
 8006898:	0030      	movs	r0, r6
 800689a:	9903      	ldr	r1, [sp, #12]
 800689c:	f001 f902 	bl	8007aa4 <__mcmp>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	db21      	blt.n	80068e8 <quorem+0xdc>
 80068a4:	0030      	movs	r0, r6
 80068a6:	2400      	movs	r4, #0
 80068a8:	9b01      	ldr	r3, [sp, #4]
 80068aa:	9903      	ldr	r1, [sp, #12]
 80068ac:	3301      	adds	r3, #1
 80068ae:	9301      	str	r3, [sp, #4]
 80068b0:	3014      	adds	r0, #20
 80068b2:	3114      	adds	r1, #20
 80068b4:	6803      	ldr	r3, [r0, #0]
 80068b6:	c920      	ldmia	r1!, {r5}
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	1914      	adds	r4, r2, r4
 80068bc:	b2aa      	uxth	r2, r5
 80068be:	1aa2      	subs	r2, r4, r2
 80068c0:	0c1b      	lsrs	r3, r3, #16
 80068c2:	0c2d      	lsrs	r5, r5, #16
 80068c4:	1414      	asrs	r4, r2, #16
 80068c6:	1b5b      	subs	r3, r3, r5
 80068c8:	191b      	adds	r3, r3, r4
 80068ca:	141c      	asrs	r4, r3, #16
 80068cc:	b292      	uxth	r2, r2
 80068ce:	041b      	lsls	r3, r3, #16
 80068d0:	4313      	orrs	r3, r2
 80068d2:	c008      	stmia	r0!, {r3}
 80068d4:	9b04      	ldr	r3, [sp, #16]
 80068d6:	428b      	cmp	r3, r1
 80068d8:	d2ec      	bcs.n	80068b4 <quorem+0xa8>
 80068da:	9b00      	ldr	r3, [sp, #0]
 80068dc:	9a02      	ldr	r2, [sp, #8]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	18d3      	adds	r3, r2, r3
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	2a00      	cmp	r2, #0
 80068e6:	d015      	beq.n	8006914 <quorem+0x108>
 80068e8:	9801      	ldr	r0, [sp, #4]
 80068ea:	b007      	add	sp, #28
 80068ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d106      	bne.n	8006902 <quorem+0xf6>
 80068f4:	9b00      	ldr	r3, [sp, #0]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	9b02      	ldr	r3, [sp, #8]
 80068fc:	3c04      	subs	r4, #4
 80068fe:	42a3      	cmp	r3, r4
 8006900:	d3f5      	bcc.n	80068ee <quorem+0xe2>
 8006902:	9b00      	ldr	r3, [sp, #0]
 8006904:	6133      	str	r3, [r6, #16]
 8006906:	e7c7      	b.n	8006898 <quorem+0x8c>
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	2a00      	cmp	r2, #0
 800690c:	d106      	bne.n	800691c <quorem+0x110>
 800690e:	9a00      	ldr	r2, [sp, #0]
 8006910:	3a01      	subs	r2, #1
 8006912:	9200      	str	r2, [sp, #0]
 8006914:	9a02      	ldr	r2, [sp, #8]
 8006916:	3b04      	subs	r3, #4
 8006918:	429a      	cmp	r2, r3
 800691a:	d3f5      	bcc.n	8006908 <quorem+0xfc>
 800691c:	9b00      	ldr	r3, [sp, #0]
 800691e:	6133      	str	r3, [r6, #16]
 8006920:	e7e2      	b.n	80068e8 <quorem+0xdc>
	...

08006924 <_dtoa_r>:
 8006924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006926:	b09d      	sub	sp, #116	; 0x74
 8006928:	9202      	str	r2, [sp, #8]
 800692a:	9303      	str	r3, [sp, #12]
 800692c:	9b02      	ldr	r3, [sp, #8]
 800692e:	9c03      	ldr	r4, [sp, #12]
 8006930:	9308      	str	r3, [sp, #32]
 8006932:	9409      	str	r4, [sp, #36]	; 0x24
 8006934:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006936:	0007      	movs	r7, r0
 8006938:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800693a:	2c00      	cmp	r4, #0
 800693c:	d10e      	bne.n	800695c <_dtoa_r+0x38>
 800693e:	2010      	movs	r0, #16
 8006940:	f000 fe0e 	bl	8007560 <malloc>
 8006944:	1e02      	subs	r2, r0, #0
 8006946:	6278      	str	r0, [r7, #36]	; 0x24
 8006948:	d104      	bne.n	8006954 <_dtoa_r+0x30>
 800694a:	21ea      	movs	r1, #234	; 0xea
 800694c:	4bc7      	ldr	r3, [pc, #796]	; (8006c6c <_dtoa_r+0x348>)
 800694e:	48c8      	ldr	r0, [pc, #800]	; (8006c70 <_dtoa_r+0x34c>)
 8006950:	f001 fc42 	bl	80081d8 <__assert_func>
 8006954:	6044      	str	r4, [r0, #4]
 8006956:	6084      	str	r4, [r0, #8]
 8006958:	6004      	str	r4, [r0, #0]
 800695a:	60c4      	str	r4, [r0, #12]
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	6819      	ldr	r1, [r3, #0]
 8006960:	2900      	cmp	r1, #0
 8006962:	d00a      	beq.n	800697a <_dtoa_r+0x56>
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	2301      	movs	r3, #1
 8006968:	4093      	lsls	r3, r2
 800696a:	604a      	str	r2, [r1, #4]
 800696c:	608b      	str	r3, [r1, #8]
 800696e:	0038      	movs	r0, r7
 8006970:	f000 fe58 	bl	8007624 <_Bfree>
 8006974:	2200      	movs	r2, #0
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	9b03      	ldr	r3, [sp, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	da20      	bge.n	80069c2 <_dtoa_r+0x9e>
 8006980:	2301      	movs	r3, #1
 8006982:	602b      	str	r3, [r5, #0]
 8006984:	9b03      	ldr	r3, [sp, #12]
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	085b      	lsrs	r3, r3, #1
 800698a:	9309      	str	r3, [sp, #36]	; 0x24
 800698c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800698e:	4bb9      	ldr	r3, [pc, #740]	; (8006c74 <_dtoa_r+0x350>)
 8006990:	4ab8      	ldr	r2, [pc, #736]	; (8006c74 <_dtoa_r+0x350>)
 8006992:	402b      	ands	r3, r5
 8006994:	4293      	cmp	r3, r2
 8006996:	d117      	bne.n	80069c8 <_dtoa_r+0xa4>
 8006998:	4bb7      	ldr	r3, [pc, #732]	; (8006c78 <_dtoa_r+0x354>)
 800699a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800699c:	0328      	lsls	r0, r5, #12
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	9b02      	ldr	r3, [sp, #8]
 80069a2:	0b00      	lsrs	r0, r0, #12
 80069a4:	4318      	orrs	r0, r3
 80069a6:	d101      	bne.n	80069ac <_dtoa_r+0x88>
 80069a8:	f000 fdbf 	bl	800752a <_dtoa_r+0xc06>
 80069ac:	48b3      	ldr	r0, [pc, #716]	; (8006c7c <_dtoa_r+0x358>)
 80069ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069b0:	9006      	str	r0, [sp, #24]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <_dtoa_r+0x98>
 80069b6:	4bb2      	ldr	r3, [pc, #712]	; (8006c80 <_dtoa_r+0x35c>)
 80069b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	9806      	ldr	r0, [sp, #24]
 80069be:	b01d      	add	sp, #116	; 0x74
 80069c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069c2:	2300      	movs	r3, #0
 80069c4:	602b      	str	r3, [r5, #0]
 80069c6:	e7e1      	b.n	800698c <_dtoa_r+0x68>
 80069c8:	9b08      	ldr	r3, [sp, #32]
 80069ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80069cc:	9312      	str	r3, [sp, #72]	; 0x48
 80069ce:	9413      	str	r4, [sp, #76]	; 0x4c
 80069d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80069d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80069d4:	2200      	movs	r2, #0
 80069d6:	2300      	movs	r3, #0
 80069d8:	f7f9 fd38 	bl	800044c <__aeabi_dcmpeq>
 80069dc:	1e04      	subs	r4, r0, #0
 80069de:	d009      	beq.n	80069f4 <_dtoa_r+0xd0>
 80069e0:	2301      	movs	r3, #1
 80069e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	4ba7      	ldr	r3, [pc, #668]	; (8006c84 <_dtoa_r+0x360>)
 80069e8:	9306      	str	r3, [sp, #24]
 80069ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0e5      	beq.n	80069bc <_dtoa_r+0x98>
 80069f0:	4ba5      	ldr	r3, [pc, #660]	; (8006c88 <_dtoa_r+0x364>)
 80069f2:	e7e1      	b.n	80069b8 <_dtoa_r+0x94>
 80069f4:	ab1a      	add	r3, sp, #104	; 0x68
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	ab1b      	add	r3, sp, #108	; 0x6c
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	0038      	movs	r0, r7
 80069fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a02:	f001 f903 	bl	8007c0c <__d2b>
 8006a06:	006e      	lsls	r6, r5, #1
 8006a08:	9005      	str	r0, [sp, #20]
 8006a0a:	0d76      	lsrs	r6, r6, #21
 8006a0c:	d100      	bne.n	8006a10 <_dtoa_r+0xec>
 8006a0e:	e07c      	b.n	8006b0a <_dtoa_r+0x1e6>
 8006a10:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006a12:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006a14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a16:	4a9d      	ldr	r2, [pc, #628]	; (8006c8c <_dtoa_r+0x368>)
 8006a18:	031b      	lsls	r3, r3, #12
 8006a1a:	0b1b      	lsrs	r3, r3, #12
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	0011      	movs	r1, r2
 8006a20:	4b9b      	ldr	r3, [pc, #620]	; (8006c90 <_dtoa_r+0x36c>)
 8006a22:	9418      	str	r4, [sp, #96]	; 0x60
 8006a24:	18f6      	adds	r6, r6, r3
 8006a26:	2200      	movs	r2, #0
 8006a28:	4b9a      	ldr	r3, [pc, #616]	; (8006c94 <_dtoa_r+0x370>)
 8006a2a:	f7fa fee7 	bl	80017fc <__aeabi_dsub>
 8006a2e:	4a9a      	ldr	r2, [pc, #616]	; (8006c98 <_dtoa_r+0x374>)
 8006a30:	4b9a      	ldr	r3, [pc, #616]	; (8006c9c <_dtoa_r+0x378>)
 8006a32:	f7fa fc77 	bl	8001324 <__aeabi_dmul>
 8006a36:	4a9a      	ldr	r2, [pc, #616]	; (8006ca0 <_dtoa_r+0x37c>)
 8006a38:	4b9a      	ldr	r3, [pc, #616]	; (8006ca4 <_dtoa_r+0x380>)
 8006a3a:	f7f9 fd35 	bl	80004a8 <__aeabi_dadd>
 8006a3e:	0004      	movs	r4, r0
 8006a40:	0030      	movs	r0, r6
 8006a42:	000d      	movs	r5, r1
 8006a44:	f7fb fac0 	bl	8001fc8 <__aeabi_i2d>
 8006a48:	4a97      	ldr	r2, [pc, #604]	; (8006ca8 <_dtoa_r+0x384>)
 8006a4a:	4b98      	ldr	r3, [pc, #608]	; (8006cac <_dtoa_r+0x388>)
 8006a4c:	f7fa fc6a 	bl	8001324 <__aeabi_dmul>
 8006a50:	0002      	movs	r2, r0
 8006a52:	000b      	movs	r3, r1
 8006a54:	0020      	movs	r0, r4
 8006a56:	0029      	movs	r1, r5
 8006a58:	f7f9 fd26 	bl	80004a8 <__aeabi_dadd>
 8006a5c:	0004      	movs	r4, r0
 8006a5e:	000d      	movs	r5, r1
 8006a60:	f7fb fa7c 	bl	8001f5c <__aeabi_d2iz>
 8006a64:	2200      	movs	r2, #0
 8006a66:	9002      	str	r0, [sp, #8]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	0020      	movs	r0, r4
 8006a6c:	0029      	movs	r1, r5
 8006a6e:	f7f9 fcf3 	bl	8000458 <__aeabi_dcmplt>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d00b      	beq.n	8006a8e <_dtoa_r+0x16a>
 8006a76:	9802      	ldr	r0, [sp, #8]
 8006a78:	f7fb faa6 	bl	8001fc8 <__aeabi_i2d>
 8006a7c:	002b      	movs	r3, r5
 8006a7e:	0022      	movs	r2, r4
 8006a80:	f7f9 fce4 	bl	800044c <__aeabi_dcmpeq>
 8006a84:	4243      	negs	r3, r0
 8006a86:	4158      	adcs	r0, r3
 8006a88:	9b02      	ldr	r3, [sp, #8]
 8006a8a:	1a1b      	subs	r3, r3, r0
 8006a8c:	9302      	str	r3, [sp, #8]
 8006a8e:	2301      	movs	r3, #1
 8006a90:	9316      	str	r3, [sp, #88]	; 0x58
 8006a92:	9b02      	ldr	r3, [sp, #8]
 8006a94:	2b16      	cmp	r3, #22
 8006a96:	d80f      	bhi.n	8006ab8 <_dtoa_r+0x194>
 8006a98:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006a9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006a9c:	00da      	lsls	r2, r3, #3
 8006a9e:	4b84      	ldr	r3, [pc, #528]	; (8006cb0 <_dtoa_r+0x38c>)
 8006aa0:	189b      	adds	r3, r3, r2
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f7f9 fcd7 	bl	8000458 <__aeabi_dcmplt>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d049      	beq.n	8006b42 <_dtoa_r+0x21e>
 8006aae:	9b02      	ldr	r3, [sp, #8]
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	9302      	str	r3, [sp, #8]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	9316      	str	r3, [sp, #88]	; 0x58
 8006ab8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006aba:	1b9e      	subs	r6, r3, r6
 8006abc:	2300      	movs	r3, #0
 8006abe:	930a      	str	r3, [sp, #40]	; 0x28
 8006ac0:	0033      	movs	r3, r6
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	930d      	str	r3, [sp, #52]	; 0x34
 8006ac6:	d504      	bpl.n	8006ad2 <_dtoa_r+0x1ae>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	1b9b      	subs	r3, r3, r6
 8006acc:	930a      	str	r3, [sp, #40]	; 0x28
 8006ace:	2300      	movs	r3, #0
 8006ad0:	930d      	str	r3, [sp, #52]	; 0x34
 8006ad2:	9b02      	ldr	r3, [sp, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	db36      	blt.n	8006b46 <_dtoa_r+0x222>
 8006ad8:	9a02      	ldr	r2, [sp, #8]
 8006ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006adc:	4694      	mov	ip, r2
 8006ade:	4463      	add	r3, ip
 8006ae0:	930d      	str	r3, [sp, #52]	; 0x34
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9215      	str	r2, [sp, #84]	; 0x54
 8006ae6:	930e      	str	r3, [sp, #56]	; 0x38
 8006ae8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006aea:	2401      	movs	r4, #1
 8006aec:	2b09      	cmp	r3, #9
 8006aee:	d864      	bhi.n	8006bba <_dtoa_r+0x296>
 8006af0:	2b05      	cmp	r3, #5
 8006af2:	dd02      	ble.n	8006afa <_dtoa_r+0x1d6>
 8006af4:	2400      	movs	r4, #0
 8006af6:	3b04      	subs	r3, #4
 8006af8:	9322      	str	r3, [sp, #136]	; 0x88
 8006afa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006afc:	1e98      	subs	r0, r3, #2
 8006afe:	2803      	cmp	r0, #3
 8006b00:	d864      	bhi.n	8006bcc <_dtoa_r+0x2a8>
 8006b02:	f7f9 fb09 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006b06:	3829      	.short	0x3829
 8006b08:	5836      	.short	0x5836
 8006b0a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006b0c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006b0e:	189e      	adds	r6, r3, r2
 8006b10:	4b68      	ldr	r3, [pc, #416]	; (8006cb4 <_dtoa_r+0x390>)
 8006b12:	18f2      	adds	r2, r6, r3
 8006b14:	2a20      	cmp	r2, #32
 8006b16:	dd0f      	ble.n	8006b38 <_dtoa_r+0x214>
 8006b18:	2340      	movs	r3, #64	; 0x40
 8006b1a:	1a9b      	subs	r3, r3, r2
 8006b1c:	409d      	lsls	r5, r3
 8006b1e:	4b66      	ldr	r3, [pc, #408]	; (8006cb8 <_dtoa_r+0x394>)
 8006b20:	9802      	ldr	r0, [sp, #8]
 8006b22:	18f3      	adds	r3, r6, r3
 8006b24:	40d8      	lsrs	r0, r3
 8006b26:	4328      	orrs	r0, r5
 8006b28:	f7fb fa7e 	bl	8002028 <__aeabi_ui2d>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	4c63      	ldr	r4, [pc, #396]	; (8006cbc <_dtoa_r+0x398>)
 8006b30:	3e01      	subs	r6, #1
 8006b32:	1909      	adds	r1, r1, r4
 8006b34:	9318      	str	r3, [sp, #96]	; 0x60
 8006b36:	e776      	b.n	8006a26 <_dtoa_r+0x102>
 8006b38:	2320      	movs	r3, #32
 8006b3a:	9802      	ldr	r0, [sp, #8]
 8006b3c:	1a9b      	subs	r3, r3, r2
 8006b3e:	4098      	lsls	r0, r3
 8006b40:	e7f2      	b.n	8006b28 <_dtoa_r+0x204>
 8006b42:	9016      	str	r0, [sp, #88]	; 0x58
 8006b44:	e7b8      	b.n	8006ab8 <_dtoa_r+0x194>
 8006b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b48:	9a02      	ldr	r2, [sp, #8]
 8006b4a:	1a9b      	subs	r3, r3, r2
 8006b4c:	930a      	str	r3, [sp, #40]	; 0x28
 8006b4e:	4253      	negs	r3, r2
 8006b50:	930e      	str	r3, [sp, #56]	; 0x38
 8006b52:	2300      	movs	r3, #0
 8006b54:	9315      	str	r3, [sp, #84]	; 0x54
 8006b56:	e7c7      	b.n	8006ae8 <_dtoa_r+0x1c4>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b5e:	930c      	str	r3, [sp, #48]	; 0x30
 8006b60:	9307      	str	r3, [sp, #28]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	dc13      	bgt.n	8006b8e <_dtoa_r+0x26a>
 8006b66:	2301      	movs	r3, #1
 8006b68:	001a      	movs	r2, r3
 8006b6a:	930c      	str	r3, [sp, #48]	; 0x30
 8006b6c:	9307      	str	r3, [sp, #28]
 8006b6e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006b70:	e00d      	b.n	8006b8e <_dtoa_r+0x26a>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e7f1      	b.n	8006b5a <_dtoa_r+0x236>
 8006b76:	2300      	movs	r3, #0
 8006b78:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006b7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b7c:	4694      	mov	ip, r2
 8006b7e:	9b02      	ldr	r3, [sp, #8]
 8006b80:	4463      	add	r3, ip
 8006b82:	930c      	str	r3, [sp, #48]	; 0x30
 8006b84:	3301      	adds	r3, #1
 8006b86:	9307      	str	r3, [sp, #28]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	dc00      	bgt.n	8006b8e <_dtoa_r+0x26a>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	2200      	movs	r2, #0
 8006b90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b92:	6042      	str	r2, [r0, #4]
 8006b94:	3204      	adds	r2, #4
 8006b96:	0015      	movs	r5, r2
 8006b98:	3514      	adds	r5, #20
 8006b9a:	6841      	ldr	r1, [r0, #4]
 8006b9c:	429d      	cmp	r5, r3
 8006b9e:	d919      	bls.n	8006bd4 <_dtoa_r+0x2b0>
 8006ba0:	0038      	movs	r0, r7
 8006ba2:	f000 fcfb 	bl	800759c <_Balloc>
 8006ba6:	9006      	str	r0, [sp, #24]
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d117      	bne.n	8006bdc <_dtoa_r+0x2b8>
 8006bac:	21d5      	movs	r1, #213	; 0xd5
 8006bae:	0002      	movs	r2, r0
 8006bb0:	4b43      	ldr	r3, [pc, #268]	; (8006cc0 <_dtoa_r+0x39c>)
 8006bb2:	0049      	lsls	r1, r1, #1
 8006bb4:	e6cb      	b.n	800694e <_dtoa_r+0x2a>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e7de      	b.n	8006b78 <_dtoa_r+0x254>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	940f      	str	r4, [sp, #60]	; 0x3c
 8006bbe:	9322      	str	r3, [sp, #136]	; 0x88
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	930c      	str	r3, [sp, #48]	; 0x30
 8006bc4:	9307      	str	r3, [sp, #28]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	3313      	adds	r3, #19
 8006bca:	e7d0      	b.n	8006b6e <_dtoa_r+0x24a>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bd0:	3b02      	subs	r3, #2
 8006bd2:	e7f6      	b.n	8006bc2 <_dtoa_r+0x29e>
 8006bd4:	3101      	adds	r1, #1
 8006bd6:	6041      	str	r1, [r0, #4]
 8006bd8:	0052      	lsls	r2, r2, #1
 8006bda:	e7dc      	b.n	8006b96 <_dtoa_r+0x272>
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	9a06      	ldr	r2, [sp, #24]
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	9b07      	ldr	r3, [sp, #28]
 8006be4:	2b0e      	cmp	r3, #14
 8006be6:	d900      	bls.n	8006bea <_dtoa_r+0x2c6>
 8006be8:	e0eb      	b.n	8006dc2 <_dtoa_r+0x49e>
 8006bea:	2c00      	cmp	r4, #0
 8006bec:	d100      	bne.n	8006bf0 <_dtoa_r+0x2cc>
 8006bee:	e0e8      	b.n	8006dc2 <_dtoa_r+0x49e>
 8006bf0:	9b02      	ldr	r3, [sp, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	dd68      	ble.n	8006cc8 <_dtoa_r+0x3a4>
 8006bf6:	001a      	movs	r2, r3
 8006bf8:	210f      	movs	r1, #15
 8006bfa:	4b2d      	ldr	r3, [pc, #180]	; (8006cb0 <_dtoa_r+0x38c>)
 8006bfc:	400a      	ands	r2, r1
 8006bfe:	00d2      	lsls	r2, r2, #3
 8006c00:	189b      	adds	r3, r3, r2
 8006c02:	681d      	ldr	r5, [r3, #0]
 8006c04:	685e      	ldr	r6, [r3, #4]
 8006c06:	9b02      	ldr	r3, [sp, #8]
 8006c08:	111c      	asrs	r4, r3, #4
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	9310      	str	r3, [sp, #64]	; 0x40
 8006c0e:	9b02      	ldr	r3, [sp, #8]
 8006c10:	05db      	lsls	r3, r3, #23
 8006c12:	d50b      	bpl.n	8006c2c <_dtoa_r+0x308>
 8006c14:	4b2b      	ldr	r3, [pc, #172]	; (8006cc4 <_dtoa_r+0x3a0>)
 8006c16:	400c      	ands	r4, r1
 8006c18:	6a1a      	ldr	r2, [r3, #32]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006c1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006c20:	f7f9 ff7e 	bl	8000b20 <__aeabi_ddiv>
 8006c24:	2303      	movs	r3, #3
 8006c26:	9008      	str	r0, [sp, #32]
 8006c28:	9109      	str	r1, [sp, #36]	; 0x24
 8006c2a:	9310      	str	r3, [sp, #64]	; 0x40
 8006c2c:	4b25      	ldr	r3, [pc, #148]	; (8006cc4 <_dtoa_r+0x3a0>)
 8006c2e:	9314      	str	r3, [sp, #80]	; 0x50
 8006c30:	2c00      	cmp	r4, #0
 8006c32:	d108      	bne.n	8006c46 <_dtoa_r+0x322>
 8006c34:	9808      	ldr	r0, [sp, #32]
 8006c36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c38:	002a      	movs	r2, r5
 8006c3a:	0033      	movs	r3, r6
 8006c3c:	f7f9 ff70 	bl	8000b20 <__aeabi_ddiv>
 8006c40:	9008      	str	r0, [sp, #32]
 8006c42:	9109      	str	r1, [sp, #36]	; 0x24
 8006c44:	e05c      	b.n	8006d00 <_dtoa_r+0x3dc>
 8006c46:	2301      	movs	r3, #1
 8006c48:	421c      	tst	r4, r3
 8006c4a:	d00b      	beq.n	8006c64 <_dtoa_r+0x340>
 8006c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c4e:	0028      	movs	r0, r5
 8006c50:	3301      	adds	r3, #1
 8006c52:	9310      	str	r3, [sp, #64]	; 0x40
 8006c54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c56:	0031      	movs	r1, r6
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f7fa fb62 	bl	8001324 <__aeabi_dmul>
 8006c60:	0005      	movs	r5, r0
 8006c62:	000e      	movs	r6, r1
 8006c64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c66:	1064      	asrs	r4, r4, #1
 8006c68:	3308      	adds	r3, #8
 8006c6a:	e7e0      	b.n	8006c2e <_dtoa_r+0x30a>
 8006c6c:	08008f7d 	.word	0x08008f7d
 8006c70:	08008f94 	.word	0x08008f94
 8006c74:	7ff00000 	.word	0x7ff00000
 8006c78:	0000270f 	.word	0x0000270f
 8006c7c:	08008f79 	.word	0x08008f79
 8006c80:	08008f7c 	.word	0x08008f7c
 8006c84:	08008f4c 	.word	0x08008f4c
 8006c88:	08008f4d 	.word	0x08008f4d
 8006c8c:	3ff00000 	.word	0x3ff00000
 8006c90:	fffffc01 	.word	0xfffffc01
 8006c94:	3ff80000 	.word	0x3ff80000
 8006c98:	636f4361 	.word	0x636f4361
 8006c9c:	3fd287a7 	.word	0x3fd287a7
 8006ca0:	8b60c8b3 	.word	0x8b60c8b3
 8006ca4:	3fc68a28 	.word	0x3fc68a28
 8006ca8:	509f79fb 	.word	0x509f79fb
 8006cac:	3fd34413 	.word	0x3fd34413
 8006cb0:	08009088 	.word	0x08009088
 8006cb4:	00000432 	.word	0x00000432
 8006cb8:	00000412 	.word	0x00000412
 8006cbc:	fe100000 	.word	0xfe100000
 8006cc0:	08008fef 	.word	0x08008fef
 8006cc4:	08009060 	.word	0x08009060
 8006cc8:	2302      	movs	r3, #2
 8006cca:	9310      	str	r3, [sp, #64]	; 0x40
 8006ccc:	9b02      	ldr	r3, [sp, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d016      	beq.n	8006d00 <_dtoa_r+0x3dc>
 8006cd2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006cd4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006cd6:	425c      	negs	r4, r3
 8006cd8:	230f      	movs	r3, #15
 8006cda:	4ab6      	ldr	r2, [pc, #728]	; (8006fb4 <_dtoa_r+0x690>)
 8006cdc:	4023      	ands	r3, r4
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	18d3      	adds	r3, r2, r3
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f7fa fb1d 	bl	8001324 <__aeabi_dmul>
 8006cea:	2601      	movs	r6, #1
 8006cec:	2300      	movs	r3, #0
 8006cee:	9008      	str	r0, [sp, #32]
 8006cf0:	9109      	str	r1, [sp, #36]	; 0x24
 8006cf2:	4db1      	ldr	r5, [pc, #708]	; (8006fb8 <_dtoa_r+0x694>)
 8006cf4:	1124      	asrs	r4, r4, #4
 8006cf6:	2c00      	cmp	r4, #0
 8006cf8:	d000      	beq.n	8006cfc <_dtoa_r+0x3d8>
 8006cfa:	e094      	b.n	8006e26 <_dtoa_r+0x502>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d19f      	bne.n	8006c40 <_dtoa_r+0x31c>
 8006d00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d100      	bne.n	8006d08 <_dtoa_r+0x3e4>
 8006d06:	e09b      	b.n	8006e40 <_dtoa_r+0x51c>
 8006d08:	9c08      	ldr	r4, [sp, #32]
 8006d0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	0020      	movs	r0, r4
 8006d10:	0029      	movs	r1, r5
 8006d12:	4baa      	ldr	r3, [pc, #680]	; (8006fbc <_dtoa_r+0x698>)
 8006d14:	f7f9 fba0 	bl	8000458 <__aeabi_dcmplt>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d100      	bne.n	8006d1e <_dtoa_r+0x3fa>
 8006d1c:	e090      	b.n	8006e40 <_dtoa_r+0x51c>
 8006d1e:	9b07      	ldr	r3, [sp, #28]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d100      	bne.n	8006d26 <_dtoa_r+0x402>
 8006d24:	e08c      	b.n	8006e40 <_dtoa_r+0x51c>
 8006d26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	dd46      	ble.n	8006dba <_dtoa_r+0x496>
 8006d2c:	9b02      	ldr	r3, [sp, #8]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	0020      	movs	r0, r4
 8006d32:	0029      	movs	r1, r5
 8006d34:	1e5e      	subs	r6, r3, #1
 8006d36:	4ba2      	ldr	r3, [pc, #648]	; (8006fc0 <_dtoa_r+0x69c>)
 8006d38:	f7fa faf4 	bl	8001324 <__aeabi_dmul>
 8006d3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d3e:	9008      	str	r0, [sp, #32]
 8006d40:	9109      	str	r1, [sp, #36]	; 0x24
 8006d42:	3301      	adds	r3, #1
 8006d44:	9310      	str	r3, [sp, #64]	; 0x40
 8006d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d48:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006d4a:	9c08      	ldr	r4, [sp, #32]
 8006d4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006d4e:	9314      	str	r3, [sp, #80]	; 0x50
 8006d50:	f7fb f93a 	bl	8001fc8 <__aeabi_i2d>
 8006d54:	0022      	movs	r2, r4
 8006d56:	002b      	movs	r3, r5
 8006d58:	f7fa fae4 	bl	8001324 <__aeabi_dmul>
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4b99      	ldr	r3, [pc, #612]	; (8006fc4 <_dtoa_r+0x6a0>)
 8006d60:	f7f9 fba2 	bl	80004a8 <__aeabi_dadd>
 8006d64:	9010      	str	r0, [sp, #64]	; 0x40
 8006d66:	9111      	str	r1, [sp, #68]	; 0x44
 8006d68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d6c:	9208      	str	r2, [sp, #32]
 8006d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d70:	4a95      	ldr	r2, [pc, #596]	; (8006fc8 <_dtoa_r+0x6a4>)
 8006d72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d74:	4694      	mov	ip, r2
 8006d76:	4463      	add	r3, ip
 8006d78:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d161      	bne.n	8006e46 <_dtoa_r+0x522>
 8006d82:	2200      	movs	r2, #0
 8006d84:	0020      	movs	r0, r4
 8006d86:	0029      	movs	r1, r5
 8006d88:	4b90      	ldr	r3, [pc, #576]	; (8006fcc <_dtoa_r+0x6a8>)
 8006d8a:	f7fa fd37 	bl	80017fc <__aeabi_dsub>
 8006d8e:	9a08      	ldr	r2, [sp, #32]
 8006d90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d92:	0004      	movs	r4, r0
 8006d94:	000d      	movs	r5, r1
 8006d96:	f7f9 fb73 	bl	8000480 <__aeabi_dcmpgt>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d000      	beq.n	8006da0 <_dtoa_r+0x47c>
 8006d9e:	e2af      	b.n	8007300 <_dtoa_r+0x9dc>
 8006da0:	488b      	ldr	r0, [pc, #556]	; (8006fd0 <_dtoa_r+0x6ac>)
 8006da2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006da4:	4684      	mov	ip, r0
 8006da6:	4461      	add	r1, ip
 8006da8:	000b      	movs	r3, r1
 8006daa:	0020      	movs	r0, r4
 8006dac:	0029      	movs	r1, r5
 8006dae:	9a08      	ldr	r2, [sp, #32]
 8006db0:	f7f9 fb52 	bl	8000458 <__aeabi_dcmplt>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	d000      	beq.n	8006dba <_dtoa_r+0x496>
 8006db8:	e29f      	b.n	80072fa <_dtoa_r+0x9d6>
 8006dba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dbc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006dbe:	9308      	str	r3, [sp, #32]
 8006dc0:	9409      	str	r4, [sp, #36]	; 0x24
 8006dc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	da00      	bge.n	8006dca <_dtoa_r+0x4a6>
 8006dc8:	e172      	b.n	80070b0 <_dtoa_r+0x78c>
 8006dca:	9a02      	ldr	r2, [sp, #8]
 8006dcc:	2a0e      	cmp	r2, #14
 8006dce:	dd00      	ble.n	8006dd2 <_dtoa_r+0x4ae>
 8006dd0:	e16e      	b.n	80070b0 <_dtoa_r+0x78c>
 8006dd2:	4b78      	ldr	r3, [pc, #480]	; (8006fb4 <_dtoa_r+0x690>)
 8006dd4:	00d2      	lsls	r2, r2, #3
 8006dd6:	189b      	adds	r3, r3, r2
 8006dd8:	685c      	ldr	r4, [r3, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	930a      	str	r3, [sp, #40]	; 0x28
 8006dde:	940b      	str	r4, [sp, #44]	; 0x2c
 8006de0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	db00      	blt.n	8006de8 <_dtoa_r+0x4c4>
 8006de6:	e0f7      	b.n	8006fd8 <_dtoa_r+0x6b4>
 8006de8:	9b07      	ldr	r3, [sp, #28]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	dd00      	ble.n	8006df0 <_dtoa_r+0x4cc>
 8006dee:	e0f3      	b.n	8006fd8 <_dtoa_r+0x6b4>
 8006df0:	d000      	beq.n	8006df4 <_dtoa_r+0x4d0>
 8006df2:	e282      	b.n	80072fa <_dtoa_r+0x9d6>
 8006df4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006df6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006df8:	2200      	movs	r2, #0
 8006dfa:	4b74      	ldr	r3, [pc, #464]	; (8006fcc <_dtoa_r+0x6a8>)
 8006dfc:	f7fa fa92 	bl	8001324 <__aeabi_dmul>
 8006e00:	9a08      	ldr	r2, [sp, #32]
 8006e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e04:	f7f9 fb46 	bl	8000494 <__aeabi_dcmpge>
 8006e08:	9e07      	ldr	r6, [sp, #28]
 8006e0a:	0035      	movs	r5, r6
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d000      	beq.n	8006e12 <_dtoa_r+0x4ee>
 8006e10:	e259      	b.n	80072c6 <_dtoa_r+0x9a2>
 8006e12:	9b06      	ldr	r3, [sp, #24]
 8006e14:	9a06      	ldr	r2, [sp, #24]
 8006e16:	3301      	adds	r3, #1
 8006e18:	9308      	str	r3, [sp, #32]
 8006e1a:	2331      	movs	r3, #49	; 0x31
 8006e1c:	7013      	strb	r3, [r2, #0]
 8006e1e:	9b02      	ldr	r3, [sp, #8]
 8006e20:	3301      	adds	r3, #1
 8006e22:	9302      	str	r3, [sp, #8]
 8006e24:	e254      	b.n	80072d0 <_dtoa_r+0x9ac>
 8006e26:	4234      	tst	r4, r6
 8006e28:	d007      	beq.n	8006e3a <_dtoa_r+0x516>
 8006e2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	9310      	str	r3, [sp, #64]	; 0x40
 8006e30:	682a      	ldr	r2, [r5, #0]
 8006e32:	686b      	ldr	r3, [r5, #4]
 8006e34:	f7fa fa76 	bl	8001324 <__aeabi_dmul>
 8006e38:	0033      	movs	r3, r6
 8006e3a:	1064      	asrs	r4, r4, #1
 8006e3c:	3508      	adds	r5, #8
 8006e3e:	e75a      	b.n	8006cf6 <_dtoa_r+0x3d2>
 8006e40:	9e02      	ldr	r6, [sp, #8]
 8006e42:	9b07      	ldr	r3, [sp, #28]
 8006e44:	e780      	b.n	8006d48 <_dtoa_r+0x424>
 8006e46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006e4a:	1e5a      	subs	r2, r3, #1
 8006e4c:	4b59      	ldr	r3, [pc, #356]	; (8006fb4 <_dtoa_r+0x690>)
 8006e4e:	00d2      	lsls	r2, r2, #3
 8006e50:	189b      	adds	r3, r3, r2
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2900      	cmp	r1, #0
 8006e58:	d051      	beq.n	8006efe <_dtoa_r+0x5da>
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	495d      	ldr	r1, [pc, #372]	; (8006fd4 <_dtoa_r+0x6b0>)
 8006e5e:	f7f9 fe5f 	bl	8000b20 <__aeabi_ddiv>
 8006e62:	9a08      	ldr	r2, [sp, #32]
 8006e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e66:	f7fa fcc9 	bl	80017fc <__aeabi_dsub>
 8006e6a:	9a06      	ldr	r2, [sp, #24]
 8006e6c:	9b06      	ldr	r3, [sp, #24]
 8006e6e:	4694      	mov	ip, r2
 8006e70:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e74:	9010      	str	r0, [sp, #64]	; 0x40
 8006e76:	9111      	str	r1, [sp, #68]	; 0x44
 8006e78:	4463      	add	r3, ip
 8006e7a:	9319      	str	r3, [sp, #100]	; 0x64
 8006e7c:	0029      	movs	r1, r5
 8006e7e:	0020      	movs	r0, r4
 8006e80:	f7fb f86c 	bl	8001f5c <__aeabi_d2iz>
 8006e84:	9014      	str	r0, [sp, #80]	; 0x50
 8006e86:	f7fb f89f 	bl	8001fc8 <__aeabi_i2d>
 8006e8a:	0002      	movs	r2, r0
 8006e8c:	000b      	movs	r3, r1
 8006e8e:	0020      	movs	r0, r4
 8006e90:	0029      	movs	r1, r5
 8006e92:	f7fa fcb3 	bl	80017fc <__aeabi_dsub>
 8006e96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	9308      	str	r3, [sp, #32]
 8006e9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ea0:	0004      	movs	r4, r0
 8006ea2:	3330      	adds	r3, #48	; 0x30
 8006ea4:	7013      	strb	r3, [r2, #0]
 8006ea6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eaa:	000d      	movs	r5, r1
 8006eac:	f7f9 fad4 	bl	8000458 <__aeabi_dcmplt>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d175      	bne.n	8006fa0 <_dtoa_r+0x67c>
 8006eb4:	0022      	movs	r2, r4
 8006eb6:	002b      	movs	r3, r5
 8006eb8:	2000      	movs	r0, #0
 8006eba:	4940      	ldr	r1, [pc, #256]	; (8006fbc <_dtoa_r+0x698>)
 8006ebc:	f7fa fc9e 	bl	80017fc <__aeabi_dsub>
 8006ec0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ec2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ec4:	f7f9 fac8 	bl	8000458 <__aeabi_dcmplt>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d000      	beq.n	8006ece <_dtoa_r+0x5aa>
 8006ecc:	e0d2      	b.n	8007074 <_dtoa_r+0x750>
 8006ece:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ed0:	9a08      	ldr	r2, [sp, #32]
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d100      	bne.n	8006ed8 <_dtoa_r+0x5b4>
 8006ed6:	e770      	b.n	8006dba <_dtoa_r+0x496>
 8006ed8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006eda:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006edc:	2200      	movs	r2, #0
 8006ede:	4b38      	ldr	r3, [pc, #224]	; (8006fc0 <_dtoa_r+0x69c>)
 8006ee0:	f7fa fa20 	bl	8001324 <__aeabi_dmul>
 8006ee4:	4b36      	ldr	r3, [pc, #216]	; (8006fc0 <_dtoa_r+0x69c>)
 8006ee6:	9010      	str	r0, [sp, #64]	; 0x40
 8006ee8:	9111      	str	r1, [sp, #68]	; 0x44
 8006eea:	2200      	movs	r2, #0
 8006eec:	0020      	movs	r0, r4
 8006eee:	0029      	movs	r1, r5
 8006ef0:	f7fa fa18 	bl	8001324 <__aeabi_dmul>
 8006ef4:	9b08      	ldr	r3, [sp, #32]
 8006ef6:	0004      	movs	r4, r0
 8006ef8:	000d      	movs	r5, r1
 8006efa:	9317      	str	r3, [sp, #92]	; 0x5c
 8006efc:	e7be      	b.n	8006e7c <_dtoa_r+0x558>
 8006efe:	9808      	ldr	r0, [sp, #32]
 8006f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f02:	f7fa fa0f 	bl	8001324 <__aeabi_dmul>
 8006f06:	9a06      	ldr	r2, [sp, #24]
 8006f08:	9b06      	ldr	r3, [sp, #24]
 8006f0a:	4694      	mov	ip, r2
 8006f0c:	9308      	str	r3, [sp, #32]
 8006f0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f10:	9010      	str	r0, [sp, #64]	; 0x40
 8006f12:	9111      	str	r1, [sp, #68]	; 0x44
 8006f14:	4463      	add	r3, ip
 8006f16:	9319      	str	r3, [sp, #100]	; 0x64
 8006f18:	0029      	movs	r1, r5
 8006f1a:	0020      	movs	r0, r4
 8006f1c:	f7fb f81e 	bl	8001f5c <__aeabi_d2iz>
 8006f20:	9017      	str	r0, [sp, #92]	; 0x5c
 8006f22:	f7fb f851 	bl	8001fc8 <__aeabi_i2d>
 8006f26:	0002      	movs	r2, r0
 8006f28:	000b      	movs	r3, r1
 8006f2a:	0020      	movs	r0, r4
 8006f2c:	0029      	movs	r1, r5
 8006f2e:	f7fa fc65 	bl	80017fc <__aeabi_dsub>
 8006f32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f34:	9a08      	ldr	r2, [sp, #32]
 8006f36:	3330      	adds	r3, #48	; 0x30
 8006f38:	7013      	strb	r3, [r2, #0]
 8006f3a:	0013      	movs	r3, r2
 8006f3c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f3e:	3301      	adds	r3, #1
 8006f40:	0004      	movs	r4, r0
 8006f42:	000d      	movs	r5, r1
 8006f44:	9308      	str	r3, [sp, #32]
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d12c      	bne.n	8006fa4 <_dtoa_r+0x680>
 8006f4a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006f4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006f4e:	9a06      	ldr	r2, [sp, #24]
 8006f50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f52:	4694      	mov	ip, r2
 8006f54:	4463      	add	r3, ip
 8006f56:	2200      	movs	r2, #0
 8006f58:	9308      	str	r3, [sp, #32]
 8006f5a:	4b1e      	ldr	r3, [pc, #120]	; (8006fd4 <_dtoa_r+0x6b0>)
 8006f5c:	f7f9 faa4 	bl	80004a8 <__aeabi_dadd>
 8006f60:	0002      	movs	r2, r0
 8006f62:	000b      	movs	r3, r1
 8006f64:	0020      	movs	r0, r4
 8006f66:	0029      	movs	r1, r5
 8006f68:	f7f9 fa8a 	bl	8000480 <__aeabi_dcmpgt>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d000      	beq.n	8006f72 <_dtoa_r+0x64e>
 8006f70:	e080      	b.n	8007074 <_dtoa_r+0x750>
 8006f72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f76:	2000      	movs	r0, #0
 8006f78:	4916      	ldr	r1, [pc, #88]	; (8006fd4 <_dtoa_r+0x6b0>)
 8006f7a:	f7fa fc3f 	bl	80017fc <__aeabi_dsub>
 8006f7e:	0002      	movs	r2, r0
 8006f80:	000b      	movs	r3, r1
 8006f82:	0020      	movs	r0, r4
 8006f84:	0029      	movs	r1, r5
 8006f86:	f7f9 fa67 	bl	8000458 <__aeabi_dcmplt>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	d100      	bne.n	8006f90 <_dtoa_r+0x66c>
 8006f8e:	e714      	b.n	8006dba <_dtoa_r+0x496>
 8006f90:	9b08      	ldr	r3, [sp, #32]
 8006f92:	001a      	movs	r2, r3
 8006f94:	3a01      	subs	r2, #1
 8006f96:	9208      	str	r2, [sp, #32]
 8006f98:	7812      	ldrb	r2, [r2, #0]
 8006f9a:	2a30      	cmp	r2, #48	; 0x30
 8006f9c:	d0f8      	beq.n	8006f90 <_dtoa_r+0x66c>
 8006f9e:	9308      	str	r3, [sp, #32]
 8006fa0:	9602      	str	r6, [sp, #8]
 8006fa2:	e055      	b.n	8007050 <_dtoa_r+0x72c>
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	4b06      	ldr	r3, [pc, #24]	; (8006fc0 <_dtoa_r+0x69c>)
 8006fa8:	f7fa f9bc 	bl	8001324 <__aeabi_dmul>
 8006fac:	0004      	movs	r4, r0
 8006fae:	000d      	movs	r5, r1
 8006fb0:	e7b2      	b.n	8006f18 <_dtoa_r+0x5f4>
 8006fb2:	46c0      	nop			; (mov r8, r8)
 8006fb4:	08009088 	.word	0x08009088
 8006fb8:	08009060 	.word	0x08009060
 8006fbc:	3ff00000 	.word	0x3ff00000
 8006fc0:	40240000 	.word	0x40240000
 8006fc4:	401c0000 	.word	0x401c0000
 8006fc8:	fcc00000 	.word	0xfcc00000
 8006fcc:	40140000 	.word	0x40140000
 8006fd0:	7cc00000 	.word	0x7cc00000
 8006fd4:	3fe00000 	.word	0x3fe00000
 8006fd8:	9b07      	ldr	r3, [sp, #28]
 8006fda:	9e06      	ldr	r6, [sp, #24]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	199b      	adds	r3, r3, r6
 8006fe0:	930c      	str	r3, [sp, #48]	; 0x30
 8006fe2:	9c08      	ldr	r4, [sp, #32]
 8006fe4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006fe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fea:	0020      	movs	r0, r4
 8006fec:	0029      	movs	r1, r5
 8006fee:	f7f9 fd97 	bl	8000b20 <__aeabi_ddiv>
 8006ff2:	f7fa ffb3 	bl	8001f5c <__aeabi_d2iz>
 8006ff6:	9007      	str	r0, [sp, #28]
 8006ff8:	f7fa ffe6 	bl	8001fc8 <__aeabi_i2d>
 8006ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007000:	f7fa f990 	bl	8001324 <__aeabi_dmul>
 8007004:	0002      	movs	r2, r0
 8007006:	000b      	movs	r3, r1
 8007008:	0020      	movs	r0, r4
 800700a:	0029      	movs	r1, r5
 800700c:	f7fa fbf6 	bl	80017fc <__aeabi_dsub>
 8007010:	0033      	movs	r3, r6
 8007012:	9a07      	ldr	r2, [sp, #28]
 8007014:	3601      	adds	r6, #1
 8007016:	3230      	adds	r2, #48	; 0x30
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800701c:	9608      	str	r6, [sp, #32]
 800701e:	429a      	cmp	r2, r3
 8007020:	d139      	bne.n	8007096 <_dtoa_r+0x772>
 8007022:	0002      	movs	r2, r0
 8007024:	000b      	movs	r3, r1
 8007026:	f7f9 fa3f 	bl	80004a8 <__aeabi_dadd>
 800702a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800702c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800702e:	0004      	movs	r4, r0
 8007030:	000d      	movs	r5, r1
 8007032:	f7f9 fa25 	bl	8000480 <__aeabi_dcmpgt>
 8007036:	2800      	cmp	r0, #0
 8007038:	d11b      	bne.n	8007072 <_dtoa_r+0x74e>
 800703a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800703c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800703e:	0020      	movs	r0, r4
 8007040:	0029      	movs	r1, r5
 8007042:	f7f9 fa03 	bl	800044c <__aeabi_dcmpeq>
 8007046:	2800      	cmp	r0, #0
 8007048:	d002      	beq.n	8007050 <_dtoa_r+0x72c>
 800704a:	9b07      	ldr	r3, [sp, #28]
 800704c:	07db      	lsls	r3, r3, #31
 800704e:	d410      	bmi.n	8007072 <_dtoa_r+0x74e>
 8007050:	0038      	movs	r0, r7
 8007052:	9905      	ldr	r1, [sp, #20]
 8007054:	f000 fae6 	bl	8007624 <_Bfree>
 8007058:	2300      	movs	r3, #0
 800705a:	9a08      	ldr	r2, [sp, #32]
 800705c:	9802      	ldr	r0, [sp, #8]
 800705e:	7013      	strb	r3, [r2, #0]
 8007060:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007062:	3001      	adds	r0, #1
 8007064:	6018      	str	r0, [r3, #0]
 8007066:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007068:	2b00      	cmp	r3, #0
 800706a:	d100      	bne.n	800706e <_dtoa_r+0x74a>
 800706c:	e4a6      	b.n	80069bc <_dtoa_r+0x98>
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	e4a4      	b.n	80069bc <_dtoa_r+0x98>
 8007072:	9e02      	ldr	r6, [sp, #8]
 8007074:	9b08      	ldr	r3, [sp, #32]
 8007076:	9308      	str	r3, [sp, #32]
 8007078:	3b01      	subs	r3, #1
 800707a:	781a      	ldrb	r2, [r3, #0]
 800707c:	2a39      	cmp	r2, #57	; 0x39
 800707e:	d106      	bne.n	800708e <_dtoa_r+0x76a>
 8007080:	9a06      	ldr	r2, [sp, #24]
 8007082:	429a      	cmp	r2, r3
 8007084:	d1f7      	bne.n	8007076 <_dtoa_r+0x752>
 8007086:	2230      	movs	r2, #48	; 0x30
 8007088:	9906      	ldr	r1, [sp, #24]
 800708a:	3601      	adds	r6, #1
 800708c:	700a      	strb	r2, [r1, #0]
 800708e:	781a      	ldrb	r2, [r3, #0]
 8007090:	3201      	adds	r2, #1
 8007092:	701a      	strb	r2, [r3, #0]
 8007094:	e784      	b.n	8006fa0 <_dtoa_r+0x67c>
 8007096:	2200      	movs	r2, #0
 8007098:	4baa      	ldr	r3, [pc, #680]	; (8007344 <_dtoa_r+0xa20>)
 800709a:	f7fa f943 	bl	8001324 <__aeabi_dmul>
 800709e:	2200      	movs	r2, #0
 80070a0:	2300      	movs	r3, #0
 80070a2:	0004      	movs	r4, r0
 80070a4:	000d      	movs	r5, r1
 80070a6:	f7f9 f9d1 	bl	800044c <__aeabi_dcmpeq>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d09b      	beq.n	8006fe6 <_dtoa_r+0x6c2>
 80070ae:	e7cf      	b.n	8007050 <_dtoa_r+0x72c>
 80070b0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80070b2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80070b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80070b6:	2d00      	cmp	r5, #0
 80070b8:	d012      	beq.n	80070e0 <_dtoa_r+0x7bc>
 80070ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80070bc:	2a01      	cmp	r2, #1
 80070be:	dc66      	bgt.n	800718e <_dtoa_r+0x86a>
 80070c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80070c2:	2a00      	cmp	r2, #0
 80070c4:	d05d      	beq.n	8007182 <_dtoa_r+0x85e>
 80070c6:	4aa0      	ldr	r2, [pc, #640]	; (8007348 <_dtoa_r+0xa24>)
 80070c8:	189b      	adds	r3, r3, r2
 80070ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070cc:	2101      	movs	r1, #1
 80070ce:	18d2      	adds	r2, r2, r3
 80070d0:	920a      	str	r2, [sp, #40]	; 0x28
 80070d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070d4:	0038      	movs	r0, r7
 80070d6:	18d3      	adds	r3, r2, r3
 80070d8:	930d      	str	r3, [sp, #52]	; 0x34
 80070da:	f000 fb53 	bl	8007784 <__i2b>
 80070de:	0005      	movs	r5, r0
 80070e0:	2c00      	cmp	r4, #0
 80070e2:	dd0e      	ble.n	8007102 <_dtoa_r+0x7de>
 80070e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	dd0b      	ble.n	8007102 <_dtoa_r+0x7de>
 80070ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070ec:	0023      	movs	r3, r4
 80070ee:	4294      	cmp	r4, r2
 80070f0:	dd00      	ble.n	80070f4 <_dtoa_r+0x7d0>
 80070f2:	0013      	movs	r3, r2
 80070f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070f6:	1ae4      	subs	r4, r4, r3
 80070f8:	1ad2      	subs	r2, r2, r3
 80070fa:	920a      	str	r2, [sp, #40]	; 0x28
 80070fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	930d      	str	r3, [sp, #52]	; 0x34
 8007102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007104:	2b00      	cmp	r3, #0
 8007106:	d01f      	beq.n	8007148 <_dtoa_r+0x824>
 8007108:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d054      	beq.n	80071b8 <_dtoa_r+0x894>
 800710e:	2e00      	cmp	r6, #0
 8007110:	dd11      	ble.n	8007136 <_dtoa_r+0x812>
 8007112:	0029      	movs	r1, r5
 8007114:	0032      	movs	r2, r6
 8007116:	0038      	movs	r0, r7
 8007118:	f000 fbfa 	bl	8007910 <__pow5mult>
 800711c:	9a05      	ldr	r2, [sp, #20]
 800711e:	0001      	movs	r1, r0
 8007120:	0005      	movs	r5, r0
 8007122:	0038      	movs	r0, r7
 8007124:	f000 fb44 	bl	80077b0 <__multiply>
 8007128:	9905      	ldr	r1, [sp, #20]
 800712a:	9014      	str	r0, [sp, #80]	; 0x50
 800712c:	0038      	movs	r0, r7
 800712e:	f000 fa79 	bl	8007624 <_Bfree>
 8007132:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007134:	9305      	str	r3, [sp, #20]
 8007136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007138:	1b9a      	subs	r2, r3, r6
 800713a:	42b3      	cmp	r3, r6
 800713c:	d004      	beq.n	8007148 <_dtoa_r+0x824>
 800713e:	0038      	movs	r0, r7
 8007140:	9905      	ldr	r1, [sp, #20]
 8007142:	f000 fbe5 	bl	8007910 <__pow5mult>
 8007146:	9005      	str	r0, [sp, #20]
 8007148:	2101      	movs	r1, #1
 800714a:	0038      	movs	r0, r7
 800714c:	f000 fb1a 	bl	8007784 <__i2b>
 8007150:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007152:	0006      	movs	r6, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	dd31      	ble.n	80071bc <_dtoa_r+0x898>
 8007158:	001a      	movs	r2, r3
 800715a:	0001      	movs	r1, r0
 800715c:	0038      	movs	r0, r7
 800715e:	f000 fbd7 	bl	8007910 <__pow5mult>
 8007162:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007164:	0006      	movs	r6, r0
 8007166:	2b01      	cmp	r3, #1
 8007168:	dd2d      	ble.n	80071c6 <_dtoa_r+0x8a2>
 800716a:	2300      	movs	r3, #0
 800716c:	930e      	str	r3, [sp, #56]	; 0x38
 800716e:	6933      	ldr	r3, [r6, #16]
 8007170:	3303      	adds	r3, #3
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	18f3      	adds	r3, r6, r3
 8007176:	6858      	ldr	r0, [r3, #4]
 8007178:	f000 fabc 	bl	80076f4 <__hi0bits>
 800717c:	2320      	movs	r3, #32
 800717e:	1a18      	subs	r0, r3, r0
 8007180:	e039      	b.n	80071f6 <_dtoa_r+0x8d2>
 8007182:	2336      	movs	r3, #54	; 0x36
 8007184:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007186:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007188:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	e79d      	b.n	80070ca <_dtoa_r+0x7a6>
 800718e:	9b07      	ldr	r3, [sp, #28]
 8007190:	1e5e      	subs	r6, r3, #1
 8007192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007194:	42b3      	cmp	r3, r6
 8007196:	db07      	blt.n	80071a8 <_dtoa_r+0x884>
 8007198:	1b9e      	subs	r6, r3, r6
 800719a:	9b07      	ldr	r3, [sp, #28]
 800719c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800719e:	2b00      	cmp	r3, #0
 80071a0:	da93      	bge.n	80070ca <_dtoa_r+0x7a6>
 80071a2:	1ae4      	subs	r4, r4, r3
 80071a4:	2300      	movs	r3, #0
 80071a6:	e790      	b.n	80070ca <_dtoa_r+0x7a6>
 80071a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80071ac:	1af3      	subs	r3, r6, r3
 80071ae:	18d3      	adds	r3, r2, r3
 80071b0:	960e      	str	r6, [sp, #56]	; 0x38
 80071b2:	9315      	str	r3, [sp, #84]	; 0x54
 80071b4:	2600      	movs	r6, #0
 80071b6:	e7f0      	b.n	800719a <_dtoa_r+0x876>
 80071b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ba:	e7c0      	b.n	800713e <_dtoa_r+0x81a>
 80071bc:	2300      	movs	r3, #0
 80071be:	930e      	str	r3, [sp, #56]	; 0x38
 80071c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	dc13      	bgt.n	80071ee <_dtoa_r+0x8ca>
 80071c6:	2300      	movs	r3, #0
 80071c8:	930e      	str	r3, [sp, #56]	; 0x38
 80071ca:	9b08      	ldr	r3, [sp, #32]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10e      	bne.n	80071ee <_dtoa_r+0x8ca>
 80071d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d2:	031b      	lsls	r3, r3, #12
 80071d4:	d10b      	bne.n	80071ee <_dtoa_r+0x8ca>
 80071d6:	4b5d      	ldr	r3, [pc, #372]	; (800734c <_dtoa_r+0xa28>)
 80071d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071da:	4213      	tst	r3, r2
 80071dc:	d007      	beq.n	80071ee <_dtoa_r+0x8ca>
 80071de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e0:	3301      	adds	r3, #1
 80071e2:	930a      	str	r3, [sp, #40]	; 0x28
 80071e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071e6:	3301      	adds	r3, #1
 80071e8:	930d      	str	r3, [sp, #52]	; 0x34
 80071ea:	2301      	movs	r3, #1
 80071ec:	930e      	str	r3, [sp, #56]	; 0x38
 80071ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071f0:	2001      	movs	r0, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1bb      	bne.n	800716e <_dtoa_r+0x84a>
 80071f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071f8:	221f      	movs	r2, #31
 80071fa:	1818      	adds	r0, r3, r0
 80071fc:	0003      	movs	r3, r0
 80071fe:	4013      	ands	r3, r2
 8007200:	4210      	tst	r0, r2
 8007202:	d046      	beq.n	8007292 <_dtoa_r+0x96e>
 8007204:	3201      	adds	r2, #1
 8007206:	1ad2      	subs	r2, r2, r3
 8007208:	2a04      	cmp	r2, #4
 800720a:	dd3f      	ble.n	800728c <_dtoa_r+0x968>
 800720c:	221c      	movs	r2, #28
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007212:	18e4      	adds	r4, r4, r3
 8007214:	18d2      	adds	r2, r2, r3
 8007216:	920a      	str	r2, [sp, #40]	; 0x28
 8007218:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800721a:	18d3      	adds	r3, r2, r3
 800721c:	930d      	str	r3, [sp, #52]	; 0x34
 800721e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007220:	2b00      	cmp	r3, #0
 8007222:	dd05      	ble.n	8007230 <_dtoa_r+0x90c>
 8007224:	001a      	movs	r2, r3
 8007226:	0038      	movs	r0, r7
 8007228:	9905      	ldr	r1, [sp, #20]
 800722a:	f000 fbcd 	bl	80079c8 <__lshift>
 800722e:	9005      	str	r0, [sp, #20]
 8007230:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007232:	2b00      	cmp	r3, #0
 8007234:	dd05      	ble.n	8007242 <_dtoa_r+0x91e>
 8007236:	0031      	movs	r1, r6
 8007238:	001a      	movs	r2, r3
 800723a:	0038      	movs	r0, r7
 800723c:	f000 fbc4 	bl	80079c8 <__lshift>
 8007240:	0006      	movs	r6, r0
 8007242:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007244:	2b00      	cmp	r3, #0
 8007246:	d026      	beq.n	8007296 <_dtoa_r+0x972>
 8007248:	0031      	movs	r1, r6
 800724a:	9805      	ldr	r0, [sp, #20]
 800724c:	f000 fc2a 	bl	8007aa4 <__mcmp>
 8007250:	2800      	cmp	r0, #0
 8007252:	da20      	bge.n	8007296 <_dtoa_r+0x972>
 8007254:	9b02      	ldr	r3, [sp, #8]
 8007256:	220a      	movs	r2, #10
 8007258:	3b01      	subs	r3, #1
 800725a:	9302      	str	r3, [sp, #8]
 800725c:	0038      	movs	r0, r7
 800725e:	2300      	movs	r3, #0
 8007260:	9905      	ldr	r1, [sp, #20]
 8007262:	f000 fa03 	bl	800766c <__multadd>
 8007266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007268:	9005      	str	r0, [sp, #20]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d100      	bne.n	8007270 <_dtoa_r+0x94c>
 800726e:	e166      	b.n	800753e <_dtoa_r+0xc1a>
 8007270:	2300      	movs	r3, #0
 8007272:	0029      	movs	r1, r5
 8007274:	220a      	movs	r2, #10
 8007276:	0038      	movs	r0, r7
 8007278:	f000 f9f8 	bl	800766c <__multadd>
 800727c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800727e:	0005      	movs	r5, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	dc47      	bgt.n	8007314 <_dtoa_r+0x9f0>
 8007284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007286:	2b02      	cmp	r3, #2
 8007288:	dc0d      	bgt.n	80072a6 <_dtoa_r+0x982>
 800728a:	e043      	b.n	8007314 <_dtoa_r+0x9f0>
 800728c:	2a04      	cmp	r2, #4
 800728e:	d0c6      	beq.n	800721e <_dtoa_r+0x8fa>
 8007290:	0013      	movs	r3, r2
 8007292:	331c      	adds	r3, #28
 8007294:	e7bc      	b.n	8007210 <_dtoa_r+0x8ec>
 8007296:	9b07      	ldr	r3, [sp, #28]
 8007298:	2b00      	cmp	r3, #0
 800729a:	dc35      	bgt.n	8007308 <_dtoa_r+0x9e4>
 800729c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800729e:	2b02      	cmp	r3, #2
 80072a0:	dd32      	ble.n	8007308 <_dtoa_r+0x9e4>
 80072a2:	9b07      	ldr	r3, [sp, #28]
 80072a4:	930c      	str	r3, [sp, #48]	; 0x30
 80072a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10c      	bne.n	80072c6 <_dtoa_r+0x9a2>
 80072ac:	0031      	movs	r1, r6
 80072ae:	2205      	movs	r2, #5
 80072b0:	0038      	movs	r0, r7
 80072b2:	f000 f9db 	bl	800766c <__multadd>
 80072b6:	0006      	movs	r6, r0
 80072b8:	0001      	movs	r1, r0
 80072ba:	9805      	ldr	r0, [sp, #20]
 80072bc:	f000 fbf2 	bl	8007aa4 <__mcmp>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	dd00      	ble.n	80072c6 <_dtoa_r+0x9a2>
 80072c4:	e5a5      	b.n	8006e12 <_dtoa_r+0x4ee>
 80072c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072c8:	43db      	mvns	r3, r3
 80072ca:	9302      	str	r3, [sp, #8]
 80072cc:	9b06      	ldr	r3, [sp, #24]
 80072ce:	9308      	str	r3, [sp, #32]
 80072d0:	2400      	movs	r4, #0
 80072d2:	0031      	movs	r1, r6
 80072d4:	0038      	movs	r0, r7
 80072d6:	f000 f9a5 	bl	8007624 <_Bfree>
 80072da:	2d00      	cmp	r5, #0
 80072dc:	d100      	bne.n	80072e0 <_dtoa_r+0x9bc>
 80072de:	e6b7      	b.n	8007050 <_dtoa_r+0x72c>
 80072e0:	2c00      	cmp	r4, #0
 80072e2:	d005      	beq.n	80072f0 <_dtoa_r+0x9cc>
 80072e4:	42ac      	cmp	r4, r5
 80072e6:	d003      	beq.n	80072f0 <_dtoa_r+0x9cc>
 80072e8:	0021      	movs	r1, r4
 80072ea:	0038      	movs	r0, r7
 80072ec:	f000 f99a 	bl	8007624 <_Bfree>
 80072f0:	0029      	movs	r1, r5
 80072f2:	0038      	movs	r0, r7
 80072f4:	f000 f996 	bl	8007624 <_Bfree>
 80072f8:	e6aa      	b.n	8007050 <_dtoa_r+0x72c>
 80072fa:	2600      	movs	r6, #0
 80072fc:	0035      	movs	r5, r6
 80072fe:	e7e2      	b.n	80072c6 <_dtoa_r+0x9a2>
 8007300:	9602      	str	r6, [sp, #8]
 8007302:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007304:	0035      	movs	r5, r6
 8007306:	e584      	b.n	8006e12 <_dtoa_r+0x4ee>
 8007308:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800730a:	2b00      	cmp	r3, #0
 800730c:	d100      	bne.n	8007310 <_dtoa_r+0x9ec>
 800730e:	e0ce      	b.n	80074ae <_dtoa_r+0xb8a>
 8007310:	9b07      	ldr	r3, [sp, #28]
 8007312:	930c      	str	r3, [sp, #48]	; 0x30
 8007314:	2c00      	cmp	r4, #0
 8007316:	dd05      	ble.n	8007324 <_dtoa_r+0xa00>
 8007318:	0029      	movs	r1, r5
 800731a:	0022      	movs	r2, r4
 800731c:	0038      	movs	r0, r7
 800731e:	f000 fb53 	bl	80079c8 <__lshift>
 8007322:	0005      	movs	r5, r0
 8007324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007326:	0028      	movs	r0, r5
 8007328:	2b00      	cmp	r3, #0
 800732a:	d022      	beq.n	8007372 <_dtoa_r+0xa4e>
 800732c:	0038      	movs	r0, r7
 800732e:	6869      	ldr	r1, [r5, #4]
 8007330:	f000 f934 	bl	800759c <_Balloc>
 8007334:	1e04      	subs	r4, r0, #0
 8007336:	d10f      	bne.n	8007358 <_dtoa_r+0xa34>
 8007338:	0002      	movs	r2, r0
 800733a:	4b05      	ldr	r3, [pc, #20]	; (8007350 <_dtoa_r+0xa2c>)
 800733c:	4905      	ldr	r1, [pc, #20]	; (8007354 <_dtoa_r+0xa30>)
 800733e:	f7ff fb06 	bl	800694e <_dtoa_r+0x2a>
 8007342:	46c0      	nop			; (mov r8, r8)
 8007344:	40240000 	.word	0x40240000
 8007348:	00000433 	.word	0x00000433
 800734c:	7ff00000 	.word	0x7ff00000
 8007350:	08008fef 	.word	0x08008fef
 8007354:	000002ea 	.word	0x000002ea
 8007358:	0029      	movs	r1, r5
 800735a:	692b      	ldr	r3, [r5, #16]
 800735c:	310c      	adds	r1, #12
 800735e:	1c9a      	adds	r2, r3, #2
 8007360:	0092      	lsls	r2, r2, #2
 8007362:	300c      	adds	r0, #12
 8007364:	f000 f911 	bl	800758a <memcpy>
 8007368:	2201      	movs	r2, #1
 800736a:	0021      	movs	r1, r4
 800736c:	0038      	movs	r0, r7
 800736e:	f000 fb2b 	bl	80079c8 <__lshift>
 8007372:	9b06      	ldr	r3, [sp, #24]
 8007374:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007376:	930a      	str	r3, [sp, #40]	; 0x28
 8007378:	3b01      	subs	r3, #1
 800737a:	189b      	adds	r3, r3, r2
 800737c:	2201      	movs	r2, #1
 800737e:	002c      	movs	r4, r5
 8007380:	0005      	movs	r5, r0
 8007382:	9314      	str	r3, [sp, #80]	; 0x50
 8007384:	9b08      	ldr	r3, [sp, #32]
 8007386:	4013      	ands	r3, r2
 8007388:	930f      	str	r3, [sp, #60]	; 0x3c
 800738a:	0031      	movs	r1, r6
 800738c:	9805      	ldr	r0, [sp, #20]
 800738e:	f7ff fa3d 	bl	800680c <quorem>
 8007392:	0003      	movs	r3, r0
 8007394:	0021      	movs	r1, r4
 8007396:	3330      	adds	r3, #48	; 0x30
 8007398:	900d      	str	r0, [sp, #52]	; 0x34
 800739a:	9805      	ldr	r0, [sp, #20]
 800739c:	9307      	str	r3, [sp, #28]
 800739e:	f000 fb81 	bl	8007aa4 <__mcmp>
 80073a2:	002a      	movs	r2, r5
 80073a4:	900e      	str	r0, [sp, #56]	; 0x38
 80073a6:	0031      	movs	r1, r6
 80073a8:	0038      	movs	r0, r7
 80073aa:	f000 fb97 	bl	8007adc <__mdiff>
 80073ae:	68c3      	ldr	r3, [r0, #12]
 80073b0:	9008      	str	r0, [sp, #32]
 80073b2:	9310      	str	r3, [sp, #64]	; 0x40
 80073b4:	2301      	movs	r3, #1
 80073b6:	930c      	str	r3, [sp, #48]	; 0x30
 80073b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d104      	bne.n	80073c8 <_dtoa_r+0xaa4>
 80073be:	0001      	movs	r1, r0
 80073c0:	9805      	ldr	r0, [sp, #20]
 80073c2:	f000 fb6f 	bl	8007aa4 <__mcmp>
 80073c6:	900c      	str	r0, [sp, #48]	; 0x30
 80073c8:	0038      	movs	r0, r7
 80073ca:	9908      	ldr	r1, [sp, #32]
 80073cc:	f000 f92a 	bl	8007624 <_Bfree>
 80073d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073d4:	3301      	adds	r3, #1
 80073d6:	9308      	str	r3, [sp, #32]
 80073d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073da:	4313      	orrs	r3, r2
 80073dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073de:	4313      	orrs	r3, r2
 80073e0:	d10c      	bne.n	80073fc <_dtoa_r+0xad8>
 80073e2:	9b07      	ldr	r3, [sp, #28]
 80073e4:	2b39      	cmp	r3, #57	; 0x39
 80073e6:	d026      	beq.n	8007436 <_dtoa_r+0xb12>
 80073e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	dd02      	ble.n	80073f4 <_dtoa_r+0xad0>
 80073ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073f0:	3331      	adds	r3, #49	; 0x31
 80073f2:	9307      	str	r3, [sp, #28]
 80073f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f6:	9a07      	ldr	r2, [sp, #28]
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	e76a      	b.n	80072d2 <_dtoa_r+0x9ae>
 80073fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073fe:	2b00      	cmp	r3, #0
 8007400:	db04      	blt.n	800740c <_dtoa_r+0xae8>
 8007402:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007404:	4313      	orrs	r3, r2
 8007406:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007408:	4313      	orrs	r3, r2
 800740a:	d11f      	bne.n	800744c <_dtoa_r+0xb28>
 800740c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800740e:	2b00      	cmp	r3, #0
 8007410:	ddf0      	ble.n	80073f4 <_dtoa_r+0xad0>
 8007412:	9905      	ldr	r1, [sp, #20]
 8007414:	2201      	movs	r2, #1
 8007416:	0038      	movs	r0, r7
 8007418:	f000 fad6 	bl	80079c8 <__lshift>
 800741c:	0031      	movs	r1, r6
 800741e:	9005      	str	r0, [sp, #20]
 8007420:	f000 fb40 	bl	8007aa4 <__mcmp>
 8007424:	2800      	cmp	r0, #0
 8007426:	dc03      	bgt.n	8007430 <_dtoa_r+0xb0c>
 8007428:	d1e4      	bne.n	80073f4 <_dtoa_r+0xad0>
 800742a:	9b07      	ldr	r3, [sp, #28]
 800742c:	07db      	lsls	r3, r3, #31
 800742e:	d5e1      	bpl.n	80073f4 <_dtoa_r+0xad0>
 8007430:	9b07      	ldr	r3, [sp, #28]
 8007432:	2b39      	cmp	r3, #57	; 0x39
 8007434:	d1db      	bne.n	80073ee <_dtoa_r+0xaca>
 8007436:	2339      	movs	r3, #57	; 0x39
 8007438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800743a:	7013      	strb	r3, [r2, #0]
 800743c:	9b08      	ldr	r3, [sp, #32]
 800743e:	9308      	str	r3, [sp, #32]
 8007440:	3b01      	subs	r3, #1
 8007442:	781a      	ldrb	r2, [r3, #0]
 8007444:	2a39      	cmp	r2, #57	; 0x39
 8007446:	d068      	beq.n	800751a <_dtoa_r+0xbf6>
 8007448:	3201      	adds	r2, #1
 800744a:	e7d5      	b.n	80073f8 <_dtoa_r+0xad4>
 800744c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800744e:	2b00      	cmp	r3, #0
 8007450:	dd07      	ble.n	8007462 <_dtoa_r+0xb3e>
 8007452:	9b07      	ldr	r3, [sp, #28]
 8007454:	2b39      	cmp	r3, #57	; 0x39
 8007456:	d0ee      	beq.n	8007436 <_dtoa_r+0xb12>
 8007458:	9b07      	ldr	r3, [sp, #28]
 800745a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800745c:	3301      	adds	r3, #1
 800745e:	7013      	strb	r3, [r2, #0]
 8007460:	e737      	b.n	80072d2 <_dtoa_r+0x9ae>
 8007462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007464:	9a07      	ldr	r2, [sp, #28]
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800746a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800746c:	4293      	cmp	r3, r2
 800746e:	d03e      	beq.n	80074ee <_dtoa_r+0xbca>
 8007470:	2300      	movs	r3, #0
 8007472:	220a      	movs	r2, #10
 8007474:	9905      	ldr	r1, [sp, #20]
 8007476:	0038      	movs	r0, r7
 8007478:	f000 f8f8 	bl	800766c <__multadd>
 800747c:	2300      	movs	r3, #0
 800747e:	9005      	str	r0, [sp, #20]
 8007480:	220a      	movs	r2, #10
 8007482:	0021      	movs	r1, r4
 8007484:	0038      	movs	r0, r7
 8007486:	42ac      	cmp	r4, r5
 8007488:	d106      	bne.n	8007498 <_dtoa_r+0xb74>
 800748a:	f000 f8ef 	bl	800766c <__multadd>
 800748e:	0004      	movs	r4, r0
 8007490:	0005      	movs	r5, r0
 8007492:	9b08      	ldr	r3, [sp, #32]
 8007494:	930a      	str	r3, [sp, #40]	; 0x28
 8007496:	e778      	b.n	800738a <_dtoa_r+0xa66>
 8007498:	f000 f8e8 	bl	800766c <__multadd>
 800749c:	0029      	movs	r1, r5
 800749e:	0004      	movs	r4, r0
 80074a0:	2300      	movs	r3, #0
 80074a2:	220a      	movs	r2, #10
 80074a4:	0038      	movs	r0, r7
 80074a6:	f000 f8e1 	bl	800766c <__multadd>
 80074aa:	0005      	movs	r5, r0
 80074ac:	e7f1      	b.n	8007492 <_dtoa_r+0xb6e>
 80074ae:	9b07      	ldr	r3, [sp, #28]
 80074b0:	930c      	str	r3, [sp, #48]	; 0x30
 80074b2:	2400      	movs	r4, #0
 80074b4:	0031      	movs	r1, r6
 80074b6:	9805      	ldr	r0, [sp, #20]
 80074b8:	f7ff f9a8 	bl	800680c <quorem>
 80074bc:	9b06      	ldr	r3, [sp, #24]
 80074be:	3030      	adds	r0, #48	; 0x30
 80074c0:	5518      	strb	r0, [r3, r4]
 80074c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074c4:	3401      	adds	r4, #1
 80074c6:	9007      	str	r0, [sp, #28]
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	dd07      	ble.n	80074dc <_dtoa_r+0xbb8>
 80074cc:	2300      	movs	r3, #0
 80074ce:	220a      	movs	r2, #10
 80074d0:	0038      	movs	r0, r7
 80074d2:	9905      	ldr	r1, [sp, #20]
 80074d4:	f000 f8ca 	bl	800766c <__multadd>
 80074d8:	9005      	str	r0, [sp, #20]
 80074da:	e7eb      	b.n	80074b4 <_dtoa_r+0xb90>
 80074dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074de:	2001      	movs	r0, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	dd00      	ble.n	80074e6 <_dtoa_r+0xbc2>
 80074e4:	0018      	movs	r0, r3
 80074e6:	2400      	movs	r4, #0
 80074e8:	9b06      	ldr	r3, [sp, #24]
 80074ea:	181b      	adds	r3, r3, r0
 80074ec:	9308      	str	r3, [sp, #32]
 80074ee:	9905      	ldr	r1, [sp, #20]
 80074f0:	2201      	movs	r2, #1
 80074f2:	0038      	movs	r0, r7
 80074f4:	f000 fa68 	bl	80079c8 <__lshift>
 80074f8:	0031      	movs	r1, r6
 80074fa:	9005      	str	r0, [sp, #20]
 80074fc:	f000 fad2 	bl	8007aa4 <__mcmp>
 8007500:	2800      	cmp	r0, #0
 8007502:	dc9b      	bgt.n	800743c <_dtoa_r+0xb18>
 8007504:	d102      	bne.n	800750c <_dtoa_r+0xbe8>
 8007506:	9b07      	ldr	r3, [sp, #28]
 8007508:	07db      	lsls	r3, r3, #31
 800750a:	d497      	bmi.n	800743c <_dtoa_r+0xb18>
 800750c:	9b08      	ldr	r3, [sp, #32]
 800750e:	9308      	str	r3, [sp, #32]
 8007510:	3b01      	subs	r3, #1
 8007512:	781a      	ldrb	r2, [r3, #0]
 8007514:	2a30      	cmp	r2, #48	; 0x30
 8007516:	d0fa      	beq.n	800750e <_dtoa_r+0xbea>
 8007518:	e6db      	b.n	80072d2 <_dtoa_r+0x9ae>
 800751a:	9a06      	ldr	r2, [sp, #24]
 800751c:	429a      	cmp	r2, r3
 800751e:	d18e      	bne.n	800743e <_dtoa_r+0xb1a>
 8007520:	9b02      	ldr	r3, [sp, #8]
 8007522:	3301      	adds	r3, #1
 8007524:	9302      	str	r3, [sp, #8]
 8007526:	2331      	movs	r3, #49	; 0x31
 8007528:	e799      	b.n	800745e <_dtoa_r+0xb3a>
 800752a:	4b09      	ldr	r3, [pc, #36]	; (8007550 <_dtoa_r+0xc2c>)
 800752c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800752e:	9306      	str	r3, [sp, #24]
 8007530:	4b08      	ldr	r3, [pc, #32]	; (8007554 <_dtoa_r+0xc30>)
 8007532:	2a00      	cmp	r2, #0
 8007534:	d001      	beq.n	800753a <_dtoa_r+0xc16>
 8007536:	f7ff fa3f 	bl	80069b8 <_dtoa_r+0x94>
 800753a:	f7ff fa3f 	bl	80069bc <_dtoa_r+0x98>
 800753e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007540:	2b00      	cmp	r3, #0
 8007542:	dcb6      	bgt.n	80074b2 <_dtoa_r+0xb8e>
 8007544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007546:	2b02      	cmp	r3, #2
 8007548:	dd00      	ble.n	800754c <_dtoa_r+0xc28>
 800754a:	e6ac      	b.n	80072a6 <_dtoa_r+0x982>
 800754c:	e7b1      	b.n	80074b2 <_dtoa_r+0xb8e>
 800754e:	46c0      	nop			; (mov r8, r8)
 8007550:	08008f70 	.word	0x08008f70
 8007554:	08008f78 	.word	0x08008f78

08007558 <_localeconv_r>:
 8007558:	4800      	ldr	r0, [pc, #0]	; (800755c <_localeconv_r+0x4>)
 800755a:	4770      	bx	lr
 800755c:	20000160 	.word	0x20000160

08007560 <malloc>:
 8007560:	b510      	push	{r4, lr}
 8007562:	4b03      	ldr	r3, [pc, #12]	; (8007570 <malloc+0x10>)
 8007564:	0001      	movs	r1, r0
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	f000 fc4c 	bl	8007e04 <_malloc_r>
 800756c:	bd10      	pop	{r4, pc}
 800756e:	46c0      	nop			; (mov r8, r8)
 8007570:	2000000c 	.word	0x2000000c

08007574 <memchr>:
 8007574:	b2c9      	uxtb	r1, r1
 8007576:	1882      	adds	r2, r0, r2
 8007578:	4290      	cmp	r0, r2
 800757a:	d101      	bne.n	8007580 <memchr+0xc>
 800757c:	2000      	movs	r0, #0
 800757e:	4770      	bx	lr
 8007580:	7803      	ldrb	r3, [r0, #0]
 8007582:	428b      	cmp	r3, r1
 8007584:	d0fb      	beq.n	800757e <memchr+0xa>
 8007586:	3001      	adds	r0, #1
 8007588:	e7f6      	b.n	8007578 <memchr+0x4>

0800758a <memcpy>:
 800758a:	2300      	movs	r3, #0
 800758c:	b510      	push	{r4, lr}
 800758e:	429a      	cmp	r2, r3
 8007590:	d100      	bne.n	8007594 <memcpy+0xa>
 8007592:	bd10      	pop	{r4, pc}
 8007594:	5ccc      	ldrb	r4, [r1, r3]
 8007596:	54c4      	strb	r4, [r0, r3]
 8007598:	3301      	adds	r3, #1
 800759a:	e7f8      	b.n	800758e <memcpy+0x4>

0800759c <_Balloc>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075a0:	0006      	movs	r6, r0
 80075a2:	000c      	movs	r4, r1
 80075a4:	2d00      	cmp	r5, #0
 80075a6:	d10e      	bne.n	80075c6 <_Balloc+0x2a>
 80075a8:	2010      	movs	r0, #16
 80075aa:	f7ff ffd9 	bl	8007560 <malloc>
 80075ae:	1e02      	subs	r2, r0, #0
 80075b0:	6270      	str	r0, [r6, #36]	; 0x24
 80075b2:	d104      	bne.n	80075be <_Balloc+0x22>
 80075b4:	2166      	movs	r1, #102	; 0x66
 80075b6:	4b19      	ldr	r3, [pc, #100]	; (800761c <_Balloc+0x80>)
 80075b8:	4819      	ldr	r0, [pc, #100]	; (8007620 <_Balloc+0x84>)
 80075ba:	f000 fe0d 	bl	80081d8 <__assert_func>
 80075be:	6045      	str	r5, [r0, #4]
 80075c0:	6085      	str	r5, [r0, #8]
 80075c2:	6005      	str	r5, [r0, #0]
 80075c4:	60c5      	str	r5, [r0, #12]
 80075c6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80075c8:	68eb      	ldr	r3, [r5, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d013      	beq.n	80075f6 <_Balloc+0x5a>
 80075ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80075d0:	00a2      	lsls	r2, r4, #2
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	189b      	adds	r3, r3, r2
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	2800      	cmp	r0, #0
 80075da:	d118      	bne.n	800760e <_Balloc+0x72>
 80075dc:	2101      	movs	r1, #1
 80075de:	000d      	movs	r5, r1
 80075e0:	40a5      	lsls	r5, r4
 80075e2:	1d6a      	adds	r2, r5, #5
 80075e4:	0030      	movs	r0, r6
 80075e6:	0092      	lsls	r2, r2, #2
 80075e8:	f000 fb74 	bl	8007cd4 <_calloc_r>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d00c      	beq.n	800760a <_Balloc+0x6e>
 80075f0:	6044      	str	r4, [r0, #4]
 80075f2:	6085      	str	r5, [r0, #8]
 80075f4:	e00d      	b.n	8007612 <_Balloc+0x76>
 80075f6:	2221      	movs	r2, #33	; 0x21
 80075f8:	2104      	movs	r1, #4
 80075fa:	0030      	movs	r0, r6
 80075fc:	f000 fb6a 	bl	8007cd4 <_calloc_r>
 8007600:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007602:	60e8      	str	r0, [r5, #12]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e1      	bne.n	80075ce <_Balloc+0x32>
 800760a:	2000      	movs	r0, #0
 800760c:	bd70      	pop	{r4, r5, r6, pc}
 800760e:	6802      	ldr	r2, [r0, #0]
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	2300      	movs	r3, #0
 8007614:	6103      	str	r3, [r0, #16]
 8007616:	60c3      	str	r3, [r0, #12]
 8007618:	e7f8      	b.n	800760c <_Balloc+0x70>
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	08008f7d 	.word	0x08008f7d
 8007620:	08009000 	.word	0x08009000

08007624 <_Bfree>:
 8007624:	b570      	push	{r4, r5, r6, lr}
 8007626:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007628:	0005      	movs	r5, r0
 800762a:	000c      	movs	r4, r1
 800762c:	2e00      	cmp	r6, #0
 800762e:	d10e      	bne.n	800764e <_Bfree+0x2a>
 8007630:	2010      	movs	r0, #16
 8007632:	f7ff ff95 	bl	8007560 <malloc>
 8007636:	1e02      	subs	r2, r0, #0
 8007638:	6268      	str	r0, [r5, #36]	; 0x24
 800763a:	d104      	bne.n	8007646 <_Bfree+0x22>
 800763c:	218a      	movs	r1, #138	; 0x8a
 800763e:	4b09      	ldr	r3, [pc, #36]	; (8007664 <_Bfree+0x40>)
 8007640:	4809      	ldr	r0, [pc, #36]	; (8007668 <_Bfree+0x44>)
 8007642:	f000 fdc9 	bl	80081d8 <__assert_func>
 8007646:	6046      	str	r6, [r0, #4]
 8007648:	6086      	str	r6, [r0, #8]
 800764a:	6006      	str	r6, [r0, #0]
 800764c:	60c6      	str	r6, [r0, #12]
 800764e:	2c00      	cmp	r4, #0
 8007650:	d007      	beq.n	8007662 <_Bfree+0x3e>
 8007652:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007654:	6862      	ldr	r2, [r4, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	0092      	lsls	r2, r2, #2
 800765a:	189b      	adds	r3, r3, r2
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	6022      	str	r2, [r4, #0]
 8007660:	601c      	str	r4, [r3, #0]
 8007662:	bd70      	pop	{r4, r5, r6, pc}
 8007664:	08008f7d 	.word	0x08008f7d
 8007668:	08009000 	.word	0x08009000

0800766c <__multadd>:
 800766c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800766e:	000e      	movs	r6, r1
 8007670:	9001      	str	r0, [sp, #4]
 8007672:	000c      	movs	r4, r1
 8007674:	001d      	movs	r5, r3
 8007676:	2000      	movs	r0, #0
 8007678:	690f      	ldr	r7, [r1, #16]
 800767a:	3614      	adds	r6, #20
 800767c:	6833      	ldr	r3, [r6, #0]
 800767e:	3001      	adds	r0, #1
 8007680:	b299      	uxth	r1, r3
 8007682:	4351      	muls	r1, r2
 8007684:	0c1b      	lsrs	r3, r3, #16
 8007686:	4353      	muls	r3, r2
 8007688:	1949      	adds	r1, r1, r5
 800768a:	0c0d      	lsrs	r5, r1, #16
 800768c:	195b      	adds	r3, r3, r5
 800768e:	0c1d      	lsrs	r5, r3, #16
 8007690:	b289      	uxth	r1, r1
 8007692:	041b      	lsls	r3, r3, #16
 8007694:	185b      	adds	r3, r3, r1
 8007696:	c608      	stmia	r6!, {r3}
 8007698:	4287      	cmp	r7, r0
 800769a:	dcef      	bgt.n	800767c <__multadd+0x10>
 800769c:	2d00      	cmp	r5, #0
 800769e:	d022      	beq.n	80076e6 <__multadd+0x7a>
 80076a0:	68a3      	ldr	r3, [r4, #8]
 80076a2:	42bb      	cmp	r3, r7
 80076a4:	dc19      	bgt.n	80076da <__multadd+0x6e>
 80076a6:	6863      	ldr	r3, [r4, #4]
 80076a8:	9801      	ldr	r0, [sp, #4]
 80076aa:	1c59      	adds	r1, r3, #1
 80076ac:	f7ff ff76 	bl	800759c <_Balloc>
 80076b0:	1e06      	subs	r6, r0, #0
 80076b2:	d105      	bne.n	80076c0 <__multadd+0x54>
 80076b4:	0002      	movs	r2, r0
 80076b6:	21b5      	movs	r1, #181	; 0xb5
 80076b8:	4b0c      	ldr	r3, [pc, #48]	; (80076ec <__multadd+0x80>)
 80076ba:	480d      	ldr	r0, [pc, #52]	; (80076f0 <__multadd+0x84>)
 80076bc:	f000 fd8c 	bl	80081d8 <__assert_func>
 80076c0:	0021      	movs	r1, r4
 80076c2:	6923      	ldr	r3, [r4, #16]
 80076c4:	310c      	adds	r1, #12
 80076c6:	1c9a      	adds	r2, r3, #2
 80076c8:	0092      	lsls	r2, r2, #2
 80076ca:	300c      	adds	r0, #12
 80076cc:	f7ff ff5d 	bl	800758a <memcpy>
 80076d0:	0021      	movs	r1, r4
 80076d2:	9801      	ldr	r0, [sp, #4]
 80076d4:	f7ff ffa6 	bl	8007624 <_Bfree>
 80076d8:	0034      	movs	r4, r6
 80076da:	1d3b      	adds	r3, r7, #4
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	18e3      	adds	r3, r4, r3
 80076e0:	605d      	str	r5, [r3, #4]
 80076e2:	1c7b      	adds	r3, r7, #1
 80076e4:	6123      	str	r3, [r4, #16]
 80076e6:	0020      	movs	r0, r4
 80076e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	08008fef 	.word	0x08008fef
 80076f0:	08009000 	.word	0x08009000

080076f4 <__hi0bits>:
 80076f4:	0003      	movs	r3, r0
 80076f6:	0c02      	lsrs	r2, r0, #16
 80076f8:	2000      	movs	r0, #0
 80076fa:	4282      	cmp	r2, r0
 80076fc:	d101      	bne.n	8007702 <__hi0bits+0xe>
 80076fe:	041b      	lsls	r3, r3, #16
 8007700:	3010      	adds	r0, #16
 8007702:	0e1a      	lsrs	r2, r3, #24
 8007704:	d101      	bne.n	800770a <__hi0bits+0x16>
 8007706:	3008      	adds	r0, #8
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	0f1a      	lsrs	r2, r3, #28
 800770c:	d101      	bne.n	8007712 <__hi0bits+0x1e>
 800770e:	3004      	adds	r0, #4
 8007710:	011b      	lsls	r3, r3, #4
 8007712:	0f9a      	lsrs	r2, r3, #30
 8007714:	d101      	bne.n	800771a <__hi0bits+0x26>
 8007716:	3002      	adds	r0, #2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	db03      	blt.n	8007726 <__hi0bits+0x32>
 800771e:	3001      	adds	r0, #1
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	d400      	bmi.n	8007726 <__hi0bits+0x32>
 8007724:	2020      	movs	r0, #32
 8007726:	4770      	bx	lr

08007728 <__lo0bits>:
 8007728:	6803      	ldr	r3, [r0, #0]
 800772a:	0002      	movs	r2, r0
 800772c:	2107      	movs	r1, #7
 800772e:	0018      	movs	r0, r3
 8007730:	4008      	ands	r0, r1
 8007732:	420b      	tst	r3, r1
 8007734:	d00d      	beq.n	8007752 <__lo0bits+0x2a>
 8007736:	3906      	subs	r1, #6
 8007738:	2000      	movs	r0, #0
 800773a:	420b      	tst	r3, r1
 800773c:	d105      	bne.n	800774a <__lo0bits+0x22>
 800773e:	3002      	adds	r0, #2
 8007740:	4203      	tst	r3, r0
 8007742:	d003      	beq.n	800774c <__lo0bits+0x24>
 8007744:	40cb      	lsrs	r3, r1
 8007746:	0008      	movs	r0, r1
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	4770      	bx	lr
 800774c:	089b      	lsrs	r3, r3, #2
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	e7fb      	b.n	800774a <__lo0bits+0x22>
 8007752:	b299      	uxth	r1, r3
 8007754:	2900      	cmp	r1, #0
 8007756:	d101      	bne.n	800775c <__lo0bits+0x34>
 8007758:	2010      	movs	r0, #16
 800775a:	0c1b      	lsrs	r3, r3, #16
 800775c:	b2d9      	uxtb	r1, r3
 800775e:	2900      	cmp	r1, #0
 8007760:	d101      	bne.n	8007766 <__lo0bits+0x3e>
 8007762:	3008      	adds	r0, #8
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	0719      	lsls	r1, r3, #28
 8007768:	d101      	bne.n	800776e <__lo0bits+0x46>
 800776a:	3004      	adds	r0, #4
 800776c:	091b      	lsrs	r3, r3, #4
 800776e:	0799      	lsls	r1, r3, #30
 8007770:	d101      	bne.n	8007776 <__lo0bits+0x4e>
 8007772:	3002      	adds	r0, #2
 8007774:	089b      	lsrs	r3, r3, #2
 8007776:	07d9      	lsls	r1, r3, #31
 8007778:	d4e9      	bmi.n	800774e <__lo0bits+0x26>
 800777a:	3001      	adds	r0, #1
 800777c:	085b      	lsrs	r3, r3, #1
 800777e:	d1e6      	bne.n	800774e <__lo0bits+0x26>
 8007780:	2020      	movs	r0, #32
 8007782:	e7e2      	b.n	800774a <__lo0bits+0x22>

08007784 <__i2b>:
 8007784:	b510      	push	{r4, lr}
 8007786:	000c      	movs	r4, r1
 8007788:	2101      	movs	r1, #1
 800778a:	f7ff ff07 	bl	800759c <_Balloc>
 800778e:	2800      	cmp	r0, #0
 8007790:	d106      	bne.n	80077a0 <__i2b+0x1c>
 8007792:	21a0      	movs	r1, #160	; 0xa0
 8007794:	0002      	movs	r2, r0
 8007796:	4b04      	ldr	r3, [pc, #16]	; (80077a8 <__i2b+0x24>)
 8007798:	4804      	ldr	r0, [pc, #16]	; (80077ac <__i2b+0x28>)
 800779a:	0049      	lsls	r1, r1, #1
 800779c:	f000 fd1c 	bl	80081d8 <__assert_func>
 80077a0:	2301      	movs	r3, #1
 80077a2:	6144      	str	r4, [r0, #20]
 80077a4:	6103      	str	r3, [r0, #16]
 80077a6:	bd10      	pop	{r4, pc}
 80077a8:	08008fef 	.word	0x08008fef
 80077ac:	08009000 	.word	0x08009000

080077b0 <__multiply>:
 80077b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077b2:	690b      	ldr	r3, [r1, #16]
 80077b4:	0014      	movs	r4, r2
 80077b6:	6912      	ldr	r2, [r2, #16]
 80077b8:	000d      	movs	r5, r1
 80077ba:	b089      	sub	sp, #36	; 0x24
 80077bc:	4293      	cmp	r3, r2
 80077be:	da01      	bge.n	80077c4 <__multiply+0x14>
 80077c0:	0025      	movs	r5, r4
 80077c2:	000c      	movs	r4, r1
 80077c4:	692f      	ldr	r7, [r5, #16]
 80077c6:	6926      	ldr	r6, [r4, #16]
 80077c8:	6869      	ldr	r1, [r5, #4]
 80077ca:	19bb      	adds	r3, r7, r6
 80077cc:	9302      	str	r3, [sp, #8]
 80077ce:	68ab      	ldr	r3, [r5, #8]
 80077d0:	19ba      	adds	r2, r7, r6
 80077d2:	4293      	cmp	r3, r2
 80077d4:	da00      	bge.n	80077d8 <__multiply+0x28>
 80077d6:	3101      	adds	r1, #1
 80077d8:	f7ff fee0 	bl	800759c <_Balloc>
 80077dc:	9001      	str	r0, [sp, #4]
 80077de:	2800      	cmp	r0, #0
 80077e0:	d106      	bne.n	80077f0 <__multiply+0x40>
 80077e2:	215e      	movs	r1, #94	; 0x5e
 80077e4:	0002      	movs	r2, r0
 80077e6:	4b48      	ldr	r3, [pc, #288]	; (8007908 <__multiply+0x158>)
 80077e8:	4848      	ldr	r0, [pc, #288]	; (800790c <__multiply+0x15c>)
 80077ea:	31ff      	adds	r1, #255	; 0xff
 80077ec:	f000 fcf4 	bl	80081d8 <__assert_func>
 80077f0:	9b01      	ldr	r3, [sp, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	3314      	adds	r3, #20
 80077f6:	469c      	mov	ip, r3
 80077f8:	19bb      	adds	r3, r7, r6
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4463      	add	r3, ip
 80077fe:	9303      	str	r3, [sp, #12]
 8007800:	4663      	mov	r3, ip
 8007802:	9903      	ldr	r1, [sp, #12]
 8007804:	428b      	cmp	r3, r1
 8007806:	d32c      	bcc.n	8007862 <__multiply+0xb2>
 8007808:	002b      	movs	r3, r5
 800780a:	0022      	movs	r2, r4
 800780c:	3314      	adds	r3, #20
 800780e:	00bf      	lsls	r7, r7, #2
 8007810:	3214      	adds	r2, #20
 8007812:	9306      	str	r3, [sp, #24]
 8007814:	00b6      	lsls	r6, r6, #2
 8007816:	19db      	adds	r3, r3, r7
 8007818:	9304      	str	r3, [sp, #16]
 800781a:	1993      	adds	r3, r2, r6
 800781c:	9307      	str	r3, [sp, #28]
 800781e:	2304      	movs	r3, #4
 8007820:	9305      	str	r3, [sp, #20]
 8007822:	002b      	movs	r3, r5
 8007824:	9904      	ldr	r1, [sp, #16]
 8007826:	3315      	adds	r3, #21
 8007828:	9200      	str	r2, [sp, #0]
 800782a:	4299      	cmp	r1, r3
 800782c:	d305      	bcc.n	800783a <__multiply+0x8a>
 800782e:	1b4b      	subs	r3, r1, r5
 8007830:	3b15      	subs	r3, #21
 8007832:	089b      	lsrs	r3, r3, #2
 8007834:	3301      	adds	r3, #1
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	9305      	str	r3, [sp, #20]
 800783a:	9b07      	ldr	r3, [sp, #28]
 800783c:	9a00      	ldr	r2, [sp, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d311      	bcc.n	8007866 <__multiply+0xb6>
 8007842:	9b02      	ldr	r3, [sp, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	dd06      	ble.n	8007856 <__multiply+0xa6>
 8007848:	9b03      	ldr	r3, [sp, #12]
 800784a:	3b04      	subs	r3, #4
 800784c:	9303      	str	r3, [sp, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d053      	beq.n	80078fe <__multiply+0x14e>
 8007856:	9b01      	ldr	r3, [sp, #4]
 8007858:	9a02      	ldr	r2, [sp, #8]
 800785a:	0018      	movs	r0, r3
 800785c:	611a      	str	r2, [r3, #16]
 800785e:	b009      	add	sp, #36	; 0x24
 8007860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007862:	c304      	stmia	r3!, {r2}
 8007864:	e7cd      	b.n	8007802 <__multiply+0x52>
 8007866:	9b00      	ldr	r3, [sp, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	b298      	uxth	r0, r3
 800786c:	2800      	cmp	r0, #0
 800786e:	d01b      	beq.n	80078a8 <__multiply+0xf8>
 8007870:	4667      	mov	r7, ip
 8007872:	2400      	movs	r4, #0
 8007874:	9e06      	ldr	r6, [sp, #24]
 8007876:	ce02      	ldmia	r6!, {r1}
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	b28b      	uxth	r3, r1
 800787c:	4343      	muls	r3, r0
 800787e:	b292      	uxth	r2, r2
 8007880:	189b      	adds	r3, r3, r2
 8007882:	191b      	adds	r3, r3, r4
 8007884:	0c0c      	lsrs	r4, r1, #16
 8007886:	4344      	muls	r4, r0
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	0c11      	lsrs	r1, r2, #16
 800788c:	1861      	adds	r1, r4, r1
 800788e:	0c1c      	lsrs	r4, r3, #16
 8007890:	1909      	adds	r1, r1, r4
 8007892:	0c0c      	lsrs	r4, r1, #16
 8007894:	b29b      	uxth	r3, r3
 8007896:	0409      	lsls	r1, r1, #16
 8007898:	430b      	orrs	r3, r1
 800789a:	c708      	stmia	r7!, {r3}
 800789c:	9b04      	ldr	r3, [sp, #16]
 800789e:	42b3      	cmp	r3, r6
 80078a0:	d8e9      	bhi.n	8007876 <__multiply+0xc6>
 80078a2:	4663      	mov	r3, ip
 80078a4:	9a05      	ldr	r2, [sp, #20]
 80078a6:	509c      	str	r4, [r3, r2]
 80078a8:	9b00      	ldr	r3, [sp, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	0c1e      	lsrs	r6, r3, #16
 80078ae:	d020      	beq.n	80078f2 <__multiply+0x142>
 80078b0:	4663      	mov	r3, ip
 80078b2:	002c      	movs	r4, r5
 80078b4:	4660      	mov	r0, ip
 80078b6:	2700      	movs	r7, #0
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3414      	adds	r4, #20
 80078bc:	6822      	ldr	r2, [r4, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	b291      	uxth	r1, r2
 80078c2:	4371      	muls	r1, r6
 80078c4:	6802      	ldr	r2, [r0, #0]
 80078c6:	0c12      	lsrs	r2, r2, #16
 80078c8:	1889      	adds	r1, r1, r2
 80078ca:	19cf      	adds	r7, r1, r7
 80078cc:	0439      	lsls	r1, r7, #16
 80078ce:	430b      	orrs	r3, r1
 80078d0:	6003      	str	r3, [r0, #0]
 80078d2:	cc02      	ldmia	r4!, {r1}
 80078d4:	6843      	ldr	r3, [r0, #4]
 80078d6:	0c09      	lsrs	r1, r1, #16
 80078d8:	4371      	muls	r1, r6
 80078da:	b29b      	uxth	r3, r3
 80078dc:	0c3f      	lsrs	r7, r7, #16
 80078de:	18cb      	adds	r3, r1, r3
 80078e0:	9a04      	ldr	r2, [sp, #16]
 80078e2:	19db      	adds	r3, r3, r7
 80078e4:	0c1f      	lsrs	r7, r3, #16
 80078e6:	3004      	adds	r0, #4
 80078e8:	42a2      	cmp	r2, r4
 80078ea:	d8e7      	bhi.n	80078bc <__multiply+0x10c>
 80078ec:	4662      	mov	r2, ip
 80078ee:	9905      	ldr	r1, [sp, #20]
 80078f0:	5053      	str	r3, [r2, r1]
 80078f2:	9b00      	ldr	r3, [sp, #0]
 80078f4:	3304      	adds	r3, #4
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	2304      	movs	r3, #4
 80078fa:	449c      	add	ip, r3
 80078fc:	e79d      	b.n	800783a <__multiply+0x8a>
 80078fe:	9b02      	ldr	r3, [sp, #8]
 8007900:	3b01      	subs	r3, #1
 8007902:	9302      	str	r3, [sp, #8]
 8007904:	e79d      	b.n	8007842 <__multiply+0x92>
 8007906:	46c0      	nop			; (mov r8, r8)
 8007908:	08008fef 	.word	0x08008fef
 800790c:	08009000 	.word	0x08009000

08007910 <__pow5mult>:
 8007910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007912:	2303      	movs	r3, #3
 8007914:	0015      	movs	r5, r2
 8007916:	0007      	movs	r7, r0
 8007918:	000e      	movs	r6, r1
 800791a:	401a      	ands	r2, r3
 800791c:	421d      	tst	r5, r3
 800791e:	d008      	beq.n	8007932 <__pow5mult+0x22>
 8007920:	4925      	ldr	r1, [pc, #148]	; (80079b8 <__pow5mult+0xa8>)
 8007922:	3a01      	subs	r2, #1
 8007924:	0092      	lsls	r2, r2, #2
 8007926:	5852      	ldr	r2, [r2, r1]
 8007928:	2300      	movs	r3, #0
 800792a:	0031      	movs	r1, r6
 800792c:	f7ff fe9e 	bl	800766c <__multadd>
 8007930:	0006      	movs	r6, r0
 8007932:	10ad      	asrs	r5, r5, #2
 8007934:	d03d      	beq.n	80079b2 <__pow5mult+0xa2>
 8007936:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007938:	2c00      	cmp	r4, #0
 800793a:	d10f      	bne.n	800795c <__pow5mult+0x4c>
 800793c:	2010      	movs	r0, #16
 800793e:	f7ff fe0f 	bl	8007560 <malloc>
 8007942:	1e02      	subs	r2, r0, #0
 8007944:	6278      	str	r0, [r7, #36]	; 0x24
 8007946:	d105      	bne.n	8007954 <__pow5mult+0x44>
 8007948:	21d7      	movs	r1, #215	; 0xd7
 800794a:	4b1c      	ldr	r3, [pc, #112]	; (80079bc <__pow5mult+0xac>)
 800794c:	481c      	ldr	r0, [pc, #112]	; (80079c0 <__pow5mult+0xb0>)
 800794e:	0049      	lsls	r1, r1, #1
 8007950:	f000 fc42 	bl	80081d8 <__assert_func>
 8007954:	6044      	str	r4, [r0, #4]
 8007956:	6084      	str	r4, [r0, #8]
 8007958:	6004      	str	r4, [r0, #0]
 800795a:	60c4      	str	r4, [r0, #12]
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	689c      	ldr	r4, [r3, #8]
 8007960:	9301      	str	r3, [sp, #4]
 8007962:	2c00      	cmp	r4, #0
 8007964:	d108      	bne.n	8007978 <__pow5mult+0x68>
 8007966:	0038      	movs	r0, r7
 8007968:	4916      	ldr	r1, [pc, #88]	; (80079c4 <__pow5mult+0xb4>)
 800796a:	f7ff ff0b 	bl	8007784 <__i2b>
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	0004      	movs	r4, r0
 8007972:	6098      	str	r0, [r3, #8]
 8007974:	2300      	movs	r3, #0
 8007976:	6003      	str	r3, [r0, #0]
 8007978:	2301      	movs	r3, #1
 800797a:	421d      	tst	r5, r3
 800797c:	d00a      	beq.n	8007994 <__pow5mult+0x84>
 800797e:	0031      	movs	r1, r6
 8007980:	0022      	movs	r2, r4
 8007982:	0038      	movs	r0, r7
 8007984:	f7ff ff14 	bl	80077b0 <__multiply>
 8007988:	0031      	movs	r1, r6
 800798a:	9001      	str	r0, [sp, #4]
 800798c:	0038      	movs	r0, r7
 800798e:	f7ff fe49 	bl	8007624 <_Bfree>
 8007992:	9e01      	ldr	r6, [sp, #4]
 8007994:	106d      	asrs	r5, r5, #1
 8007996:	d00c      	beq.n	80079b2 <__pow5mult+0xa2>
 8007998:	6820      	ldr	r0, [r4, #0]
 800799a:	2800      	cmp	r0, #0
 800799c:	d107      	bne.n	80079ae <__pow5mult+0x9e>
 800799e:	0022      	movs	r2, r4
 80079a0:	0021      	movs	r1, r4
 80079a2:	0038      	movs	r0, r7
 80079a4:	f7ff ff04 	bl	80077b0 <__multiply>
 80079a8:	2300      	movs	r3, #0
 80079aa:	6020      	str	r0, [r4, #0]
 80079ac:	6003      	str	r3, [r0, #0]
 80079ae:	0004      	movs	r4, r0
 80079b0:	e7e2      	b.n	8007978 <__pow5mult+0x68>
 80079b2:	0030      	movs	r0, r6
 80079b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079b6:	46c0      	nop			; (mov r8, r8)
 80079b8:	08009150 	.word	0x08009150
 80079bc:	08008f7d 	.word	0x08008f7d
 80079c0:	08009000 	.word	0x08009000
 80079c4:	00000271 	.word	0x00000271

080079c8 <__lshift>:
 80079c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ca:	000c      	movs	r4, r1
 80079cc:	0017      	movs	r7, r2
 80079ce:	6923      	ldr	r3, [r4, #16]
 80079d0:	1155      	asrs	r5, r2, #5
 80079d2:	b087      	sub	sp, #28
 80079d4:	18eb      	adds	r3, r5, r3
 80079d6:	9302      	str	r3, [sp, #8]
 80079d8:	3301      	adds	r3, #1
 80079da:	9301      	str	r3, [sp, #4]
 80079dc:	6849      	ldr	r1, [r1, #4]
 80079de:	68a3      	ldr	r3, [r4, #8]
 80079e0:	9004      	str	r0, [sp, #16]
 80079e2:	9a01      	ldr	r2, [sp, #4]
 80079e4:	4293      	cmp	r3, r2
 80079e6:	db10      	blt.n	8007a0a <__lshift+0x42>
 80079e8:	9804      	ldr	r0, [sp, #16]
 80079ea:	f7ff fdd7 	bl	800759c <_Balloc>
 80079ee:	2300      	movs	r3, #0
 80079f0:	0002      	movs	r2, r0
 80079f2:	0006      	movs	r6, r0
 80079f4:	0019      	movs	r1, r3
 80079f6:	3214      	adds	r2, #20
 80079f8:	4298      	cmp	r0, r3
 80079fa:	d10c      	bne.n	8007a16 <__lshift+0x4e>
 80079fc:	21da      	movs	r1, #218	; 0xda
 80079fe:	0002      	movs	r2, r0
 8007a00:	4b26      	ldr	r3, [pc, #152]	; (8007a9c <__lshift+0xd4>)
 8007a02:	4827      	ldr	r0, [pc, #156]	; (8007aa0 <__lshift+0xd8>)
 8007a04:	31ff      	adds	r1, #255	; 0xff
 8007a06:	f000 fbe7 	bl	80081d8 <__assert_func>
 8007a0a:	3101      	adds	r1, #1
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	e7e8      	b.n	80079e2 <__lshift+0x1a>
 8007a10:	0098      	lsls	r0, r3, #2
 8007a12:	5011      	str	r1, [r2, r0]
 8007a14:	3301      	adds	r3, #1
 8007a16:	42ab      	cmp	r3, r5
 8007a18:	dbfa      	blt.n	8007a10 <__lshift+0x48>
 8007a1a:	43eb      	mvns	r3, r5
 8007a1c:	17db      	asrs	r3, r3, #31
 8007a1e:	401d      	ands	r5, r3
 8007a20:	211f      	movs	r1, #31
 8007a22:	0023      	movs	r3, r4
 8007a24:	0038      	movs	r0, r7
 8007a26:	00ad      	lsls	r5, r5, #2
 8007a28:	1955      	adds	r5, r2, r5
 8007a2a:	6922      	ldr	r2, [r4, #16]
 8007a2c:	3314      	adds	r3, #20
 8007a2e:	0092      	lsls	r2, r2, #2
 8007a30:	4008      	ands	r0, r1
 8007a32:	4684      	mov	ip, r0
 8007a34:	189a      	adds	r2, r3, r2
 8007a36:	420f      	tst	r7, r1
 8007a38:	d02a      	beq.n	8007a90 <__lshift+0xc8>
 8007a3a:	3101      	adds	r1, #1
 8007a3c:	1a09      	subs	r1, r1, r0
 8007a3e:	9105      	str	r1, [sp, #20]
 8007a40:	2100      	movs	r1, #0
 8007a42:	9503      	str	r5, [sp, #12]
 8007a44:	4667      	mov	r7, ip
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	40b8      	lsls	r0, r7
 8007a4a:	4301      	orrs	r1, r0
 8007a4c:	9803      	ldr	r0, [sp, #12]
 8007a4e:	c002      	stmia	r0!, {r1}
 8007a50:	cb02      	ldmia	r3!, {r1}
 8007a52:	9003      	str	r0, [sp, #12]
 8007a54:	9805      	ldr	r0, [sp, #20]
 8007a56:	40c1      	lsrs	r1, r0
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d8f3      	bhi.n	8007a44 <__lshift+0x7c>
 8007a5c:	0020      	movs	r0, r4
 8007a5e:	3015      	adds	r0, #21
 8007a60:	2304      	movs	r3, #4
 8007a62:	4282      	cmp	r2, r0
 8007a64:	d304      	bcc.n	8007a70 <__lshift+0xa8>
 8007a66:	1b13      	subs	r3, r2, r4
 8007a68:	3b15      	subs	r3, #21
 8007a6a:	089b      	lsrs	r3, r3, #2
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	50e9      	str	r1, [r5, r3]
 8007a72:	2900      	cmp	r1, #0
 8007a74:	d002      	beq.n	8007a7c <__lshift+0xb4>
 8007a76:	9b02      	ldr	r3, [sp, #8]
 8007a78:	3302      	adds	r3, #2
 8007a7a:	9301      	str	r3, [sp, #4]
 8007a7c:	9b01      	ldr	r3, [sp, #4]
 8007a7e:	9804      	ldr	r0, [sp, #16]
 8007a80:	3b01      	subs	r3, #1
 8007a82:	0021      	movs	r1, r4
 8007a84:	6133      	str	r3, [r6, #16]
 8007a86:	f7ff fdcd 	bl	8007624 <_Bfree>
 8007a8a:	0030      	movs	r0, r6
 8007a8c:	b007      	add	sp, #28
 8007a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a90:	cb02      	ldmia	r3!, {r1}
 8007a92:	c502      	stmia	r5!, {r1}
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d8fb      	bhi.n	8007a90 <__lshift+0xc8>
 8007a98:	e7f0      	b.n	8007a7c <__lshift+0xb4>
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	08008fef 	.word	0x08008fef
 8007aa0:	08009000 	.word	0x08009000

08007aa4 <__mcmp>:
 8007aa4:	6902      	ldr	r2, [r0, #16]
 8007aa6:	690b      	ldr	r3, [r1, #16]
 8007aa8:	b530      	push	{r4, r5, lr}
 8007aaa:	0004      	movs	r4, r0
 8007aac:	1ad0      	subs	r0, r2, r3
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d10d      	bne.n	8007ace <__mcmp+0x2a>
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	3414      	adds	r4, #20
 8007ab6:	3114      	adds	r1, #20
 8007ab8:	18e2      	adds	r2, r4, r3
 8007aba:	18c9      	adds	r1, r1, r3
 8007abc:	3a04      	subs	r2, #4
 8007abe:	3904      	subs	r1, #4
 8007ac0:	6815      	ldr	r5, [r2, #0]
 8007ac2:	680b      	ldr	r3, [r1, #0]
 8007ac4:	429d      	cmp	r5, r3
 8007ac6:	d003      	beq.n	8007ad0 <__mcmp+0x2c>
 8007ac8:	2001      	movs	r0, #1
 8007aca:	429d      	cmp	r5, r3
 8007acc:	d303      	bcc.n	8007ad6 <__mcmp+0x32>
 8007ace:	bd30      	pop	{r4, r5, pc}
 8007ad0:	4294      	cmp	r4, r2
 8007ad2:	d3f3      	bcc.n	8007abc <__mcmp+0x18>
 8007ad4:	e7fb      	b.n	8007ace <__mcmp+0x2a>
 8007ad6:	4240      	negs	r0, r0
 8007ad8:	e7f9      	b.n	8007ace <__mcmp+0x2a>
	...

08007adc <__mdiff>:
 8007adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ade:	000e      	movs	r6, r1
 8007ae0:	0007      	movs	r7, r0
 8007ae2:	0011      	movs	r1, r2
 8007ae4:	0030      	movs	r0, r6
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	0014      	movs	r4, r2
 8007aea:	f7ff ffdb 	bl	8007aa4 <__mcmp>
 8007aee:	1e05      	subs	r5, r0, #0
 8007af0:	d110      	bne.n	8007b14 <__mdiff+0x38>
 8007af2:	0001      	movs	r1, r0
 8007af4:	0038      	movs	r0, r7
 8007af6:	f7ff fd51 	bl	800759c <_Balloc>
 8007afa:	1e02      	subs	r2, r0, #0
 8007afc:	d104      	bne.n	8007b08 <__mdiff+0x2c>
 8007afe:	4b40      	ldr	r3, [pc, #256]	; (8007c00 <__mdiff+0x124>)
 8007b00:	4940      	ldr	r1, [pc, #256]	; (8007c04 <__mdiff+0x128>)
 8007b02:	4841      	ldr	r0, [pc, #260]	; (8007c08 <__mdiff+0x12c>)
 8007b04:	f000 fb68 	bl	80081d8 <__assert_func>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	6145      	str	r5, [r0, #20]
 8007b0c:	6103      	str	r3, [r0, #16]
 8007b0e:	0010      	movs	r0, r2
 8007b10:	b007      	add	sp, #28
 8007b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b14:	2301      	movs	r3, #1
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	db04      	blt.n	8007b26 <__mdiff+0x4a>
 8007b1c:	0023      	movs	r3, r4
 8007b1e:	0034      	movs	r4, r6
 8007b20:	001e      	movs	r6, r3
 8007b22:	2300      	movs	r3, #0
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	0038      	movs	r0, r7
 8007b28:	6861      	ldr	r1, [r4, #4]
 8007b2a:	f7ff fd37 	bl	800759c <_Balloc>
 8007b2e:	1e02      	subs	r2, r0, #0
 8007b30:	d103      	bne.n	8007b3a <__mdiff+0x5e>
 8007b32:	2190      	movs	r1, #144	; 0x90
 8007b34:	4b32      	ldr	r3, [pc, #200]	; (8007c00 <__mdiff+0x124>)
 8007b36:	0089      	lsls	r1, r1, #2
 8007b38:	e7e3      	b.n	8007b02 <__mdiff+0x26>
 8007b3a:	9b01      	ldr	r3, [sp, #4]
 8007b3c:	2700      	movs	r7, #0
 8007b3e:	60c3      	str	r3, [r0, #12]
 8007b40:	6920      	ldr	r0, [r4, #16]
 8007b42:	3414      	adds	r4, #20
 8007b44:	9401      	str	r4, [sp, #4]
 8007b46:	9b01      	ldr	r3, [sp, #4]
 8007b48:	0084      	lsls	r4, r0, #2
 8007b4a:	191b      	adds	r3, r3, r4
 8007b4c:	0034      	movs	r4, r6
 8007b4e:	9302      	str	r3, [sp, #8]
 8007b50:	6933      	ldr	r3, [r6, #16]
 8007b52:	3414      	adds	r4, #20
 8007b54:	0099      	lsls	r1, r3, #2
 8007b56:	1863      	adds	r3, r4, r1
 8007b58:	9303      	str	r3, [sp, #12]
 8007b5a:	0013      	movs	r3, r2
 8007b5c:	3314      	adds	r3, #20
 8007b5e:	469c      	mov	ip, r3
 8007b60:	9305      	str	r3, [sp, #20]
 8007b62:	9b01      	ldr	r3, [sp, #4]
 8007b64:	9304      	str	r3, [sp, #16]
 8007b66:	9b04      	ldr	r3, [sp, #16]
 8007b68:	cc02      	ldmia	r4!, {r1}
 8007b6a:	cb20      	ldmia	r3!, {r5}
 8007b6c:	9304      	str	r3, [sp, #16]
 8007b6e:	b2ab      	uxth	r3, r5
 8007b70:	19df      	adds	r7, r3, r7
 8007b72:	b28b      	uxth	r3, r1
 8007b74:	1afb      	subs	r3, r7, r3
 8007b76:	0c09      	lsrs	r1, r1, #16
 8007b78:	0c2d      	lsrs	r5, r5, #16
 8007b7a:	1a6d      	subs	r5, r5, r1
 8007b7c:	1419      	asrs	r1, r3, #16
 8007b7e:	186d      	adds	r5, r5, r1
 8007b80:	4661      	mov	r1, ip
 8007b82:	142f      	asrs	r7, r5, #16
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	042d      	lsls	r5, r5, #16
 8007b88:	432b      	orrs	r3, r5
 8007b8a:	c108      	stmia	r1!, {r3}
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	468c      	mov	ip, r1
 8007b90:	42a3      	cmp	r3, r4
 8007b92:	d8e8      	bhi.n	8007b66 <__mdiff+0x8a>
 8007b94:	0031      	movs	r1, r6
 8007b96:	9c03      	ldr	r4, [sp, #12]
 8007b98:	3115      	adds	r1, #21
 8007b9a:	2304      	movs	r3, #4
 8007b9c:	428c      	cmp	r4, r1
 8007b9e:	d304      	bcc.n	8007baa <__mdiff+0xce>
 8007ba0:	1ba3      	subs	r3, r4, r6
 8007ba2:	3b15      	subs	r3, #21
 8007ba4:	089b      	lsrs	r3, r3, #2
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	9901      	ldr	r1, [sp, #4]
 8007bac:	18cc      	adds	r4, r1, r3
 8007bae:	9905      	ldr	r1, [sp, #20]
 8007bb0:	0026      	movs	r6, r4
 8007bb2:	18cb      	adds	r3, r1, r3
 8007bb4:	469c      	mov	ip, r3
 8007bb6:	9902      	ldr	r1, [sp, #8]
 8007bb8:	428e      	cmp	r6, r1
 8007bba:	d310      	bcc.n	8007bde <__mdiff+0x102>
 8007bbc:	9e02      	ldr	r6, [sp, #8]
 8007bbe:	1ee1      	subs	r1, r4, #3
 8007bc0:	2500      	movs	r5, #0
 8007bc2:	428e      	cmp	r6, r1
 8007bc4:	d304      	bcc.n	8007bd0 <__mdiff+0xf4>
 8007bc6:	0031      	movs	r1, r6
 8007bc8:	3103      	adds	r1, #3
 8007bca:	1b0c      	subs	r4, r1, r4
 8007bcc:	08a4      	lsrs	r4, r4, #2
 8007bce:	00a5      	lsls	r5, r4, #2
 8007bd0:	195b      	adds	r3, r3, r5
 8007bd2:	3b04      	subs	r3, #4
 8007bd4:	6819      	ldr	r1, [r3, #0]
 8007bd6:	2900      	cmp	r1, #0
 8007bd8:	d00f      	beq.n	8007bfa <__mdiff+0x11e>
 8007bda:	6110      	str	r0, [r2, #16]
 8007bdc:	e797      	b.n	8007b0e <__mdiff+0x32>
 8007bde:	ce02      	ldmia	r6!, {r1}
 8007be0:	b28d      	uxth	r5, r1
 8007be2:	19ed      	adds	r5, r5, r7
 8007be4:	0c0f      	lsrs	r7, r1, #16
 8007be6:	1429      	asrs	r1, r5, #16
 8007be8:	1879      	adds	r1, r7, r1
 8007bea:	140f      	asrs	r7, r1, #16
 8007bec:	b2ad      	uxth	r5, r5
 8007bee:	0409      	lsls	r1, r1, #16
 8007bf0:	430d      	orrs	r5, r1
 8007bf2:	4661      	mov	r1, ip
 8007bf4:	c120      	stmia	r1!, {r5}
 8007bf6:	468c      	mov	ip, r1
 8007bf8:	e7dd      	b.n	8007bb6 <__mdiff+0xda>
 8007bfa:	3801      	subs	r0, #1
 8007bfc:	e7e9      	b.n	8007bd2 <__mdiff+0xf6>
 8007bfe:	46c0      	nop			; (mov r8, r8)
 8007c00:	08008fef 	.word	0x08008fef
 8007c04:	00000232 	.word	0x00000232
 8007c08:	08009000 	.word	0x08009000

08007c0c <__d2b>:
 8007c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c0e:	2101      	movs	r1, #1
 8007c10:	0014      	movs	r4, r2
 8007c12:	001e      	movs	r6, r3
 8007c14:	9f08      	ldr	r7, [sp, #32]
 8007c16:	f7ff fcc1 	bl	800759c <_Balloc>
 8007c1a:	1e05      	subs	r5, r0, #0
 8007c1c:	d105      	bne.n	8007c2a <__d2b+0x1e>
 8007c1e:	0002      	movs	r2, r0
 8007c20:	4b26      	ldr	r3, [pc, #152]	; (8007cbc <__d2b+0xb0>)
 8007c22:	4927      	ldr	r1, [pc, #156]	; (8007cc0 <__d2b+0xb4>)
 8007c24:	4827      	ldr	r0, [pc, #156]	; (8007cc4 <__d2b+0xb8>)
 8007c26:	f000 fad7 	bl	80081d8 <__assert_func>
 8007c2a:	0333      	lsls	r3, r6, #12
 8007c2c:	0076      	lsls	r6, r6, #1
 8007c2e:	0b1b      	lsrs	r3, r3, #12
 8007c30:	0d76      	lsrs	r6, r6, #21
 8007c32:	d124      	bne.n	8007c7e <__d2b+0x72>
 8007c34:	9301      	str	r3, [sp, #4]
 8007c36:	2c00      	cmp	r4, #0
 8007c38:	d027      	beq.n	8007c8a <__d2b+0x7e>
 8007c3a:	4668      	mov	r0, sp
 8007c3c:	9400      	str	r4, [sp, #0]
 8007c3e:	f7ff fd73 	bl	8007728 <__lo0bits>
 8007c42:	9c00      	ldr	r4, [sp, #0]
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d01e      	beq.n	8007c86 <__d2b+0x7a>
 8007c48:	9b01      	ldr	r3, [sp, #4]
 8007c4a:	2120      	movs	r1, #32
 8007c4c:	001a      	movs	r2, r3
 8007c4e:	1a09      	subs	r1, r1, r0
 8007c50:	408a      	lsls	r2, r1
 8007c52:	40c3      	lsrs	r3, r0
 8007c54:	4322      	orrs	r2, r4
 8007c56:	616a      	str	r2, [r5, #20]
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	9c01      	ldr	r4, [sp, #4]
 8007c5c:	61ac      	str	r4, [r5, #24]
 8007c5e:	1e63      	subs	r3, r4, #1
 8007c60:	419c      	sbcs	r4, r3
 8007c62:	3401      	adds	r4, #1
 8007c64:	612c      	str	r4, [r5, #16]
 8007c66:	2e00      	cmp	r6, #0
 8007c68:	d018      	beq.n	8007c9c <__d2b+0x90>
 8007c6a:	4b17      	ldr	r3, [pc, #92]	; (8007cc8 <__d2b+0xbc>)
 8007c6c:	18f6      	adds	r6, r6, r3
 8007c6e:	2335      	movs	r3, #53	; 0x35
 8007c70:	1836      	adds	r6, r6, r0
 8007c72:	1a18      	subs	r0, r3, r0
 8007c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c76:	603e      	str	r6, [r7, #0]
 8007c78:	6018      	str	r0, [r3, #0]
 8007c7a:	0028      	movs	r0, r5
 8007c7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c7e:	2280      	movs	r2, #128	; 0x80
 8007c80:	0352      	lsls	r2, r2, #13
 8007c82:	4313      	orrs	r3, r2
 8007c84:	e7d6      	b.n	8007c34 <__d2b+0x28>
 8007c86:	616c      	str	r4, [r5, #20]
 8007c88:	e7e7      	b.n	8007c5a <__d2b+0x4e>
 8007c8a:	a801      	add	r0, sp, #4
 8007c8c:	f7ff fd4c 	bl	8007728 <__lo0bits>
 8007c90:	2401      	movs	r4, #1
 8007c92:	9b01      	ldr	r3, [sp, #4]
 8007c94:	612c      	str	r4, [r5, #16]
 8007c96:	616b      	str	r3, [r5, #20]
 8007c98:	3020      	adds	r0, #32
 8007c9a:	e7e4      	b.n	8007c66 <__d2b+0x5a>
 8007c9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ccc <__d2b+0xc0>)
 8007c9e:	18c0      	adds	r0, r0, r3
 8007ca0:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <__d2b+0xc4>)
 8007ca2:	6038      	str	r0, [r7, #0]
 8007ca4:	18e3      	adds	r3, r4, r3
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	18eb      	adds	r3, r5, r3
 8007caa:	6958      	ldr	r0, [r3, #20]
 8007cac:	f7ff fd22 	bl	80076f4 <__hi0bits>
 8007cb0:	0164      	lsls	r4, r4, #5
 8007cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb4:	1a24      	subs	r4, r4, r0
 8007cb6:	601c      	str	r4, [r3, #0]
 8007cb8:	e7df      	b.n	8007c7a <__d2b+0x6e>
 8007cba:	46c0      	nop			; (mov r8, r8)
 8007cbc:	08008fef 	.word	0x08008fef
 8007cc0:	0000030a 	.word	0x0000030a
 8007cc4:	08009000 	.word	0x08009000
 8007cc8:	fffffbcd 	.word	0xfffffbcd
 8007ccc:	fffffbce 	.word	0xfffffbce
 8007cd0:	3fffffff 	.word	0x3fffffff

08007cd4 <_calloc_r>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	0c13      	lsrs	r3, r2, #16
 8007cd8:	0c0d      	lsrs	r5, r1, #16
 8007cda:	d11e      	bne.n	8007d1a <_calloc_r+0x46>
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10c      	bne.n	8007cfa <_calloc_r+0x26>
 8007ce0:	b289      	uxth	r1, r1
 8007ce2:	b294      	uxth	r4, r2
 8007ce4:	434c      	muls	r4, r1
 8007ce6:	0021      	movs	r1, r4
 8007ce8:	f000 f88c 	bl	8007e04 <_malloc_r>
 8007cec:	1e05      	subs	r5, r0, #0
 8007cee:	d01b      	beq.n	8007d28 <_calloc_r+0x54>
 8007cf0:	0022      	movs	r2, r4
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	f7fe f8f4 	bl	8005ee0 <memset>
 8007cf8:	e016      	b.n	8007d28 <_calloc_r+0x54>
 8007cfa:	1c1d      	adds	r5, r3, #0
 8007cfc:	1c0b      	adds	r3, r1, #0
 8007cfe:	b292      	uxth	r2, r2
 8007d00:	b289      	uxth	r1, r1
 8007d02:	b29c      	uxth	r4, r3
 8007d04:	4351      	muls	r1, r2
 8007d06:	b2ab      	uxth	r3, r5
 8007d08:	4363      	muls	r3, r4
 8007d0a:	0c0c      	lsrs	r4, r1, #16
 8007d0c:	191c      	adds	r4, r3, r4
 8007d0e:	0c22      	lsrs	r2, r4, #16
 8007d10:	d107      	bne.n	8007d22 <_calloc_r+0x4e>
 8007d12:	0424      	lsls	r4, r4, #16
 8007d14:	b289      	uxth	r1, r1
 8007d16:	430c      	orrs	r4, r1
 8007d18:	e7e5      	b.n	8007ce6 <_calloc_r+0x12>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <_calloc_r+0x4e>
 8007d1e:	1c13      	adds	r3, r2, #0
 8007d20:	e7ed      	b.n	8007cfe <_calloc_r+0x2a>
 8007d22:	230c      	movs	r3, #12
 8007d24:	2500      	movs	r5, #0
 8007d26:	6003      	str	r3, [r0, #0]
 8007d28:	0028      	movs	r0, r5
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}

08007d2c <_free_r>:
 8007d2c:	b570      	push	{r4, r5, r6, lr}
 8007d2e:	0005      	movs	r5, r0
 8007d30:	2900      	cmp	r1, #0
 8007d32:	d010      	beq.n	8007d56 <_free_r+0x2a>
 8007d34:	1f0c      	subs	r4, r1, #4
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	da00      	bge.n	8007d3e <_free_r+0x12>
 8007d3c:	18e4      	adds	r4, r4, r3
 8007d3e:	0028      	movs	r0, r5
 8007d40:	f000 fa9e 	bl	8008280 <__malloc_lock>
 8007d44:	4a1d      	ldr	r2, [pc, #116]	; (8007dbc <_free_r+0x90>)
 8007d46:	6813      	ldr	r3, [r2, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d105      	bne.n	8007d58 <_free_r+0x2c>
 8007d4c:	6063      	str	r3, [r4, #4]
 8007d4e:	6014      	str	r4, [r2, #0]
 8007d50:	0028      	movs	r0, r5
 8007d52:	f000 fa9d 	bl	8008290 <__malloc_unlock>
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	42a3      	cmp	r3, r4
 8007d5a:	d908      	bls.n	8007d6e <_free_r+0x42>
 8007d5c:	6821      	ldr	r1, [r4, #0]
 8007d5e:	1860      	adds	r0, r4, r1
 8007d60:	4283      	cmp	r3, r0
 8007d62:	d1f3      	bne.n	8007d4c <_free_r+0x20>
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	1841      	adds	r1, r0, r1
 8007d6a:	6021      	str	r1, [r4, #0]
 8007d6c:	e7ee      	b.n	8007d4c <_free_r+0x20>
 8007d6e:	001a      	movs	r2, r3
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <_free_r+0x4e>
 8007d76:	42a3      	cmp	r3, r4
 8007d78:	d9f9      	bls.n	8007d6e <_free_r+0x42>
 8007d7a:	6811      	ldr	r1, [r2, #0]
 8007d7c:	1850      	adds	r0, r2, r1
 8007d7e:	42a0      	cmp	r0, r4
 8007d80:	d10b      	bne.n	8007d9a <_free_r+0x6e>
 8007d82:	6820      	ldr	r0, [r4, #0]
 8007d84:	1809      	adds	r1, r1, r0
 8007d86:	1850      	adds	r0, r2, r1
 8007d88:	6011      	str	r1, [r2, #0]
 8007d8a:	4283      	cmp	r3, r0
 8007d8c:	d1e0      	bne.n	8007d50 <_free_r+0x24>
 8007d8e:	6818      	ldr	r0, [r3, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	1841      	adds	r1, r0, r1
 8007d94:	6011      	str	r1, [r2, #0]
 8007d96:	6053      	str	r3, [r2, #4]
 8007d98:	e7da      	b.n	8007d50 <_free_r+0x24>
 8007d9a:	42a0      	cmp	r0, r4
 8007d9c:	d902      	bls.n	8007da4 <_free_r+0x78>
 8007d9e:	230c      	movs	r3, #12
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	e7d5      	b.n	8007d50 <_free_r+0x24>
 8007da4:	6821      	ldr	r1, [r4, #0]
 8007da6:	1860      	adds	r0, r4, r1
 8007da8:	4283      	cmp	r3, r0
 8007daa:	d103      	bne.n	8007db4 <_free_r+0x88>
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	1841      	adds	r1, r0, r1
 8007db2:	6021      	str	r1, [r4, #0]
 8007db4:	6063      	str	r3, [r4, #4]
 8007db6:	6054      	str	r4, [r2, #4]
 8007db8:	e7ca      	b.n	8007d50 <_free_r+0x24>
 8007dba:	46c0      	nop			; (mov r8, r8)
 8007dbc:	200003bc 	.word	0x200003bc

08007dc0 <sbrk_aligned>:
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	4e0f      	ldr	r6, [pc, #60]	; (8007e00 <sbrk_aligned+0x40>)
 8007dc4:	000d      	movs	r5, r1
 8007dc6:	6831      	ldr	r1, [r6, #0]
 8007dc8:	0004      	movs	r4, r0
 8007dca:	2900      	cmp	r1, #0
 8007dcc:	d102      	bne.n	8007dd4 <sbrk_aligned+0x14>
 8007dce:	f000 f9f1 	bl	80081b4 <_sbrk_r>
 8007dd2:	6030      	str	r0, [r6, #0]
 8007dd4:	0029      	movs	r1, r5
 8007dd6:	0020      	movs	r0, r4
 8007dd8:	f000 f9ec 	bl	80081b4 <_sbrk_r>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d00a      	beq.n	8007df6 <sbrk_aligned+0x36>
 8007de0:	2303      	movs	r3, #3
 8007de2:	1cc5      	adds	r5, r0, #3
 8007de4:	439d      	bics	r5, r3
 8007de6:	42a8      	cmp	r0, r5
 8007de8:	d007      	beq.n	8007dfa <sbrk_aligned+0x3a>
 8007dea:	1a29      	subs	r1, r5, r0
 8007dec:	0020      	movs	r0, r4
 8007dee:	f000 f9e1 	bl	80081b4 <_sbrk_r>
 8007df2:	1c43      	adds	r3, r0, #1
 8007df4:	d101      	bne.n	8007dfa <sbrk_aligned+0x3a>
 8007df6:	2501      	movs	r5, #1
 8007df8:	426d      	negs	r5, r5
 8007dfa:	0028      	movs	r0, r5
 8007dfc:	bd70      	pop	{r4, r5, r6, pc}
 8007dfe:	46c0      	nop			; (mov r8, r8)
 8007e00:	200003c0 	.word	0x200003c0

08007e04 <_malloc_r>:
 8007e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e06:	2203      	movs	r2, #3
 8007e08:	1ccb      	adds	r3, r1, #3
 8007e0a:	4393      	bics	r3, r2
 8007e0c:	3308      	adds	r3, #8
 8007e0e:	0006      	movs	r6, r0
 8007e10:	001f      	movs	r7, r3
 8007e12:	2b0c      	cmp	r3, #12
 8007e14:	d232      	bcs.n	8007e7c <_malloc_r+0x78>
 8007e16:	270c      	movs	r7, #12
 8007e18:	42b9      	cmp	r1, r7
 8007e1a:	d831      	bhi.n	8007e80 <_malloc_r+0x7c>
 8007e1c:	0030      	movs	r0, r6
 8007e1e:	f000 fa2f 	bl	8008280 <__malloc_lock>
 8007e22:	4d32      	ldr	r5, [pc, #200]	; (8007eec <_malloc_r+0xe8>)
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	001c      	movs	r4, r3
 8007e28:	2c00      	cmp	r4, #0
 8007e2a:	d12e      	bne.n	8007e8a <_malloc_r+0x86>
 8007e2c:	0039      	movs	r1, r7
 8007e2e:	0030      	movs	r0, r6
 8007e30:	f7ff ffc6 	bl	8007dc0 <sbrk_aligned>
 8007e34:	0004      	movs	r4, r0
 8007e36:	1c43      	adds	r3, r0, #1
 8007e38:	d11e      	bne.n	8007e78 <_malloc_r+0x74>
 8007e3a:	682c      	ldr	r4, [r5, #0]
 8007e3c:	0025      	movs	r5, r4
 8007e3e:	2d00      	cmp	r5, #0
 8007e40:	d14a      	bne.n	8007ed8 <_malloc_r+0xd4>
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	0029      	movs	r1, r5
 8007e46:	18e3      	adds	r3, r4, r3
 8007e48:	0030      	movs	r0, r6
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	f000 f9b2 	bl	80081b4 <_sbrk_r>
 8007e50:	9b01      	ldr	r3, [sp, #4]
 8007e52:	4283      	cmp	r3, r0
 8007e54:	d143      	bne.n	8007ede <_malloc_r+0xda>
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	3703      	adds	r7, #3
 8007e5a:	1aff      	subs	r7, r7, r3
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	439f      	bics	r7, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	2f0c      	cmp	r7, #12
 8007e64:	d200      	bcs.n	8007e68 <_malloc_r+0x64>
 8007e66:	270c      	movs	r7, #12
 8007e68:	0039      	movs	r1, r7
 8007e6a:	0030      	movs	r0, r6
 8007e6c:	f7ff ffa8 	bl	8007dc0 <sbrk_aligned>
 8007e70:	1c43      	adds	r3, r0, #1
 8007e72:	d034      	beq.n	8007ede <_malloc_r+0xda>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	19df      	adds	r7, r3, r7
 8007e78:	6027      	str	r7, [r4, #0]
 8007e7a:	e013      	b.n	8007ea4 <_malloc_r+0xa0>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dacb      	bge.n	8007e18 <_malloc_r+0x14>
 8007e80:	230c      	movs	r3, #12
 8007e82:	2500      	movs	r5, #0
 8007e84:	6033      	str	r3, [r6, #0]
 8007e86:	0028      	movs	r0, r5
 8007e88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e8a:	6822      	ldr	r2, [r4, #0]
 8007e8c:	1bd1      	subs	r1, r2, r7
 8007e8e:	d420      	bmi.n	8007ed2 <_malloc_r+0xce>
 8007e90:	290b      	cmp	r1, #11
 8007e92:	d917      	bls.n	8007ec4 <_malloc_r+0xc0>
 8007e94:	19e2      	adds	r2, r4, r7
 8007e96:	6027      	str	r7, [r4, #0]
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	d111      	bne.n	8007ec0 <_malloc_r+0xbc>
 8007e9c:	602a      	str	r2, [r5, #0]
 8007e9e:	6863      	ldr	r3, [r4, #4]
 8007ea0:	6011      	str	r1, [r2, #0]
 8007ea2:	6053      	str	r3, [r2, #4]
 8007ea4:	0030      	movs	r0, r6
 8007ea6:	0025      	movs	r5, r4
 8007ea8:	f000 f9f2 	bl	8008290 <__malloc_unlock>
 8007eac:	2207      	movs	r2, #7
 8007eae:	350b      	adds	r5, #11
 8007eb0:	1d23      	adds	r3, r4, #4
 8007eb2:	4395      	bics	r5, r2
 8007eb4:	1aea      	subs	r2, r5, r3
 8007eb6:	429d      	cmp	r5, r3
 8007eb8:	d0e5      	beq.n	8007e86 <_malloc_r+0x82>
 8007eba:	1b5b      	subs	r3, r3, r5
 8007ebc:	50a3      	str	r3, [r4, r2]
 8007ebe:	e7e2      	b.n	8007e86 <_malloc_r+0x82>
 8007ec0:	605a      	str	r2, [r3, #4]
 8007ec2:	e7ec      	b.n	8007e9e <_malloc_r+0x9a>
 8007ec4:	6862      	ldr	r2, [r4, #4]
 8007ec6:	42a3      	cmp	r3, r4
 8007ec8:	d101      	bne.n	8007ece <_malloc_r+0xca>
 8007eca:	602a      	str	r2, [r5, #0]
 8007ecc:	e7ea      	b.n	8007ea4 <_malloc_r+0xa0>
 8007ece:	605a      	str	r2, [r3, #4]
 8007ed0:	e7e8      	b.n	8007ea4 <_malloc_r+0xa0>
 8007ed2:	0023      	movs	r3, r4
 8007ed4:	6864      	ldr	r4, [r4, #4]
 8007ed6:	e7a7      	b.n	8007e28 <_malloc_r+0x24>
 8007ed8:	002c      	movs	r4, r5
 8007eda:	686d      	ldr	r5, [r5, #4]
 8007edc:	e7af      	b.n	8007e3e <_malloc_r+0x3a>
 8007ede:	230c      	movs	r3, #12
 8007ee0:	0030      	movs	r0, r6
 8007ee2:	6033      	str	r3, [r6, #0]
 8007ee4:	f000 f9d4 	bl	8008290 <__malloc_unlock>
 8007ee8:	e7cd      	b.n	8007e86 <_malloc_r+0x82>
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	200003bc 	.word	0x200003bc

08007ef0 <__ssputs_r>:
 8007ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ef2:	688e      	ldr	r6, [r1, #8]
 8007ef4:	b085      	sub	sp, #20
 8007ef6:	0007      	movs	r7, r0
 8007ef8:	000c      	movs	r4, r1
 8007efa:	9203      	str	r2, [sp, #12]
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	429e      	cmp	r6, r3
 8007f00:	d83c      	bhi.n	8007f7c <__ssputs_r+0x8c>
 8007f02:	2390      	movs	r3, #144	; 0x90
 8007f04:	898a      	ldrh	r2, [r1, #12]
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	421a      	tst	r2, r3
 8007f0a:	d034      	beq.n	8007f76 <__ssputs_r+0x86>
 8007f0c:	6909      	ldr	r1, [r1, #16]
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	6960      	ldr	r0, [r4, #20]
 8007f12:	1a5b      	subs	r3, r3, r1
 8007f14:	9302      	str	r3, [sp, #8]
 8007f16:	2303      	movs	r3, #3
 8007f18:	4343      	muls	r3, r0
 8007f1a:	0fdd      	lsrs	r5, r3, #31
 8007f1c:	18ed      	adds	r5, r5, r3
 8007f1e:	9b01      	ldr	r3, [sp, #4]
 8007f20:	9802      	ldr	r0, [sp, #8]
 8007f22:	3301      	adds	r3, #1
 8007f24:	181b      	adds	r3, r3, r0
 8007f26:	106d      	asrs	r5, r5, #1
 8007f28:	42ab      	cmp	r3, r5
 8007f2a:	d900      	bls.n	8007f2e <__ssputs_r+0x3e>
 8007f2c:	001d      	movs	r5, r3
 8007f2e:	0553      	lsls	r3, r2, #21
 8007f30:	d532      	bpl.n	8007f98 <__ssputs_r+0xa8>
 8007f32:	0029      	movs	r1, r5
 8007f34:	0038      	movs	r0, r7
 8007f36:	f7ff ff65 	bl	8007e04 <_malloc_r>
 8007f3a:	1e06      	subs	r6, r0, #0
 8007f3c:	d109      	bne.n	8007f52 <__ssputs_r+0x62>
 8007f3e:	230c      	movs	r3, #12
 8007f40:	603b      	str	r3, [r7, #0]
 8007f42:	2340      	movs	r3, #64	; 0x40
 8007f44:	2001      	movs	r0, #1
 8007f46:	89a2      	ldrh	r2, [r4, #12]
 8007f48:	4240      	negs	r0, r0
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	81a3      	strh	r3, [r4, #12]
 8007f4e:	b005      	add	sp, #20
 8007f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f52:	9a02      	ldr	r2, [sp, #8]
 8007f54:	6921      	ldr	r1, [r4, #16]
 8007f56:	f7ff fb18 	bl	800758a <memcpy>
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	4a14      	ldr	r2, [pc, #80]	; (8007fb0 <__ssputs_r+0xc0>)
 8007f5e:	401a      	ands	r2, r3
 8007f60:	2380      	movs	r3, #128	; 0x80
 8007f62:	4313      	orrs	r3, r2
 8007f64:	81a3      	strh	r3, [r4, #12]
 8007f66:	9b02      	ldr	r3, [sp, #8]
 8007f68:	6126      	str	r6, [r4, #16]
 8007f6a:	18f6      	adds	r6, r6, r3
 8007f6c:	6026      	str	r6, [r4, #0]
 8007f6e:	6165      	str	r5, [r4, #20]
 8007f70:	9e01      	ldr	r6, [sp, #4]
 8007f72:	1aed      	subs	r5, r5, r3
 8007f74:	60a5      	str	r5, [r4, #8]
 8007f76:	9b01      	ldr	r3, [sp, #4]
 8007f78:	429e      	cmp	r6, r3
 8007f7a:	d900      	bls.n	8007f7e <__ssputs_r+0x8e>
 8007f7c:	9e01      	ldr	r6, [sp, #4]
 8007f7e:	0032      	movs	r2, r6
 8007f80:	9903      	ldr	r1, [sp, #12]
 8007f82:	6820      	ldr	r0, [r4, #0]
 8007f84:	f000 f968 	bl	8008258 <memmove>
 8007f88:	68a3      	ldr	r3, [r4, #8]
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	1b9b      	subs	r3, r3, r6
 8007f8e:	60a3      	str	r3, [r4, #8]
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	199e      	adds	r6, r3, r6
 8007f94:	6026      	str	r6, [r4, #0]
 8007f96:	e7da      	b.n	8007f4e <__ssputs_r+0x5e>
 8007f98:	002a      	movs	r2, r5
 8007f9a:	0038      	movs	r0, r7
 8007f9c:	f000 f980 	bl	80082a0 <_realloc_r>
 8007fa0:	1e06      	subs	r6, r0, #0
 8007fa2:	d1e0      	bne.n	8007f66 <__ssputs_r+0x76>
 8007fa4:	0038      	movs	r0, r7
 8007fa6:	6921      	ldr	r1, [r4, #16]
 8007fa8:	f7ff fec0 	bl	8007d2c <_free_r>
 8007fac:	e7c7      	b.n	8007f3e <__ssputs_r+0x4e>
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	fffffb7f 	.word	0xfffffb7f

08007fb4 <_svfiprintf_r>:
 8007fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fb6:	b0a1      	sub	sp, #132	; 0x84
 8007fb8:	9003      	str	r0, [sp, #12]
 8007fba:	001d      	movs	r5, r3
 8007fbc:	898b      	ldrh	r3, [r1, #12]
 8007fbe:	000f      	movs	r7, r1
 8007fc0:	0016      	movs	r6, r2
 8007fc2:	061b      	lsls	r3, r3, #24
 8007fc4:	d511      	bpl.n	8007fea <_svfiprintf_r+0x36>
 8007fc6:	690b      	ldr	r3, [r1, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10e      	bne.n	8007fea <_svfiprintf_r+0x36>
 8007fcc:	2140      	movs	r1, #64	; 0x40
 8007fce:	f7ff ff19 	bl	8007e04 <_malloc_r>
 8007fd2:	6038      	str	r0, [r7, #0]
 8007fd4:	6138      	str	r0, [r7, #16]
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d105      	bne.n	8007fe6 <_svfiprintf_r+0x32>
 8007fda:	230c      	movs	r3, #12
 8007fdc:	9a03      	ldr	r2, [sp, #12]
 8007fde:	3801      	subs	r0, #1
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	b021      	add	sp, #132	; 0x84
 8007fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fe6:	2340      	movs	r3, #64	; 0x40
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	2300      	movs	r3, #0
 8007fec:	ac08      	add	r4, sp, #32
 8007fee:	6163      	str	r3, [r4, #20]
 8007ff0:	3320      	adds	r3, #32
 8007ff2:	7663      	strb	r3, [r4, #25]
 8007ff4:	3310      	adds	r3, #16
 8007ff6:	76a3      	strb	r3, [r4, #26]
 8007ff8:	9507      	str	r5, [sp, #28]
 8007ffa:	0035      	movs	r5, r6
 8007ffc:	782b      	ldrb	r3, [r5, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <_svfiprintf_r+0x52>
 8008002:	2b25      	cmp	r3, #37	; 0x25
 8008004:	d147      	bne.n	8008096 <_svfiprintf_r+0xe2>
 8008006:	1bab      	subs	r3, r5, r6
 8008008:	9305      	str	r3, [sp, #20]
 800800a:	42b5      	cmp	r5, r6
 800800c:	d00c      	beq.n	8008028 <_svfiprintf_r+0x74>
 800800e:	0032      	movs	r2, r6
 8008010:	0039      	movs	r1, r7
 8008012:	9803      	ldr	r0, [sp, #12]
 8008014:	f7ff ff6c 	bl	8007ef0 <__ssputs_r>
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	d100      	bne.n	800801e <_svfiprintf_r+0x6a>
 800801c:	e0ae      	b.n	800817c <_svfiprintf_r+0x1c8>
 800801e:	6962      	ldr	r2, [r4, #20]
 8008020:	9b05      	ldr	r3, [sp, #20]
 8008022:	4694      	mov	ip, r2
 8008024:	4463      	add	r3, ip
 8008026:	6163      	str	r3, [r4, #20]
 8008028:	782b      	ldrb	r3, [r5, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d100      	bne.n	8008030 <_svfiprintf_r+0x7c>
 800802e:	e0a5      	b.n	800817c <_svfiprintf_r+0x1c8>
 8008030:	2201      	movs	r2, #1
 8008032:	2300      	movs	r3, #0
 8008034:	4252      	negs	r2, r2
 8008036:	6062      	str	r2, [r4, #4]
 8008038:	a904      	add	r1, sp, #16
 800803a:	3254      	adds	r2, #84	; 0x54
 800803c:	1852      	adds	r2, r2, r1
 800803e:	1c6e      	adds	r6, r5, #1
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	60e3      	str	r3, [r4, #12]
 8008044:	60a3      	str	r3, [r4, #8]
 8008046:	7013      	strb	r3, [r2, #0]
 8008048:	65a3      	str	r3, [r4, #88]	; 0x58
 800804a:	2205      	movs	r2, #5
 800804c:	7831      	ldrb	r1, [r6, #0]
 800804e:	4854      	ldr	r0, [pc, #336]	; (80081a0 <_svfiprintf_r+0x1ec>)
 8008050:	f7ff fa90 	bl	8007574 <memchr>
 8008054:	1c75      	adds	r5, r6, #1
 8008056:	2800      	cmp	r0, #0
 8008058:	d11f      	bne.n	800809a <_svfiprintf_r+0xe6>
 800805a:	6822      	ldr	r2, [r4, #0]
 800805c:	06d3      	lsls	r3, r2, #27
 800805e:	d504      	bpl.n	800806a <_svfiprintf_r+0xb6>
 8008060:	2353      	movs	r3, #83	; 0x53
 8008062:	a904      	add	r1, sp, #16
 8008064:	185b      	adds	r3, r3, r1
 8008066:	2120      	movs	r1, #32
 8008068:	7019      	strb	r1, [r3, #0]
 800806a:	0713      	lsls	r3, r2, #28
 800806c:	d504      	bpl.n	8008078 <_svfiprintf_r+0xc4>
 800806e:	2353      	movs	r3, #83	; 0x53
 8008070:	a904      	add	r1, sp, #16
 8008072:	185b      	adds	r3, r3, r1
 8008074:	212b      	movs	r1, #43	; 0x2b
 8008076:	7019      	strb	r1, [r3, #0]
 8008078:	7833      	ldrb	r3, [r6, #0]
 800807a:	2b2a      	cmp	r3, #42	; 0x2a
 800807c:	d016      	beq.n	80080ac <_svfiprintf_r+0xf8>
 800807e:	0035      	movs	r5, r6
 8008080:	2100      	movs	r1, #0
 8008082:	200a      	movs	r0, #10
 8008084:	68e3      	ldr	r3, [r4, #12]
 8008086:	782a      	ldrb	r2, [r5, #0]
 8008088:	1c6e      	adds	r6, r5, #1
 800808a:	3a30      	subs	r2, #48	; 0x30
 800808c:	2a09      	cmp	r2, #9
 800808e:	d94e      	bls.n	800812e <_svfiprintf_r+0x17a>
 8008090:	2900      	cmp	r1, #0
 8008092:	d111      	bne.n	80080b8 <_svfiprintf_r+0x104>
 8008094:	e017      	b.n	80080c6 <_svfiprintf_r+0x112>
 8008096:	3501      	adds	r5, #1
 8008098:	e7b0      	b.n	8007ffc <_svfiprintf_r+0x48>
 800809a:	4b41      	ldr	r3, [pc, #260]	; (80081a0 <_svfiprintf_r+0x1ec>)
 800809c:	6822      	ldr	r2, [r4, #0]
 800809e:	1ac0      	subs	r0, r0, r3
 80080a0:	2301      	movs	r3, #1
 80080a2:	4083      	lsls	r3, r0
 80080a4:	4313      	orrs	r3, r2
 80080a6:	002e      	movs	r6, r5
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	e7ce      	b.n	800804a <_svfiprintf_r+0x96>
 80080ac:	9b07      	ldr	r3, [sp, #28]
 80080ae:	1d19      	adds	r1, r3, #4
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	9107      	str	r1, [sp, #28]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	db01      	blt.n	80080bc <_svfiprintf_r+0x108>
 80080b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80080ba:	e004      	b.n	80080c6 <_svfiprintf_r+0x112>
 80080bc:	425b      	negs	r3, r3
 80080be:	60e3      	str	r3, [r4, #12]
 80080c0:	2302      	movs	r3, #2
 80080c2:	4313      	orrs	r3, r2
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	782b      	ldrb	r3, [r5, #0]
 80080c8:	2b2e      	cmp	r3, #46	; 0x2e
 80080ca:	d10a      	bne.n	80080e2 <_svfiprintf_r+0x12e>
 80080cc:	786b      	ldrb	r3, [r5, #1]
 80080ce:	2b2a      	cmp	r3, #42	; 0x2a
 80080d0:	d135      	bne.n	800813e <_svfiprintf_r+0x18a>
 80080d2:	9b07      	ldr	r3, [sp, #28]
 80080d4:	3502      	adds	r5, #2
 80080d6:	1d1a      	adds	r2, r3, #4
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	9207      	str	r2, [sp, #28]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	db2b      	blt.n	8008138 <_svfiprintf_r+0x184>
 80080e0:	9309      	str	r3, [sp, #36]	; 0x24
 80080e2:	4e30      	ldr	r6, [pc, #192]	; (80081a4 <_svfiprintf_r+0x1f0>)
 80080e4:	2203      	movs	r2, #3
 80080e6:	0030      	movs	r0, r6
 80080e8:	7829      	ldrb	r1, [r5, #0]
 80080ea:	f7ff fa43 	bl	8007574 <memchr>
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d006      	beq.n	8008100 <_svfiprintf_r+0x14c>
 80080f2:	2340      	movs	r3, #64	; 0x40
 80080f4:	1b80      	subs	r0, r0, r6
 80080f6:	4083      	lsls	r3, r0
 80080f8:	6822      	ldr	r2, [r4, #0]
 80080fa:	3501      	adds	r5, #1
 80080fc:	4313      	orrs	r3, r2
 80080fe:	6023      	str	r3, [r4, #0]
 8008100:	7829      	ldrb	r1, [r5, #0]
 8008102:	2206      	movs	r2, #6
 8008104:	4828      	ldr	r0, [pc, #160]	; (80081a8 <_svfiprintf_r+0x1f4>)
 8008106:	1c6e      	adds	r6, r5, #1
 8008108:	7621      	strb	r1, [r4, #24]
 800810a:	f7ff fa33 	bl	8007574 <memchr>
 800810e:	2800      	cmp	r0, #0
 8008110:	d03c      	beq.n	800818c <_svfiprintf_r+0x1d8>
 8008112:	4b26      	ldr	r3, [pc, #152]	; (80081ac <_svfiprintf_r+0x1f8>)
 8008114:	2b00      	cmp	r3, #0
 8008116:	d125      	bne.n	8008164 <_svfiprintf_r+0x1b0>
 8008118:	2207      	movs	r2, #7
 800811a:	9b07      	ldr	r3, [sp, #28]
 800811c:	3307      	adds	r3, #7
 800811e:	4393      	bics	r3, r2
 8008120:	3308      	adds	r3, #8
 8008122:	9307      	str	r3, [sp, #28]
 8008124:	6963      	ldr	r3, [r4, #20]
 8008126:	9a04      	ldr	r2, [sp, #16]
 8008128:	189b      	adds	r3, r3, r2
 800812a:	6163      	str	r3, [r4, #20]
 800812c:	e765      	b.n	8007ffa <_svfiprintf_r+0x46>
 800812e:	4343      	muls	r3, r0
 8008130:	0035      	movs	r5, r6
 8008132:	2101      	movs	r1, #1
 8008134:	189b      	adds	r3, r3, r2
 8008136:	e7a6      	b.n	8008086 <_svfiprintf_r+0xd2>
 8008138:	2301      	movs	r3, #1
 800813a:	425b      	negs	r3, r3
 800813c:	e7d0      	b.n	80080e0 <_svfiprintf_r+0x12c>
 800813e:	2300      	movs	r3, #0
 8008140:	200a      	movs	r0, #10
 8008142:	001a      	movs	r2, r3
 8008144:	3501      	adds	r5, #1
 8008146:	6063      	str	r3, [r4, #4]
 8008148:	7829      	ldrb	r1, [r5, #0]
 800814a:	1c6e      	adds	r6, r5, #1
 800814c:	3930      	subs	r1, #48	; 0x30
 800814e:	2909      	cmp	r1, #9
 8008150:	d903      	bls.n	800815a <_svfiprintf_r+0x1a6>
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0c5      	beq.n	80080e2 <_svfiprintf_r+0x12e>
 8008156:	9209      	str	r2, [sp, #36]	; 0x24
 8008158:	e7c3      	b.n	80080e2 <_svfiprintf_r+0x12e>
 800815a:	4342      	muls	r2, r0
 800815c:	0035      	movs	r5, r6
 800815e:	2301      	movs	r3, #1
 8008160:	1852      	adds	r2, r2, r1
 8008162:	e7f1      	b.n	8008148 <_svfiprintf_r+0x194>
 8008164:	ab07      	add	r3, sp, #28
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	003a      	movs	r2, r7
 800816a:	0021      	movs	r1, r4
 800816c:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <_svfiprintf_r+0x1fc>)
 800816e:	9803      	ldr	r0, [sp, #12]
 8008170:	f7fd ff68 	bl	8006044 <_printf_float>
 8008174:	9004      	str	r0, [sp, #16]
 8008176:	9b04      	ldr	r3, [sp, #16]
 8008178:	3301      	adds	r3, #1
 800817a:	d1d3      	bne.n	8008124 <_svfiprintf_r+0x170>
 800817c:	89bb      	ldrh	r3, [r7, #12]
 800817e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008180:	065b      	lsls	r3, r3, #25
 8008182:	d400      	bmi.n	8008186 <_svfiprintf_r+0x1d2>
 8008184:	e72d      	b.n	8007fe2 <_svfiprintf_r+0x2e>
 8008186:	2001      	movs	r0, #1
 8008188:	4240      	negs	r0, r0
 800818a:	e72a      	b.n	8007fe2 <_svfiprintf_r+0x2e>
 800818c:	ab07      	add	r3, sp, #28
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	003a      	movs	r2, r7
 8008192:	0021      	movs	r1, r4
 8008194:	4b06      	ldr	r3, [pc, #24]	; (80081b0 <_svfiprintf_r+0x1fc>)
 8008196:	9803      	ldr	r0, [sp, #12]
 8008198:	f7fe fa06 	bl	80065a8 <_printf_i>
 800819c:	e7ea      	b.n	8008174 <_svfiprintf_r+0x1c0>
 800819e:	46c0      	nop			; (mov r8, r8)
 80081a0:	0800915c 	.word	0x0800915c
 80081a4:	08009162 	.word	0x08009162
 80081a8:	08009166 	.word	0x08009166
 80081ac:	08006045 	.word	0x08006045
 80081b0:	08007ef1 	.word	0x08007ef1

080081b4 <_sbrk_r>:
 80081b4:	2300      	movs	r3, #0
 80081b6:	b570      	push	{r4, r5, r6, lr}
 80081b8:	4d06      	ldr	r5, [pc, #24]	; (80081d4 <_sbrk_r+0x20>)
 80081ba:	0004      	movs	r4, r0
 80081bc:	0008      	movs	r0, r1
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	f7fa fd06 	bl	8002bd0 <_sbrk>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d103      	bne.n	80081d0 <_sbrk_r+0x1c>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d000      	beq.n	80081d0 <_sbrk_r+0x1c>
 80081ce:	6023      	str	r3, [r4, #0]
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	200003c4 	.word	0x200003c4

080081d8 <__assert_func>:
 80081d8:	b530      	push	{r4, r5, lr}
 80081da:	0014      	movs	r4, r2
 80081dc:	001a      	movs	r2, r3
 80081de:	4b09      	ldr	r3, [pc, #36]	; (8008204 <__assert_func+0x2c>)
 80081e0:	0005      	movs	r5, r0
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	b085      	sub	sp, #20
 80081e6:	68d8      	ldr	r0, [r3, #12]
 80081e8:	4b07      	ldr	r3, [pc, #28]	; (8008208 <__assert_func+0x30>)
 80081ea:	2c00      	cmp	r4, #0
 80081ec:	d101      	bne.n	80081f2 <__assert_func+0x1a>
 80081ee:	4b07      	ldr	r3, [pc, #28]	; (800820c <__assert_func+0x34>)
 80081f0:	001c      	movs	r4, r3
 80081f2:	9301      	str	r3, [sp, #4]
 80081f4:	9100      	str	r1, [sp, #0]
 80081f6:	002b      	movs	r3, r5
 80081f8:	4905      	ldr	r1, [pc, #20]	; (8008210 <__assert_func+0x38>)
 80081fa:	9402      	str	r4, [sp, #8]
 80081fc:	f000 f80a 	bl	8008214 <fiprintf>
 8008200:	f000 faba 	bl	8008778 <abort>
 8008204:	2000000c 	.word	0x2000000c
 8008208:	0800916d 	.word	0x0800916d
 800820c:	080091a8 	.word	0x080091a8
 8008210:	0800917a 	.word	0x0800917a

08008214 <fiprintf>:
 8008214:	b40e      	push	{r1, r2, r3}
 8008216:	b503      	push	{r0, r1, lr}
 8008218:	0001      	movs	r1, r0
 800821a:	ab03      	add	r3, sp, #12
 800821c:	4804      	ldr	r0, [pc, #16]	; (8008230 <fiprintf+0x1c>)
 800821e:	cb04      	ldmia	r3!, {r2}
 8008220:	6800      	ldr	r0, [r0, #0]
 8008222:	9301      	str	r3, [sp, #4]
 8008224:	f000 f892 	bl	800834c <_vfiprintf_r>
 8008228:	b002      	add	sp, #8
 800822a:	bc08      	pop	{r3}
 800822c:	b003      	add	sp, #12
 800822e:	4718      	bx	r3
 8008230:	2000000c 	.word	0x2000000c

08008234 <__ascii_mbtowc>:
 8008234:	b082      	sub	sp, #8
 8008236:	2900      	cmp	r1, #0
 8008238:	d100      	bne.n	800823c <__ascii_mbtowc+0x8>
 800823a:	a901      	add	r1, sp, #4
 800823c:	1e10      	subs	r0, r2, #0
 800823e:	d006      	beq.n	800824e <__ascii_mbtowc+0x1a>
 8008240:	2b00      	cmp	r3, #0
 8008242:	d006      	beq.n	8008252 <__ascii_mbtowc+0x1e>
 8008244:	7813      	ldrb	r3, [r2, #0]
 8008246:	600b      	str	r3, [r1, #0]
 8008248:	7810      	ldrb	r0, [r2, #0]
 800824a:	1e43      	subs	r3, r0, #1
 800824c:	4198      	sbcs	r0, r3
 800824e:	b002      	add	sp, #8
 8008250:	4770      	bx	lr
 8008252:	2002      	movs	r0, #2
 8008254:	4240      	negs	r0, r0
 8008256:	e7fa      	b.n	800824e <__ascii_mbtowc+0x1a>

08008258 <memmove>:
 8008258:	b510      	push	{r4, lr}
 800825a:	4288      	cmp	r0, r1
 800825c:	d902      	bls.n	8008264 <memmove+0xc>
 800825e:	188b      	adds	r3, r1, r2
 8008260:	4298      	cmp	r0, r3
 8008262:	d303      	bcc.n	800826c <memmove+0x14>
 8008264:	2300      	movs	r3, #0
 8008266:	e007      	b.n	8008278 <memmove+0x20>
 8008268:	5c8b      	ldrb	r3, [r1, r2]
 800826a:	5483      	strb	r3, [r0, r2]
 800826c:	3a01      	subs	r2, #1
 800826e:	d2fb      	bcs.n	8008268 <memmove+0x10>
 8008270:	bd10      	pop	{r4, pc}
 8008272:	5ccc      	ldrb	r4, [r1, r3]
 8008274:	54c4      	strb	r4, [r0, r3]
 8008276:	3301      	adds	r3, #1
 8008278:	429a      	cmp	r2, r3
 800827a:	d1fa      	bne.n	8008272 <memmove+0x1a>
 800827c:	e7f8      	b.n	8008270 <memmove+0x18>
	...

08008280 <__malloc_lock>:
 8008280:	b510      	push	{r4, lr}
 8008282:	4802      	ldr	r0, [pc, #8]	; (800828c <__malloc_lock+0xc>)
 8008284:	f000 fc4f 	bl	8008b26 <__retarget_lock_acquire_recursive>
 8008288:	bd10      	pop	{r4, pc}
 800828a:	46c0      	nop			; (mov r8, r8)
 800828c:	200003c8 	.word	0x200003c8

08008290 <__malloc_unlock>:
 8008290:	b510      	push	{r4, lr}
 8008292:	4802      	ldr	r0, [pc, #8]	; (800829c <__malloc_unlock+0xc>)
 8008294:	f000 fc48 	bl	8008b28 <__retarget_lock_release_recursive>
 8008298:	bd10      	pop	{r4, pc}
 800829a:	46c0      	nop			; (mov r8, r8)
 800829c:	200003c8 	.word	0x200003c8

080082a0 <_realloc_r>:
 80082a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082a2:	0007      	movs	r7, r0
 80082a4:	000e      	movs	r6, r1
 80082a6:	0014      	movs	r4, r2
 80082a8:	2900      	cmp	r1, #0
 80082aa:	d105      	bne.n	80082b8 <_realloc_r+0x18>
 80082ac:	0011      	movs	r1, r2
 80082ae:	f7ff fda9 	bl	8007e04 <_malloc_r>
 80082b2:	0005      	movs	r5, r0
 80082b4:	0028      	movs	r0, r5
 80082b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	d103      	bne.n	80082c4 <_realloc_r+0x24>
 80082bc:	f7ff fd36 	bl	8007d2c <_free_r>
 80082c0:	0025      	movs	r5, r4
 80082c2:	e7f7      	b.n	80082b4 <_realloc_r+0x14>
 80082c4:	f000 fc9e 	bl	8008c04 <_malloc_usable_size_r>
 80082c8:	9001      	str	r0, [sp, #4]
 80082ca:	4284      	cmp	r4, r0
 80082cc:	d803      	bhi.n	80082d6 <_realloc_r+0x36>
 80082ce:	0035      	movs	r5, r6
 80082d0:	0843      	lsrs	r3, r0, #1
 80082d2:	42a3      	cmp	r3, r4
 80082d4:	d3ee      	bcc.n	80082b4 <_realloc_r+0x14>
 80082d6:	0021      	movs	r1, r4
 80082d8:	0038      	movs	r0, r7
 80082da:	f7ff fd93 	bl	8007e04 <_malloc_r>
 80082de:	1e05      	subs	r5, r0, #0
 80082e0:	d0e8      	beq.n	80082b4 <_realloc_r+0x14>
 80082e2:	9b01      	ldr	r3, [sp, #4]
 80082e4:	0022      	movs	r2, r4
 80082e6:	429c      	cmp	r4, r3
 80082e8:	d900      	bls.n	80082ec <_realloc_r+0x4c>
 80082ea:	001a      	movs	r2, r3
 80082ec:	0031      	movs	r1, r6
 80082ee:	0028      	movs	r0, r5
 80082f0:	f7ff f94b 	bl	800758a <memcpy>
 80082f4:	0031      	movs	r1, r6
 80082f6:	0038      	movs	r0, r7
 80082f8:	f7ff fd18 	bl	8007d2c <_free_r>
 80082fc:	e7da      	b.n	80082b4 <_realloc_r+0x14>

080082fe <__sfputc_r>:
 80082fe:	6893      	ldr	r3, [r2, #8]
 8008300:	b510      	push	{r4, lr}
 8008302:	3b01      	subs	r3, #1
 8008304:	6093      	str	r3, [r2, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	da04      	bge.n	8008314 <__sfputc_r+0x16>
 800830a:	6994      	ldr	r4, [r2, #24]
 800830c:	42a3      	cmp	r3, r4
 800830e:	db07      	blt.n	8008320 <__sfputc_r+0x22>
 8008310:	290a      	cmp	r1, #10
 8008312:	d005      	beq.n	8008320 <__sfputc_r+0x22>
 8008314:	6813      	ldr	r3, [r2, #0]
 8008316:	1c58      	adds	r0, r3, #1
 8008318:	6010      	str	r0, [r2, #0]
 800831a:	7019      	strb	r1, [r3, #0]
 800831c:	0008      	movs	r0, r1
 800831e:	bd10      	pop	{r4, pc}
 8008320:	f000 f94e 	bl	80085c0 <__swbuf_r>
 8008324:	0001      	movs	r1, r0
 8008326:	e7f9      	b.n	800831c <__sfputc_r+0x1e>

08008328 <__sfputs_r>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	0006      	movs	r6, r0
 800832c:	000f      	movs	r7, r1
 800832e:	0014      	movs	r4, r2
 8008330:	18d5      	adds	r5, r2, r3
 8008332:	42ac      	cmp	r4, r5
 8008334:	d101      	bne.n	800833a <__sfputs_r+0x12>
 8008336:	2000      	movs	r0, #0
 8008338:	e007      	b.n	800834a <__sfputs_r+0x22>
 800833a:	7821      	ldrb	r1, [r4, #0]
 800833c:	003a      	movs	r2, r7
 800833e:	0030      	movs	r0, r6
 8008340:	f7ff ffdd 	bl	80082fe <__sfputc_r>
 8008344:	3401      	adds	r4, #1
 8008346:	1c43      	adds	r3, r0, #1
 8008348:	d1f3      	bne.n	8008332 <__sfputs_r+0xa>
 800834a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800834c <_vfiprintf_r>:
 800834c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800834e:	b0a1      	sub	sp, #132	; 0x84
 8008350:	0006      	movs	r6, r0
 8008352:	000c      	movs	r4, r1
 8008354:	001f      	movs	r7, r3
 8008356:	9203      	str	r2, [sp, #12]
 8008358:	2800      	cmp	r0, #0
 800835a:	d004      	beq.n	8008366 <_vfiprintf_r+0x1a>
 800835c:	6983      	ldr	r3, [r0, #24]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <_vfiprintf_r+0x1a>
 8008362:	f000 fb3f 	bl	80089e4 <__sinit>
 8008366:	4b8e      	ldr	r3, [pc, #568]	; (80085a0 <_vfiprintf_r+0x254>)
 8008368:	429c      	cmp	r4, r3
 800836a:	d11c      	bne.n	80083a6 <_vfiprintf_r+0x5a>
 800836c:	6874      	ldr	r4, [r6, #4]
 800836e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008370:	07db      	lsls	r3, r3, #31
 8008372:	d405      	bmi.n	8008380 <_vfiprintf_r+0x34>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	059b      	lsls	r3, r3, #22
 8008378:	d402      	bmi.n	8008380 <_vfiprintf_r+0x34>
 800837a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800837c:	f000 fbd3 	bl	8008b26 <__retarget_lock_acquire_recursive>
 8008380:	89a3      	ldrh	r3, [r4, #12]
 8008382:	071b      	lsls	r3, r3, #28
 8008384:	d502      	bpl.n	800838c <_vfiprintf_r+0x40>
 8008386:	6923      	ldr	r3, [r4, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d11d      	bne.n	80083c8 <_vfiprintf_r+0x7c>
 800838c:	0021      	movs	r1, r4
 800838e:	0030      	movs	r0, r6
 8008390:	f000 f97a 	bl	8008688 <__swsetup_r>
 8008394:	2800      	cmp	r0, #0
 8008396:	d017      	beq.n	80083c8 <_vfiprintf_r+0x7c>
 8008398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800839a:	07db      	lsls	r3, r3, #31
 800839c:	d50d      	bpl.n	80083ba <_vfiprintf_r+0x6e>
 800839e:	2001      	movs	r0, #1
 80083a0:	4240      	negs	r0, r0
 80083a2:	b021      	add	sp, #132	; 0x84
 80083a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083a6:	4b7f      	ldr	r3, [pc, #508]	; (80085a4 <_vfiprintf_r+0x258>)
 80083a8:	429c      	cmp	r4, r3
 80083aa:	d101      	bne.n	80083b0 <_vfiprintf_r+0x64>
 80083ac:	68b4      	ldr	r4, [r6, #8]
 80083ae:	e7de      	b.n	800836e <_vfiprintf_r+0x22>
 80083b0:	4b7d      	ldr	r3, [pc, #500]	; (80085a8 <_vfiprintf_r+0x25c>)
 80083b2:	429c      	cmp	r4, r3
 80083b4:	d1db      	bne.n	800836e <_vfiprintf_r+0x22>
 80083b6:	68f4      	ldr	r4, [r6, #12]
 80083b8:	e7d9      	b.n	800836e <_vfiprintf_r+0x22>
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	059b      	lsls	r3, r3, #22
 80083be:	d4ee      	bmi.n	800839e <_vfiprintf_r+0x52>
 80083c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083c2:	f000 fbb1 	bl	8008b28 <__retarget_lock_release_recursive>
 80083c6:	e7ea      	b.n	800839e <_vfiprintf_r+0x52>
 80083c8:	2300      	movs	r3, #0
 80083ca:	ad08      	add	r5, sp, #32
 80083cc:	616b      	str	r3, [r5, #20]
 80083ce:	3320      	adds	r3, #32
 80083d0:	766b      	strb	r3, [r5, #25]
 80083d2:	3310      	adds	r3, #16
 80083d4:	76ab      	strb	r3, [r5, #26]
 80083d6:	9707      	str	r7, [sp, #28]
 80083d8:	9f03      	ldr	r7, [sp, #12]
 80083da:	783b      	ldrb	r3, [r7, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <_vfiprintf_r+0x98>
 80083e0:	2b25      	cmp	r3, #37	; 0x25
 80083e2:	d14e      	bne.n	8008482 <_vfiprintf_r+0x136>
 80083e4:	9b03      	ldr	r3, [sp, #12]
 80083e6:	1afb      	subs	r3, r7, r3
 80083e8:	9305      	str	r3, [sp, #20]
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	429f      	cmp	r7, r3
 80083ee:	d00d      	beq.n	800840c <_vfiprintf_r+0xc0>
 80083f0:	9b05      	ldr	r3, [sp, #20]
 80083f2:	0021      	movs	r1, r4
 80083f4:	0030      	movs	r0, r6
 80083f6:	9a03      	ldr	r2, [sp, #12]
 80083f8:	f7ff ff96 	bl	8008328 <__sfputs_r>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d100      	bne.n	8008402 <_vfiprintf_r+0xb6>
 8008400:	e0b5      	b.n	800856e <_vfiprintf_r+0x222>
 8008402:	696a      	ldr	r2, [r5, #20]
 8008404:	9b05      	ldr	r3, [sp, #20]
 8008406:	4694      	mov	ip, r2
 8008408:	4463      	add	r3, ip
 800840a:	616b      	str	r3, [r5, #20]
 800840c:	783b      	ldrb	r3, [r7, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d100      	bne.n	8008414 <_vfiprintf_r+0xc8>
 8008412:	e0ac      	b.n	800856e <_vfiprintf_r+0x222>
 8008414:	2201      	movs	r2, #1
 8008416:	1c7b      	adds	r3, r7, #1
 8008418:	9303      	str	r3, [sp, #12]
 800841a:	2300      	movs	r3, #0
 800841c:	4252      	negs	r2, r2
 800841e:	606a      	str	r2, [r5, #4]
 8008420:	a904      	add	r1, sp, #16
 8008422:	3254      	adds	r2, #84	; 0x54
 8008424:	1852      	adds	r2, r2, r1
 8008426:	602b      	str	r3, [r5, #0]
 8008428:	60eb      	str	r3, [r5, #12]
 800842a:	60ab      	str	r3, [r5, #8]
 800842c:	7013      	strb	r3, [r2, #0]
 800842e:	65ab      	str	r3, [r5, #88]	; 0x58
 8008430:	9b03      	ldr	r3, [sp, #12]
 8008432:	2205      	movs	r2, #5
 8008434:	7819      	ldrb	r1, [r3, #0]
 8008436:	485d      	ldr	r0, [pc, #372]	; (80085ac <_vfiprintf_r+0x260>)
 8008438:	f7ff f89c 	bl	8007574 <memchr>
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	1c5f      	adds	r7, r3, #1
 8008440:	2800      	cmp	r0, #0
 8008442:	d120      	bne.n	8008486 <_vfiprintf_r+0x13a>
 8008444:	682a      	ldr	r2, [r5, #0]
 8008446:	06d3      	lsls	r3, r2, #27
 8008448:	d504      	bpl.n	8008454 <_vfiprintf_r+0x108>
 800844a:	2353      	movs	r3, #83	; 0x53
 800844c:	a904      	add	r1, sp, #16
 800844e:	185b      	adds	r3, r3, r1
 8008450:	2120      	movs	r1, #32
 8008452:	7019      	strb	r1, [r3, #0]
 8008454:	0713      	lsls	r3, r2, #28
 8008456:	d504      	bpl.n	8008462 <_vfiprintf_r+0x116>
 8008458:	2353      	movs	r3, #83	; 0x53
 800845a:	a904      	add	r1, sp, #16
 800845c:	185b      	adds	r3, r3, r1
 800845e:	212b      	movs	r1, #43	; 0x2b
 8008460:	7019      	strb	r1, [r3, #0]
 8008462:	9b03      	ldr	r3, [sp, #12]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b2a      	cmp	r3, #42	; 0x2a
 8008468:	d016      	beq.n	8008498 <_vfiprintf_r+0x14c>
 800846a:	2100      	movs	r1, #0
 800846c:	68eb      	ldr	r3, [r5, #12]
 800846e:	9f03      	ldr	r7, [sp, #12]
 8008470:	783a      	ldrb	r2, [r7, #0]
 8008472:	1c78      	adds	r0, r7, #1
 8008474:	3a30      	subs	r2, #48	; 0x30
 8008476:	4684      	mov	ip, r0
 8008478:	2a09      	cmp	r2, #9
 800847a:	d94f      	bls.n	800851c <_vfiprintf_r+0x1d0>
 800847c:	2900      	cmp	r1, #0
 800847e:	d111      	bne.n	80084a4 <_vfiprintf_r+0x158>
 8008480:	e017      	b.n	80084b2 <_vfiprintf_r+0x166>
 8008482:	3701      	adds	r7, #1
 8008484:	e7a9      	b.n	80083da <_vfiprintf_r+0x8e>
 8008486:	4b49      	ldr	r3, [pc, #292]	; (80085ac <_vfiprintf_r+0x260>)
 8008488:	682a      	ldr	r2, [r5, #0]
 800848a:	1ac0      	subs	r0, r0, r3
 800848c:	2301      	movs	r3, #1
 800848e:	4083      	lsls	r3, r0
 8008490:	4313      	orrs	r3, r2
 8008492:	602b      	str	r3, [r5, #0]
 8008494:	9703      	str	r7, [sp, #12]
 8008496:	e7cb      	b.n	8008430 <_vfiprintf_r+0xe4>
 8008498:	9b07      	ldr	r3, [sp, #28]
 800849a:	1d19      	adds	r1, r3, #4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	9107      	str	r1, [sp, #28]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	db01      	blt.n	80084a8 <_vfiprintf_r+0x15c>
 80084a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80084a6:	e004      	b.n	80084b2 <_vfiprintf_r+0x166>
 80084a8:	425b      	negs	r3, r3
 80084aa:	60eb      	str	r3, [r5, #12]
 80084ac:	2302      	movs	r3, #2
 80084ae:	4313      	orrs	r3, r2
 80084b0:	602b      	str	r3, [r5, #0]
 80084b2:	783b      	ldrb	r3, [r7, #0]
 80084b4:	2b2e      	cmp	r3, #46	; 0x2e
 80084b6:	d10a      	bne.n	80084ce <_vfiprintf_r+0x182>
 80084b8:	787b      	ldrb	r3, [r7, #1]
 80084ba:	2b2a      	cmp	r3, #42	; 0x2a
 80084bc:	d137      	bne.n	800852e <_vfiprintf_r+0x1e2>
 80084be:	9b07      	ldr	r3, [sp, #28]
 80084c0:	3702      	adds	r7, #2
 80084c2:	1d1a      	adds	r2, r3, #4
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	9207      	str	r2, [sp, #28]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	db2d      	blt.n	8008528 <_vfiprintf_r+0x1dc>
 80084cc:	9309      	str	r3, [sp, #36]	; 0x24
 80084ce:	2203      	movs	r2, #3
 80084d0:	7839      	ldrb	r1, [r7, #0]
 80084d2:	4837      	ldr	r0, [pc, #220]	; (80085b0 <_vfiprintf_r+0x264>)
 80084d4:	f7ff f84e 	bl	8007574 <memchr>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d007      	beq.n	80084ec <_vfiprintf_r+0x1a0>
 80084dc:	4b34      	ldr	r3, [pc, #208]	; (80085b0 <_vfiprintf_r+0x264>)
 80084de:	682a      	ldr	r2, [r5, #0]
 80084e0:	1ac0      	subs	r0, r0, r3
 80084e2:	2340      	movs	r3, #64	; 0x40
 80084e4:	4083      	lsls	r3, r0
 80084e6:	4313      	orrs	r3, r2
 80084e8:	3701      	adds	r7, #1
 80084ea:	602b      	str	r3, [r5, #0]
 80084ec:	7839      	ldrb	r1, [r7, #0]
 80084ee:	1c7b      	adds	r3, r7, #1
 80084f0:	2206      	movs	r2, #6
 80084f2:	4830      	ldr	r0, [pc, #192]	; (80085b4 <_vfiprintf_r+0x268>)
 80084f4:	9303      	str	r3, [sp, #12]
 80084f6:	7629      	strb	r1, [r5, #24]
 80084f8:	f7ff f83c 	bl	8007574 <memchr>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d045      	beq.n	800858c <_vfiprintf_r+0x240>
 8008500:	4b2d      	ldr	r3, [pc, #180]	; (80085b8 <_vfiprintf_r+0x26c>)
 8008502:	2b00      	cmp	r3, #0
 8008504:	d127      	bne.n	8008556 <_vfiprintf_r+0x20a>
 8008506:	2207      	movs	r2, #7
 8008508:	9b07      	ldr	r3, [sp, #28]
 800850a:	3307      	adds	r3, #7
 800850c:	4393      	bics	r3, r2
 800850e:	3308      	adds	r3, #8
 8008510:	9307      	str	r3, [sp, #28]
 8008512:	696b      	ldr	r3, [r5, #20]
 8008514:	9a04      	ldr	r2, [sp, #16]
 8008516:	189b      	adds	r3, r3, r2
 8008518:	616b      	str	r3, [r5, #20]
 800851a:	e75d      	b.n	80083d8 <_vfiprintf_r+0x8c>
 800851c:	210a      	movs	r1, #10
 800851e:	434b      	muls	r3, r1
 8008520:	4667      	mov	r7, ip
 8008522:	189b      	adds	r3, r3, r2
 8008524:	3909      	subs	r1, #9
 8008526:	e7a3      	b.n	8008470 <_vfiprintf_r+0x124>
 8008528:	2301      	movs	r3, #1
 800852a:	425b      	negs	r3, r3
 800852c:	e7ce      	b.n	80084cc <_vfiprintf_r+0x180>
 800852e:	2300      	movs	r3, #0
 8008530:	001a      	movs	r2, r3
 8008532:	3701      	adds	r7, #1
 8008534:	606b      	str	r3, [r5, #4]
 8008536:	7839      	ldrb	r1, [r7, #0]
 8008538:	1c78      	adds	r0, r7, #1
 800853a:	3930      	subs	r1, #48	; 0x30
 800853c:	4684      	mov	ip, r0
 800853e:	2909      	cmp	r1, #9
 8008540:	d903      	bls.n	800854a <_vfiprintf_r+0x1fe>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d0c3      	beq.n	80084ce <_vfiprintf_r+0x182>
 8008546:	9209      	str	r2, [sp, #36]	; 0x24
 8008548:	e7c1      	b.n	80084ce <_vfiprintf_r+0x182>
 800854a:	230a      	movs	r3, #10
 800854c:	435a      	muls	r2, r3
 800854e:	4667      	mov	r7, ip
 8008550:	1852      	adds	r2, r2, r1
 8008552:	3b09      	subs	r3, #9
 8008554:	e7ef      	b.n	8008536 <_vfiprintf_r+0x1ea>
 8008556:	ab07      	add	r3, sp, #28
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	0022      	movs	r2, r4
 800855c:	0029      	movs	r1, r5
 800855e:	0030      	movs	r0, r6
 8008560:	4b16      	ldr	r3, [pc, #88]	; (80085bc <_vfiprintf_r+0x270>)
 8008562:	f7fd fd6f 	bl	8006044 <_printf_float>
 8008566:	9004      	str	r0, [sp, #16]
 8008568:	9b04      	ldr	r3, [sp, #16]
 800856a:	3301      	adds	r3, #1
 800856c:	d1d1      	bne.n	8008512 <_vfiprintf_r+0x1c6>
 800856e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008570:	07db      	lsls	r3, r3, #31
 8008572:	d405      	bmi.n	8008580 <_vfiprintf_r+0x234>
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	059b      	lsls	r3, r3, #22
 8008578:	d402      	bmi.n	8008580 <_vfiprintf_r+0x234>
 800857a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800857c:	f000 fad4 	bl	8008b28 <__retarget_lock_release_recursive>
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	065b      	lsls	r3, r3, #25
 8008584:	d500      	bpl.n	8008588 <_vfiprintf_r+0x23c>
 8008586:	e70a      	b.n	800839e <_vfiprintf_r+0x52>
 8008588:	980d      	ldr	r0, [sp, #52]	; 0x34
 800858a:	e70a      	b.n	80083a2 <_vfiprintf_r+0x56>
 800858c:	ab07      	add	r3, sp, #28
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	0022      	movs	r2, r4
 8008592:	0029      	movs	r1, r5
 8008594:	0030      	movs	r0, r6
 8008596:	4b09      	ldr	r3, [pc, #36]	; (80085bc <_vfiprintf_r+0x270>)
 8008598:	f7fe f806 	bl	80065a8 <_printf_i>
 800859c:	e7e3      	b.n	8008566 <_vfiprintf_r+0x21a>
 800859e:	46c0      	nop			; (mov r8, r8)
 80085a0:	080092d4 	.word	0x080092d4
 80085a4:	080092f4 	.word	0x080092f4
 80085a8:	080092b4 	.word	0x080092b4
 80085ac:	0800915c 	.word	0x0800915c
 80085b0:	08009162 	.word	0x08009162
 80085b4:	08009166 	.word	0x08009166
 80085b8:	08006045 	.word	0x08006045
 80085bc:	08008329 	.word	0x08008329

080085c0 <__swbuf_r>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	0005      	movs	r5, r0
 80085c4:	000e      	movs	r6, r1
 80085c6:	0014      	movs	r4, r2
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d004      	beq.n	80085d6 <__swbuf_r+0x16>
 80085cc:	6983      	ldr	r3, [r0, #24]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <__swbuf_r+0x16>
 80085d2:	f000 fa07 	bl	80089e4 <__sinit>
 80085d6:	4b22      	ldr	r3, [pc, #136]	; (8008660 <__swbuf_r+0xa0>)
 80085d8:	429c      	cmp	r4, r3
 80085da:	d12e      	bne.n	800863a <__swbuf_r+0x7a>
 80085dc:	686c      	ldr	r4, [r5, #4]
 80085de:	69a3      	ldr	r3, [r4, #24]
 80085e0:	60a3      	str	r3, [r4, #8]
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	071b      	lsls	r3, r3, #28
 80085e6:	d532      	bpl.n	800864e <__swbuf_r+0x8e>
 80085e8:	6923      	ldr	r3, [r4, #16]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d02f      	beq.n	800864e <__swbuf_r+0x8e>
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	6922      	ldr	r2, [r4, #16]
 80085f2:	b2f7      	uxtb	r7, r6
 80085f4:	1a98      	subs	r0, r3, r2
 80085f6:	6963      	ldr	r3, [r4, #20]
 80085f8:	b2f6      	uxtb	r6, r6
 80085fa:	4283      	cmp	r3, r0
 80085fc:	dc05      	bgt.n	800860a <__swbuf_r+0x4a>
 80085fe:	0021      	movs	r1, r4
 8008600:	0028      	movs	r0, r5
 8008602:	f000 f94d 	bl	80088a0 <_fflush_r>
 8008606:	2800      	cmp	r0, #0
 8008608:	d127      	bne.n	800865a <__swbuf_r+0x9a>
 800860a:	68a3      	ldr	r3, [r4, #8]
 800860c:	3001      	adds	r0, #1
 800860e:	3b01      	subs	r3, #1
 8008610:	60a3      	str	r3, [r4, #8]
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	1c5a      	adds	r2, r3, #1
 8008616:	6022      	str	r2, [r4, #0]
 8008618:	701f      	strb	r7, [r3, #0]
 800861a:	6963      	ldr	r3, [r4, #20]
 800861c:	4283      	cmp	r3, r0
 800861e:	d004      	beq.n	800862a <__swbuf_r+0x6a>
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	07db      	lsls	r3, r3, #31
 8008624:	d507      	bpl.n	8008636 <__swbuf_r+0x76>
 8008626:	2e0a      	cmp	r6, #10
 8008628:	d105      	bne.n	8008636 <__swbuf_r+0x76>
 800862a:	0021      	movs	r1, r4
 800862c:	0028      	movs	r0, r5
 800862e:	f000 f937 	bl	80088a0 <_fflush_r>
 8008632:	2800      	cmp	r0, #0
 8008634:	d111      	bne.n	800865a <__swbuf_r+0x9a>
 8008636:	0030      	movs	r0, r6
 8008638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800863a:	4b0a      	ldr	r3, [pc, #40]	; (8008664 <__swbuf_r+0xa4>)
 800863c:	429c      	cmp	r4, r3
 800863e:	d101      	bne.n	8008644 <__swbuf_r+0x84>
 8008640:	68ac      	ldr	r4, [r5, #8]
 8008642:	e7cc      	b.n	80085de <__swbuf_r+0x1e>
 8008644:	4b08      	ldr	r3, [pc, #32]	; (8008668 <__swbuf_r+0xa8>)
 8008646:	429c      	cmp	r4, r3
 8008648:	d1c9      	bne.n	80085de <__swbuf_r+0x1e>
 800864a:	68ec      	ldr	r4, [r5, #12]
 800864c:	e7c7      	b.n	80085de <__swbuf_r+0x1e>
 800864e:	0021      	movs	r1, r4
 8008650:	0028      	movs	r0, r5
 8008652:	f000 f819 	bl	8008688 <__swsetup_r>
 8008656:	2800      	cmp	r0, #0
 8008658:	d0c9      	beq.n	80085ee <__swbuf_r+0x2e>
 800865a:	2601      	movs	r6, #1
 800865c:	4276      	negs	r6, r6
 800865e:	e7ea      	b.n	8008636 <__swbuf_r+0x76>
 8008660:	080092d4 	.word	0x080092d4
 8008664:	080092f4 	.word	0x080092f4
 8008668:	080092b4 	.word	0x080092b4

0800866c <__ascii_wctomb>:
 800866c:	0003      	movs	r3, r0
 800866e:	1e08      	subs	r0, r1, #0
 8008670:	d005      	beq.n	800867e <__ascii_wctomb+0x12>
 8008672:	2aff      	cmp	r2, #255	; 0xff
 8008674:	d904      	bls.n	8008680 <__ascii_wctomb+0x14>
 8008676:	228a      	movs	r2, #138	; 0x8a
 8008678:	2001      	movs	r0, #1
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	4240      	negs	r0, r0
 800867e:	4770      	bx	lr
 8008680:	2001      	movs	r0, #1
 8008682:	700a      	strb	r2, [r1, #0]
 8008684:	e7fb      	b.n	800867e <__ascii_wctomb+0x12>
	...

08008688 <__swsetup_r>:
 8008688:	4b37      	ldr	r3, [pc, #220]	; (8008768 <__swsetup_r+0xe0>)
 800868a:	b570      	push	{r4, r5, r6, lr}
 800868c:	681d      	ldr	r5, [r3, #0]
 800868e:	0006      	movs	r6, r0
 8008690:	000c      	movs	r4, r1
 8008692:	2d00      	cmp	r5, #0
 8008694:	d005      	beq.n	80086a2 <__swsetup_r+0x1a>
 8008696:	69ab      	ldr	r3, [r5, #24]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d102      	bne.n	80086a2 <__swsetup_r+0x1a>
 800869c:	0028      	movs	r0, r5
 800869e:	f000 f9a1 	bl	80089e4 <__sinit>
 80086a2:	4b32      	ldr	r3, [pc, #200]	; (800876c <__swsetup_r+0xe4>)
 80086a4:	429c      	cmp	r4, r3
 80086a6:	d10f      	bne.n	80086c8 <__swsetup_r+0x40>
 80086a8:	686c      	ldr	r4, [r5, #4]
 80086aa:	230c      	movs	r3, #12
 80086ac:	5ee2      	ldrsh	r2, [r4, r3]
 80086ae:	b293      	uxth	r3, r2
 80086b0:	0711      	lsls	r1, r2, #28
 80086b2:	d42d      	bmi.n	8008710 <__swsetup_r+0x88>
 80086b4:	06d9      	lsls	r1, r3, #27
 80086b6:	d411      	bmi.n	80086dc <__swsetup_r+0x54>
 80086b8:	2309      	movs	r3, #9
 80086ba:	2001      	movs	r0, #1
 80086bc:	6033      	str	r3, [r6, #0]
 80086be:	3337      	adds	r3, #55	; 0x37
 80086c0:	4313      	orrs	r3, r2
 80086c2:	81a3      	strh	r3, [r4, #12]
 80086c4:	4240      	negs	r0, r0
 80086c6:	bd70      	pop	{r4, r5, r6, pc}
 80086c8:	4b29      	ldr	r3, [pc, #164]	; (8008770 <__swsetup_r+0xe8>)
 80086ca:	429c      	cmp	r4, r3
 80086cc:	d101      	bne.n	80086d2 <__swsetup_r+0x4a>
 80086ce:	68ac      	ldr	r4, [r5, #8]
 80086d0:	e7eb      	b.n	80086aa <__swsetup_r+0x22>
 80086d2:	4b28      	ldr	r3, [pc, #160]	; (8008774 <__swsetup_r+0xec>)
 80086d4:	429c      	cmp	r4, r3
 80086d6:	d1e8      	bne.n	80086aa <__swsetup_r+0x22>
 80086d8:	68ec      	ldr	r4, [r5, #12]
 80086da:	e7e6      	b.n	80086aa <__swsetup_r+0x22>
 80086dc:	075b      	lsls	r3, r3, #29
 80086de:	d513      	bpl.n	8008708 <__swsetup_r+0x80>
 80086e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086e2:	2900      	cmp	r1, #0
 80086e4:	d008      	beq.n	80086f8 <__swsetup_r+0x70>
 80086e6:	0023      	movs	r3, r4
 80086e8:	3344      	adds	r3, #68	; 0x44
 80086ea:	4299      	cmp	r1, r3
 80086ec:	d002      	beq.n	80086f4 <__swsetup_r+0x6c>
 80086ee:	0030      	movs	r0, r6
 80086f0:	f7ff fb1c 	bl	8007d2c <_free_r>
 80086f4:	2300      	movs	r3, #0
 80086f6:	6363      	str	r3, [r4, #52]	; 0x34
 80086f8:	2224      	movs	r2, #36	; 0x24
 80086fa:	89a3      	ldrh	r3, [r4, #12]
 80086fc:	4393      	bics	r3, r2
 80086fe:	81a3      	strh	r3, [r4, #12]
 8008700:	2300      	movs	r3, #0
 8008702:	6063      	str	r3, [r4, #4]
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	6023      	str	r3, [r4, #0]
 8008708:	2308      	movs	r3, #8
 800870a:	89a2      	ldrh	r2, [r4, #12]
 800870c:	4313      	orrs	r3, r2
 800870e:	81a3      	strh	r3, [r4, #12]
 8008710:	6923      	ldr	r3, [r4, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10b      	bne.n	800872e <__swsetup_r+0xa6>
 8008716:	21a0      	movs	r1, #160	; 0xa0
 8008718:	2280      	movs	r2, #128	; 0x80
 800871a:	89a3      	ldrh	r3, [r4, #12]
 800871c:	0089      	lsls	r1, r1, #2
 800871e:	0092      	lsls	r2, r2, #2
 8008720:	400b      	ands	r3, r1
 8008722:	4293      	cmp	r3, r2
 8008724:	d003      	beq.n	800872e <__swsetup_r+0xa6>
 8008726:	0021      	movs	r1, r4
 8008728:	0030      	movs	r0, r6
 800872a:	f000 fa27 	bl	8008b7c <__smakebuf_r>
 800872e:	220c      	movs	r2, #12
 8008730:	5ea3      	ldrsh	r3, [r4, r2]
 8008732:	2001      	movs	r0, #1
 8008734:	001a      	movs	r2, r3
 8008736:	b299      	uxth	r1, r3
 8008738:	4002      	ands	r2, r0
 800873a:	4203      	tst	r3, r0
 800873c:	d00f      	beq.n	800875e <__swsetup_r+0xd6>
 800873e:	2200      	movs	r2, #0
 8008740:	60a2      	str	r2, [r4, #8]
 8008742:	6962      	ldr	r2, [r4, #20]
 8008744:	4252      	negs	r2, r2
 8008746:	61a2      	str	r2, [r4, #24]
 8008748:	2000      	movs	r0, #0
 800874a:	6922      	ldr	r2, [r4, #16]
 800874c:	4282      	cmp	r2, r0
 800874e:	d1ba      	bne.n	80086c6 <__swsetup_r+0x3e>
 8008750:	060a      	lsls	r2, r1, #24
 8008752:	d5b8      	bpl.n	80086c6 <__swsetup_r+0x3e>
 8008754:	2240      	movs	r2, #64	; 0x40
 8008756:	4313      	orrs	r3, r2
 8008758:	81a3      	strh	r3, [r4, #12]
 800875a:	3801      	subs	r0, #1
 800875c:	e7b3      	b.n	80086c6 <__swsetup_r+0x3e>
 800875e:	0788      	lsls	r0, r1, #30
 8008760:	d400      	bmi.n	8008764 <__swsetup_r+0xdc>
 8008762:	6962      	ldr	r2, [r4, #20]
 8008764:	60a2      	str	r2, [r4, #8]
 8008766:	e7ef      	b.n	8008748 <__swsetup_r+0xc0>
 8008768:	2000000c 	.word	0x2000000c
 800876c:	080092d4 	.word	0x080092d4
 8008770:	080092f4 	.word	0x080092f4
 8008774:	080092b4 	.word	0x080092b4

08008778 <abort>:
 8008778:	2006      	movs	r0, #6
 800877a:	b510      	push	{r4, lr}
 800877c:	f000 fa74 	bl	8008c68 <raise>
 8008780:	2001      	movs	r0, #1
 8008782:	f7fa f9b3 	bl	8002aec <_exit>
	...

08008788 <__sflush_r>:
 8008788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800878a:	898b      	ldrh	r3, [r1, #12]
 800878c:	0005      	movs	r5, r0
 800878e:	000c      	movs	r4, r1
 8008790:	071a      	lsls	r2, r3, #28
 8008792:	d45f      	bmi.n	8008854 <__sflush_r+0xcc>
 8008794:	684a      	ldr	r2, [r1, #4]
 8008796:	2a00      	cmp	r2, #0
 8008798:	dc04      	bgt.n	80087a4 <__sflush_r+0x1c>
 800879a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800879c:	2a00      	cmp	r2, #0
 800879e:	dc01      	bgt.n	80087a4 <__sflush_r+0x1c>
 80087a0:	2000      	movs	r0, #0
 80087a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80087a6:	2f00      	cmp	r7, #0
 80087a8:	d0fa      	beq.n	80087a0 <__sflush_r+0x18>
 80087aa:	2200      	movs	r2, #0
 80087ac:	2180      	movs	r1, #128	; 0x80
 80087ae:	682e      	ldr	r6, [r5, #0]
 80087b0:	602a      	str	r2, [r5, #0]
 80087b2:	001a      	movs	r2, r3
 80087b4:	0149      	lsls	r1, r1, #5
 80087b6:	400a      	ands	r2, r1
 80087b8:	420b      	tst	r3, r1
 80087ba:	d034      	beq.n	8008826 <__sflush_r+0x9e>
 80087bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087be:	89a3      	ldrh	r3, [r4, #12]
 80087c0:	075b      	lsls	r3, r3, #29
 80087c2:	d506      	bpl.n	80087d2 <__sflush_r+0x4a>
 80087c4:	6863      	ldr	r3, [r4, #4]
 80087c6:	1ac0      	subs	r0, r0, r3
 80087c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <__sflush_r+0x4a>
 80087ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087d0:	1ac0      	subs	r0, r0, r3
 80087d2:	0002      	movs	r2, r0
 80087d4:	6a21      	ldr	r1, [r4, #32]
 80087d6:	2300      	movs	r3, #0
 80087d8:	0028      	movs	r0, r5
 80087da:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80087dc:	47b8      	blx	r7
 80087de:	89a1      	ldrh	r1, [r4, #12]
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	d106      	bne.n	80087f2 <__sflush_r+0x6a>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	2b1d      	cmp	r3, #29
 80087e8:	d831      	bhi.n	800884e <__sflush_r+0xc6>
 80087ea:	4a2c      	ldr	r2, [pc, #176]	; (800889c <__sflush_r+0x114>)
 80087ec:	40da      	lsrs	r2, r3
 80087ee:	07d3      	lsls	r3, r2, #31
 80087f0:	d52d      	bpl.n	800884e <__sflush_r+0xc6>
 80087f2:	2300      	movs	r3, #0
 80087f4:	6063      	str	r3, [r4, #4]
 80087f6:	6923      	ldr	r3, [r4, #16]
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	04cb      	lsls	r3, r1, #19
 80087fc:	d505      	bpl.n	800880a <__sflush_r+0x82>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d102      	bne.n	8008808 <__sflush_r+0x80>
 8008802:	682b      	ldr	r3, [r5, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d100      	bne.n	800880a <__sflush_r+0x82>
 8008808:	6560      	str	r0, [r4, #84]	; 0x54
 800880a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800880c:	602e      	str	r6, [r5, #0]
 800880e:	2900      	cmp	r1, #0
 8008810:	d0c6      	beq.n	80087a0 <__sflush_r+0x18>
 8008812:	0023      	movs	r3, r4
 8008814:	3344      	adds	r3, #68	; 0x44
 8008816:	4299      	cmp	r1, r3
 8008818:	d002      	beq.n	8008820 <__sflush_r+0x98>
 800881a:	0028      	movs	r0, r5
 800881c:	f7ff fa86 	bl	8007d2c <_free_r>
 8008820:	2000      	movs	r0, #0
 8008822:	6360      	str	r0, [r4, #52]	; 0x34
 8008824:	e7bd      	b.n	80087a2 <__sflush_r+0x1a>
 8008826:	2301      	movs	r3, #1
 8008828:	0028      	movs	r0, r5
 800882a:	6a21      	ldr	r1, [r4, #32]
 800882c:	47b8      	blx	r7
 800882e:	1c43      	adds	r3, r0, #1
 8008830:	d1c5      	bne.n	80087be <__sflush_r+0x36>
 8008832:	682b      	ldr	r3, [r5, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d0c2      	beq.n	80087be <__sflush_r+0x36>
 8008838:	2b1d      	cmp	r3, #29
 800883a:	d001      	beq.n	8008840 <__sflush_r+0xb8>
 800883c:	2b16      	cmp	r3, #22
 800883e:	d101      	bne.n	8008844 <__sflush_r+0xbc>
 8008840:	602e      	str	r6, [r5, #0]
 8008842:	e7ad      	b.n	80087a0 <__sflush_r+0x18>
 8008844:	2340      	movs	r3, #64	; 0x40
 8008846:	89a2      	ldrh	r2, [r4, #12]
 8008848:	4313      	orrs	r3, r2
 800884a:	81a3      	strh	r3, [r4, #12]
 800884c:	e7a9      	b.n	80087a2 <__sflush_r+0x1a>
 800884e:	2340      	movs	r3, #64	; 0x40
 8008850:	430b      	orrs	r3, r1
 8008852:	e7fa      	b.n	800884a <__sflush_r+0xc2>
 8008854:	690f      	ldr	r7, [r1, #16]
 8008856:	2f00      	cmp	r7, #0
 8008858:	d0a2      	beq.n	80087a0 <__sflush_r+0x18>
 800885a:	680a      	ldr	r2, [r1, #0]
 800885c:	600f      	str	r7, [r1, #0]
 800885e:	1bd2      	subs	r2, r2, r7
 8008860:	9201      	str	r2, [sp, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	079b      	lsls	r3, r3, #30
 8008866:	d100      	bne.n	800886a <__sflush_r+0xe2>
 8008868:	694a      	ldr	r2, [r1, #20]
 800886a:	60a2      	str	r2, [r4, #8]
 800886c:	9b01      	ldr	r3, [sp, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	dc00      	bgt.n	8008874 <__sflush_r+0xec>
 8008872:	e795      	b.n	80087a0 <__sflush_r+0x18>
 8008874:	003a      	movs	r2, r7
 8008876:	0028      	movs	r0, r5
 8008878:	9b01      	ldr	r3, [sp, #4]
 800887a:	6a21      	ldr	r1, [r4, #32]
 800887c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800887e:	47b0      	blx	r6
 8008880:	2800      	cmp	r0, #0
 8008882:	dc06      	bgt.n	8008892 <__sflush_r+0x10a>
 8008884:	2340      	movs	r3, #64	; 0x40
 8008886:	2001      	movs	r0, #1
 8008888:	89a2      	ldrh	r2, [r4, #12]
 800888a:	4240      	negs	r0, r0
 800888c:	4313      	orrs	r3, r2
 800888e:	81a3      	strh	r3, [r4, #12]
 8008890:	e787      	b.n	80087a2 <__sflush_r+0x1a>
 8008892:	9b01      	ldr	r3, [sp, #4]
 8008894:	183f      	adds	r7, r7, r0
 8008896:	1a1b      	subs	r3, r3, r0
 8008898:	9301      	str	r3, [sp, #4]
 800889a:	e7e7      	b.n	800886c <__sflush_r+0xe4>
 800889c:	20400001 	.word	0x20400001

080088a0 <_fflush_r>:
 80088a0:	690b      	ldr	r3, [r1, #16]
 80088a2:	b570      	push	{r4, r5, r6, lr}
 80088a4:	0005      	movs	r5, r0
 80088a6:	000c      	movs	r4, r1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d102      	bne.n	80088b2 <_fflush_r+0x12>
 80088ac:	2500      	movs	r5, #0
 80088ae:	0028      	movs	r0, r5
 80088b0:	bd70      	pop	{r4, r5, r6, pc}
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d004      	beq.n	80088c0 <_fflush_r+0x20>
 80088b6:	6983      	ldr	r3, [r0, #24]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <_fflush_r+0x20>
 80088bc:	f000 f892 	bl	80089e4 <__sinit>
 80088c0:	4b14      	ldr	r3, [pc, #80]	; (8008914 <_fflush_r+0x74>)
 80088c2:	429c      	cmp	r4, r3
 80088c4:	d11b      	bne.n	80088fe <_fflush_r+0x5e>
 80088c6:	686c      	ldr	r4, [r5, #4]
 80088c8:	220c      	movs	r2, #12
 80088ca:	5ea3      	ldrsh	r3, [r4, r2]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0ed      	beq.n	80088ac <_fflush_r+0xc>
 80088d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088d2:	07d2      	lsls	r2, r2, #31
 80088d4:	d404      	bmi.n	80088e0 <_fflush_r+0x40>
 80088d6:	059b      	lsls	r3, r3, #22
 80088d8:	d402      	bmi.n	80088e0 <_fflush_r+0x40>
 80088da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088dc:	f000 f923 	bl	8008b26 <__retarget_lock_acquire_recursive>
 80088e0:	0028      	movs	r0, r5
 80088e2:	0021      	movs	r1, r4
 80088e4:	f7ff ff50 	bl	8008788 <__sflush_r>
 80088e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088ea:	0005      	movs	r5, r0
 80088ec:	07db      	lsls	r3, r3, #31
 80088ee:	d4de      	bmi.n	80088ae <_fflush_r+0xe>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	059b      	lsls	r3, r3, #22
 80088f4:	d4db      	bmi.n	80088ae <_fflush_r+0xe>
 80088f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088f8:	f000 f916 	bl	8008b28 <__retarget_lock_release_recursive>
 80088fc:	e7d7      	b.n	80088ae <_fflush_r+0xe>
 80088fe:	4b06      	ldr	r3, [pc, #24]	; (8008918 <_fflush_r+0x78>)
 8008900:	429c      	cmp	r4, r3
 8008902:	d101      	bne.n	8008908 <_fflush_r+0x68>
 8008904:	68ac      	ldr	r4, [r5, #8]
 8008906:	e7df      	b.n	80088c8 <_fflush_r+0x28>
 8008908:	4b04      	ldr	r3, [pc, #16]	; (800891c <_fflush_r+0x7c>)
 800890a:	429c      	cmp	r4, r3
 800890c:	d1dc      	bne.n	80088c8 <_fflush_r+0x28>
 800890e:	68ec      	ldr	r4, [r5, #12]
 8008910:	e7da      	b.n	80088c8 <_fflush_r+0x28>
 8008912:	46c0      	nop			; (mov r8, r8)
 8008914:	080092d4 	.word	0x080092d4
 8008918:	080092f4 	.word	0x080092f4
 800891c:	080092b4 	.word	0x080092b4

08008920 <std>:
 8008920:	2300      	movs	r3, #0
 8008922:	b510      	push	{r4, lr}
 8008924:	0004      	movs	r4, r0
 8008926:	6003      	str	r3, [r0, #0]
 8008928:	6043      	str	r3, [r0, #4]
 800892a:	6083      	str	r3, [r0, #8]
 800892c:	8181      	strh	r1, [r0, #12]
 800892e:	6643      	str	r3, [r0, #100]	; 0x64
 8008930:	0019      	movs	r1, r3
 8008932:	81c2      	strh	r2, [r0, #14]
 8008934:	6103      	str	r3, [r0, #16]
 8008936:	6143      	str	r3, [r0, #20]
 8008938:	6183      	str	r3, [r0, #24]
 800893a:	2208      	movs	r2, #8
 800893c:	305c      	adds	r0, #92	; 0x5c
 800893e:	f7fd facf 	bl	8005ee0 <memset>
 8008942:	4b05      	ldr	r3, [pc, #20]	; (8008958 <std+0x38>)
 8008944:	6224      	str	r4, [r4, #32]
 8008946:	6263      	str	r3, [r4, #36]	; 0x24
 8008948:	4b04      	ldr	r3, [pc, #16]	; (800895c <std+0x3c>)
 800894a:	62a3      	str	r3, [r4, #40]	; 0x28
 800894c:	4b04      	ldr	r3, [pc, #16]	; (8008960 <std+0x40>)
 800894e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008950:	4b04      	ldr	r3, [pc, #16]	; (8008964 <std+0x44>)
 8008952:	6323      	str	r3, [r4, #48]	; 0x30
 8008954:	bd10      	pop	{r4, pc}
 8008956:	46c0      	nop			; (mov r8, r8)
 8008958:	08008ca9 	.word	0x08008ca9
 800895c:	08008cd1 	.word	0x08008cd1
 8008960:	08008d09 	.word	0x08008d09
 8008964:	08008d35 	.word	0x08008d35

08008968 <_cleanup_r>:
 8008968:	b510      	push	{r4, lr}
 800896a:	4902      	ldr	r1, [pc, #8]	; (8008974 <_cleanup_r+0xc>)
 800896c:	f000 f8ba 	bl	8008ae4 <_fwalk_reent>
 8008970:	bd10      	pop	{r4, pc}
 8008972:	46c0      	nop			; (mov r8, r8)
 8008974:	080088a1 	.word	0x080088a1

08008978 <__sfmoreglue>:
 8008978:	b570      	push	{r4, r5, r6, lr}
 800897a:	2568      	movs	r5, #104	; 0x68
 800897c:	1e4a      	subs	r2, r1, #1
 800897e:	4355      	muls	r5, r2
 8008980:	000e      	movs	r6, r1
 8008982:	0029      	movs	r1, r5
 8008984:	3174      	adds	r1, #116	; 0x74
 8008986:	f7ff fa3d 	bl	8007e04 <_malloc_r>
 800898a:	1e04      	subs	r4, r0, #0
 800898c:	d008      	beq.n	80089a0 <__sfmoreglue+0x28>
 800898e:	2100      	movs	r1, #0
 8008990:	002a      	movs	r2, r5
 8008992:	6001      	str	r1, [r0, #0]
 8008994:	6046      	str	r6, [r0, #4]
 8008996:	300c      	adds	r0, #12
 8008998:	60a0      	str	r0, [r4, #8]
 800899a:	3268      	adds	r2, #104	; 0x68
 800899c:	f7fd faa0 	bl	8005ee0 <memset>
 80089a0:	0020      	movs	r0, r4
 80089a2:	bd70      	pop	{r4, r5, r6, pc}

080089a4 <__sfp_lock_acquire>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	4802      	ldr	r0, [pc, #8]	; (80089b0 <__sfp_lock_acquire+0xc>)
 80089a8:	f000 f8bd 	bl	8008b26 <__retarget_lock_acquire_recursive>
 80089ac:	bd10      	pop	{r4, pc}
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	200003c9 	.word	0x200003c9

080089b4 <__sfp_lock_release>:
 80089b4:	b510      	push	{r4, lr}
 80089b6:	4802      	ldr	r0, [pc, #8]	; (80089c0 <__sfp_lock_release+0xc>)
 80089b8:	f000 f8b6 	bl	8008b28 <__retarget_lock_release_recursive>
 80089bc:	bd10      	pop	{r4, pc}
 80089be:	46c0      	nop			; (mov r8, r8)
 80089c0:	200003c9 	.word	0x200003c9

080089c4 <__sinit_lock_acquire>:
 80089c4:	b510      	push	{r4, lr}
 80089c6:	4802      	ldr	r0, [pc, #8]	; (80089d0 <__sinit_lock_acquire+0xc>)
 80089c8:	f000 f8ad 	bl	8008b26 <__retarget_lock_acquire_recursive>
 80089cc:	bd10      	pop	{r4, pc}
 80089ce:	46c0      	nop			; (mov r8, r8)
 80089d0:	200003ca 	.word	0x200003ca

080089d4 <__sinit_lock_release>:
 80089d4:	b510      	push	{r4, lr}
 80089d6:	4802      	ldr	r0, [pc, #8]	; (80089e0 <__sinit_lock_release+0xc>)
 80089d8:	f000 f8a6 	bl	8008b28 <__retarget_lock_release_recursive>
 80089dc:	bd10      	pop	{r4, pc}
 80089de:	46c0      	nop			; (mov r8, r8)
 80089e0:	200003ca 	.word	0x200003ca

080089e4 <__sinit>:
 80089e4:	b513      	push	{r0, r1, r4, lr}
 80089e6:	0004      	movs	r4, r0
 80089e8:	f7ff ffec 	bl	80089c4 <__sinit_lock_acquire>
 80089ec:	69a3      	ldr	r3, [r4, #24]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <__sinit+0x14>
 80089f2:	f7ff ffef 	bl	80089d4 <__sinit_lock_release>
 80089f6:	bd13      	pop	{r0, r1, r4, pc}
 80089f8:	64a3      	str	r3, [r4, #72]	; 0x48
 80089fa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80089fc:	6523      	str	r3, [r4, #80]	; 0x50
 80089fe:	4b13      	ldr	r3, [pc, #76]	; (8008a4c <__sinit+0x68>)
 8008a00:	4a13      	ldr	r2, [pc, #76]	; (8008a50 <__sinit+0x6c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a06:	9301      	str	r3, [sp, #4]
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	d101      	bne.n	8008a10 <__sinit+0x2c>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	61a3      	str	r3, [r4, #24]
 8008a10:	0020      	movs	r0, r4
 8008a12:	f000 f81f 	bl	8008a54 <__sfp>
 8008a16:	6060      	str	r0, [r4, #4]
 8008a18:	0020      	movs	r0, r4
 8008a1a:	f000 f81b 	bl	8008a54 <__sfp>
 8008a1e:	60a0      	str	r0, [r4, #8]
 8008a20:	0020      	movs	r0, r4
 8008a22:	f000 f817 	bl	8008a54 <__sfp>
 8008a26:	2200      	movs	r2, #0
 8008a28:	2104      	movs	r1, #4
 8008a2a:	60e0      	str	r0, [r4, #12]
 8008a2c:	6860      	ldr	r0, [r4, #4]
 8008a2e:	f7ff ff77 	bl	8008920 <std>
 8008a32:	2201      	movs	r2, #1
 8008a34:	2109      	movs	r1, #9
 8008a36:	68a0      	ldr	r0, [r4, #8]
 8008a38:	f7ff ff72 	bl	8008920 <std>
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	2112      	movs	r1, #18
 8008a40:	68e0      	ldr	r0, [r4, #12]
 8008a42:	f7ff ff6d 	bl	8008920 <std>
 8008a46:	2301      	movs	r3, #1
 8008a48:	61a3      	str	r3, [r4, #24]
 8008a4a:	e7d2      	b.n	80089f2 <__sinit+0xe>
 8008a4c:	08008f38 	.word	0x08008f38
 8008a50:	08008969 	.word	0x08008969

08008a54 <__sfp>:
 8008a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a56:	0007      	movs	r7, r0
 8008a58:	f7ff ffa4 	bl	80089a4 <__sfp_lock_acquire>
 8008a5c:	4b1f      	ldr	r3, [pc, #124]	; (8008adc <__sfp+0x88>)
 8008a5e:	681e      	ldr	r6, [r3, #0]
 8008a60:	69b3      	ldr	r3, [r6, #24]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d102      	bne.n	8008a6c <__sfp+0x18>
 8008a66:	0030      	movs	r0, r6
 8008a68:	f7ff ffbc 	bl	80089e4 <__sinit>
 8008a6c:	3648      	adds	r6, #72	; 0x48
 8008a6e:	68b4      	ldr	r4, [r6, #8]
 8008a70:	6873      	ldr	r3, [r6, #4]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	d504      	bpl.n	8008a80 <__sfp+0x2c>
 8008a76:	6833      	ldr	r3, [r6, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d022      	beq.n	8008ac2 <__sfp+0x6e>
 8008a7c:	6836      	ldr	r6, [r6, #0]
 8008a7e:	e7f6      	b.n	8008a6e <__sfp+0x1a>
 8008a80:	220c      	movs	r2, #12
 8008a82:	5ea5      	ldrsh	r5, [r4, r2]
 8008a84:	2d00      	cmp	r5, #0
 8008a86:	d11a      	bne.n	8008abe <__sfp+0x6a>
 8008a88:	0020      	movs	r0, r4
 8008a8a:	4b15      	ldr	r3, [pc, #84]	; (8008ae0 <__sfp+0x8c>)
 8008a8c:	3058      	adds	r0, #88	; 0x58
 8008a8e:	60e3      	str	r3, [r4, #12]
 8008a90:	6665      	str	r5, [r4, #100]	; 0x64
 8008a92:	f000 f847 	bl	8008b24 <__retarget_lock_init_recursive>
 8008a96:	f7ff ff8d 	bl	80089b4 <__sfp_lock_release>
 8008a9a:	0020      	movs	r0, r4
 8008a9c:	2208      	movs	r2, #8
 8008a9e:	0029      	movs	r1, r5
 8008aa0:	6025      	str	r5, [r4, #0]
 8008aa2:	60a5      	str	r5, [r4, #8]
 8008aa4:	6065      	str	r5, [r4, #4]
 8008aa6:	6125      	str	r5, [r4, #16]
 8008aa8:	6165      	str	r5, [r4, #20]
 8008aaa:	61a5      	str	r5, [r4, #24]
 8008aac:	305c      	adds	r0, #92	; 0x5c
 8008aae:	f7fd fa17 	bl	8005ee0 <memset>
 8008ab2:	6365      	str	r5, [r4, #52]	; 0x34
 8008ab4:	63a5      	str	r5, [r4, #56]	; 0x38
 8008ab6:	64a5      	str	r5, [r4, #72]	; 0x48
 8008ab8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008aba:	0020      	movs	r0, r4
 8008abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008abe:	3468      	adds	r4, #104	; 0x68
 8008ac0:	e7d7      	b.n	8008a72 <__sfp+0x1e>
 8008ac2:	2104      	movs	r1, #4
 8008ac4:	0038      	movs	r0, r7
 8008ac6:	f7ff ff57 	bl	8008978 <__sfmoreglue>
 8008aca:	1e04      	subs	r4, r0, #0
 8008acc:	6030      	str	r0, [r6, #0]
 8008ace:	d1d5      	bne.n	8008a7c <__sfp+0x28>
 8008ad0:	f7ff ff70 	bl	80089b4 <__sfp_lock_release>
 8008ad4:	230c      	movs	r3, #12
 8008ad6:	603b      	str	r3, [r7, #0]
 8008ad8:	e7ef      	b.n	8008aba <__sfp+0x66>
 8008ada:	46c0      	nop			; (mov r8, r8)
 8008adc:	08008f38 	.word	0x08008f38
 8008ae0:	ffff0001 	.word	0xffff0001

08008ae4 <_fwalk_reent>:
 8008ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ae6:	0004      	movs	r4, r0
 8008ae8:	0006      	movs	r6, r0
 8008aea:	2700      	movs	r7, #0
 8008aec:	9101      	str	r1, [sp, #4]
 8008aee:	3448      	adds	r4, #72	; 0x48
 8008af0:	6863      	ldr	r3, [r4, #4]
 8008af2:	68a5      	ldr	r5, [r4, #8]
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	9b00      	ldr	r3, [sp, #0]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	d504      	bpl.n	8008b08 <_fwalk_reent+0x24>
 8008afe:	6824      	ldr	r4, [r4, #0]
 8008b00:	2c00      	cmp	r4, #0
 8008b02:	d1f5      	bne.n	8008af0 <_fwalk_reent+0xc>
 8008b04:	0038      	movs	r0, r7
 8008b06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b08:	89ab      	ldrh	r3, [r5, #12]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d908      	bls.n	8008b20 <_fwalk_reent+0x3c>
 8008b0e:	220e      	movs	r2, #14
 8008b10:	5eab      	ldrsh	r3, [r5, r2]
 8008b12:	3301      	adds	r3, #1
 8008b14:	d004      	beq.n	8008b20 <_fwalk_reent+0x3c>
 8008b16:	0029      	movs	r1, r5
 8008b18:	0030      	movs	r0, r6
 8008b1a:	9b01      	ldr	r3, [sp, #4]
 8008b1c:	4798      	blx	r3
 8008b1e:	4307      	orrs	r7, r0
 8008b20:	3568      	adds	r5, #104	; 0x68
 8008b22:	e7e8      	b.n	8008af6 <_fwalk_reent+0x12>

08008b24 <__retarget_lock_init_recursive>:
 8008b24:	4770      	bx	lr

08008b26 <__retarget_lock_acquire_recursive>:
 8008b26:	4770      	bx	lr

08008b28 <__retarget_lock_release_recursive>:
 8008b28:	4770      	bx	lr
	...

08008b2c <__swhatbuf_r>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	000e      	movs	r6, r1
 8008b30:	001d      	movs	r5, r3
 8008b32:	230e      	movs	r3, #14
 8008b34:	5ec9      	ldrsh	r1, [r1, r3]
 8008b36:	0014      	movs	r4, r2
 8008b38:	b096      	sub	sp, #88	; 0x58
 8008b3a:	2900      	cmp	r1, #0
 8008b3c:	da08      	bge.n	8008b50 <__swhatbuf_r+0x24>
 8008b3e:	220c      	movs	r2, #12
 8008b40:	5eb3      	ldrsh	r3, [r6, r2]
 8008b42:	2200      	movs	r2, #0
 8008b44:	602a      	str	r2, [r5, #0]
 8008b46:	061b      	lsls	r3, r3, #24
 8008b48:	d411      	bmi.n	8008b6e <__swhatbuf_r+0x42>
 8008b4a:	2380      	movs	r3, #128	; 0x80
 8008b4c:	00db      	lsls	r3, r3, #3
 8008b4e:	e00f      	b.n	8008b70 <__swhatbuf_r+0x44>
 8008b50:	466a      	mov	r2, sp
 8008b52:	f000 f91b 	bl	8008d8c <_fstat_r>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	dbf1      	blt.n	8008b3e <__swhatbuf_r+0x12>
 8008b5a:	23f0      	movs	r3, #240	; 0xf0
 8008b5c:	9901      	ldr	r1, [sp, #4]
 8008b5e:	021b      	lsls	r3, r3, #8
 8008b60:	4019      	ands	r1, r3
 8008b62:	4b05      	ldr	r3, [pc, #20]	; (8008b78 <__swhatbuf_r+0x4c>)
 8008b64:	18c9      	adds	r1, r1, r3
 8008b66:	424b      	negs	r3, r1
 8008b68:	4159      	adcs	r1, r3
 8008b6a:	6029      	str	r1, [r5, #0]
 8008b6c:	e7ed      	b.n	8008b4a <__swhatbuf_r+0x1e>
 8008b6e:	2340      	movs	r3, #64	; 0x40
 8008b70:	2000      	movs	r0, #0
 8008b72:	6023      	str	r3, [r4, #0]
 8008b74:	b016      	add	sp, #88	; 0x58
 8008b76:	bd70      	pop	{r4, r5, r6, pc}
 8008b78:	ffffe000 	.word	0xffffe000

08008b7c <__smakebuf_r>:
 8008b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b7e:	2602      	movs	r6, #2
 8008b80:	898b      	ldrh	r3, [r1, #12]
 8008b82:	0005      	movs	r5, r0
 8008b84:	000c      	movs	r4, r1
 8008b86:	4233      	tst	r3, r6
 8008b88:	d006      	beq.n	8008b98 <__smakebuf_r+0x1c>
 8008b8a:	0023      	movs	r3, r4
 8008b8c:	3347      	adds	r3, #71	; 0x47
 8008b8e:	6023      	str	r3, [r4, #0]
 8008b90:	6123      	str	r3, [r4, #16]
 8008b92:	2301      	movs	r3, #1
 8008b94:	6163      	str	r3, [r4, #20]
 8008b96:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008b98:	466a      	mov	r2, sp
 8008b9a:	ab01      	add	r3, sp, #4
 8008b9c:	f7ff ffc6 	bl	8008b2c <__swhatbuf_r>
 8008ba0:	9900      	ldr	r1, [sp, #0]
 8008ba2:	0007      	movs	r7, r0
 8008ba4:	0028      	movs	r0, r5
 8008ba6:	f7ff f92d 	bl	8007e04 <_malloc_r>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d108      	bne.n	8008bc0 <__smakebuf_r+0x44>
 8008bae:	220c      	movs	r2, #12
 8008bb0:	5ea3      	ldrsh	r3, [r4, r2]
 8008bb2:	059a      	lsls	r2, r3, #22
 8008bb4:	d4ef      	bmi.n	8008b96 <__smakebuf_r+0x1a>
 8008bb6:	2203      	movs	r2, #3
 8008bb8:	4393      	bics	r3, r2
 8008bba:	431e      	orrs	r6, r3
 8008bbc:	81a6      	strh	r6, [r4, #12]
 8008bbe:	e7e4      	b.n	8008b8a <__smakebuf_r+0xe>
 8008bc0:	4b0f      	ldr	r3, [pc, #60]	; (8008c00 <__smakebuf_r+0x84>)
 8008bc2:	62ab      	str	r3, [r5, #40]	; 0x28
 8008bc4:	2380      	movs	r3, #128	; 0x80
 8008bc6:	89a2      	ldrh	r2, [r4, #12]
 8008bc8:	6020      	str	r0, [r4, #0]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	81a3      	strh	r3, [r4, #12]
 8008bce:	9b00      	ldr	r3, [sp, #0]
 8008bd0:	6120      	str	r0, [r4, #16]
 8008bd2:	6163      	str	r3, [r4, #20]
 8008bd4:	9b01      	ldr	r3, [sp, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00d      	beq.n	8008bf6 <__smakebuf_r+0x7a>
 8008bda:	0028      	movs	r0, r5
 8008bdc:	230e      	movs	r3, #14
 8008bde:	5ee1      	ldrsh	r1, [r4, r3]
 8008be0:	f000 f8e6 	bl	8008db0 <_isatty_r>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d006      	beq.n	8008bf6 <__smakebuf_r+0x7a>
 8008be8:	2203      	movs	r2, #3
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	4393      	bics	r3, r2
 8008bee:	001a      	movs	r2, r3
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	81a3      	strh	r3, [r4, #12]
 8008bf6:	89a0      	ldrh	r0, [r4, #12]
 8008bf8:	4307      	orrs	r7, r0
 8008bfa:	81a7      	strh	r7, [r4, #12]
 8008bfc:	e7cb      	b.n	8008b96 <__smakebuf_r+0x1a>
 8008bfe:	46c0      	nop			; (mov r8, r8)
 8008c00:	08008969 	.word	0x08008969

08008c04 <_malloc_usable_size_r>:
 8008c04:	1f0b      	subs	r3, r1, #4
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	1f18      	subs	r0, r3, #4
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	da01      	bge.n	8008c12 <_malloc_usable_size_r+0xe>
 8008c0e:	580b      	ldr	r3, [r1, r0]
 8008c10:	18c0      	adds	r0, r0, r3
 8008c12:	4770      	bx	lr

08008c14 <_raise_r>:
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	0004      	movs	r4, r0
 8008c18:	000d      	movs	r5, r1
 8008c1a:	291f      	cmp	r1, #31
 8008c1c:	d904      	bls.n	8008c28 <_raise_r+0x14>
 8008c1e:	2316      	movs	r3, #22
 8008c20:	6003      	str	r3, [r0, #0]
 8008c22:	2001      	movs	r0, #1
 8008c24:	4240      	negs	r0, r0
 8008c26:	bd70      	pop	{r4, r5, r6, pc}
 8008c28:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d004      	beq.n	8008c38 <_raise_r+0x24>
 8008c2e:	008a      	lsls	r2, r1, #2
 8008c30:	189b      	adds	r3, r3, r2
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	2a00      	cmp	r2, #0
 8008c36:	d108      	bne.n	8008c4a <_raise_r+0x36>
 8008c38:	0020      	movs	r0, r4
 8008c3a:	f000 f831 	bl	8008ca0 <_getpid_r>
 8008c3e:	002a      	movs	r2, r5
 8008c40:	0001      	movs	r1, r0
 8008c42:	0020      	movs	r0, r4
 8008c44:	f000 f81a 	bl	8008c7c <_kill_r>
 8008c48:	e7ed      	b.n	8008c26 <_raise_r+0x12>
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	2a01      	cmp	r2, #1
 8008c4e:	d0ea      	beq.n	8008c26 <_raise_r+0x12>
 8008c50:	1c51      	adds	r1, r2, #1
 8008c52:	d103      	bne.n	8008c5c <_raise_r+0x48>
 8008c54:	2316      	movs	r3, #22
 8008c56:	3001      	adds	r0, #1
 8008c58:	6023      	str	r3, [r4, #0]
 8008c5a:	e7e4      	b.n	8008c26 <_raise_r+0x12>
 8008c5c:	2400      	movs	r4, #0
 8008c5e:	0028      	movs	r0, r5
 8008c60:	601c      	str	r4, [r3, #0]
 8008c62:	4790      	blx	r2
 8008c64:	0020      	movs	r0, r4
 8008c66:	e7de      	b.n	8008c26 <_raise_r+0x12>

08008c68 <raise>:
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	4b03      	ldr	r3, [pc, #12]	; (8008c78 <raise+0x10>)
 8008c6c:	0001      	movs	r1, r0
 8008c6e:	6818      	ldr	r0, [r3, #0]
 8008c70:	f7ff ffd0 	bl	8008c14 <_raise_r>
 8008c74:	bd10      	pop	{r4, pc}
 8008c76:	46c0      	nop			; (mov r8, r8)
 8008c78:	2000000c 	.word	0x2000000c

08008c7c <_kill_r>:
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	b570      	push	{r4, r5, r6, lr}
 8008c80:	4d06      	ldr	r5, [pc, #24]	; (8008c9c <_kill_r+0x20>)
 8008c82:	0004      	movs	r4, r0
 8008c84:	0008      	movs	r0, r1
 8008c86:	0011      	movs	r1, r2
 8008c88:	602b      	str	r3, [r5, #0]
 8008c8a:	f7f9 ff1f 	bl	8002acc <_kill>
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	d103      	bne.n	8008c9a <_kill_r+0x1e>
 8008c92:	682b      	ldr	r3, [r5, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d000      	beq.n	8008c9a <_kill_r+0x1e>
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}
 8008c9c:	200003c4 	.word	0x200003c4

08008ca0 <_getpid_r>:
 8008ca0:	b510      	push	{r4, lr}
 8008ca2:	f7f9 ff0d 	bl	8002ac0 <_getpid>
 8008ca6:	bd10      	pop	{r4, pc}

08008ca8 <__sread>:
 8008ca8:	b570      	push	{r4, r5, r6, lr}
 8008caa:	000c      	movs	r4, r1
 8008cac:	250e      	movs	r5, #14
 8008cae:	5f49      	ldrsh	r1, [r1, r5]
 8008cb0:	f000 f8a4 	bl	8008dfc <_read_r>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	db03      	blt.n	8008cc0 <__sread+0x18>
 8008cb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008cba:	181b      	adds	r3, r3, r0
 8008cbc:	6563      	str	r3, [r4, #84]	; 0x54
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	4a02      	ldr	r2, [pc, #8]	; (8008ccc <__sread+0x24>)
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	81a3      	strh	r3, [r4, #12]
 8008cc8:	e7f9      	b.n	8008cbe <__sread+0x16>
 8008cca:	46c0      	nop			; (mov r8, r8)
 8008ccc:	ffffefff 	.word	0xffffefff

08008cd0 <__swrite>:
 8008cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd2:	001f      	movs	r7, r3
 8008cd4:	898b      	ldrh	r3, [r1, #12]
 8008cd6:	0005      	movs	r5, r0
 8008cd8:	000c      	movs	r4, r1
 8008cda:	0016      	movs	r6, r2
 8008cdc:	05db      	lsls	r3, r3, #23
 8008cde:	d505      	bpl.n	8008cec <__swrite+0x1c>
 8008ce0:	230e      	movs	r3, #14
 8008ce2:	5ec9      	ldrsh	r1, [r1, r3]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	f000 f874 	bl	8008dd4 <_lseek_r>
 8008cec:	89a3      	ldrh	r3, [r4, #12]
 8008cee:	4a05      	ldr	r2, [pc, #20]	; (8008d04 <__swrite+0x34>)
 8008cf0:	0028      	movs	r0, r5
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	0032      	movs	r2, r6
 8008cf8:	230e      	movs	r3, #14
 8008cfa:	5ee1      	ldrsh	r1, [r4, r3]
 8008cfc:	003b      	movs	r3, r7
 8008cfe:	f000 f81f 	bl	8008d40 <_write_r>
 8008d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d04:	ffffefff 	.word	0xffffefff

08008d08 <__sseek>:
 8008d08:	b570      	push	{r4, r5, r6, lr}
 8008d0a:	000c      	movs	r4, r1
 8008d0c:	250e      	movs	r5, #14
 8008d0e:	5f49      	ldrsh	r1, [r1, r5]
 8008d10:	f000 f860 	bl	8008dd4 <_lseek_r>
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	1c42      	adds	r2, r0, #1
 8008d18:	d103      	bne.n	8008d22 <__sseek+0x1a>
 8008d1a:	4a05      	ldr	r2, [pc, #20]	; (8008d30 <__sseek+0x28>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	81a3      	strh	r3, [r4, #12]
 8008d20:	bd70      	pop	{r4, r5, r6, pc}
 8008d22:	2280      	movs	r2, #128	; 0x80
 8008d24:	0152      	lsls	r2, r2, #5
 8008d26:	4313      	orrs	r3, r2
 8008d28:	81a3      	strh	r3, [r4, #12]
 8008d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8008d2c:	e7f8      	b.n	8008d20 <__sseek+0x18>
 8008d2e:	46c0      	nop			; (mov r8, r8)
 8008d30:	ffffefff 	.word	0xffffefff

08008d34 <__sclose>:
 8008d34:	b510      	push	{r4, lr}
 8008d36:	230e      	movs	r3, #14
 8008d38:	5ec9      	ldrsh	r1, [r1, r3]
 8008d3a:	f000 f815 	bl	8008d68 <_close_r>
 8008d3e:	bd10      	pop	{r4, pc}

08008d40 <_write_r>:
 8008d40:	b570      	push	{r4, r5, r6, lr}
 8008d42:	0004      	movs	r4, r0
 8008d44:	0008      	movs	r0, r1
 8008d46:	0011      	movs	r1, r2
 8008d48:	001a      	movs	r2, r3
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	4d05      	ldr	r5, [pc, #20]	; (8008d64 <_write_r+0x24>)
 8008d4e:	602b      	str	r3, [r5, #0]
 8008d50:	f7f9 fef5 	bl	8002b3e <_write>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d103      	bne.n	8008d60 <_write_r+0x20>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d000      	beq.n	8008d60 <_write_r+0x20>
 8008d5e:	6023      	str	r3, [r4, #0]
 8008d60:	bd70      	pop	{r4, r5, r6, pc}
 8008d62:	46c0      	nop			; (mov r8, r8)
 8008d64:	200003c4 	.word	0x200003c4

08008d68 <_close_r>:
 8008d68:	2300      	movs	r3, #0
 8008d6a:	b570      	push	{r4, r5, r6, lr}
 8008d6c:	4d06      	ldr	r5, [pc, #24]	; (8008d88 <_close_r+0x20>)
 8008d6e:	0004      	movs	r4, r0
 8008d70:	0008      	movs	r0, r1
 8008d72:	602b      	str	r3, [r5, #0]
 8008d74:	f7f9 feff 	bl	8002b76 <_close>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d103      	bne.n	8008d84 <_close_r+0x1c>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d000      	beq.n	8008d84 <_close_r+0x1c>
 8008d82:	6023      	str	r3, [r4, #0]
 8008d84:	bd70      	pop	{r4, r5, r6, pc}
 8008d86:	46c0      	nop			; (mov r8, r8)
 8008d88:	200003c4 	.word	0x200003c4

08008d8c <_fstat_r>:
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	b570      	push	{r4, r5, r6, lr}
 8008d90:	4d06      	ldr	r5, [pc, #24]	; (8008dac <_fstat_r+0x20>)
 8008d92:	0004      	movs	r4, r0
 8008d94:	0008      	movs	r0, r1
 8008d96:	0011      	movs	r1, r2
 8008d98:	602b      	str	r3, [r5, #0]
 8008d9a:	f7f9 fef6 	bl	8002b8a <_fstat>
 8008d9e:	1c43      	adds	r3, r0, #1
 8008da0:	d103      	bne.n	8008daa <_fstat_r+0x1e>
 8008da2:	682b      	ldr	r3, [r5, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d000      	beq.n	8008daa <_fstat_r+0x1e>
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	bd70      	pop	{r4, r5, r6, pc}
 8008dac:	200003c4 	.word	0x200003c4

08008db0 <_isatty_r>:
 8008db0:	2300      	movs	r3, #0
 8008db2:	b570      	push	{r4, r5, r6, lr}
 8008db4:	4d06      	ldr	r5, [pc, #24]	; (8008dd0 <_isatty_r+0x20>)
 8008db6:	0004      	movs	r4, r0
 8008db8:	0008      	movs	r0, r1
 8008dba:	602b      	str	r3, [r5, #0]
 8008dbc:	f7f9 fef3 	bl	8002ba6 <_isatty>
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	d103      	bne.n	8008dcc <_isatty_r+0x1c>
 8008dc4:	682b      	ldr	r3, [r5, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d000      	beq.n	8008dcc <_isatty_r+0x1c>
 8008dca:	6023      	str	r3, [r4, #0]
 8008dcc:	bd70      	pop	{r4, r5, r6, pc}
 8008dce:	46c0      	nop			; (mov r8, r8)
 8008dd0:	200003c4 	.word	0x200003c4

08008dd4 <_lseek_r>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	0004      	movs	r4, r0
 8008dd8:	0008      	movs	r0, r1
 8008dda:	0011      	movs	r1, r2
 8008ddc:	001a      	movs	r2, r3
 8008dde:	2300      	movs	r3, #0
 8008de0:	4d05      	ldr	r5, [pc, #20]	; (8008df8 <_lseek_r+0x24>)
 8008de2:	602b      	str	r3, [r5, #0]
 8008de4:	f7f9 fee8 	bl	8002bb8 <_lseek>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d103      	bne.n	8008df4 <_lseek_r+0x20>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d000      	beq.n	8008df4 <_lseek_r+0x20>
 8008df2:	6023      	str	r3, [r4, #0]
 8008df4:	bd70      	pop	{r4, r5, r6, pc}
 8008df6:	46c0      	nop			; (mov r8, r8)
 8008df8:	200003c4 	.word	0x200003c4

08008dfc <_read_r>:
 8008dfc:	b570      	push	{r4, r5, r6, lr}
 8008dfe:	0004      	movs	r4, r0
 8008e00:	0008      	movs	r0, r1
 8008e02:	0011      	movs	r1, r2
 8008e04:	001a      	movs	r2, r3
 8008e06:	2300      	movs	r3, #0
 8008e08:	4d05      	ldr	r5, [pc, #20]	; (8008e20 <_read_r+0x24>)
 8008e0a:	602b      	str	r3, [r5, #0]
 8008e0c:	f7f9 fe7a 	bl	8002b04 <_read>
 8008e10:	1c43      	adds	r3, r0, #1
 8008e12:	d103      	bne.n	8008e1c <_read_r+0x20>
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d000      	beq.n	8008e1c <_read_r+0x20>
 8008e1a:	6023      	str	r3, [r4, #0]
 8008e1c:	bd70      	pop	{r4, r5, r6, pc}
 8008e1e:	46c0      	nop			; (mov r8, r8)
 8008e20:	200003c4 	.word	0x200003c4

08008e24 <_init>:
 8008e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e26:	46c0      	nop			; (mov r8, r8)
 8008e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2a:	bc08      	pop	{r3}
 8008e2c:	469e      	mov	lr, r3
 8008e2e:	4770      	bx	lr

08008e30 <_fini>:
 8008e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e32:	46c0      	nop			; (mov r8, r8)
 8008e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e36:	bc08      	pop	{r3}
 8008e38:	469e      	mov	lr, r3
 8008e3a:	4770      	bx	lr
