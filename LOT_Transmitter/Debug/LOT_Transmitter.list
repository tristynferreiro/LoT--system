
LOT_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003068  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003128  08003128  00013128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b4  080031b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080031b4  080031b4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031b4  080031b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031b8  080031b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080031bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  0800322c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  0800322c  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000862d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001479  00000000  00000000  000286c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  00029b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002a210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001122d  00000000  00000000  0002a858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d4d  00000000  00000000  0003ba85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006958c  00000000  00000000  000447d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000add5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ae8  00000000  00000000  000addb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003110 	.word	0x08003110

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003110 	.word	0x08003110

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fad0 	bl	80007dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f83a 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f90a 	bl	8000458 <MX_GPIO_Init>
  MX_ADC_Init();
 8000244:	f000 f87c 	bl	8000340 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8000248:	f000 f8d6 	bl	80003f8 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_ADC_Start(&hadc);
 800024c:	4b12      	ldr	r3, [pc, #72]	; (8000298 <main+0x64>)
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fc68 	bl	8000b24 <HAL_ADC_Start>
	  //if (mode ==1) {
		  sprintf(buffer, "\r\nADC: %ld\r\n", reading); // format the message
 8000254:	4b11      	ldr	r3, [pc, #68]	; (800029c <main+0x68>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	4911      	ldr	r1, [pc, #68]	; (80002a0 <main+0x6c>)
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <main+0x70>)
 800025c:	0018      	movs	r0, r3
 800025e:	f002 faed 	bl	800283c <siprintf>
		  HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000); // Send ADC over UART
 8000262:	23fa      	movs	r3, #250	; 0xfa
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	490f      	ldr	r1, [pc, #60]	; (80002a4 <main+0x70>)
 8000268:	480f      	ldr	r0, [pc, #60]	; (80002a8 <main+0x74>)
 800026a:	2214      	movs	r2, #20
 800026c:	f001 ff0a 	bl	8002084 <HAL_UART_Transmit>
		  sprintf(buffer, "\r\nmode: %ld\r\n", mode); // format the message
 8000270:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <main+0x78>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	490e      	ldr	r1, [pc, #56]	; (80002b0 <main+0x7c>)
 8000276:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <main+0x70>)
 8000278:	0018      	movs	r0, r3
 800027a:	f002 fadf 	bl	800283c <siprintf>
		  HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000); // Send ADC over UART
 800027e:	23fa      	movs	r3, #250	; 0xfa
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	4908      	ldr	r1, [pc, #32]	; (80002a4 <main+0x70>)
 8000284:	4808      	ldr	r0, [pc, #32]	; (80002a8 <main+0x74>)
 8000286:	2214      	movs	r2, #20
 8000288:	f001 fefc 	bl	8002084 <HAL_UART_Transmit>

	  //}
	HAL_ADC_Stop(&hadc);
 800028c:	4b02      	ldr	r3, [pc, #8]	; (8000298 <main+0x64>)
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fc9c 	bl	8000bcc <HAL_ADC_Stop>
  {
 8000294:	e7da      	b.n	800024c <main+0x18>
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	2000008c 	.word	0x2000008c
 800029c:	20000154 	.word	0x20000154
 80002a0:	08003128 	.word	0x08003128
 80002a4:	20000158 	.word	0x20000158
 80002a8:	200000cc 	.word	0x200000cc
 80002ac:	20000150 	.word	0x20000150
 80002b0:	08003138 	.word	0x08003138

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b590      	push	{r4, r7, lr}
 80002b6:	b091      	sub	sp, #68	; 0x44
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	2410      	movs	r4, #16
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	0018      	movs	r0, r3
 80002c0:	2330      	movs	r3, #48	; 0x30
 80002c2:	001a      	movs	r2, r3
 80002c4:	2100      	movs	r1, #0
 80002c6:	f002 fab1 	bl	800282c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ca:	003b      	movs	r3, r7
 80002cc:	0018      	movs	r0, r3
 80002ce:	2310      	movs	r3, #16
 80002d0:	001a      	movs	r2, r3
 80002d2:	2100      	movs	r1, #0
 80002d4:	f002 faaa 	bl	800282c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002d8:	0021      	movs	r1, r4
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2212      	movs	r2, #18
 80002de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2201      	movs	r2, #1
 80002e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2201      	movs	r2, #1
 80002ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2210      	movs	r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2210      	movs	r2, #16
 80002f6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2200      	movs	r2, #0
 80002fc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	0018      	movs	r0, r3
 8000302:	f001 f9ff 	bl	8001704 <HAL_RCC_OscConfig>
 8000306:	1e03      	subs	r3, r0, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800030a:	f000 f92d 	bl	8000568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	003b      	movs	r3, r7
 8000310:	2207      	movs	r2, #7
 8000312:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000314:	003b      	movs	r3, r7
 8000316:	2200      	movs	r2, #0
 8000318:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031a:	003b      	movs	r3, r7
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000320:	003b      	movs	r3, r7
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000326:	003b      	movs	r3, r7
 8000328:	2100      	movs	r1, #0
 800032a:	0018      	movs	r0, r3
 800032c:	f001 fd04 	bl	8001d38 <HAL_RCC_ClockConfig>
 8000330:	1e03      	subs	r3, r0, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000334:	f000 f918 	bl	8000568 <Error_Handler>
  }
}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b011      	add	sp, #68	; 0x44
 800033e:	bd90      	pop	{r4, r7, pc}

08000340 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	0018      	movs	r0, r3
 800034a:	230c      	movs	r3, #12
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f002 fa6c 	bl	800282c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000354:	4b26      	ldr	r3, [pc, #152]	; (80003f0 <MX_ADC_Init+0xb0>)
 8000356:	4a27      	ldr	r2, [pc, #156]	; (80003f4 <MX_ADC_Init+0xb4>)
 8000358:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800035a:	4b25      	ldr	r3, [pc, #148]	; (80003f0 <MX_ADC_Init+0xb0>)
 800035c:	2200      	movs	r2, #0
 800035e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000360:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <MX_ADC_Init+0xb0>)
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000366:	4b22      	ldr	r3, [pc, #136]	; (80003f0 <MX_ADC_Init+0xb0>)
 8000368:	2200      	movs	r2, #0
 800036a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800036c:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <MX_ADC_Init+0xb0>)
 800036e:	2201      	movs	r2, #1
 8000370:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000372:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <MX_ADC_Init+0xb0>)
 8000374:	2204      	movs	r2, #4
 8000376:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000378:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <MX_ADC_Init+0xb0>)
 800037a:	2200      	movs	r2, #0
 800037c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800037e:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <MX_ADC_Init+0xb0>)
 8000380:	2200      	movs	r2, #0
 8000382:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000384:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <MX_ADC_Init+0xb0>)
 8000386:	2200      	movs	r2, #0
 8000388:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800038a:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <MX_ADC_Init+0xb0>)
 800038c:	2200      	movs	r2, #0
 800038e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000390:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <MX_ADC_Init+0xb0>)
 8000392:	22c2      	movs	r2, #194	; 0xc2
 8000394:	32ff      	adds	r2, #255	; 0xff
 8000396:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000398:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <MX_ADC_Init+0xb0>)
 800039a:	2200      	movs	r2, #0
 800039c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800039e:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <MX_ADC_Init+0xb0>)
 80003a0:	2224      	movs	r2, #36	; 0x24
 80003a2:	2100      	movs	r1, #0
 80003a4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003a6:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <MX_ADC_Init+0xb0>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003ac:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <MX_ADC_Init+0xb0>)
 80003ae:	0018      	movs	r0, r3
 80003b0:	f000 fa78 	bl	80008a4 <HAL_ADC_Init>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d001      	beq.n	80003bc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003b8:	f000 f8d6 	bl	8000568 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2207      	movs	r2, #7
 80003c0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	0152      	lsls	r2, r2, #5
 80003c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2280      	movs	r2, #128	; 0x80
 80003ce:	0552      	lsls	r2, r2, #21
 80003d0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003d2:	1d3a      	adds	r2, r7, #4
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_ADC_Init+0xb0>)
 80003d6:	0011      	movs	r1, r2
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 fcdb 	bl	8000d94 <HAL_ADC_ConfigChannel>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003e2:	f000 f8c1 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b004      	add	sp, #16
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	2000008c 	.word	0x2000008c
 80003f4:	40012400 	.word	0x40012400

080003f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <MX_USART2_UART_Init+0x58>)
 80003fe:	4a15      	ldr	r2, [pc, #84]	; (8000454 <MX_USART2_UART_Init+0x5c>)
 8000400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000402:	4b13      	ldr	r3, [pc, #76]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000404:	2296      	movs	r2, #150	; 0x96
 8000406:	0192      	lsls	r2, r2, #6
 8000408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <MX_USART2_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_USART2_UART_Init+0x58>)
 800041e:	220c      	movs	r2, #12
 8000420:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_USART2_UART_Init+0x58>)
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000430:	2200      	movs	r2, #0
 8000432:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <MX_USART2_UART_Init+0x58>)
 8000436:	2200      	movs	r2, #0
 8000438:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <MX_USART2_UART_Init+0x58>)
 800043c:	0018      	movs	r0, r3
 800043e:	f001 fdcd 	bl	8001fdc <HAL_UART_Init>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000446:	f000 f88f 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	200000cc 	.word	0x200000cc
 8000454:	40004400 	.word	0x40004400

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	0018      	movs	r0, r3
 8000462:	2314      	movs	r3, #20
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f002 f9e0 	bl	800282c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <MX_GPIO_Init+0x90>)
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	4b1d      	ldr	r3, [pc, #116]	; (80004e8 <MX_GPIO_Init+0x90>)
 8000472:	2180      	movs	r1, #128	; 0x80
 8000474:	0289      	lsls	r1, r1, #10
 8000476:	430a      	orrs	r2, r1
 8000478:	615a      	str	r2, [r3, #20]
 800047a:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <MX_GPIO_Init+0x90>)
 800047c:	695a      	ldr	r2, [r3, #20]
 800047e:	2380      	movs	r3, #128	; 0x80
 8000480:	029b      	lsls	r3, r3, #10
 8000482:	4013      	ands	r3, r2
 8000484:	603b      	str	r3, [r7, #0]
 8000486:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000488:	2390      	movs	r3, #144	; 0x90
 800048a:	05db      	lsls	r3, r3, #23
 800048c:	2200      	movs	r2, #0
 800048e:	2102      	movs	r1, #2
 8000490:	0018      	movs	r0, r3
 8000492:	f001 f8f3 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2201      	movs	r2, #1
 800049a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2288      	movs	r2, #136	; 0x88
 80004a0:	0352      	lsls	r2, r2, #13
 80004a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004aa:	1d3a      	adds	r2, r7, #4
 80004ac:	2390      	movs	r3, #144	; 0x90
 80004ae:	05db      	lsls	r3, r3, #23
 80004b0:	0011      	movs	r1, r2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 ff72 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2202      	movs	r2, #2
 80004bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2201      	movs	r2, #1
 80004c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	1d3a      	adds	r2, r7, #4
 80004d2:	2390      	movs	r3, #144	; 0x90
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	0011      	movs	r1, r2
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 ff5f 	bl	800139c <HAL_GPIO_Init>

}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b006      	add	sp, #24
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	40021000 	.word	0x40021000

080004ec <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI0_1_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
	//TASK 1
	/* Switch between delay frequencies 1 and 2 Hz */

	// Correct debouncing:
	uint32_t current = HAL_GetTick();
 80004f2:	f000 f9cd 	bl	8000890 <HAL_GetTick>
 80004f6:	0003      	movs	r3, r0
 80004f8:	603b      	str	r3, [r7, #0]
	for (int i = current; i < (current + 10); i++); //delay by 10 ticks
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	e002      	b.n	8000506 <EXTI0_1_IRQHandler+0x1a>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3301      	adds	r3, #1
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	330a      	adds	r3, #10
 800050a:	001a      	movs	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	429a      	cmp	r2, r3
 8000510:	d8f6      	bhi.n	8000500 <EXTI0_1_IRQHandler+0x14>

	//if blue push button pressed, read once from ADC
	reading = pollADC(); //get ADC value (this reads from the pot)
 8000512:	f000 f811 	bl	8000538 <pollADC>
 8000516:	0002      	movs	r2, r0
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <EXTI0_1_IRQHandler+0x44>)
 800051a:	601a      	str	r2, [r3, #0]
	mode = 1;
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <EXTI0_1_IRQHandler+0x48>)
 800051e:	2201      	movs	r2, #1
 8000520:	601a      	str	r2, [r3, #0]
	HAL_GPIO_EXTI_IRQHandler(B1_Pin); // Clear interrupt flags
 8000522:	2001      	movs	r0, #1
 8000524:	f001 f8c8 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000154 	.word	0x20000154
 8000534:	20000150 	.word	0x20000150

08000538 <pollADC>:

uint32_t pollADC(void){
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc, 500);
 800053e:	23fa      	movs	r3, #250	; 0xfa
 8000540:	005a      	lsls	r2, r3, #1
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <pollADC+0x2c>)
 8000544:	0011      	movs	r1, r2
 8000546:	0018      	movs	r0, r3
 8000548:	f000 fb80 	bl	8000c4c <HAL_ADC_PollForConversion>
	uint32_t val = HAL_ADC_GetValue(&hadc); // get digital value
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <pollADC+0x2c>)
 800054e:	0018      	movs	r0, r3
 8000550:	f000 fc14 	bl	8000d7c <HAL_ADC_GetValue>
 8000554:	0003      	movs	r3, r0
 8000556:	607b      	str	r3, [r7, #4]
	return val;
 8000558:	687b      	ldr	r3, [r7, #4]
}
 800055a:	0018      	movs	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	2000008c 	.word	0x2000008c

08000568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056c:	b672      	cpsid	i
}
 800056e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000570:	e7fe      	b.n	8000570 <Error_Handler+0x8>
	...

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <HAL_MspInit+0x44>)
 800057c:	699a      	ldr	r2, [r3, #24]
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <HAL_MspInit+0x44>)
 8000580:	2101      	movs	r1, #1
 8000582:	430a      	orrs	r2, r1
 8000584:	619a      	str	r2, [r3, #24]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_MspInit+0x44>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	2201      	movs	r2, #1
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_MspInit+0x44>)
 8000594:	69da      	ldr	r2, [r3, #28]
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <HAL_MspInit+0x44>)
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	0549      	lsls	r1, r1, #21
 800059c:	430a      	orrs	r2, r1
 800059e:	61da      	str	r2, [r3, #28]
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <HAL_MspInit+0x44>)
 80005a2:	69da      	ldr	r2, [r3, #28]
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	055b      	lsls	r3, r3, #21
 80005a8:	4013      	ands	r3, r2
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b08b      	sub	sp, #44	; 0x2c
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	2414      	movs	r4, #20
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	0018      	movs	r0, r3
 80005ca:	2314      	movs	r3, #20
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f002 f92c 	bl	800282c <memset>
  if(hadc->Instance==ADC1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a19      	ldr	r2, [pc, #100]	; (8000640 <HAL_ADC_MspInit+0x84>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d12b      	bne.n	8000636 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <HAL_ADC_MspInit+0x88>)
 80005e0:	699a      	ldr	r2, [r3, #24]
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <HAL_ADC_MspInit+0x88>)
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	0089      	lsls	r1, r1, #2
 80005e8:	430a      	orrs	r2, r1
 80005ea:	619a      	str	r2, [r3, #24]
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_ADC_MspInit+0x88>)
 80005ee:	699a      	ldr	r2, [r3, #24]
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	4013      	ands	r3, r2
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_ADC_MspInit+0x88>)
 80005fc:	695a      	ldr	r2, [r3, #20]
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_ADC_MspInit+0x88>)
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	0289      	lsls	r1, r1, #10
 8000604:	430a      	orrs	r2, r1
 8000606:	615a      	str	r2, [r3, #20]
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <HAL_ADC_MspInit+0x88>)
 800060a:	695a      	ldr	r2, [r3, #20]
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	029b      	lsls	r3, r3, #10
 8000610:	4013      	ands	r3, r2
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000616:	193b      	adds	r3, r7, r4
 8000618:	2280      	movs	r2, #128	; 0x80
 800061a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061c:	193b      	adds	r3, r7, r4
 800061e:	2203      	movs	r2, #3
 8000620:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	193b      	adds	r3, r7, r4
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	193a      	adds	r2, r7, r4
 800062a:	2390      	movs	r3, #144	; 0x90
 800062c:	05db      	lsls	r3, r3, #23
 800062e:	0011      	movs	r1, r2
 8000630:	0018      	movs	r0, r3
 8000632:	f000 feb3 	bl	800139c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b00b      	add	sp, #44	; 0x2c
 800063c:	bd90      	pop	{r4, r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	40012400 	.word	0x40012400
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b08b      	sub	sp, #44	; 0x2c
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	2414      	movs	r4, #20
 8000652:	193b      	adds	r3, r7, r4
 8000654:	0018      	movs	r0, r3
 8000656:	2314      	movs	r3, #20
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f002 f8e6 	bl	800282c <memset>
  if(huart->Instance==USART2)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <HAL_UART_MspInit+0x90>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d132      	bne.n	80006d0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <HAL_UART_MspInit+0x94>)
 800066c:	69da      	ldr	r2, [r3, #28]
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <HAL_UART_MspInit+0x94>)
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	0289      	lsls	r1, r1, #10
 8000674:	430a      	orrs	r2, r1
 8000676:	61da      	str	r2, [r3, #28]
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <HAL_UART_MspInit+0x94>)
 800067a:	69da      	ldr	r2, [r3, #28]
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	029b      	lsls	r3, r3, #10
 8000680:	4013      	ands	r3, r2
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_UART_MspInit+0x94>)
 8000688:	695a      	ldr	r2, [r3, #20]
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <HAL_UART_MspInit+0x94>)
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	0289      	lsls	r1, r1, #10
 8000690:	430a      	orrs	r2, r1
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <HAL_UART_MspInit+0x94>)
 8000696:	695a      	ldr	r2, [r3, #20]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	029b      	lsls	r3, r3, #10
 800069c:	4013      	ands	r3, r2
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006a2:	0021      	movs	r1, r4
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	220c      	movs	r2, #12
 80006a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2202      	movs	r2, #2
 80006ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2203      	movs	r2, #3
 80006ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2201      	movs	r2, #1
 80006c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	187a      	adds	r2, r7, r1
 80006c4:	2390      	movs	r3, #144	; 0x90
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	0011      	movs	r1, r2
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 fe66 	bl	800139c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b00b      	add	sp, #44	; 0x2c
 80006d6:	bd90      	pop	{r4, r7, pc}
 80006d8:	40004400 	.word	0x40004400
 80006dc:	40021000 	.word	0x40021000

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <NMI_Handler+0x4>

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f8b2 	bl	800086c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000718:	4a14      	ldr	r2, [pc, #80]	; (800076c <_sbrk+0x5c>)
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <_sbrk+0x60>)
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <_sbrk+0x64>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d102      	bne.n	8000732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <_sbrk+0x64>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <_sbrk+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <_sbrk+0x64>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	18d3      	adds	r3, r2, r3
 800073a:	693a      	ldr	r2, [r7, #16]
 800073c:	429a      	cmp	r2, r3
 800073e:	d207      	bcs.n	8000750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000740:	f002 f84a 	bl	80027d8 <__errno>
 8000744:	0003      	movs	r3, r0
 8000746:	220c      	movs	r2, #12
 8000748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800074a:	2301      	movs	r3, #1
 800074c:	425b      	negs	r3, r3
 800074e:	e009      	b.n	8000764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <_sbrk+0x64>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	18d2      	adds	r2, r2, r3
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <_sbrk+0x64>)
 8000760:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000762:	68fb      	ldr	r3, [r7, #12]
}
 8000764:	0018      	movs	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	b006      	add	sp, #24
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20002000 	.word	0x20002000
 8000770:	00000400 	.word	0x00000400
 8000774:	2000016c 	.word	0x2000016c
 8000778:	20000188 	.word	0x20000188

0800077c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800078a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800078e:	490e      	ldr	r1, [pc, #56]	; (80007c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <LoopForever+0xe>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000794:	e002      	b.n	800079c <LoopCopyDataInit>

08000796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079a:	3304      	adds	r3, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a0:	d3f9      	bcc.n	8000796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a4:	4c0b      	ldr	r4, [pc, #44]	; (80007d4 <LoopForever+0x16>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a8:	e001      	b.n	80007ae <LoopFillZerobss>

080007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ac:	3204      	adds	r2, #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b0:	d3fb      	bcc.n	80007aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007b2:	f7ff ffe3 	bl	800077c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007b6:	f002 f815 	bl	80027e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ba:	f7ff fd3b 	bl	8000234 <main>

080007be <LoopForever>:

LoopForever:
    b LoopForever
 80007be:	e7fe      	b.n	80007be <LoopForever>
  ldr   r0, =_estack
 80007c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007cc:	080031bc 	.word	0x080031bc
  ldr r2, =_sbss
 80007d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007d4:	20000184 	.word	0x20000184

080007d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC1_COMP_IRQHandler>
	...

080007dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <HAL_Init+0x24>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_Init+0x24>)
 80007e6:	2110      	movs	r1, #16
 80007e8:	430a      	orrs	r2, r1
 80007ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 f809 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f2:	f7ff febf 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40022000 	.word	0x40022000

08000804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_InitTick+0x5c>)
 800080e:	681c      	ldr	r4, [r3, #0]
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_InitTick+0x60>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	0019      	movs	r1, r3
 8000816:	23fa      	movs	r3, #250	; 0xfa
 8000818:	0098      	lsls	r0, r3, #2
 800081a:	f7ff fc7f 	bl	800011c <__udivsi3>
 800081e:	0003      	movs	r3, r0
 8000820:	0019      	movs	r1, r3
 8000822:	0020      	movs	r0, r4
 8000824:	f7ff fc7a 	bl	800011c <__udivsi3>
 8000828:	0003      	movs	r3, r0
 800082a:	0018      	movs	r0, r3
 800082c:	f000 fda9 	bl	8001382 <HAL_SYSTICK_Config>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000834:	2301      	movs	r3, #1
 8000836:	e00f      	b.n	8000858 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b03      	cmp	r3, #3
 800083c:	d80b      	bhi.n	8000856 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	2301      	movs	r3, #1
 8000842:	425b      	negs	r3, r3
 8000844:	2200      	movs	r2, #0
 8000846:	0018      	movs	r0, r3
 8000848:	f000 fd86 	bl	8001358 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_InitTick+0x64>)
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000852:	2300      	movs	r3, #0
 8000854:	e000      	b.n	8000858 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
}
 8000858:	0018      	movs	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	b003      	add	sp, #12
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	20000000 	.word	0x20000000
 8000864:	20000008 	.word	0x20000008
 8000868:	20000004 	.word	0x20000004

0800086c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x1c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	001a      	movs	r2, r3
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x20>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	18d2      	adds	r2, r2, r3
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <HAL_IncTick+0x20>)
 800087e:	601a      	str	r2, [r3, #0]
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	20000008 	.word	0x20000008
 800088c:	20000170 	.word	0x20000170

08000890 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <HAL_GetTick+0x10>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	0018      	movs	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	20000170 	.word	0x20000170

080008a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008ac:	230f      	movs	r3, #15
 80008ae:	18fb      	adds	r3, r7, r3
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d101      	bne.n	80008c2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e125      	b.n	8000b0e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d10a      	bne.n	80008e0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2234      	movs	r2, #52	; 0x34
 80008d4:	2100      	movs	r1, #0
 80008d6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff fe6e 	bl	80005bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008e4:	2210      	movs	r2, #16
 80008e6:	4013      	ands	r3, r2
 80008e8:	d000      	beq.n	80008ec <HAL_ADC_Init+0x48>
 80008ea:	e103      	b.n	8000af4 <HAL_ADC_Init+0x250>
 80008ec:	230f      	movs	r3, #15
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d000      	beq.n	80008f8 <HAL_ADC_Init+0x54>
 80008f6:	e0fd      	b.n	8000af4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	2204      	movs	r2, #4
 8000900:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000902:	d000      	beq.n	8000906 <HAL_ADC_Init+0x62>
 8000904:	e0f6      	b.n	8000af4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800090a:	4a83      	ldr	r2, [pc, #524]	; (8000b18 <HAL_ADC_Init+0x274>)
 800090c:	4013      	ands	r3, r2
 800090e:	2202      	movs	r2, #2
 8000910:	431a      	orrs	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	2203      	movs	r2, #3
 800091e:	4013      	ands	r3, r2
 8000920:	2b01      	cmp	r3, #1
 8000922:	d112      	bne.n	800094a <HAL_ADC_Init+0xa6>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2201      	movs	r2, #1
 800092c:	4013      	ands	r3, r2
 800092e:	2b01      	cmp	r3, #1
 8000930:	d009      	beq.n	8000946 <HAL_ADC_Init+0xa2>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	68da      	ldr	r2, [r3, #12]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	401a      	ands	r2, r3
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	021b      	lsls	r3, r3, #8
 8000942:	429a      	cmp	r2, r3
 8000944:	d101      	bne.n	800094a <HAL_ADC_Init+0xa6>
 8000946:	2301      	movs	r3, #1
 8000948:	e000      	b.n	800094c <HAL_ADC_Init+0xa8>
 800094a:	2300      	movs	r3, #0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d116      	bne.n	800097e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	2218      	movs	r2, #24
 8000958:	4393      	bics	r3, r2
 800095a:	0019      	movs	r1, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	430a      	orrs	r2, r1
 8000966:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	0899      	lsrs	r1, r3, #2
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	430a      	orrs	r2, r1
 800097c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4964      	ldr	r1, [pc, #400]	; (8000b1c <HAL_ADC_Init+0x278>)
 800098a:	400a      	ands	r2, r1
 800098c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	7e1b      	ldrb	r3, [r3, #24]
 8000992:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	7e5b      	ldrb	r3, [r3, #25]
 8000998:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800099a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7e9b      	ldrb	r3, [r3, #26]
 80009a0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80009a2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d002      	beq.n	80009b2 <HAL_ADC_Init+0x10e>
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	015b      	lsls	r3, r3, #5
 80009b0:	e000      	b.n	80009b4 <HAL_ADC_Init+0x110>
 80009b2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80009b4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80009ba:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d101      	bne.n	80009c8 <HAL_ADC_Init+0x124>
 80009c4:	2304      	movs	r3, #4
 80009c6:	e000      	b.n	80009ca <HAL_ADC_Init+0x126>
 80009c8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80009ca:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2124      	movs	r1, #36	; 0x24
 80009d0:	5c5b      	ldrb	r3, [r3, r1]
 80009d2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80009d4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	7edb      	ldrb	r3, [r3, #27]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d115      	bne.n	8000a10 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	7e9b      	ldrb	r3, [r3, #26]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d105      	bne.n	80009f8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	0252      	lsls	r2, r2, #9
 80009f2:	4313      	orrs	r3, r2
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	e00b      	b.n	8000a10 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009fc:	2220      	movs	r2, #32
 80009fe:	431a      	orrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a08:	2201      	movs	r2, #1
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	69da      	ldr	r2, [r3, #28]
 8000a14:	23c2      	movs	r3, #194	; 0xc2
 8000a16:	33ff      	adds	r3, #255	; 0xff
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d007      	beq.n	8000a2c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000a24:	4313      	orrs	r3, r2
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	68d9      	ldr	r1, [r3, #12]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	055b      	lsls	r3, r3, #21
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d01b      	beq.n	8000a80 <HAL_ADC_Init+0x1dc>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d017      	beq.n	8000a80 <HAL_ADC_Init+0x1dc>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d013      	beq.n	8000a80 <HAL_ADC_Init+0x1dc>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	d00f      	beq.n	8000a80 <HAL_ADC_Init+0x1dc>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d00b      	beq.n	8000a80 <HAL_ADC_Init+0x1dc>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6c:	2b05      	cmp	r3, #5
 8000a6e:	d007      	beq.n	8000a80 <HAL_ADC_Init+0x1dc>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a74:	2b06      	cmp	r3, #6
 8000a76:	d003      	beq.n	8000a80 <HAL_ADC_Init+0x1dc>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7c:	2b07      	cmp	r3, #7
 8000a7e:	d112      	bne.n	8000aa6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	695a      	ldr	r2, [r3, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2107      	movs	r1, #7
 8000a8c:	438a      	bics	r2, r1
 8000a8e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	6959      	ldr	r1, [r3, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9a:	2207      	movs	r2, #7
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <HAL_ADC_Init+0x27c>)
 8000aae:	4013      	ands	r3, r2
 8000ab0:	68ba      	ldr	r2, [r7, #8]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d10b      	bne.n	8000ace <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	4393      	bics	r3, r2
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000acc:	e01c      	b.n	8000b08 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ad2:	2212      	movs	r2, #18
 8000ad4:	4393      	bics	r3, r2
 8000ad6:	2210      	movs	r2, #16
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000aea:	230f      	movs	r3, #15
 8000aec:	18fb      	adds	r3, r7, r3
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000af2:	e009      	b.n	8000b08 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000af8:	2210      	movs	r2, #16
 8000afa:	431a      	orrs	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000b00:	230f      	movs	r3, #15
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b08:	230f      	movs	r3, #15
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	781b      	ldrb	r3, [r3, #0]
}
 8000b0e:	0018      	movs	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b004      	add	sp, #16
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	fffffefd 	.word	0xfffffefd
 8000b1c:	fffe0219 	.word	0xfffe0219
 8000b20:	833fffe7 	.word	0x833fffe7

08000b24 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	d138      	bne.n	8000bb2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2234      	movs	r2, #52	; 0x34
 8000b44:	5c9b      	ldrb	r3, [r3, r2]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d101      	bne.n	8000b4e <HAL_ADC_Start+0x2a>
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	e038      	b.n	8000bc0 <HAL_ADC_Start+0x9c>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2234      	movs	r2, #52	; 0x34
 8000b52:	2101      	movs	r1, #1
 8000b54:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	7e5b      	ldrb	r3, [r3, #25]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d007      	beq.n	8000b6e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000b5e:	230f      	movs	r3, #15
 8000b60:	18fc      	adds	r4, r7, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 fa23 	bl	8000fb0 <ADC_Enable>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000b6e:	230f      	movs	r3, #15
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d120      	bne.n	8000bba <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b7c:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <HAL_ADC_Start+0xa4>)
 8000b7e:	4013      	ands	r3, r2
 8000b80:	2280      	movs	r2, #128	; 0x80
 8000b82:	0052      	lsls	r2, r2, #1
 8000b84:	431a      	orrs	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2234      	movs	r2, #52	; 0x34
 8000b94:	2100      	movs	r1, #0
 8000b96:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	221c      	movs	r2, #28
 8000b9e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2104      	movs	r1, #4
 8000bac:	430a      	orrs	r2, r1
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	e003      	b.n	8000bba <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	18fb      	adds	r3, r7, r3
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bba:	230f      	movs	r3, #15
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	781b      	ldrb	r3, [r3, #0]
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b005      	add	sp, #20
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	fffff0fe 	.word	0xfffff0fe

08000bcc <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8000bcc:	b5b0      	push	{r4, r5, r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2234      	movs	r2, #52	; 0x34
 8000be0:	5c9b      	ldrb	r3, [r3, r2]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d101      	bne.n	8000bea <HAL_ADC_Stop+0x1e>
 8000be6:	2302      	movs	r3, #2
 8000be8:	e029      	b.n	8000c3e <HAL_ADC_Stop+0x72>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2234      	movs	r2, #52	; 0x34
 8000bee:	2101      	movs	r1, #1
 8000bf0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000bf2:	250f      	movs	r5, #15
 8000bf4:	197c      	adds	r4, r7, r5
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f000 face 	bl	800119a <ADC_ConversionStop>
 8000bfe:	0003      	movs	r3, r0
 8000c00:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000c02:	197b      	adds	r3, r7, r5
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d112      	bne.n	8000c30 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000c0a:	197c      	adds	r4, r7, r5
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 fa52 	bl	80010b8 <ADC_Disable>
 8000c14:	0003      	movs	r3, r0
 8000c16:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000c18:	197b      	adds	r3, r7, r5
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d107      	bne.n	8000c30 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c24:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_ADC_Stop+0x7c>)
 8000c26:	4013      	ands	r3, r2
 8000c28:	2201      	movs	r2, #1
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2234      	movs	r2, #52	; 0x34
 8000c34:	2100      	movs	r1, #0
 8000c36:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000c38:	230f      	movs	r3, #15
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	781b      	ldrb	r3, [r3, #0]
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b004      	add	sp, #16
 8000c44:	bdb0      	pop	{r4, r5, r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	fffffefe 	.word	0xfffffefe

08000c4c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	2b08      	cmp	r3, #8
 8000c5c:	d102      	bne.n	8000c64 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000c5e:	2308      	movs	r3, #8
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	e014      	b.n	8000c8e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d10b      	bne.n	8000c8a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c76:	2220      	movs	r2, #32
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2234      	movs	r2, #52	; 0x34
 8000c82:	2100      	movs	r1, #0
 8000c84:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e071      	b.n	8000d6e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000c8e:	f7ff fdff 	bl	8000890 <HAL_GetTick>
 8000c92:	0003      	movs	r3, r0
 8000c94:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000c96:	e01f      	b.n	8000cd8 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	d01c      	beq.n	8000cd8 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d007      	beq.n	8000cb4 <HAL_ADC_PollForConversion+0x68>
 8000ca4:	f7ff fdf4 	bl	8000890 <HAL_GetTick>
 8000ca8:	0002      	movs	r2, r0
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d211      	bcs.n	8000cd8 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	d10b      	bne.n	8000cd8 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2234      	movs	r2, #52	; 0x34
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e04a      	b.n	8000d6e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	d0d9      	beq.n	8000c98 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	0092      	lsls	r2, r2, #2
 8000cec:	431a      	orrs	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	23c0      	movs	r3, #192	; 0xc0
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d12d      	bne.n	8000d5c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d129      	bne.n	8000d5c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2208      	movs	r2, #8
 8000d10:	4013      	ands	r3, r2
 8000d12:	2b08      	cmp	r3, #8
 8000d14:	d122      	bne.n	8000d5c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d110      	bne.n	8000d44 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	210c      	movs	r1, #12
 8000d2e:	438a      	bics	r2, r1
 8000d30:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <HAL_ADC_PollForConversion+0x12c>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	639a      	str	r2, [r3, #56]	; 0x38
 8000d42:	e00b      	b.n	8000d5c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d48:	2220      	movs	r2, #32
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d54:	2201      	movs	r2, #1
 8000d56:	431a      	orrs	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7e1b      	ldrb	r3, [r3, #24]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d103      	bne.n	8000d6c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	220c      	movs	r2, #12
 8000d6a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	0018      	movs	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b004      	add	sp, #16
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	fffffefe 	.word	0xfffffefe

08000d7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d9e:	230f      	movs	r3, #15
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	055b      	lsls	r3, r3, #21
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d011      	beq.n	8000dda <HAL_ADC_ConfigChannel+0x46>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d00d      	beq.n	8000dda <HAL_ADC_ConfigChannel+0x46>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d009      	beq.n	8000dda <HAL_ADC_ConfigChannel+0x46>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d005      	beq.n	8000dda <HAL_ADC_ConfigChannel+0x46>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	d001      	beq.n	8000dda <HAL_ADC_ConfigChannel+0x46>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2234      	movs	r2, #52	; 0x34
 8000dde:	5c9b      	ldrb	r3, [r3, r2]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d101      	bne.n	8000de8 <HAL_ADC_ConfigChannel+0x54>
 8000de4:	2302      	movs	r3, #2
 8000de6:	e0d0      	b.n	8000f8a <HAL_ADC_ConfigChannel+0x1f6>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2234      	movs	r2, #52	; 0x34
 8000dec:	2101      	movs	r1, #1
 8000dee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	2204      	movs	r2, #4
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d000      	beq.n	8000dfe <HAL_ADC_ConfigChannel+0x6a>
 8000dfc:	e0b4      	b.n	8000f68 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	4a64      	ldr	r2, [pc, #400]	; (8000f94 <HAL_ADC_ConfigChannel+0x200>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d100      	bne.n	8000e0a <HAL_ADC_ConfigChannel+0x76>
 8000e08:	e082      	b.n	8000f10 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2201      	movs	r2, #1
 8000e16:	409a      	lsls	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	055b      	lsls	r3, r3, #21
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d037      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d033      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d02f      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d02b      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d027      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e50:	2b05      	cmp	r3, #5
 8000e52:	d023      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e58:	2b06      	cmp	r3, #6
 8000e5a:	d01f      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e60:	2b07      	cmp	r3, #7
 8000e62:	d01b      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	2107      	movs	r1, #7
 8000e70:	400b      	ands	r3, r1
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d012      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	695a      	ldr	r2, [r3, #20]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2107      	movs	r1, #7
 8000e82:	438a      	bics	r2, r1
 8000e84:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6959      	ldr	r1, [r3, #20]
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2207      	movs	r2, #7
 8000e92:	401a      	ands	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b10      	cmp	r3, #16
 8000ea2:	d007      	beq.n	8000eb4 <HAL_ADC_ConfigChannel+0x120>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b11      	cmp	r3, #17
 8000eaa:	d003      	beq.n	8000eb4 <HAL_ADC_ConfigChannel+0x120>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b12      	cmp	r3, #18
 8000eb2:	d163      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000eb4:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <HAL_ADC_ConfigChannel+0x204>)
 8000eb6:	6819      	ldr	r1, [r3, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b10      	cmp	r3, #16
 8000ebe:	d009      	beq.n	8000ed4 <HAL_ADC_ConfigChannel+0x140>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b11      	cmp	r3, #17
 8000ec6:	d102      	bne.n	8000ece <HAL_ADC_ConfigChannel+0x13a>
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	03db      	lsls	r3, r3, #15
 8000ecc:	e004      	b.n	8000ed8 <HAL_ADC_ConfigChannel+0x144>
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	045b      	lsls	r3, r3, #17
 8000ed2:	e001      	b.n	8000ed8 <HAL_ADC_ConfigChannel+0x144>
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	041b      	lsls	r3, r3, #16
 8000ed8:	4a2f      	ldr	r2, [pc, #188]	; (8000f98 <HAL_ADC_ConfigChannel+0x204>)
 8000eda:	430b      	orrs	r3, r1
 8000edc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b10      	cmp	r3, #16
 8000ee4:	d14a      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <HAL_ADC_ConfigChannel+0x208>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	492d      	ldr	r1, [pc, #180]	; (8000fa0 <HAL_ADC_ConfigChannel+0x20c>)
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff f915 	bl	800011c <__udivsi3>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	189b      	adds	r3, r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f00:	e002      	b.n	8000f08 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f9      	bne.n	8000f02 <HAL_ADC_ConfigChannel+0x16e>
 8000f0e:	e035      	b.n	8000f7c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4099      	lsls	r1, r3
 8000f1e:	000b      	movs	r3, r1
 8000f20:	43d9      	mvns	r1, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	400a      	ands	r2, r1
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b10      	cmp	r3, #16
 8000f30:	d007      	beq.n	8000f42 <HAL_ADC_ConfigChannel+0x1ae>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b11      	cmp	r3, #17
 8000f38:	d003      	beq.n	8000f42 <HAL_ADC_ConfigChannel+0x1ae>
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b12      	cmp	r3, #18
 8000f40:	d11c      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_ADC_ConfigChannel+0x204>)
 8000f44:	6819      	ldr	r1, [r3, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b10      	cmp	r3, #16
 8000f4c:	d007      	beq.n	8000f5e <HAL_ADC_ConfigChannel+0x1ca>
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b11      	cmp	r3, #17
 8000f54:	d101      	bne.n	8000f5a <HAL_ADC_ConfigChannel+0x1c6>
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <HAL_ADC_ConfigChannel+0x210>)
 8000f58:	e002      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x1cc>
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_ADC_ConfigChannel+0x214>)
 8000f5c:	e000      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x1cc>
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <HAL_ADC_ConfigChannel+0x218>)
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <HAL_ADC_ConfigChannel+0x204>)
 8000f62:	400b      	ands	r3, r1
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e009      	b.n	8000f7c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000f74:	230f      	movs	r3, #15
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2234      	movs	r2, #52	; 0x34
 8000f80:	2100      	movs	r1, #0
 8000f82:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f84:	230f      	movs	r3, #15
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	781b      	ldrb	r3, [r3, #0]
}
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b004      	add	sp, #16
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	00001001 	.word	0x00001001
 8000f98:	40012708 	.word	0x40012708
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	000f4240 	.word	0x000f4240
 8000fa4:	ffbfffff 	.word	0xffbfffff
 8000fa8:	feffffff 	.word	0xfeffffff
 8000fac:	ff7fffff 	.word	0xff7fffff

08000fb0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d112      	bne.n	8000ff4 <ADC_Enable+0x44>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d009      	beq.n	8000ff0 <ADC_Enable+0x40>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d101      	bne.n	8000ff4 <ADC_Enable+0x44>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <ADC_Enable+0x46>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d152      	bne.n	80010a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4a2a      	ldr	r2, [pc, #168]	; (80010ac <ADC_Enable+0xfc>)
 8001002:	4013      	ands	r3, r2
 8001004:	d00d      	beq.n	8001022 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800100a:	2210      	movs	r2, #16
 800100c:	431a      	orrs	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001016:	2201      	movs	r2, #1
 8001018:	431a      	orrs	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e03f      	b.n	80010a2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	430a      	orrs	r2, r1
 8001030:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <ADC_Enable+0x100>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	491f      	ldr	r1, [pc, #124]	; (80010b4 <ADC_Enable+0x104>)
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff f86f 	bl	800011c <__udivsi3>
 800103e:	0003      	movs	r3, r0
 8001040:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001042:	e002      	b.n	800104a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	3b01      	subs	r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1f9      	bne.n	8001044 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001050:	f7ff fc1e 	bl	8000890 <HAL_GetTick>
 8001054:	0003      	movs	r3, r0
 8001056:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001058:	e01b      	b.n	8001092 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800105a:	f7ff fc19 	bl	8000890 <HAL_GetTick>
 800105e:	0002      	movs	r2, r0
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d914      	bls.n	8001092 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2201      	movs	r2, #1
 8001070:	4013      	ands	r3, r2
 8001072:	2b01      	cmp	r3, #1
 8001074:	d00d      	beq.n	8001092 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107a:	2210      	movs	r2, #16
 800107c:	431a      	orrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001086:	2201      	movs	r2, #1
 8001088:	431a      	orrs	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e007      	b.n	80010a2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2201      	movs	r2, #1
 800109a:	4013      	ands	r3, r2
 800109c:	2b01      	cmp	r3, #1
 800109e:	d1dc      	bne.n	800105a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b004      	add	sp, #16
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	80000017 	.word	0x80000017
 80010b0:	20000000 	.word	0x20000000
 80010b4:	000f4240 	.word	0x000f4240

080010b8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2203      	movs	r2, #3
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d112      	bne.n	80010f8 <ADC_Disable+0x40>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2201      	movs	r2, #1
 80010da:	4013      	ands	r3, r2
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d009      	beq.n	80010f4 <ADC_Disable+0x3c>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	401a      	ands	r2, r3
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d101      	bne.n	80010f8 <ADC_Disable+0x40>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <ADC_Disable+0x42>
 80010f8:	2300      	movs	r3, #0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d048      	beq.n	8001190 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2205      	movs	r2, #5
 8001106:	4013      	ands	r3, r2
 8001108:	2b01      	cmp	r3, #1
 800110a:	d110      	bne.n	800112e <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2102      	movs	r1, #2
 8001118:	430a      	orrs	r2, r1
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2203      	movs	r2, #3
 8001122:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001124:	f7ff fbb4 	bl	8000890 <HAL_GetTick>
 8001128:	0003      	movs	r3, r0
 800112a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800112c:	e029      	b.n	8001182 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001132:	2210      	movs	r2, #16
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113e:	2201      	movs	r2, #1
 8001140:	431a      	orrs	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e023      	b.n	8001192 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800114a:	f7ff fba1 	bl	8000890 <HAL_GetTick>
 800114e:	0002      	movs	r2, r0
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d914      	bls.n	8001182 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2201      	movs	r2, #1
 8001160:	4013      	ands	r3, r2
 8001162:	2b01      	cmp	r3, #1
 8001164:	d10d      	bne.n	8001182 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116a:	2210      	movs	r2, #16
 800116c:	431a      	orrs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001176:	2201      	movs	r2, #1
 8001178:	431a      	orrs	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e007      	b.n	8001192 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2201      	movs	r2, #1
 800118a:	4013      	ands	r3, r2
 800118c:	2b01      	cmp	r3, #1
 800118e:	d0dc      	beq.n	800114a <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	0018      	movs	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	b004      	add	sp, #16
 8001198:	bd80      	pop	{r7, pc}

0800119a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	2204      	movs	r2, #4
 80011ae:	4013      	ands	r3, r2
 80011b0:	d03a      	beq.n	8001228 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2204      	movs	r2, #4
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d10d      	bne.n	80011dc <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	2202      	movs	r2, #2
 80011c8:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80011ca:	d107      	bne.n	80011dc <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2110      	movs	r1, #16
 80011d8:	430a      	orrs	r2, r1
 80011da:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011dc:	f7ff fb58 	bl	8000890 <HAL_GetTick>
 80011e0:	0003      	movs	r3, r0
 80011e2:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80011e4:	e01a      	b.n	800121c <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80011e6:	f7ff fb53 	bl	8000890 <HAL_GetTick>
 80011ea:	0002      	movs	r2, r0
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d913      	bls.n	800121c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2204      	movs	r2, #4
 80011fc:	4013      	ands	r3, r2
 80011fe:	d00d      	beq.n	800121c <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001204:	2210      	movs	r2, #16
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001210:	2201      	movs	r2, #1
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e006      	b.n	800122a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2204      	movs	r2, #4
 8001224:	4013      	ands	r3, r2
 8001226:	d1de      	bne.n	80011e6 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	0002      	movs	r2, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b7f      	cmp	r3, #127	; 0x7f
 8001248:	d828      	bhi.n	800129c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800124a:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <__NVIC_SetPriority+0xd4>)
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b25b      	sxtb	r3, r3
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	33c0      	adds	r3, #192	; 0xc0
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	589b      	ldr	r3, [r3, r2]
 800125a:	1dfa      	adds	r2, r7, #7
 800125c:	7812      	ldrb	r2, [r2, #0]
 800125e:	0011      	movs	r1, r2
 8001260:	2203      	movs	r2, #3
 8001262:	400a      	ands	r2, r1
 8001264:	00d2      	lsls	r2, r2, #3
 8001266:	21ff      	movs	r1, #255	; 0xff
 8001268:	4091      	lsls	r1, r2
 800126a:	000a      	movs	r2, r1
 800126c:	43d2      	mvns	r2, r2
 800126e:	401a      	ands	r2, r3
 8001270:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	019b      	lsls	r3, r3, #6
 8001276:	22ff      	movs	r2, #255	; 0xff
 8001278:	401a      	ands	r2, r3
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	0018      	movs	r0, r3
 8001280:	2303      	movs	r3, #3
 8001282:	4003      	ands	r3, r0
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001288:	481f      	ldr	r0, [pc, #124]	; (8001308 <__NVIC_SetPriority+0xd4>)
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b25b      	sxtb	r3, r3
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	430a      	orrs	r2, r1
 8001294:	33c0      	adds	r3, #192	; 0xc0
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800129a:	e031      	b.n	8001300 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129c:	4a1b      	ldr	r2, [pc, #108]	; (800130c <__NVIC_SetPriority+0xd8>)
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	0019      	movs	r1, r3
 80012a4:	230f      	movs	r3, #15
 80012a6:	400b      	ands	r3, r1
 80012a8:	3b08      	subs	r3, #8
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3306      	adds	r3, #6
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	18d3      	adds	r3, r2, r3
 80012b2:	3304      	adds	r3, #4
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1dfa      	adds	r2, r7, #7
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	0011      	movs	r1, r2
 80012bc:	2203      	movs	r2, #3
 80012be:	400a      	ands	r2, r1
 80012c0:	00d2      	lsls	r2, r2, #3
 80012c2:	21ff      	movs	r1, #255	; 0xff
 80012c4:	4091      	lsls	r1, r2
 80012c6:	000a      	movs	r2, r1
 80012c8:	43d2      	mvns	r2, r2
 80012ca:	401a      	ands	r2, r3
 80012cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	019b      	lsls	r3, r3, #6
 80012d2:	22ff      	movs	r2, #255	; 0xff
 80012d4:	401a      	ands	r2, r3
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	0018      	movs	r0, r3
 80012dc:	2303      	movs	r3, #3
 80012de:	4003      	ands	r3, r0
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <__NVIC_SetPriority+0xd8>)
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	001c      	movs	r4, r3
 80012ec:	230f      	movs	r3, #15
 80012ee:	4023      	ands	r3, r4
 80012f0:	3b08      	subs	r3, #8
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	430a      	orrs	r2, r1
 80012f6:	3306      	adds	r3, #6
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	18c3      	adds	r3, r0, r3
 80012fc:	3304      	adds	r3, #4
 80012fe:	601a      	str	r2, [r3, #0]
}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b003      	add	sp, #12
 8001306:	bd90      	pop	{r4, r7, pc}
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	1e5a      	subs	r2, r3, #1
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	045b      	lsls	r3, r3, #17
 8001320:	429a      	cmp	r2, r3
 8001322:	d301      	bcc.n	8001328 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001324:	2301      	movs	r3, #1
 8001326:	e010      	b.n	800134a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <SysTick_Config+0x44>)
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	3a01      	subs	r2, #1
 800132e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001330:	2301      	movs	r3, #1
 8001332:	425b      	negs	r3, r3
 8001334:	2103      	movs	r1, #3
 8001336:	0018      	movs	r0, r3
 8001338:	f7ff ff7c 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x44>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x44>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	0018      	movs	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	b002      	add	sp, #8
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	210f      	movs	r1, #15
 8001364:	187b      	adds	r3, r7, r1
 8001366:	1c02      	adds	r2, r0, #0
 8001368:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	187b      	adds	r3, r7, r1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b25b      	sxtb	r3, r3
 8001372:	0011      	movs	r1, r2
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <__NVIC_SetPriority>
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b004      	add	sp, #16
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff ffbf 	bl	8001310 <SysTick_Config>
 8001392:	0003      	movs	r3, r0
}
 8001394:	0018      	movs	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013aa:	e14f      	b.n	800164c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2101      	movs	r1, #1
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4091      	lsls	r1, r2
 80013b6:	000a      	movs	r2, r1
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d100      	bne.n	80013c4 <HAL_GPIO_Init+0x28>
 80013c2:	e140      	b.n	8001646 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2203      	movs	r2, #3
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d005      	beq.n	80013dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2203      	movs	r2, #3
 80013d6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d130      	bne.n	800143e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	409a      	lsls	r2, r3
 80013ea:	0013      	movs	r3, r2
 80013ec:	43da      	mvns	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	409a      	lsls	r2, r3
 80013fe:	0013      	movs	r3, r2
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001412:	2201      	movs	r2, #1
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	43da      	mvns	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	2201      	movs	r2, #1
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2203      	movs	r2, #3
 8001444:	4013      	ands	r3, r2
 8001446:	2b03      	cmp	r3, #3
 8001448:	d017      	beq.n	800147a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	43da      	mvns	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	4013      	ands	r3, r2
 8001482:	2b02      	cmp	r3, #2
 8001484:	d123      	bne.n	80014ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	0092      	lsls	r2, r2, #2
 8001490:	58d3      	ldr	r3, [r2, r3]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2207      	movs	r2, #7
 8001498:	4013      	ands	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	409a      	lsls	r2, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	43da      	mvns	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2107      	movs	r1, #7
 80014b2:	400b      	ands	r3, r1
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	409a      	lsls	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	0092      	lsls	r2, r2, #2
 80014ca:	6939      	ldr	r1, [r7, #16]
 80014cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	409a      	lsls	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	43da      	mvns	r2, r3
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2203      	movs	r2, #3
 80014ec:	401a      	ands	r2, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	23c0      	movs	r3, #192	; 0xc0
 8001508:	029b      	lsls	r3, r3, #10
 800150a:	4013      	ands	r3, r2
 800150c:	d100      	bne.n	8001510 <HAL_GPIO_Init+0x174>
 800150e:	e09a      	b.n	8001646 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001510:	4b54      	ldr	r3, [pc, #336]	; (8001664 <HAL_GPIO_Init+0x2c8>)
 8001512:	699a      	ldr	r2, [r3, #24]
 8001514:	4b53      	ldr	r3, [pc, #332]	; (8001664 <HAL_GPIO_Init+0x2c8>)
 8001516:	2101      	movs	r1, #1
 8001518:	430a      	orrs	r2, r1
 800151a:	619a      	str	r2, [r3, #24]
 800151c:	4b51      	ldr	r3, [pc, #324]	; (8001664 <HAL_GPIO_Init+0x2c8>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	2201      	movs	r2, #1
 8001522:	4013      	ands	r3, r2
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001528:	4a4f      	ldr	r2, [pc, #316]	; (8001668 <HAL_GPIO_Init+0x2cc>)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	589b      	ldr	r3, [r3, r2]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2203      	movs	r2, #3
 800153a:	4013      	ands	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	220f      	movs	r2, #15
 8001540:	409a      	lsls	r2, r3
 8001542:	0013      	movs	r3, r2
 8001544:	43da      	mvns	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	2390      	movs	r3, #144	; 0x90
 8001550:	05db      	lsls	r3, r3, #23
 8001552:	429a      	cmp	r2, r3
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0x1e2>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a44      	ldr	r2, [pc, #272]	; (800166c <HAL_GPIO_Init+0x2d0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_GPIO_Init+0x1de>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a43      	ldr	r2, [pc, #268]	; (8001670 <HAL_GPIO_Init+0x2d4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x1da>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a42      	ldr	r2, [pc, #264]	; (8001674 <HAL_GPIO_Init+0x2d8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_GPIO_Init+0x1d6>
 800156e:	2303      	movs	r3, #3
 8001570:	e006      	b.n	8001580 <HAL_GPIO_Init+0x1e4>
 8001572:	2305      	movs	r3, #5
 8001574:	e004      	b.n	8001580 <HAL_GPIO_Init+0x1e4>
 8001576:	2302      	movs	r3, #2
 8001578:	e002      	b.n	8001580 <HAL_GPIO_Init+0x1e4>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <HAL_GPIO_Init+0x1e4>
 800157e:	2300      	movs	r3, #0
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	2103      	movs	r1, #3
 8001584:	400a      	ands	r2, r1
 8001586:	0092      	lsls	r2, r2, #2
 8001588:	4093      	lsls	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001590:	4935      	ldr	r1, [pc, #212]	; (8001668 <HAL_GPIO_Init+0x2cc>)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	3302      	adds	r3, #2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800159e:	4b36      	ldr	r3, [pc, #216]	; (8001678 <HAL_GPIO_Init+0x2dc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43da      	mvns	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	025b      	lsls	r3, r3, #9
 80015b6:	4013      	ands	r3, r2
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015c2:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <HAL_GPIO_Init+0x2dc>)
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80015c8:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <HAL_GPIO_Init+0x2dc>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43da      	mvns	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	029b      	lsls	r3, r3, #10
 80015e0:	4013      	ands	r3, r2
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_GPIO_Init+0x2dc>)
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <HAL_GPIO_Init+0x2dc>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43da      	mvns	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	035b      	lsls	r3, r3, #13
 800160a:	4013      	ands	r3, r2
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_GPIO_Init+0x2dc>)
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_GPIO_Init+0x2dc>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43da      	mvns	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	039b      	lsls	r3, r3, #14
 8001634:	4013      	ands	r3, r2
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <HAL_GPIO_Init+0x2dc>)
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	40da      	lsrs	r2, r3
 8001654:	1e13      	subs	r3, r2, #0
 8001656:	d000      	beq.n	800165a <HAL_GPIO_Init+0x2be>
 8001658:	e6a8      	b.n	80013ac <HAL_GPIO_Init+0x10>
  } 
}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	b006      	add	sp, #24
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000
 800166c:	48000400 	.word	0x48000400
 8001670:	48000800 	.word	0x48000800
 8001674:	48000c00 	.word	0x48000c00
 8001678:	40010400 	.word	0x40010400

0800167c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	0008      	movs	r0, r1
 8001686:	0011      	movs	r1, r2
 8001688:	1cbb      	adds	r3, r7, #2
 800168a:	1c02      	adds	r2, r0, #0
 800168c:	801a      	strh	r2, [r3, #0]
 800168e:	1c7b      	adds	r3, r7, #1
 8001690:	1c0a      	adds	r2, r1, #0
 8001692:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001694:	1c7b      	adds	r3, r7, #1
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169c:	1cbb      	adds	r3, r7, #2
 800169e:	881a      	ldrh	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a4:	e003      	b.n	80016ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a6:	1cbb      	adds	r3, r7, #2
 80016a8:	881a      	ldrh	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b002      	add	sp, #8
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	0002      	movs	r2, r0
 80016c0:	1dbb      	adds	r3, r7, #6
 80016c2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	1dba      	adds	r2, r7, #6
 80016ca:	8812      	ldrh	r2, [r2, #0]
 80016cc:	4013      	ands	r3, r2
 80016ce:	d008      	beq.n	80016e2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80016d2:	1dba      	adds	r2, r7, #6
 80016d4:	8812      	ldrh	r2, [r2, #0]
 80016d6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016d8:	1dbb      	adds	r3, r7, #6
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	0018      	movs	r0, r3
 80016de:	f000 f807 	bl	80016f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b002      	add	sp, #8
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	40010400 	.word	0x40010400

080016f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	0002      	movs	r2, r0
 80016f8:	1dbb      	adds	r3, r7, #6
 80016fa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	b002      	add	sp, #8
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e301      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2201      	movs	r2, #1
 800171c:	4013      	ands	r3, r2
 800171e:	d100      	bne.n	8001722 <HAL_RCC_OscConfig+0x1e>
 8001720:	e08d      	b.n	800183e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001722:	4bc3      	ldr	r3, [pc, #780]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	220c      	movs	r2, #12
 8001728:	4013      	ands	r3, r2
 800172a:	2b04      	cmp	r3, #4
 800172c:	d00e      	beq.n	800174c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800172e:	4bc0      	ldr	r3, [pc, #768]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	220c      	movs	r2, #12
 8001734:	4013      	ands	r3, r2
 8001736:	2b08      	cmp	r3, #8
 8001738:	d116      	bne.n	8001768 <HAL_RCC_OscConfig+0x64>
 800173a:	4bbd      	ldr	r3, [pc, #756]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	025b      	lsls	r3, r3, #9
 8001742:	401a      	ands	r2, r3
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	025b      	lsls	r3, r3, #9
 8001748:	429a      	cmp	r2, r3
 800174a:	d10d      	bne.n	8001768 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	4bb8      	ldr	r3, [pc, #736]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	029b      	lsls	r3, r3, #10
 8001754:	4013      	ands	r3, r2
 8001756:	d100      	bne.n	800175a <HAL_RCC_OscConfig+0x56>
 8001758:	e070      	b.n	800183c <HAL_RCC_OscConfig+0x138>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d000      	beq.n	8001764 <HAL_RCC_OscConfig+0x60>
 8001762:	e06b      	b.n	800183c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e2d8      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d107      	bne.n	8001780 <HAL_RCC_OscConfig+0x7c>
 8001770:	4baf      	ldr	r3, [pc, #700]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4bae      	ldr	r3, [pc, #696]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	0249      	lsls	r1, r1, #9
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	e02f      	b.n	80017e0 <HAL_RCC_OscConfig+0xdc>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10c      	bne.n	80017a2 <HAL_RCC_OscConfig+0x9e>
 8001788:	4ba9      	ldr	r3, [pc, #676]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4ba8      	ldr	r3, [pc, #672]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 800178e:	49a9      	ldr	r1, [pc, #676]	; (8001a34 <HAL_RCC_OscConfig+0x330>)
 8001790:	400a      	ands	r2, r1
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	4ba6      	ldr	r3, [pc, #664]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4ba5      	ldr	r3, [pc, #660]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 800179a:	49a7      	ldr	r1, [pc, #668]	; (8001a38 <HAL_RCC_OscConfig+0x334>)
 800179c:	400a      	ands	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	e01e      	b.n	80017e0 <HAL_RCC_OscConfig+0xdc>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b05      	cmp	r3, #5
 80017a8:	d10e      	bne.n	80017c8 <HAL_RCC_OscConfig+0xc4>
 80017aa:	4ba1      	ldr	r3, [pc, #644]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4ba0      	ldr	r3, [pc, #640]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	02c9      	lsls	r1, r1, #11
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	4b9d      	ldr	r3, [pc, #628]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b9c      	ldr	r3, [pc, #624]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80017be:	2180      	movs	r1, #128	; 0x80
 80017c0:	0249      	lsls	r1, r1, #9
 80017c2:	430a      	orrs	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e00b      	b.n	80017e0 <HAL_RCC_OscConfig+0xdc>
 80017c8:	4b99      	ldr	r3, [pc, #612]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b98      	ldr	r3, [pc, #608]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80017ce:	4999      	ldr	r1, [pc, #612]	; (8001a34 <HAL_RCC_OscConfig+0x330>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	4b96      	ldr	r3, [pc, #600]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b95      	ldr	r3, [pc, #596]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80017da:	4997      	ldr	r1, [pc, #604]	; (8001a38 <HAL_RCC_OscConfig+0x334>)
 80017dc:	400a      	ands	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d014      	beq.n	8001812 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff f852 	bl	8000890 <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f2:	f7ff f84d 	bl	8000890 <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b64      	cmp	r3, #100	; 0x64
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e28a      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001804:	4b8a      	ldr	r3, [pc, #552]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	029b      	lsls	r3, r3, #10
 800180c:	4013      	ands	r3, r2
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0xee>
 8001810:	e015      	b.n	800183e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7ff f83d 	bl	8000890 <HAL_GetTick>
 8001816:	0003      	movs	r3, r0
 8001818:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff f838 	bl	8000890 <HAL_GetTick>
 8001820:	0002      	movs	r2, r0
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	; 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e275      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182e:	4b80      	ldr	r3, [pc, #512]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	029b      	lsls	r3, r3, #10
 8001836:	4013      	ands	r3, r2
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x118>
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2202      	movs	r2, #2
 8001844:	4013      	ands	r3, r2
 8001846:	d100      	bne.n	800184a <HAL_RCC_OscConfig+0x146>
 8001848:	e069      	b.n	800191e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800184a:	4b79      	ldr	r3, [pc, #484]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	220c      	movs	r2, #12
 8001850:	4013      	ands	r3, r2
 8001852:	d00b      	beq.n	800186c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001854:	4b76      	ldr	r3, [pc, #472]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	220c      	movs	r2, #12
 800185a:	4013      	ands	r3, r2
 800185c:	2b08      	cmp	r3, #8
 800185e:	d11c      	bne.n	800189a <HAL_RCC_OscConfig+0x196>
 8001860:	4b73      	ldr	r3, [pc, #460]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	025b      	lsls	r3, r3, #9
 8001868:	4013      	ands	r3, r2
 800186a:	d116      	bne.n	800189a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186c:	4b70      	ldr	r3, [pc, #448]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2202      	movs	r2, #2
 8001872:	4013      	ands	r3, r2
 8001874:	d005      	beq.n	8001882 <HAL_RCC_OscConfig+0x17e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d001      	beq.n	8001882 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e24b      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001882:	4b6b      	ldr	r3, [pc, #428]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	22f8      	movs	r2, #248	; 0xf8
 8001888:	4393      	bics	r3, r2
 800188a:	0019      	movs	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	00da      	lsls	r2, r3, #3
 8001892:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001898:	e041      	b.n	800191e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d024      	beq.n	80018ec <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a2:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b62      	ldr	r3, [pc, #392]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80018a8:	2101      	movs	r1, #1
 80018aa:	430a      	orrs	r2, r1
 80018ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7fe ffef 	bl	8000890 <HAL_GetTick>
 80018b2:	0003      	movs	r3, r0
 80018b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b8:	f7fe ffea 	bl	8000890 <HAL_GetTick>
 80018bc:	0002      	movs	r2, r0
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e227      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ca:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2202      	movs	r2, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	d0f1      	beq.n	80018b8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d4:	4b56      	ldr	r3, [pc, #344]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	22f8      	movs	r2, #248	; 0xf8
 80018da:	4393      	bics	r3, r2
 80018dc:	0019      	movs	r1, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	00da      	lsls	r2, r3, #3
 80018e4:	4b52      	ldr	r3, [pc, #328]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80018e6:	430a      	orrs	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e018      	b.n	800191e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ec:	4b50      	ldr	r3, [pc, #320]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b4f      	ldr	r3, [pc, #316]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	438a      	bics	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7fe ffca 	bl	8000890 <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001902:	f7fe ffc5 	bl	8000890 <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e202      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001914:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2202      	movs	r2, #2
 800191a:	4013      	ands	r3, r2
 800191c:	d1f1      	bne.n	8001902 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2208      	movs	r2, #8
 8001924:	4013      	ands	r3, r2
 8001926:	d036      	beq.n	8001996 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d019      	beq.n	8001964 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001930:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001934:	4b3e      	ldr	r3, [pc, #248]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001936:	2101      	movs	r1, #1
 8001938:	430a      	orrs	r2, r1
 800193a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193c:	f7fe ffa8 	bl	8000890 <HAL_GetTick>
 8001940:	0003      	movs	r3, r0
 8001942:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001946:	f7fe ffa3 	bl	8000890 <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e1e0      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001958:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	2202      	movs	r2, #2
 800195e:	4013      	ands	r3, r2
 8001960:	d0f1      	beq.n	8001946 <HAL_RCC_OscConfig+0x242>
 8001962:	e018      	b.n	8001996 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001964:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001968:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 800196a:	2101      	movs	r1, #1
 800196c:	438a      	bics	r2, r1
 800196e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7fe ff8e 	bl	8000890 <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197a:	f7fe ff89 	bl	8000890 <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e1c6      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198c:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d1f1      	bne.n	800197a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2204      	movs	r2, #4
 800199c:	4013      	ands	r3, r2
 800199e:	d100      	bne.n	80019a2 <HAL_RCC_OscConfig+0x29e>
 80019a0:	e0b4      	b.n	8001b0c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a2:	201f      	movs	r0, #31
 80019a4:	183b      	adds	r3, r7, r0
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80019ac:	69da      	ldr	r2, [r3, #28]
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	055b      	lsls	r3, r3, #21
 80019b2:	4013      	ands	r3, r2
 80019b4:	d110      	bne.n	80019d8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	0549      	lsls	r1, r1, #21
 80019c0:	430a      	orrs	r2, r1
 80019c2:	61da      	str	r2, [r3, #28]
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 80019c6:	69da      	ldr	r2, [r3, #28]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	055b      	lsls	r3, r3, #21
 80019cc:	4013      	ands	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019d2:	183b      	adds	r3, r7, r0
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4013      	ands	r3, r2
 80019e2:	d11a      	bne.n	8001a1a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	0049      	lsls	r1, r1, #1
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f2:	f7fe ff4d 	bl	8000890 <HAL_GetTick>
 80019f6:	0003      	movs	r3, r0
 80019f8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fc:	f7fe ff48 	bl	8000890 <HAL_GetTick>
 8001a00:	0002      	movs	r2, r0
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e185      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCC_OscConfig+0x338>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4013      	ands	r3, r2
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d10e      	bne.n	8001a40 <HAL_RCC_OscConfig+0x33c>
 8001a22:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001a24:	6a1a      	ldr	r2, [r3, #32]
 8001a26:	4b02      	ldr	r3, [pc, #8]	; (8001a30 <HAL_RCC_OscConfig+0x32c>)
 8001a28:	2101      	movs	r1, #1
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	621a      	str	r2, [r3, #32]
 8001a2e:	e035      	b.n	8001a9c <HAL_RCC_OscConfig+0x398>
 8001a30:	40021000 	.word	0x40021000
 8001a34:	fffeffff 	.word	0xfffeffff
 8001a38:	fffbffff 	.word	0xfffbffff
 8001a3c:	40007000 	.word	0x40007000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10c      	bne.n	8001a62 <HAL_RCC_OscConfig+0x35e>
 8001a48:	4bb6      	ldr	r3, [pc, #728]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001a4a:	6a1a      	ldr	r2, [r3, #32]
 8001a4c:	4bb5      	ldr	r3, [pc, #724]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001a4e:	2101      	movs	r1, #1
 8001a50:	438a      	bics	r2, r1
 8001a52:	621a      	str	r2, [r3, #32]
 8001a54:	4bb3      	ldr	r3, [pc, #716]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001a56:	6a1a      	ldr	r2, [r3, #32]
 8001a58:	4bb2      	ldr	r3, [pc, #712]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001a5a:	2104      	movs	r1, #4
 8001a5c:	438a      	bics	r2, r1
 8001a5e:	621a      	str	r2, [r3, #32]
 8001a60:	e01c      	b.n	8001a9c <HAL_RCC_OscConfig+0x398>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x380>
 8001a6a:	4bae      	ldr	r3, [pc, #696]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001a6c:	6a1a      	ldr	r2, [r3, #32]
 8001a6e:	4bad      	ldr	r3, [pc, #692]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001a70:	2104      	movs	r1, #4
 8001a72:	430a      	orrs	r2, r1
 8001a74:	621a      	str	r2, [r3, #32]
 8001a76:	4bab      	ldr	r3, [pc, #684]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001a78:	6a1a      	ldr	r2, [r3, #32]
 8001a7a:	4baa      	ldr	r3, [pc, #680]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	621a      	str	r2, [r3, #32]
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0x398>
 8001a84:	4ba7      	ldr	r3, [pc, #668]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001a86:	6a1a      	ldr	r2, [r3, #32]
 8001a88:	4ba6      	ldr	r3, [pc, #664]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	438a      	bics	r2, r1
 8001a8e:	621a      	str	r2, [r3, #32]
 8001a90:	4ba4      	ldr	r3, [pc, #656]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001a92:	6a1a      	ldr	r2, [r3, #32]
 8001a94:	4ba3      	ldr	r3, [pc, #652]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001a96:	2104      	movs	r1, #4
 8001a98:	438a      	bics	r2, r1
 8001a9a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d014      	beq.n	8001ace <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7fe fef4 	bl	8000890 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aac:	e009      	b.n	8001ac2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aae:	f7fe feef 	bl	8000890 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	4a9b      	ldr	r2, [pc, #620]	; (8001d28 <HAL_RCC_OscConfig+0x624>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e12b      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac2:	4b98      	ldr	r3, [pc, #608]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x3aa>
 8001acc:	e013      	b.n	8001af6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ace:	f7fe fedf 	bl	8000890 <HAL_GetTick>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad6:	e009      	b.n	8001aec <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad8:	f7fe feda 	bl	8000890 <HAL_GetTick>
 8001adc:	0002      	movs	r2, r0
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	4a91      	ldr	r2, [pc, #580]	; (8001d28 <HAL_RCC_OscConfig+0x624>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e116      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aec:	4b8d      	ldr	r3, [pc, #564]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	2202      	movs	r2, #2
 8001af2:	4013      	ands	r3, r2
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001af6:	231f      	movs	r3, #31
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d105      	bne.n	8001b0c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b00:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001b02:	69da      	ldr	r2, [r3, #28]
 8001b04:	4b87      	ldr	r3, [pc, #540]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001b06:	4989      	ldr	r1, [pc, #548]	; (8001d2c <HAL_RCC_OscConfig+0x628>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2210      	movs	r2, #16
 8001b12:	4013      	ands	r3, r2
 8001b14:	d063      	beq.n	8001bde <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d12a      	bne.n	8001b74 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b1e:	4b81      	ldr	r3, [pc, #516]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b22:	4b80      	ldr	r3, [pc, #512]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001b24:	2104      	movs	r1, #4
 8001b26:	430a      	orrs	r2, r1
 8001b28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b2a:	4b7e      	ldr	r3, [pc, #504]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b2e:	4b7d      	ldr	r3, [pc, #500]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001b30:	2101      	movs	r1, #1
 8001b32:	430a      	orrs	r2, r1
 8001b34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b36:	f7fe feab 	bl	8000890 <HAL_GetTick>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b40:	f7fe fea6 	bl	8000890 <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e0e3      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b52:	4b74      	ldr	r3, [pc, #464]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b56:	2202      	movs	r2, #2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d0f1      	beq.n	8001b40 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b5c:	4b71      	ldr	r3, [pc, #452]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b60:	22f8      	movs	r2, #248	; 0xf8
 8001b62:	4393      	bics	r3, r2
 8001b64:	0019      	movs	r1, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	00da      	lsls	r2, r3, #3
 8001b6c:	4b6d      	ldr	r3, [pc, #436]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	635a      	str	r2, [r3, #52]	; 0x34
 8001b72:	e034      	b.n	8001bde <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	3305      	adds	r3, #5
 8001b7a:	d111      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b7c:	4b69      	ldr	r3, [pc, #420]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b80:	4b68      	ldr	r3, [pc, #416]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001b82:	2104      	movs	r1, #4
 8001b84:	438a      	bics	r2, r1
 8001b86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b88:	4b66      	ldr	r3, [pc, #408]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8c:	22f8      	movs	r2, #248	; 0xf8
 8001b8e:	4393      	bics	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	00da      	lsls	r2, r3, #3
 8001b98:	4b62      	ldr	r3, [pc, #392]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b9e:	e01e      	b.n	8001bde <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ba0:	4b60      	ldr	r3, [pc, #384]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba4:	4b5f      	ldr	r3, [pc, #380]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001bac:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bb0:	4b5c      	ldr	r3, [pc, #368]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	438a      	bics	r2, r1
 8001bb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb8:	f7fe fe6a 	bl	8000890 <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bc2:	f7fe fe65 	bl	8000890 <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0a2      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bd4:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd8:	2202      	movs	r2, #2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d1f1      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d100      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4e4>
 8001be6:	e097      	b.n	8001d18 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be8:	4b4e      	ldr	r3, [pc, #312]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	220c      	movs	r2, #12
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d100      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x4f2>
 8001bf4:	e06b      	b.n	8001cce <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d14c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	4b49      	ldr	r3, [pc, #292]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b48      	ldr	r3, [pc, #288]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001c04:	494a      	ldr	r1, [pc, #296]	; (8001d30 <HAL_RCC_OscConfig+0x62c>)
 8001c06:	400a      	ands	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7fe fe41 	bl	8000890 <HAL_GetTick>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c14:	f7fe fe3c 	bl	8000890 <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e079      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c26:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	049b      	lsls	r3, r3, #18
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c32:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	220f      	movs	r2, #15
 8001c38:	4393      	bics	r3, r2
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c40:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001c42:	430a      	orrs	r2, r1
 8001c44:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c46:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4a3a      	ldr	r2, [pc, #232]	; (8001d34 <HAL_RCC_OscConfig+0x630>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c60:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	0449      	lsls	r1, r1, #17
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7fe fe0f 	bl	8000890 <HAL_GetTick>
 8001c72:	0003      	movs	r3, r0
 8001c74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c78:	f7fe fe0a 	bl	8000890 <HAL_GetTick>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e047      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c8a:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	049b      	lsls	r3, r3, #18
 8001c92:	4013      	ands	r3, r2
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x574>
 8001c96:	e03f      	b.n	8001d18 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c98:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001c9e:	4924      	ldr	r1, [pc, #144]	; (8001d30 <HAL_RCC_OscConfig+0x62c>)
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7fe fdf4 	bl	8000890 <HAL_GetTick>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cae:	f7fe fdef 	bl	8000890 <HAL_GetTick>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e02c      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	049b      	lsls	r3, r3, #18
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0x5aa>
 8001ccc:	e024      	b.n	8001d18 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e01f      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_RCC_OscConfig+0x620>)
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	025b      	lsls	r3, r3, #9
 8001cec:	401a      	ands	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d10e      	bne.n	8001d14 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	23f0      	movs	r3, #240	; 0xf0
 8001d08:	039b      	lsls	r3, r3, #14
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b008      	add	sp, #32
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	40021000 	.word	0x40021000
 8001d28:	00001388 	.word	0x00001388
 8001d2c:	efffffff 	.word	0xefffffff
 8001d30:	feffffff 	.word	0xfeffffff
 8001d34:	ffc2ffff 	.word	0xffc2ffff

08001d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b3      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b5b      	ldr	r3, [pc, #364]	; (8001ebc <HAL_RCC_ClockConfig+0x184>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2201      	movs	r2, #1
 8001d52:	4013      	ands	r3, r2
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d911      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b58      	ldr	r3, [pc, #352]	; (8001ebc <HAL_RCC_ClockConfig+0x184>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	4393      	bics	r3, r2
 8001d62:	0019      	movs	r1, r3
 8001d64:	4b55      	ldr	r3, [pc, #340]	; (8001ebc <HAL_RCC_ClockConfig+0x184>)
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_RCC_ClockConfig+0x184>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2201      	movs	r2, #1
 8001d72:	4013      	ands	r3, r2
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e09a      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	d015      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d006      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d92:	4b4b      	ldr	r3, [pc, #300]	; (8001ec0 <HAL_RCC_ClockConfig+0x188>)
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <HAL_RCC_ClockConfig+0x188>)
 8001d98:	21e0      	movs	r1, #224	; 0xe0
 8001d9a:	00c9      	lsls	r1, r1, #3
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4b47      	ldr	r3, [pc, #284]	; (8001ec0 <HAL_RCC_ClockConfig+0x188>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	22f0      	movs	r2, #240	; 0xf0
 8001da6:	4393      	bics	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <HAL_RCC_ClockConfig+0x188>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d040      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <HAL_RCC_ClockConfig+0x188>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	029b      	lsls	r3, r3, #10
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d114      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06e      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dde:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <HAL_RCC_ClockConfig+0x188>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	049b      	lsls	r3, r3, #18
 8001de6:	4013      	ands	r3, r2
 8001de8:	d108      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e062      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	4b34      	ldr	r3, [pc, #208]	; (8001ec0 <HAL_RCC_ClockConfig+0x188>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2202      	movs	r2, #2
 8001df4:	4013      	ands	r3, r2
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e05b      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfc:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <HAL_RCC_ClockConfig+0x188>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2203      	movs	r2, #3
 8001e02:	4393      	bics	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_RCC_ClockConfig+0x188>)
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e10:	f7fe fd3e 	bl	8000890 <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1a:	f7fe fd39 	bl	8000890 <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4a27      	ldr	r2, [pc, #156]	; (8001ec4 <HAL_RCC_ClockConfig+0x18c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e042      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_RCC_ClockConfig+0x188>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	220c      	movs	r2, #12
 8001e34:	401a      	ands	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1ec      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e40:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <HAL_RCC_ClockConfig+0x184>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2201      	movs	r2, #1
 8001e46:	4013      	ands	r3, r2
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d211      	bcs.n	8001e72 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_RCC_ClockConfig+0x184>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2201      	movs	r2, #1
 8001e54:	4393      	bics	r3, r2
 8001e56:	0019      	movs	r1, r3
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <HAL_RCC_ClockConfig+0x184>)
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e60:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_RCC_ClockConfig+0x184>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2201      	movs	r2, #1
 8001e66:	4013      	ands	r3, r2
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e020      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2204      	movs	r2, #4
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <HAL_RCC_ClockConfig+0x188>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4a11      	ldr	r2, [pc, #68]	; (8001ec8 <HAL_RCC_ClockConfig+0x190>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	0019      	movs	r1, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_RCC_ClockConfig+0x188>)
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e90:	f000 f820 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001e94:	0001      	movs	r1, r0
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_RCC_ClockConfig+0x188>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <HAL_RCC_ClockConfig+0x194>)
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	000a      	movs	r2, r1
 8001ea6:	40da      	lsrs	r2, r3
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x198>)
 8001eaa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f7fe fca9 	bl	8000804 <HAL_InitTick>
  
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b004      	add	sp, #16
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	00001388 	.word	0x00001388
 8001ec8:	fffff8ff 	.word	0xfffff8ff
 8001ecc:	08003168 	.word	0x08003168
 8001ed0:	20000000 	.word	0x20000000

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b08f      	sub	sp, #60	; 0x3c
 8001ed8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001eda:	2314      	movs	r3, #20
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	4a2b      	ldr	r2, [pc, #172]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ee2:	c313      	stmia	r3!, {r0, r1, r4}
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	4a29      	ldr	r2, [pc, #164]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001eee:	c313      	stmia	r3!, {r0, r1, r4}
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001efc:	2300      	movs	r3, #0
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	220c      	movs	r2, #12
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d002      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0x4a>
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d003      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x50>
 8001f1c:	e02d      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f22:	e02d      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f26:	0c9b      	lsrs	r3, r3, #18
 8001f28:	220f      	movs	r2, #15
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2214      	movs	r2, #20
 8001f2e:	18ba      	adds	r2, r7, r2
 8001f30:	5cd3      	ldrb	r3, [r2, r3]
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	220f      	movs	r2, #15
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	1d3a      	adds	r2, r7, #4
 8001f3e:	5cd3      	ldrb	r3, [r2, r3]
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	025b      	lsls	r3, r3, #9
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d009      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f4e:	4812      	ldr	r0, [pc, #72]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f50:	f7fe f8e4 	bl	800011c <__udivsi3>
 8001f54:	0003      	movs	r3, r0
 8001f56:	001a      	movs	r2, r3
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	4353      	muls	r3, r2
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f5e:	e009      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f62:	000a      	movs	r2, r1
 8001f64:	0152      	lsls	r2, r2, #5
 8001f66:	1a52      	subs	r2, r2, r1
 8001f68:	0193      	lsls	r3, r2, #6
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	185b      	adds	r3, r3, r1
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f78:	e002      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f7c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f7e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f82:	0018      	movs	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b00f      	add	sp, #60	; 0x3c
 8001f88:	bd90      	pop	{r4, r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	08003148 	.word	0x08003148
 8001f90:	08003158 	.word	0x08003158
 8001f94:	40021000 	.word	0x40021000
 8001f98:	007a1200 	.word	0x007a1200

08001f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa0:	4b02      	ldr	r3, [pc, #8]	; (8001fac <HAL_RCC_GetHCLKFreq+0x10>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	20000000 	.word	0x20000000

08001fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001fb4:	f7ff fff2 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fb8:	0001      	movs	r1, r0
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	0a1b      	lsrs	r3, r3, #8
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	40d9      	lsrs	r1, r3
 8001fca:	000b      	movs	r3, r1
}    
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08003178 	.word	0x08003178

08001fdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e044      	b.n	8002078 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d107      	bne.n	8002006 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2274      	movs	r2, #116	; 0x74
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0018      	movs	r0, r3
 8002002:	f7fe fb21 	bl	8000648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2224      	movs	r2, #36	; 0x24
 800200a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2101      	movs	r1, #1
 8002018:	438a      	bics	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	0018      	movs	r0, r3
 8002020:	f000 f8da 	bl	80021d8 <UART_SetConfig>
 8002024:	0003      	movs	r3, r0
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e024      	b.n	8002078 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	0018      	movs	r0, r3
 800203a:	f000 fa0d 	bl	8002458 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	490d      	ldr	r1, [pc, #52]	; (8002080 <HAL_UART_Init+0xa4>)
 800204a:	400a      	ands	r2, r1
 800204c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	212a      	movs	r1, #42	; 0x2a
 800205a:	438a      	bics	r2, r1
 800205c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2101      	movs	r1, #1
 800206a:	430a      	orrs	r2, r1
 800206c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0018      	movs	r0, r3
 8002072:	f000 faa5 	bl	80025c0 <UART_CheckIdleState>
 8002076:	0003      	movs	r3, r0
}
 8002078:	0018      	movs	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	b002      	add	sp, #8
 800207e:	bd80      	pop	{r7, pc}
 8002080:	ffffb7ff 	.word	0xffffb7ff

08002084 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af02      	add	r7, sp, #8
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	1dbb      	adds	r3, r7, #6
 8002092:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002098:	2b20      	cmp	r3, #32
 800209a:	d000      	beq.n	800209e <HAL_UART_Transmit+0x1a>
 800209c:	e096      	b.n	80021cc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_UART_Transmit+0x28>
 80020a4:	1dbb      	adds	r3, r7, #6
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e08e      	b.n	80021ce <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	015b      	lsls	r3, r3, #5
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d109      	bne.n	80020d0 <HAL_UART_Transmit+0x4c>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d105      	bne.n	80020d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4013      	ands	r3, r2
 80020ca:	d001      	beq.n	80020d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e07e      	b.n	80021ce <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2274      	movs	r2, #116	; 0x74
 80020d4:	5c9b      	ldrb	r3, [r3, r2]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_UART_Transmit+0x5a>
 80020da:	2302      	movs	r3, #2
 80020dc:	e077      	b.n	80021ce <HAL_UART_Transmit+0x14a>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2274      	movs	r2, #116	; 0x74
 80020e2:	2101      	movs	r1, #1
 80020e4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2280      	movs	r2, #128	; 0x80
 80020ea:	2100      	movs	r1, #0
 80020ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2221      	movs	r2, #33	; 0x21
 80020f2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020f4:	f7fe fbcc 	bl	8000890 <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1dba      	adds	r2, r7, #6
 8002100:	2150      	movs	r1, #80	; 0x50
 8002102:	8812      	ldrh	r2, [r2, #0]
 8002104:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1dba      	adds	r2, r7, #6
 800210a:	2152      	movs	r1, #82	; 0x52
 800210c:	8812      	ldrh	r2, [r2, #0]
 800210e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	015b      	lsls	r3, r3, #5
 8002118:	429a      	cmp	r2, r3
 800211a:	d108      	bne.n	800212e <HAL_UART_Transmit+0xaa>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d104      	bne.n	800212e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	e003      	b.n	8002136 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2274      	movs	r2, #116	; 0x74
 800213a:	2100      	movs	r1, #0
 800213c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800213e:	e02d      	b.n	800219c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	0013      	movs	r3, r2
 800214a:	2200      	movs	r2, #0
 800214c:	2180      	movs	r1, #128	; 0x80
 800214e:	f000 fa7f 	bl	8002650 <UART_WaitOnFlagUntilTimeout>
 8002152:	1e03      	subs	r3, r0, #0
 8002154:	d001      	beq.n	800215a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e039      	b.n	80021ce <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10b      	bne.n	8002178 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	881a      	ldrh	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	05d2      	lsls	r2, r2, #23
 800216a:	0dd2      	lsrs	r2, r2, #23
 800216c:	b292      	uxth	r2, r2
 800216e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	3302      	adds	r3, #2
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	e008      	b.n	800218a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	781a      	ldrb	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	b292      	uxth	r2, r2
 8002182:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	3301      	adds	r3, #1
 8002188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2252      	movs	r2, #82	; 0x52
 800218e:	5a9b      	ldrh	r3, [r3, r2]
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b299      	uxth	r1, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2252      	movs	r2, #82	; 0x52
 800219a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2252      	movs	r2, #82	; 0x52
 80021a0:	5a9b      	ldrh	r3, [r3, r2]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1cb      	bne.n	8002140 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	0013      	movs	r3, r2
 80021b2:	2200      	movs	r2, #0
 80021b4:	2140      	movs	r1, #64	; 0x40
 80021b6:	f000 fa4b 	bl	8002650 <UART_WaitOnFlagUntilTimeout>
 80021ba:	1e03      	subs	r3, r0, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e005      	b.n	80021ce <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2220      	movs	r2, #32
 80021c6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e000      	b.n	80021ce <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80021cc:	2302      	movs	r3, #2
  }
}
 80021ce:	0018      	movs	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b008      	add	sp, #32
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021e0:	231e      	movs	r3, #30
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a8d      	ldr	r2, [pc, #564]	; (800243c <UART_SetConfig+0x264>)
 8002208:	4013      	ands	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a88      	ldr	r2, [pc, #544]	; (8002440 <UART_SetConfig+0x268>)
 800221e:	4013      	ands	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a7f      	ldr	r2, [pc, #508]	; (8002444 <UART_SetConfig+0x26c>)
 8002246:	4013      	ands	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	430a      	orrs	r2, r1
 8002252:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a7b      	ldr	r2, [pc, #492]	; (8002448 <UART_SetConfig+0x270>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d127      	bne.n	80022ae <UART_SetConfig+0xd6>
 800225e:	4b7b      	ldr	r3, [pc, #492]	; (800244c <UART_SetConfig+0x274>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	2203      	movs	r2, #3
 8002264:	4013      	ands	r3, r2
 8002266:	2b03      	cmp	r3, #3
 8002268:	d00d      	beq.n	8002286 <UART_SetConfig+0xae>
 800226a:	d81b      	bhi.n	80022a4 <UART_SetConfig+0xcc>
 800226c:	2b02      	cmp	r3, #2
 800226e:	d014      	beq.n	800229a <UART_SetConfig+0xc2>
 8002270:	d818      	bhi.n	80022a4 <UART_SetConfig+0xcc>
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <UART_SetConfig+0xa4>
 8002276:	2b01      	cmp	r3, #1
 8002278:	d00a      	beq.n	8002290 <UART_SetConfig+0xb8>
 800227a:	e013      	b.n	80022a4 <UART_SetConfig+0xcc>
 800227c:	231f      	movs	r3, #31
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
 8002284:	e021      	b.n	80022ca <UART_SetConfig+0xf2>
 8002286:	231f      	movs	r3, #31
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	2202      	movs	r2, #2
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	e01c      	b.n	80022ca <UART_SetConfig+0xf2>
 8002290:	231f      	movs	r3, #31
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2204      	movs	r2, #4
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e017      	b.n	80022ca <UART_SetConfig+0xf2>
 800229a:	231f      	movs	r3, #31
 800229c:	18fb      	adds	r3, r7, r3
 800229e:	2208      	movs	r2, #8
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	e012      	b.n	80022ca <UART_SetConfig+0xf2>
 80022a4:	231f      	movs	r3, #31
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	2210      	movs	r2, #16
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e00d      	b.n	80022ca <UART_SetConfig+0xf2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a67      	ldr	r2, [pc, #412]	; (8002450 <UART_SetConfig+0x278>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d104      	bne.n	80022c2 <UART_SetConfig+0xea>
 80022b8:	231f      	movs	r3, #31
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	e003      	b.n	80022ca <UART_SetConfig+0xf2>
 80022c2:	231f      	movs	r3, #31
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	2210      	movs	r2, #16
 80022c8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69da      	ldr	r2, [r3, #28]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d15d      	bne.n	8002392 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80022d6:	231f      	movs	r3, #31
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d015      	beq.n	800230c <UART_SetConfig+0x134>
 80022e0:	dc18      	bgt.n	8002314 <UART_SetConfig+0x13c>
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d00d      	beq.n	8002302 <UART_SetConfig+0x12a>
 80022e6:	dc15      	bgt.n	8002314 <UART_SetConfig+0x13c>
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <UART_SetConfig+0x11a>
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d005      	beq.n	80022fc <UART_SetConfig+0x124>
 80022f0:	e010      	b.n	8002314 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022f2:	f7ff fe5d 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 80022f6:	0003      	movs	r3, r0
 80022f8:	61bb      	str	r3, [r7, #24]
        break;
 80022fa:	e012      	b.n	8002322 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022fc:	4b55      	ldr	r3, [pc, #340]	; (8002454 <UART_SetConfig+0x27c>)
 80022fe:	61bb      	str	r3, [r7, #24]
        break;
 8002300:	e00f      	b.n	8002322 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002302:	f7ff fde7 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8002306:	0003      	movs	r3, r0
 8002308:	61bb      	str	r3, [r7, #24]
        break;
 800230a:	e00a      	b.n	8002322 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	61bb      	str	r3, [r7, #24]
        break;
 8002312:	e006      	b.n	8002322 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002318:	231e      	movs	r3, #30
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
        break;
 8002320:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d100      	bne.n	800232a <UART_SetConfig+0x152>
 8002328:	e07b      	b.n	8002422 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	005a      	lsls	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	085b      	lsrs	r3, r3, #1
 8002334:	18d2      	adds	r2, r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	0019      	movs	r1, r3
 800233c:	0010      	movs	r0, r2
 800233e:	f7fd feed 	bl	800011c <__udivsi3>
 8002342:	0003      	movs	r3, r0
 8002344:	b29b      	uxth	r3, r3
 8002346:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	2b0f      	cmp	r3, #15
 800234c:	d91c      	bls.n	8002388 <UART_SetConfig+0x1b0>
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	025b      	lsls	r3, r3, #9
 8002354:	429a      	cmp	r2, r3
 8002356:	d217      	bcs.n	8002388 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	b29a      	uxth	r2, r3
 800235c:	200e      	movs	r0, #14
 800235e:	183b      	adds	r3, r7, r0
 8002360:	210f      	movs	r1, #15
 8002362:	438a      	bics	r2, r1
 8002364:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	085b      	lsrs	r3, r3, #1
 800236a:	b29b      	uxth	r3, r3
 800236c:	2207      	movs	r2, #7
 800236e:	4013      	ands	r3, r2
 8002370:	b299      	uxth	r1, r3
 8002372:	183b      	adds	r3, r7, r0
 8002374:	183a      	adds	r2, r7, r0
 8002376:	8812      	ldrh	r2, [r2, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	183a      	adds	r2, r7, r0
 8002382:	8812      	ldrh	r2, [r2, #0]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	e04c      	b.n	8002422 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002388:	231e      	movs	r3, #30
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	e047      	b.n	8002422 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002392:	231f      	movs	r3, #31
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b08      	cmp	r3, #8
 800239a:	d015      	beq.n	80023c8 <UART_SetConfig+0x1f0>
 800239c:	dc18      	bgt.n	80023d0 <UART_SetConfig+0x1f8>
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d00d      	beq.n	80023be <UART_SetConfig+0x1e6>
 80023a2:	dc15      	bgt.n	80023d0 <UART_SetConfig+0x1f8>
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <UART_SetConfig+0x1d6>
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d005      	beq.n	80023b8 <UART_SetConfig+0x1e0>
 80023ac:	e010      	b.n	80023d0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023ae:	f7ff fdff 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 80023b2:	0003      	movs	r3, r0
 80023b4:	61bb      	str	r3, [r7, #24]
        break;
 80023b6:	e012      	b.n	80023de <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <UART_SetConfig+0x27c>)
 80023ba:	61bb      	str	r3, [r7, #24]
        break;
 80023bc:	e00f      	b.n	80023de <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023be:	f7ff fd89 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 80023c2:	0003      	movs	r3, r0
 80023c4:	61bb      	str	r3, [r7, #24]
        break;
 80023c6:	e00a      	b.n	80023de <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	61bb      	str	r3, [r7, #24]
        break;
 80023ce:	e006      	b.n	80023de <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80023d4:	231e      	movs	r3, #30
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
        break;
 80023dc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01e      	beq.n	8002422 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	085a      	lsrs	r2, r3, #1
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	18d2      	adds	r2, r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	0019      	movs	r1, r3
 80023f4:	0010      	movs	r0, r2
 80023f6:	f7fd fe91 	bl	800011c <__udivsi3>
 80023fa:	0003      	movs	r3, r0
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	2b0f      	cmp	r3, #15
 8002404:	d909      	bls.n	800241a <UART_SetConfig+0x242>
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	025b      	lsls	r3, r3, #9
 800240c:	429a      	cmp	r2, r3
 800240e:	d204      	bcs.n	800241a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	e003      	b.n	8002422 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800241a:	231e      	movs	r3, #30
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800242e:	231e      	movs	r3, #30
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	781b      	ldrb	r3, [r3, #0]
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b008      	add	sp, #32
 800243a:	bd80      	pop	{r7, pc}
 800243c:	ffff69f3 	.word	0xffff69f3
 8002440:	ffffcfff 	.word	0xffffcfff
 8002444:	fffff4ff 	.word	0xfffff4ff
 8002448:	40013800 	.word	0x40013800
 800244c:	40021000 	.word	0x40021000
 8002450:	40004400 	.word	0x40004400
 8002454:	007a1200 	.word	0x007a1200

08002458 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	2201      	movs	r2, #1
 8002466:	4013      	ands	r3, r2
 8002468:	d00b      	beq.n	8002482 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a4a      	ldr	r2, [pc, #296]	; (800259c <UART_AdvFeatureConfig+0x144>)
 8002472:	4013      	ands	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	2202      	movs	r2, #2
 8002488:	4013      	ands	r3, r2
 800248a:	d00b      	beq.n	80024a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4a43      	ldr	r2, [pc, #268]	; (80025a0 <UART_AdvFeatureConfig+0x148>)
 8002494:	4013      	ands	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	2204      	movs	r2, #4
 80024aa:	4013      	ands	r3, r2
 80024ac:	d00b      	beq.n	80024c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4a3b      	ldr	r2, [pc, #236]	; (80025a4 <UART_AdvFeatureConfig+0x14c>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	2208      	movs	r2, #8
 80024cc:	4013      	ands	r3, r2
 80024ce:	d00b      	beq.n	80024e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4a34      	ldr	r2, [pc, #208]	; (80025a8 <UART_AdvFeatureConfig+0x150>)
 80024d8:	4013      	ands	r3, r2
 80024da:	0019      	movs	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	2210      	movs	r2, #16
 80024ee:	4013      	ands	r3, r2
 80024f0:	d00b      	beq.n	800250a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4a2c      	ldr	r2, [pc, #176]	; (80025ac <UART_AdvFeatureConfig+0x154>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	2220      	movs	r2, #32
 8002510:	4013      	ands	r3, r2
 8002512:	d00b      	beq.n	800252c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	4a25      	ldr	r2, [pc, #148]	; (80025b0 <UART_AdvFeatureConfig+0x158>)
 800251c:	4013      	ands	r3, r2
 800251e:	0019      	movs	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	2240      	movs	r2, #64	; 0x40
 8002532:	4013      	ands	r3, r2
 8002534:	d01d      	beq.n	8002572 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <UART_AdvFeatureConfig+0x15c>)
 800253e:	4013      	ands	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	035b      	lsls	r3, r3, #13
 8002556:	429a      	cmp	r2, r3
 8002558:	d10b      	bne.n	8002572 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a15      	ldr	r2, [pc, #84]	; (80025b8 <UART_AdvFeatureConfig+0x160>)
 8002562:	4013      	ands	r3, r2
 8002564:	0019      	movs	r1, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	4013      	ands	r3, r2
 800257a:	d00b      	beq.n	8002594 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <UART_AdvFeatureConfig+0x164>)
 8002584:	4013      	ands	r3, r2
 8002586:	0019      	movs	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	605a      	str	r2, [r3, #4]
  }
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b002      	add	sp, #8
 800259a:	bd80      	pop	{r7, pc}
 800259c:	fffdffff 	.word	0xfffdffff
 80025a0:	fffeffff 	.word	0xfffeffff
 80025a4:	fffbffff 	.word	0xfffbffff
 80025a8:	ffff7fff 	.word	0xffff7fff
 80025ac:	ffffefff 	.word	0xffffefff
 80025b0:	ffffdfff 	.word	0xffffdfff
 80025b4:	ffefffff 	.word	0xffefffff
 80025b8:	ff9fffff 	.word	0xff9fffff
 80025bc:	fff7ffff 	.word	0xfff7ffff

080025c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2280      	movs	r2, #128	; 0x80
 80025cc:	2100      	movs	r1, #0
 80025ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025d0:	f7fe f95e 	bl	8000890 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2208      	movs	r2, #8
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d10c      	bne.n	8002600 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2280      	movs	r2, #128	; 0x80
 80025ea:	0391      	lsls	r1, r2, #14
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	4a17      	ldr	r2, [pc, #92]	; (800264c <UART_CheckIdleState+0x8c>)
 80025f0:	9200      	str	r2, [sp, #0]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f000 f82c 	bl	8002650 <UART_WaitOnFlagUntilTimeout>
 80025f8:	1e03      	subs	r3, r0, #0
 80025fa:	d001      	beq.n	8002600 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e021      	b.n	8002644 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2204      	movs	r2, #4
 8002608:	4013      	ands	r3, r2
 800260a:	2b04      	cmp	r3, #4
 800260c:	d10c      	bne.n	8002628 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2280      	movs	r2, #128	; 0x80
 8002612:	03d1      	lsls	r1, r2, #15
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4a0d      	ldr	r2, [pc, #52]	; (800264c <UART_CheckIdleState+0x8c>)
 8002618:	9200      	str	r2, [sp, #0]
 800261a:	2200      	movs	r2, #0
 800261c:	f000 f818 	bl	8002650 <UART_WaitOnFlagUntilTimeout>
 8002620:	1e03      	subs	r3, r0, #0
 8002622:	d001      	beq.n	8002628 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e00d      	b.n	8002644 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2274      	movs	r2, #116	; 0x74
 800263e:	2100      	movs	r1, #0
 8002640:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b004      	add	sp, #16
 800264a:	bd80      	pop	{r7, pc}
 800264c:	01ffffff 	.word	0x01ffffff

08002650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b094      	sub	sp, #80	; 0x50
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	1dfb      	adds	r3, r7, #7
 800265e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002660:	e0a3      	b.n	80027aa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002664:	3301      	adds	r3, #1
 8002666:	d100      	bne.n	800266a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002668:	e09f      	b.n	80027aa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266a:	f7fe f911 	bl	8000890 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002676:	429a      	cmp	r2, r3
 8002678:	d302      	bcc.n	8002680 <UART_WaitOnFlagUntilTimeout+0x30>
 800267a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800267c:	2b00      	cmp	r3, #0
 800267e:	d13d      	bne.n	80026fc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002680:	f3ef 8310 	mrs	r3, PRIMASK
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002688:	647b      	str	r3, [r7, #68]	; 0x44
 800268a:	2301      	movs	r3, #1
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	f383 8810 	msr	PRIMASK, r3
}
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	494c      	ldr	r1, [pc, #304]	; (80027d4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80026a2:	400a      	ands	r2, r1
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	f383 8810 	msr	PRIMASK, r3
}
 80026b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026b2:	f3ef 8310 	mrs	r3, PRIMASK
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80026b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ba:	643b      	str	r3, [r7, #64]	; 0x40
 80026bc:	2301      	movs	r3, #1
 80026be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c2:	f383 8810 	msr	PRIMASK, r3
}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2101      	movs	r1, #1
 80026d4:	438a      	bics	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026de:	f383 8810 	msr	PRIMASK, r3
}
 80026e2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2274      	movs	r2, #116	; 0x74
 80026f4:	2100      	movs	r1, #0
 80026f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e067      	b.n	80027cc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2204      	movs	r2, #4
 8002704:	4013      	ands	r3, r2
 8002706:	d050      	beq.n	80027aa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	401a      	ands	r2, r3
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	429a      	cmp	r2, r3
 800271a:	d146      	bne.n	80027aa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2280      	movs	r2, #128	; 0x80
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002726:	f3ef 8310 	mrs	r3, PRIMASK
 800272a:	613b      	str	r3, [r7, #16]
  return(result);
 800272c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800272e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002730:	2301      	movs	r3, #1
 8002732:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f383 8810 	msr	PRIMASK, r3
}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4923      	ldr	r1, [pc, #140]	; (80027d4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002748:	400a      	ands	r2, r1
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800274e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f383 8810 	msr	PRIMASK, r3
}
 8002756:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002758:	f3ef 8310 	mrs	r3, PRIMASK
 800275c:	61fb      	str	r3, [r7, #28]
  return(result);
 800275e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002760:	64bb      	str	r3, [r7, #72]	; 0x48
 8002762:	2301      	movs	r3, #1
 8002764:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	f383 8810 	msr	PRIMASK, r3
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	438a      	bics	r2, r1
 800277c:	609a      	str	r2, [r3, #8]
 800277e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	f383 8810 	msr	PRIMASK, r3
}
 8002788:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2220      	movs	r2, #32
 800278e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	2120      	movs	r1, #32
 800279c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2274      	movs	r2, #116	; 0x74
 80027a2:	2100      	movs	r1, #0
 80027a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e010      	b.n	80027cc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	4013      	ands	r3, r2
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	425a      	negs	r2, r3
 80027ba:	4153      	adcs	r3, r2
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	001a      	movs	r2, r3
 80027c0:	1dfb      	adds	r3, r7, #7
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d100      	bne.n	80027ca <UART_WaitOnFlagUntilTimeout+0x17a>
 80027c8:	e74b      	b.n	8002662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b014      	add	sp, #80	; 0x50
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	fffffe5f 	.word	0xfffffe5f

080027d8 <__errno>:
 80027d8:	4b01      	ldr	r3, [pc, #4]	; (80027e0 <__errno+0x8>)
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	4770      	bx	lr
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	2000000c 	.word	0x2000000c

080027e4 <__libc_init_array>:
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	2600      	movs	r6, #0
 80027e8:	4d0c      	ldr	r5, [pc, #48]	; (800281c <__libc_init_array+0x38>)
 80027ea:	4c0d      	ldr	r4, [pc, #52]	; (8002820 <__libc_init_array+0x3c>)
 80027ec:	1b64      	subs	r4, r4, r5
 80027ee:	10a4      	asrs	r4, r4, #2
 80027f0:	42a6      	cmp	r6, r4
 80027f2:	d109      	bne.n	8002808 <__libc_init_array+0x24>
 80027f4:	2600      	movs	r6, #0
 80027f6:	f000 fc8b 	bl	8003110 <_init>
 80027fa:	4d0a      	ldr	r5, [pc, #40]	; (8002824 <__libc_init_array+0x40>)
 80027fc:	4c0a      	ldr	r4, [pc, #40]	; (8002828 <__libc_init_array+0x44>)
 80027fe:	1b64      	subs	r4, r4, r5
 8002800:	10a4      	asrs	r4, r4, #2
 8002802:	42a6      	cmp	r6, r4
 8002804:	d105      	bne.n	8002812 <__libc_init_array+0x2e>
 8002806:	bd70      	pop	{r4, r5, r6, pc}
 8002808:	00b3      	lsls	r3, r6, #2
 800280a:	58eb      	ldr	r3, [r5, r3]
 800280c:	4798      	blx	r3
 800280e:	3601      	adds	r6, #1
 8002810:	e7ee      	b.n	80027f0 <__libc_init_array+0xc>
 8002812:	00b3      	lsls	r3, r6, #2
 8002814:	58eb      	ldr	r3, [r5, r3]
 8002816:	4798      	blx	r3
 8002818:	3601      	adds	r6, #1
 800281a:	e7f2      	b.n	8002802 <__libc_init_array+0x1e>
 800281c:	080031b4 	.word	0x080031b4
 8002820:	080031b4 	.word	0x080031b4
 8002824:	080031b4 	.word	0x080031b4
 8002828:	080031b8 	.word	0x080031b8

0800282c <memset>:
 800282c:	0003      	movs	r3, r0
 800282e:	1882      	adds	r2, r0, r2
 8002830:	4293      	cmp	r3, r2
 8002832:	d100      	bne.n	8002836 <memset+0xa>
 8002834:	4770      	bx	lr
 8002836:	7019      	strb	r1, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	e7f9      	b.n	8002830 <memset+0x4>

0800283c <siprintf>:
 800283c:	b40e      	push	{r1, r2, r3}
 800283e:	b500      	push	{lr}
 8002840:	490b      	ldr	r1, [pc, #44]	; (8002870 <siprintf+0x34>)
 8002842:	b09c      	sub	sp, #112	; 0x70
 8002844:	ab1d      	add	r3, sp, #116	; 0x74
 8002846:	9002      	str	r0, [sp, #8]
 8002848:	9006      	str	r0, [sp, #24]
 800284a:	9107      	str	r1, [sp, #28]
 800284c:	9104      	str	r1, [sp, #16]
 800284e:	4809      	ldr	r0, [pc, #36]	; (8002874 <siprintf+0x38>)
 8002850:	4909      	ldr	r1, [pc, #36]	; (8002878 <siprintf+0x3c>)
 8002852:	cb04      	ldmia	r3!, {r2}
 8002854:	9105      	str	r1, [sp, #20]
 8002856:	6800      	ldr	r0, [r0, #0]
 8002858:	a902      	add	r1, sp, #8
 800285a:	9301      	str	r3, [sp, #4]
 800285c:	f000 f870 	bl	8002940 <_svfiprintf_r>
 8002860:	2300      	movs	r3, #0
 8002862:	9a02      	ldr	r2, [sp, #8]
 8002864:	7013      	strb	r3, [r2, #0]
 8002866:	b01c      	add	sp, #112	; 0x70
 8002868:	bc08      	pop	{r3}
 800286a:	b003      	add	sp, #12
 800286c:	4718      	bx	r3
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	7fffffff 	.word	0x7fffffff
 8002874:	2000000c 	.word	0x2000000c
 8002878:	ffff0208 	.word	0xffff0208

0800287c <__ssputs_r>:
 800287c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287e:	688e      	ldr	r6, [r1, #8]
 8002880:	b085      	sub	sp, #20
 8002882:	0007      	movs	r7, r0
 8002884:	000c      	movs	r4, r1
 8002886:	9203      	str	r2, [sp, #12]
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	429e      	cmp	r6, r3
 800288c:	d83c      	bhi.n	8002908 <__ssputs_r+0x8c>
 800288e:	2390      	movs	r3, #144	; 0x90
 8002890:	898a      	ldrh	r2, [r1, #12]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	421a      	tst	r2, r3
 8002896:	d034      	beq.n	8002902 <__ssputs_r+0x86>
 8002898:	6909      	ldr	r1, [r1, #16]
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	6960      	ldr	r0, [r4, #20]
 800289e:	1a5b      	subs	r3, r3, r1
 80028a0:	9302      	str	r3, [sp, #8]
 80028a2:	2303      	movs	r3, #3
 80028a4:	4343      	muls	r3, r0
 80028a6:	0fdd      	lsrs	r5, r3, #31
 80028a8:	18ed      	adds	r5, r5, r3
 80028aa:	9b01      	ldr	r3, [sp, #4]
 80028ac:	9802      	ldr	r0, [sp, #8]
 80028ae:	3301      	adds	r3, #1
 80028b0:	181b      	adds	r3, r3, r0
 80028b2:	106d      	asrs	r5, r5, #1
 80028b4:	42ab      	cmp	r3, r5
 80028b6:	d900      	bls.n	80028ba <__ssputs_r+0x3e>
 80028b8:	001d      	movs	r5, r3
 80028ba:	0553      	lsls	r3, r2, #21
 80028bc:	d532      	bpl.n	8002924 <__ssputs_r+0xa8>
 80028be:	0029      	movs	r1, r5
 80028c0:	0038      	movs	r0, r7
 80028c2:	f000 fb53 	bl	8002f6c <_malloc_r>
 80028c6:	1e06      	subs	r6, r0, #0
 80028c8:	d109      	bne.n	80028de <__ssputs_r+0x62>
 80028ca:	230c      	movs	r3, #12
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	2340      	movs	r3, #64	; 0x40
 80028d0:	2001      	movs	r0, #1
 80028d2:	89a2      	ldrh	r2, [r4, #12]
 80028d4:	4240      	negs	r0, r0
 80028d6:	4313      	orrs	r3, r2
 80028d8:	81a3      	strh	r3, [r4, #12]
 80028da:	b005      	add	sp, #20
 80028dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028de:	9a02      	ldr	r2, [sp, #8]
 80028e0:	6921      	ldr	r1, [r4, #16]
 80028e2:	f000 faba 	bl	8002e5a <memcpy>
 80028e6:	89a3      	ldrh	r3, [r4, #12]
 80028e8:	4a14      	ldr	r2, [pc, #80]	; (800293c <__ssputs_r+0xc0>)
 80028ea:	401a      	ands	r2, r3
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	4313      	orrs	r3, r2
 80028f0:	81a3      	strh	r3, [r4, #12]
 80028f2:	9b02      	ldr	r3, [sp, #8]
 80028f4:	6126      	str	r6, [r4, #16]
 80028f6:	18f6      	adds	r6, r6, r3
 80028f8:	6026      	str	r6, [r4, #0]
 80028fa:	6165      	str	r5, [r4, #20]
 80028fc:	9e01      	ldr	r6, [sp, #4]
 80028fe:	1aed      	subs	r5, r5, r3
 8002900:	60a5      	str	r5, [r4, #8]
 8002902:	9b01      	ldr	r3, [sp, #4]
 8002904:	429e      	cmp	r6, r3
 8002906:	d900      	bls.n	800290a <__ssputs_r+0x8e>
 8002908:	9e01      	ldr	r6, [sp, #4]
 800290a:	0032      	movs	r2, r6
 800290c:	9903      	ldr	r1, [sp, #12]
 800290e:	6820      	ldr	r0, [r4, #0]
 8002910:	f000 faac 	bl	8002e6c <memmove>
 8002914:	68a3      	ldr	r3, [r4, #8]
 8002916:	2000      	movs	r0, #0
 8002918:	1b9b      	subs	r3, r3, r6
 800291a:	60a3      	str	r3, [r4, #8]
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	199e      	adds	r6, r3, r6
 8002920:	6026      	str	r6, [r4, #0]
 8002922:	e7da      	b.n	80028da <__ssputs_r+0x5e>
 8002924:	002a      	movs	r2, r5
 8002926:	0038      	movs	r0, r7
 8002928:	f000 fb96 	bl	8003058 <_realloc_r>
 800292c:	1e06      	subs	r6, r0, #0
 800292e:	d1e0      	bne.n	80028f2 <__ssputs_r+0x76>
 8002930:	0038      	movs	r0, r7
 8002932:	6921      	ldr	r1, [r4, #16]
 8002934:	f000 faae 	bl	8002e94 <_free_r>
 8002938:	e7c7      	b.n	80028ca <__ssputs_r+0x4e>
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	fffffb7f 	.word	0xfffffb7f

08002940 <_svfiprintf_r>:
 8002940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002942:	b0a1      	sub	sp, #132	; 0x84
 8002944:	9003      	str	r0, [sp, #12]
 8002946:	001d      	movs	r5, r3
 8002948:	898b      	ldrh	r3, [r1, #12]
 800294a:	000f      	movs	r7, r1
 800294c:	0016      	movs	r6, r2
 800294e:	061b      	lsls	r3, r3, #24
 8002950:	d511      	bpl.n	8002976 <_svfiprintf_r+0x36>
 8002952:	690b      	ldr	r3, [r1, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10e      	bne.n	8002976 <_svfiprintf_r+0x36>
 8002958:	2140      	movs	r1, #64	; 0x40
 800295a:	f000 fb07 	bl	8002f6c <_malloc_r>
 800295e:	6038      	str	r0, [r7, #0]
 8002960:	6138      	str	r0, [r7, #16]
 8002962:	2800      	cmp	r0, #0
 8002964:	d105      	bne.n	8002972 <_svfiprintf_r+0x32>
 8002966:	230c      	movs	r3, #12
 8002968:	9a03      	ldr	r2, [sp, #12]
 800296a:	3801      	subs	r0, #1
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	b021      	add	sp, #132	; 0x84
 8002970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002972:	2340      	movs	r3, #64	; 0x40
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	2300      	movs	r3, #0
 8002978:	ac08      	add	r4, sp, #32
 800297a:	6163      	str	r3, [r4, #20]
 800297c:	3320      	adds	r3, #32
 800297e:	7663      	strb	r3, [r4, #25]
 8002980:	3310      	adds	r3, #16
 8002982:	76a3      	strb	r3, [r4, #26]
 8002984:	9507      	str	r5, [sp, #28]
 8002986:	0035      	movs	r5, r6
 8002988:	782b      	ldrb	r3, [r5, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <_svfiprintf_r+0x52>
 800298e:	2b25      	cmp	r3, #37	; 0x25
 8002990:	d147      	bne.n	8002a22 <_svfiprintf_r+0xe2>
 8002992:	1bab      	subs	r3, r5, r6
 8002994:	9305      	str	r3, [sp, #20]
 8002996:	42b5      	cmp	r5, r6
 8002998:	d00c      	beq.n	80029b4 <_svfiprintf_r+0x74>
 800299a:	0032      	movs	r2, r6
 800299c:	0039      	movs	r1, r7
 800299e:	9803      	ldr	r0, [sp, #12]
 80029a0:	f7ff ff6c 	bl	800287c <__ssputs_r>
 80029a4:	1c43      	adds	r3, r0, #1
 80029a6:	d100      	bne.n	80029aa <_svfiprintf_r+0x6a>
 80029a8:	e0ae      	b.n	8002b08 <_svfiprintf_r+0x1c8>
 80029aa:	6962      	ldr	r2, [r4, #20]
 80029ac:	9b05      	ldr	r3, [sp, #20]
 80029ae:	4694      	mov	ip, r2
 80029b0:	4463      	add	r3, ip
 80029b2:	6163      	str	r3, [r4, #20]
 80029b4:	782b      	ldrb	r3, [r5, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d100      	bne.n	80029bc <_svfiprintf_r+0x7c>
 80029ba:	e0a5      	b.n	8002b08 <_svfiprintf_r+0x1c8>
 80029bc:	2201      	movs	r2, #1
 80029be:	2300      	movs	r3, #0
 80029c0:	4252      	negs	r2, r2
 80029c2:	6062      	str	r2, [r4, #4]
 80029c4:	a904      	add	r1, sp, #16
 80029c6:	3254      	adds	r2, #84	; 0x54
 80029c8:	1852      	adds	r2, r2, r1
 80029ca:	1c6e      	adds	r6, r5, #1
 80029cc:	6023      	str	r3, [r4, #0]
 80029ce:	60e3      	str	r3, [r4, #12]
 80029d0:	60a3      	str	r3, [r4, #8]
 80029d2:	7013      	strb	r3, [r2, #0]
 80029d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80029d6:	2205      	movs	r2, #5
 80029d8:	7831      	ldrb	r1, [r6, #0]
 80029da:	4854      	ldr	r0, [pc, #336]	; (8002b2c <_svfiprintf_r+0x1ec>)
 80029dc:	f000 fa32 	bl	8002e44 <memchr>
 80029e0:	1c75      	adds	r5, r6, #1
 80029e2:	2800      	cmp	r0, #0
 80029e4:	d11f      	bne.n	8002a26 <_svfiprintf_r+0xe6>
 80029e6:	6822      	ldr	r2, [r4, #0]
 80029e8:	06d3      	lsls	r3, r2, #27
 80029ea:	d504      	bpl.n	80029f6 <_svfiprintf_r+0xb6>
 80029ec:	2353      	movs	r3, #83	; 0x53
 80029ee:	a904      	add	r1, sp, #16
 80029f0:	185b      	adds	r3, r3, r1
 80029f2:	2120      	movs	r1, #32
 80029f4:	7019      	strb	r1, [r3, #0]
 80029f6:	0713      	lsls	r3, r2, #28
 80029f8:	d504      	bpl.n	8002a04 <_svfiprintf_r+0xc4>
 80029fa:	2353      	movs	r3, #83	; 0x53
 80029fc:	a904      	add	r1, sp, #16
 80029fe:	185b      	adds	r3, r3, r1
 8002a00:	212b      	movs	r1, #43	; 0x2b
 8002a02:	7019      	strb	r1, [r3, #0]
 8002a04:	7833      	ldrb	r3, [r6, #0]
 8002a06:	2b2a      	cmp	r3, #42	; 0x2a
 8002a08:	d016      	beq.n	8002a38 <_svfiprintf_r+0xf8>
 8002a0a:	0035      	movs	r5, r6
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	200a      	movs	r0, #10
 8002a10:	68e3      	ldr	r3, [r4, #12]
 8002a12:	782a      	ldrb	r2, [r5, #0]
 8002a14:	1c6e      	adds	r6, r5, #1
 8002a16:	3a30      	subs	r2, #48	; 0x30
 8002a18:	2a09      	cmp	r2, #9
 8002a1a:	d94e      	bls.n	8002aba <_svfiprintf_r+0x17a>
 8002a1c:	2900      	cmp	r1, #0
 8002a1e:	d111      	bne.n	8002a44 <_svfiprintf_r+0x104>
 8002a20:	e017      	b.n	8002a52 <_svfiprintf_r+0x112>
 8002a22:	3501      	adds	r5, #1
 8002a24:	e7b0      	b.n	8002988 <_svfiprintf_r+0x48>
 8002a26:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <_svfiprintf_r+0x1ec>)
 8002a28:	6822      	ldr	r2, [r4, #0]
 8002a2a:	1ac0      	subs	r0, r0, r3
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	4083      	lsls	r3, r0
 8002a30:	4313      	orrs	r3, r2
 8002a32:	002e      	movs	r6, r5
 8002a34:	6023      	str	r3, [r4, #0]
 8002a36:	e7ce      	b.n	80029d6 <_svfiprintf_r+0x96>
 8002a38:	9b07      	ldr	r3, [sp, #28]
 8002a3a:	1d19      	adds	r1, r3, #4
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	9107      	str	r1, [sp, #28]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	db01      	blt.n	8002a48 <_svfiprintf_r+0x108>
 8002a44:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a46:	e004      	b.n	8002a52 <_svfiprintf_r+0x112>
 8002a48:	425b      	negs	r3, r3
 8002a4a:	60e3      	str	r3, [r4, #12]
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	6023      	str	r3, [r4, #0]
 8002a52:	782b      	ldrb	r3, [r5, #0]
 8002a54:	2b2e      	cmp	r3, #46	; 0x2e
 8002a56:	d10a      	bne.n	8002a6e <_svfiprintf_r+0x12e>
 8002a58:	786b      	ldrb	r3, [r5, #1]
 8002a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8002a5c:	d135      	bne.n	8002aca <_svfiprintf_r+0x18a>
 8002a5e:	9b07      	ldr	r3, [sp, #28]
 8002a60:	3502      	adds	r5, #2
 8002a62:	1d1a      	adds	r2, r3, #4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	9207      	str	r2, [sp, #28]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	db2b      	blt.n	8002ac4 <_svfiprintf_r+0x184>
 8002a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a6e:	4e30      	ldr	r6, [pc, #192]	; (8002b30 <_svfiprintf_r+0x1f0>)
 8002a70:	2203      	movs	r2, #3
 8002a72:	0030      	movs	r0, r6
 8002a74:	7829      	ldrb	r1, [r5, #0]
 8002a76:	f000 f9e5 	bl	8002e44 <memchr>
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d006      	beq.n	8002a8c <_svfiprintf_r+0x14c>
 8002a7e:	2340      	movs	r3, #64	; 0x40
 8002a80:	1b80      	subs	r0, r0, r6
 8002a82:	4083      	lsls	r3, r0
 8002a84:	6822      	ldr	r2, [r4, #0]
 8002a86:	3501      	adds	r5, #1
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	6023      	str	r3, [r4, #0]
 8002a8c:	7829      	ldrb	r1, [r5, #0]
 8002a8e:	2206      	movs	r2, #6
 8002a90:	4828      	ldr	r0, [pc, #160]	; (8002b34 <_svfiprintf_r+0x1f4>)
 8002a92:	1c6e      	adds	r6, r5, #1
 8002a94:	7621      	strb	r1, [r4, #24]
 8002a96:	f000 f9d5 	bl	8002e44 <memchr>
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	d03c      	beq.n	8002b18 <_svfiprintf_r+0x1d8>
 8002a9e:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <_svfiprintf_r+0x1f8>)
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d125      	bne.n	8002af0 <_svfiprintf_r+0x1b0>
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	9b07      	ldr	r3, [sp, #28]
 8002aa8:	3307      	adds	r3, #7
 8002aaa:	4393      	bics	r3, r2
 8002aac:	3308      	adds	r3, #8
 8002aae:	9307      	str	r3, [sp, #28]
 8002ab0:	6963      	ldr	r3, [r4, #20]
 8002ab2:	9a04      	ldr	r2, [sp, #16]
 8002ab4:	189b      	adds	r3, r3, r2
 8002ab6:	6163      	str	r3, [r4, #20]
 8002ab8:	e765      	b.n	8002986 <_svfiprintf_r+0x46>
 8002aba:	4343      	muls	r3, r0
 8002abc:	0035      	movs	r5, r6
 8002abe:	2101      	movs	r1, #1
 8002ac0:	189b      	adds	r3, r3, r2
 8002ac2:	e7a6      	b.n	8002a12 <_svfiprintf_r+0xd2>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	425b      	negs	r3, r3
 8002ac8:	e7d0      	b.n	8002a6c <_svfiprintf_r+0x12c>
 8002aca:	2300      	movs	r3, #0
 8002acc:	200a      	movs	r0, #10
 8002ace:	001a      	movs	r2, r3
 8002ad0:	3501      	adds	r5, #1
 8002ad2:	6063      	str	r3, [r4, #4]
 8002ad4:	7829      	ldrb	r1, [r5, #0]
 8002ad6:	1c6e      	adds	r6, r5, #1
 8002ad8:	3930      	subs	r1, #48	; 0x30
 8002ada:	2909      	cmp	r1, #9
 8002adc:	d903      	bls.n	8002ae6 <_svfiprintf_r+0x1a6>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0c5      	beq.n	8002a6e <_svfiprintf_r+0x12e>
 8002ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8002ae4:	e7c3      	b.n	8002a6e <_svfiprintf_r+0x12e>
 8002ae6:	4342      	muls	r2, r0
 8002ae8:	0035      	movs	r5, r6
 8002aea:	2301      	movs	r3, #1
 8002aec:	1852      	adds	r2, r2, r1
 8002aee:	e7f1      	b.n	8002ad4 <_svfiprintf_r+0x194>
 8002af0:	ab07      	add	r3, sp, #28
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	003a      	movs	r2, r7
 8002af6:	0021      	movs	r1, r4
 8002af8:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <_svfiprintf_r+0x1fc>)
 8002afa:	9803      	ldr	r0, [sp, #12]
 8002afc:	e000      	b.n	8002b00 <_svfiprintf_r+0x1c0>
 8002afe:	bf00      	nop
 8002b00:	9004      	str	r0, [sp, #16]
 8002b02:	9b04      	ldr	r3, [sp, #16]
 8002b04:	3301      	adds	r3, #1
 8002b06:	d1d3      	bne.n	8002ab0 <_svfiprintf_r+0x170>
 8002b08:	89bb      	ldrh	r3, [r7, #12]
 8002b0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002b0c:	065b      	lsls	r3, r3, #25
 8002b0e:	d400      	bmi.n	8002b12 <_svfiprintf_r+0x1d2>
 8002b10:	e72d      	b.n	800296e <_svfiprintf_r+0x2e>
 8002b12:	2001      	movs	r0, #1
 8002b14:	4240      	negs	r0, r0
 8002b16:	e72a      	b.n	800296e <_svfiprintf_r+0x2e>
 8002b18:	ab07      	add	r3, sp, #28
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	003a      	movs	r2, r7
 8002b1e:	0021      	movs	r1, r4
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <_svfiprintf_r+0x1fc>)
 8002b22:	9803      	ldr	r0, [sp, #12]
 8002b24:	f000 f87c 	bl	8002c20 <_printf_i>
 8002b28:	e7ea      	b.n	8002b00 <_svfiprintf_r+0x1c0>
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	08003180 	.word	0x08003180
 8002b30:	08003186 	.word	0x08003186
 8002b34:	0800318a 	.word	0x0800318a
 8002b38:	00000000 	.word	0x00000000
 8002b3c:	0800287d 	.word	0x0800287d

08002b40 <_printf_common>:
 8002b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b42:	0015      	movs	r5, r2
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	688a      	ldr	r2, [r1, #8]
 8002b48:	690b      	ldr	r3, [r1, #16]
 8002b4a:	000c      	movs	r4, r1
 8002b4c:	9000      	str	r0, [sp, #0]
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	da00      	bge.n	8002b54 <_printf_common+0x14>
 8002b52:	0013      	movs	r3, r2
 8002b54:	0022      	movs	r2, r4
 8002b56:	602b      	str	r3, [r5, #0]
 8002b58:	3243      	adds	r2, #67	; 0x43
 8002b5a:	7812      	ldrb	r2, [r2, #0]
 8002b5c:	2a00      	cmp	r2, #0
 8002b5e:	d001      	beq.n	8002b64 <_printf_common+0x24>
 8002b60:	3301      	adds	r3, #1
 8002b62:	602b      	str	r3, [r5, #0]
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	069b      	lsls	r3, r3, #26
 8002b68:	d502      	bpl.n	8002b70 <_printf_common+0x30>
 8002b6a:	682b      	ldr	r3, [r5, #0]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	602b      	str	r3, [r5, #0]
 8002b70:	6822      	ldr	r2, [r4, #0]
 8002b72:	2306      	movs	r3, #6
 8002b74:	0017      	movs	r7, r2
 8002b76:	401f      	ands	r7, r3
 8002b78:	421a      	tst	r2, r3
 8002b7a:	d027      	beq.n	8002bcc <_printf_common+0x8c>
 8002b7c:	0023      	movs	r3, r4
 8002b7e:	3343      	adds	r3, #67	; 0x43
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	1e5a      	subs	r2, r3, #1
 8002b84:	4193      	sbcs	r3, r2
 8002b86:	6822      	ldr	r2, [r4, #0]
 8002b88:	0692      	lsls	r2, r2, #26
 8002b8a:	d430      	bmi.n	8002bee <_printf_common+0xae>
 8002b8c:	0022      	movs	r2, r4
 8002b8e:	9901      	ldr	r1, [sp, #4]
 8002b90:	9800      	ldr	r0, [sp, #0]
 8002b92:	9e08      	ldr	r6, [sp, #32]
 8002b94:	3243      	adds	r2, #67	; 0x43
 8002b96:	47b0      	blx	r6
 8002b98:	1c43      	adds	r3, r0, #1
 8002b9a:	d025      	beq.n	8002be8 <_printf_common+0xa8>
 8002b9c:	2306      	movs	r3, #6
 8002b9e:	6820      	ldr	r0, [r4, #0]
 8002ba0:	682a      	ldr	r2, [r5, #0]
 8002ba2:	68e1      	ldr	r1, [r4, #12]
 8002ba4:	2500      	movs	r5, #0
 8002ba6:	4003      	ands	r3, r0
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d103      	bne.n	8002bb4 <_printf_common+0x74>
 8002bac:	1a8d      	subs	r5, r1, r2
 8002bae:	43eb      	mvns	r3, r5
 8002bb0:	17db      	asrs	r3, r3, #31
 8002bb2:	401d      	ands	r5, r3
 8002bb4:	68a3      	ldr	r3, [r4, #8]
 8002bb6:	6922      	ldr	r2, [r4, #16]
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	dd01      	ble.n	8002bc0 <_printf_common+0x80>
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	18ed      	adds	r5, r5, r3
 8002bc0:	2700      	movs	r7, #0
 8002bc2:	42bd      	cmp	r5, r7
 8002bc4:	d120      	bne.n	8002c08 <_printf_common+0xc8>
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	e010      	b.n	8002bec <_printf_common+0xac>
 8002bca:	3701      	adds	r7, #1
 8002bcc:	68e3      	ldr	r3, [r4, #12]
 8002bce:	682a      	ldr	r2, [r5, #0]
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	42bb      	cmp	r3, r7
 8002bd4:	ddd2      	ble.n	8002b7c <_printf_common+0x3c>
 8002bd6:	0022      	movs	r2, r4
 8002bd8:	2301      	movs	r3, #1
 8002bda:	9901      	ldr	r1, [sp, #4]
 8002bdc:	9800      	ldr	r0, [sp, #0]
 8002bde:	9e08      	ldr	r6, [sp, #32]
 8002be0:	3219      	adds	r2, #25
 8002be2:	47b0      	blx	r6
 8002be4:	1c43      	adds	r3, r0, #1
 8002be6:	d1f0      	bne.n	8002bca <_printf_common+0x8a>
 8002be8:	2001      	movs	r0, #1
 8002bea:	4240      	negs	r0, r0
 8002bec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002bee:	2030      	movs	r0, #48	; 0x30
 8002bf0:	18e1      	adds	r1, r4, r3
 8002bf2:	3143      	adds	r1, #67	; 0x43
 8002bf4:	7008      	strb	r0, [r1, #0]
 8002bf6:	0021      	movs	r1, r4
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	3145      	adds	r1, #69	; 0x45
 8002bfc:	7809      	ldrb	r1, [r1, #0]
 8002bfe:	18a2      	adds	r2, r4, r2
 8002c00:	3243      	adds	r2, #67	; 0x43
 8002c02:	3302      	adds	r3, #2
 8002c04:	7011      	strb	r1, [r2, #0]
 8002c06:	e7c1      	b.n	8002b8c <_printf_common+0x4c>
 8002c08:	0022      	movs	r2, r4
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	9901      	ldr	r1, [sp, #4]
 8002c0e:	9800      	ldr	r0, [sp, #0]
 8002c10:	9e08      	ldr	r6, [sp, #32]
 8002c12:	321a      	adds	r2, #26
 8002c14:	47b0      	blx	r6
 8002c16:	1c43      	adds	r3, r0, #1
 8002c18:	d0e6      	beq.n	8002be8 <_printf_common+0xa8>
 8002c1a:	3701      	adds	r7, #1
 8002c1c:	e7d1      	b.n	8002bc2 <_printf_common+0x82>
	...

08002c20 <_printf_i>:
 8002c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c22:	b08b      	sub	sp, #44	; 0x2c
 8002c24:	9206      	str	r2, [sp, #24]
 8002c26:	000a      	movs	r2, r1
 8002c28:	3243      	adds	r2, #67	; 0x43
 8002c2a:	9307      	str	r3, [sp, #28]
 8002c2c:	9005      	str	r0, [sp, #20]
 8002c2e:	9204      	str	r2, [sp, #16]
 8002c30:	7e0a      	ldrb	r2, [r1, #24]
 8002c32:	000c      	movs	r4, r1
 8002c34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002c36:	2a78      	cmp	r2, #120	; 0x78
 8002c38:	d807      	bhi.n	8002c4a <_printf_i+0x2a>
 8002c3a:	2a62      	cmp	r2, #98	; 0x62
 8002c3c:	d809      	bhi.n	8002c52 <_printf_i+0x32>
 8002c3e:	2a00      	cmp	r2, #0
 8002c40:	d100      	bne.n	8002c44 <_printf_i+0x24>
 8002c42:	e0c1      	b.n	8002dc8 <_printf_i+0x1a8>
 8002c44:	2a58      	cmp	r2, #88	; 0x58
 8002c46:	d100      	bne.n	8002c4a <_printf_i+0x2a>
 8002c48:	e08c      	b.n	8002d64 <_printf_i+0x144>
 8002c4a:	0026      	movs	r6, r4
 8002c4c:	3642      	adds	r6, #66	; 0x42
 8002c4e:	7032      	strb	r2, [r6, #0]
 8002c50:	e022      	b.n	8002c98 <_printf_i+0x78>
 8002c52:	0010      	movs	r0, r2
 8002c54:	3863      	subs	r0, #99	; 0x63
 8002c56:	2815      	cmp	r0, #21
 8002c58:	d8f7      	bhi.n	8002c4a <_printf_i+0x2a>
 8002c5a:	f7fd fa55 	bl	8000108 <__gnu_thumb1_case_shi>
 8002c5e:	0016      	.short	0x0016
 8002c60:	fff6001f 	.word	0xfff6001f
 8002c64:	fff6fff6 	.word	0xfff6fff6
 8002c68:	001ffff6 	.word	0x001ffff6
 8002c6c:	fff6fff6 	.word	0xfff6fff6
 8002c70:	fff6fff6 	.word	0xfff6fff6
 8002c74:	003600a8 	.word	0x003600a8
 8002c78:	fff6009a 	.word	0xfff6009a
 8002c7c:	00b9fff6 	.word	0x00b9fff6
 8002c80:	0036fff6 	.word	0x0036fff6
 8002c84:	fff6fff6 	.word	0xfff6fff6
 8002c88:	009e      	.short	0x009e
 8002c8a:	0026      	movs	r6, r4
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	3642      	adds	r6, #66	; 0x42
 8002c90:	1d11      	adds	r1, r2, #4
 8002c92:	6019      	str	r1, [r3, #0]
 8002c94:	6813      	ldr	r3, [r2, #0]
 8002c96:	7033      	strb	r3, [r6, #0]
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0a7      	b.n	8002dec <_printf_i+0x1cc>
 8002c9c:	6808      	ldr	r0, [r1, #0]
 8002c9e:	6819      	ldr	r1, [r3, #0]
 8002ca0:	1d0a      	adds	r2, r1, #4
 8002ca2:	0605      	lsls	r5, r0, #24
 8002ca4:	d50b      	bpl.n	8002cbe <_printf_i+0x9e>
 8002ca6:	680d      	ldr	r5, [r1, #0]
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	2d00      	cmp	r5, #0
 8002cac:	da03      	bge.n	8002cb6 <_printf_i+0x96>
 8002cae:	232d      	movs	r3, #45	; 0x2d
 8002cb0:	9a04      	ldr	r2, [sp, #16]
 8002cb2:	426d      	negs	r5, r5
 8002cb4:	7013      	strb	r3, [r2, #0]
 8002cb6:	4b61      	ldr	r3, [pc, #388]	; (8002e3c <_printf_i+0x21c>)
 8002cb8:	270a      	movs	r7, #10
 8002cba:	9303      	str	r3, [sp, #12]
 8002cbc:	e01b      	b.n	8002cf6 <_printf_i+0xd6>
 8002cbe:	680d      	ldr	r5, [r1, #0]
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	0641      	lsls	r1, r0, #25
 8002cc4:	d5f1      	bpl.n	8002caa <_printf_i+0x8a>
 8002cc6:	b22d      	sxth	r5, r5
 8002cc8:	e7ef      	b.n	8002caa <_printf_i+0x8a>
 8002cca:	680d      	ldr	r5, [r1, #0]
 8002ccc:	6819      	ldr	r1, [r3, #0]
 8002cce:	1d08      	adds	r0, r1, #4
 8002cd0:	6018      	str	r0, [r3, #0]
 8002cd2:	062e      	lsls	r6, r5, #24
 8002cd4:	d501      	bpl.n	8002cda <_printf_i+0xba>
 8002cd6:	680d      	ldr	r5, [r1, #0]
 8002cd8:	e003      	b.n	8002ce2 <_printf_i+0xc2>
 8002cda:	066d      	lsls	r5, r5, #25
 8002cdc:	d5fb      	bpl.n	8002cd6 <_printf_i+0xb6>
 8002cde:	680d      	ldr	r5, [r1, #0]
 8002ce0:	b2ad      	uxth	r5, r5
 8002ce2:	4b56      	ldr	r3, [pc, #344]	; (8002e3c <_printf_i+0x21c>)
 8002ce4:	2708      	movs	r7, #8
 8002ce6:	9303      	str	r3, [sp, #12]
 8002ce8:	2a6f      	cmp	r2, #111	; 0x6f
 8002cea:	d000      	beq.n	8002cee <_printf_i+0xce>
 8002cec:	3702      	adds	r7, #2
 8002cee:	0023      	movs	r3, r4
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	3343      	adds	r3, #67	; 0x43
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	6863      	ldr	r3, [r4, #4]
 8002cf8:	60a3      	str	r3, [r4, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	db03      	blt.n	8002d06 <_printf_i+0xe6>
 8002cfe:	2204      	movs	r2, #4
 8002d00:	6821      	ldr	r1, [r4, #0]
 8002d02:	4391      	bics	r1, r2
 8002d04:	6021      	str	r1, [r4, #0]
 8002d06:	2d00      	cmp	r5, #0
 8002d08:	d102      	bne.n	8002d10 <_printf_i+0xf0>
 8002d0a:	9e04      	ldr	r6, [sp, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00c      	beq.n	8002d2a <_printf_i+0x10a>
 8002d10:	9e04      	ldr	r6, [sp, #16]
 8002d12:	0028      	movs	r0, r5
 8002d14:	0039      	movs	r1, r7
 8002d16:	f7fd fa87 	bl	8000228 <__aeabi_uidivmod>
 8002d1a:	9b03      	ldr	r3, [sp, #12]
 8002d1c:	3e01      	subs	r6, #1
 8002d1e:	5c5b      	ldrb	r3, [r3, r1]
 8002d20:	7033      	strb	r3, [r6, #0]
 8002d22:	002b      	movs	r3, r5
 8002d24:	0005      	movs	r5, r0
 8002d26:	429f      	cmp	r7, r3
 8002d28:	d9f3      	bls.n	8002d12 <_printf_i+0xf2>
 8002d2a:	2f08      	cmp	r7, #8
 8002d2c:	d109      	bne.n	8002d42 <_printf_i+0x122>
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	07db      	lsls	r3, r3, #31
 8002d32:	d506      	bpl.n	8002d42 <_printf_i+0x122>
 8002d34:	6863      	ldr	r3, [r4, #4]
 8002d36:	6922      	ldr	r2, [r4, #16]
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	dc02      	bgt.n	8002d42 <_printf_i+0x122>
 8002d3c:	2330      	movs	r3, #48	; 0x30
 8002d3e:	3e01      	subs	r6, #1
 8002d40:	7033      	strb	r3, [r6, #0]
 8002d42:	9b04      	ldr	r3, [sp, #16]
 8002d44:	1b9b      	subs	r3, r3, r6
 8002d46:	6123      	str	r3, [r4, #16]
 8002d48:	9b07      	ldr	r3, [sp, #28]
 8002d4a:	0021      	movs	r1, r4
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	9805      	ldr	r0, [sp, #20]
 8002d50:	9b06      	ldr	r3, [sp, #24]
 8002d52:	aa09      	add	r2, sp, #36	; 0x24
 8002d54:	f7ff fef4 	bl	8002b40 <_printf_common>
 8002d58:	1c43      	adds	r3, r0, #1
 8002d5a:	d14c      	bne.n	8002df6 <_printf_i+0x1d6>
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	4240      	negs	r0, r0
 8002d60:	b00b      	add	sp, #44	; 0x2c
 8002d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d64:	3145      	adds	r1, #69	; 0x45
 8002d66:	700a      	strb	r2, [r1, #0]
 8002d68:	4a34      	ldr	r2, [pc, #208]	; (8002e3c <_printf_i+0x21c>)
 8002d6a:	9203      	str	r2, [sp, #12]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	6821      	ldr	r1, [r4, #0]
 8002d70:	ca20      	ldmia	r2!, {r5}
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	0608      	lsls	r0, r1, #24
 8002d76:	d516      	bpl.n	8002da6 <_printf_i+0x186>
 8002d78:	07cb      	lsls	r3, r1, #31
 8002d7a:	d502      	bpl.n	8002d82 <_printf_i+0x162>
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	4319      	orrs	r1, r3
 8002d80:	6021      	str	r1, [r4, #0]
 8002d82:	2710      	movs	r7, #16
 8002d84:	2d00      	cmp	r5, #0
 8002d86:	d1b2      	bne.n	8002cee <_printf_i+0xce>
 8002d88:	2320      	movs	r3, #32
 8002d8a:	6822      	ldr	r2, [r4, #0]
 8002d8c:	439a      	bics	r2, r3
 8002d8e:	6022      	str	r2, [r4, #0]
 8002d90:	e7ad      	b.n	8002cee <_printf_i+0xce>
 8002d92:	2220      	movs	r2, #32
 8002d94:	6809      	ldr	r1, [r1, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	6022      	str	r2, [r4, #0]
 8002d9a:	0022      	movs	r2, r4
 8002d9c:	2178      	movs	r1, #120	; 0x78
 8002d9e:	3245      	adds	r2, #69	; 0x45
 8002da0:	7011      	strb	r1, [r2, #0]
 8002da2:	4a27      	ldr	r2, [pc, #156]	; (8002e40 <_printf_i+0x220>)
 8002da4:	e7e1      	b.n	8002d6a <_printf_i+0x14a>
 8002da6:	0648      	lsls	r0, r1, #25
 8002da8:	d5e6      	bpl.n	8002d78 <_printf_i+0x158>
 8002daa:	b2ad      	uxth	r5, r5
 8002dac:	e7e4      	b.n	8002d78 <_printf_i+0x158>
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	680d      	ldr	r5, [r1, #0]
 8002db2:	1d10      	adds	r0, r2, #4
 8002db4:	6949      	ldr	r1, [r1, #20]
 8002db6:	6018      	str	r0, [r3, #0]
 8002db8:	6813      	ldr	r3, [r2, #0]
 8002dba:	062e      	lsls	r6, r5, #24
 8002dbc:	d501      	bpl.n	8002dc2 <_printf_i+0x1a2>
 8002dbe:	6019      	str	r1, [r3, #0]
 8002dc0:	e002      	b.n	8002dc8 <_printf_i+0x1a8>
 8002dc2:	066d      	lsls	r5, r5, #25
 8002dc4:	d5fb      	bpl.n	8002dbe <_printf_i+0x19e>
 8002dc6:	8019      	strh	r1, [r3, #0]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9e04      	ldr	r6, [sp, #16]
 8002dcc:	6123      	str	r3, [r4, #16]
 8002dce:	e7bb      	b.n	8002d48 <_printf_i+0x128>
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	1d11      	adds	r1, r2, #4
 8002dd4:	6019      	str	r1, [r3, #0]
 8002dd6:	6816      	ldr	r6, [r2, #0]
 8002dd8:	2100      	movs	r1, #0
 8002dda:	0030      	movs	r0, r6
 8002ddc:	6862      	ldr	r2, [r4, #4]
 8002dde:	f000 f831 	bl	8002e44 <memchr>
 8002de2:	2800      	cmp	r0, #0
 8002de4:	d001      	beq.n	8002dea <_printf_i+0x1ca>
 8002de6:	1b80      	subs	r0, r0, r6
 8002de8:	6060      	str	r0, [r4, #4]
 8002dea:	6863      	ldr	r3, [r4, #4]
 8002dec:	6123      	str	r3, [r4, #16]
 8002dee:	2300      	movs	r3, #0
 8002df0:	9a04      	ldr	r2, [sp, #16]
 8002df2:	7013      	strb	r3, [r2, #0]
 8002df4:	e7a8      	b.n	8002d48 <_printf_i+0x128>
 8002df6:	6923      	ldr	r3, [r4, #16]
 8002df8:	0032      	movs	r2, r6
 8002dfa:	9906      	ldr	r1, [sp, #24]
 8002dfc:	9805      	ldr	r0, [sp, #20]
 8002dfe:	9d07      	ldr	r5, [sp, #28]
 8002e00:	47a8      	blx	r5
 8002e02:	1c43      	adds	r3, r0, #1
 8002e04:	d0aa      	beq.n	8002d5c <_printf_i+0x13c>
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	079b      	lsls	r3, r3, #30
 8002e0a:	d415      	bmi.n	8002e38 <_printf_i+0x218>
 8002e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e0e:	68e0      	ldr	r0, [r4, #12]
 8002e10:	4298      	cmp	r0, r3
 8002e12:	daa5      	bge.n	8002d60 <_printf_i+0x140>
 8002e14:	0018      	movs	r0, r3
 8002e16:	e7a3      	b.n	8002d60 <_printf_i+0x140>
 8002e18:	0022      	movs	r2, r4
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	9906      	ldr	r1, [sp, #24]
 8002e1e:	9805      	ldr	r0, [sp, #20]
 8002e20:	9e07      	ldr	r6, [sp, #28]
 8002e22:	3219      	adds	r2, #25
 8002e24:	47b0      	blx	r6
 8002e26:	1c43      	adds	r3, r0, #1
 8002e28:	d098      	beq.n	8002d5c <_printf_i+0x13c>
 8002e2a:	3501      	adds	r5, #1
 8002e2c:	68e3      	ldr	r3, [r4, #12]
 8002e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	42ab      	cmp	r3, r5
 8002e34:	dcf0      	bgt.n	8002e18 <_printf_i+0x1f8>
 8002e36:	e7e9      	b.n	8002e0c <_printf_i+0x1ec>
 8002e38:	2500      	movs	r5, #0
 8002e3a:	e7f7      	b.n	8002e2c <_printf_i+0x20c>
 8002e3c:	08003191 	.word	0x08003191
 8002e40:	080031a2 	.word	0x080031a2

08002e44 <memchr>:
 8002e44:	b2c9      	uxtb	r1, r1
 8002e46:	1882      	adds	r2, r0, r2
 8002e48:	4290      	cmp	r0, r2
 8002e4a:	d101      	bne.n	8002e50 <memchr+0xc>
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	4770      	bx	lr
 8002e50:	7803      	ldrb	r3, [r0, #0]
 8002e52:	428b      	cmp	r3, r1
 8002e54:	d0fb      	beq.n	8002e4e <memchr+0xa>
 8002e56:	3001      	adds	r0, #1
 8002e58:	e7f6      	b.n	8002e48 <memchr+0x4>

08002e5a <memcpy>:
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d100      	bne.n	8002e64 <memcpy+0xa>
 8002e62:	bd10      	pop	{r4, pc}
 8002e64:	5ccc      	ldrb	r4, [r1, r3]
 8002e66:	54c4      	strb	r4, [r0, r3]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	e7f8      	b.n	8002e5e <memcpy+0x4>

08002e6c <memmove>:
 8002e6c:	b510      	push	{r4, lr}
 8002e6e:	4288      	cmp	r0, r1
 8002e70:	d902      	bls.n	8002e78 <memmove+0xc>
 8002e72:	188b      	adds	r3, r1, r2
 8002e74:	4298      	cmp	r0, r3
 8002e76:	d303      	bcc.n	8002e80 <memmove+0x14>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e007      	b.n	8002e8c <memmove+0x20>
 8002e7c:	5c8b      	ldrb	r3, [r1, r2]
 8002e7e:	5483      	strb	r3, [r0, r2]
 8002e80:	3a01      	subs	r2, #1
 8002e82:	d2fb      	bcs.n	8002e7c <memmove+0x10>
 8002e84:	bd10      	pop	{r4, pc}
 8002e86:	5ccc      	ldrb	r4, [r1, r3]
 8002e88:	54c4      	strb	r4, [r0, r3]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d1fa      	bne.n	8002e86 <memmove+0x1a>
 8002e90:	e7f8      	b.n	8002e84 <memmove+0x18>
	...

08002e94 <_free_r>:
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	0005      	movs	r5, r0
 8002e98:	2900      	cmp	r1, #0
 8002e9a:	d010      	beq.n	8002ebe <_free_r+0x2a>
 8002e9c:	1f0c      	subs	r4, r1, #4
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	da00      	bge.n	8002ea6 <_free_r+0x12>
 8002ea4:	18e4      	adds	r4, r4, r3
 8002ea6:	0028      	movs	r0, r5
 8002ea8:	f000 f918 	bl	80030dc <__malloc_lock>
 8002eac:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <_free_r+0x90>)
 8002eae:	6813      	ldr	r3, [r2, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <_free_r+0x2c>
 8002eb4:	6063      	str	r3, [r4, #4]
 8002eb6:	6014      	str	r4, [r2, #0]
 8002eb8:	0028      	movs	r0, r5
 8002eba:	f000 f917 	bl	80030ec <__malloc_unlock>
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
 8002ec0:	42a3      	cmp	r3, r4
 8002ec2:	d908      	bls.n	8002ed6 <_free_r+0x42>
 8002ec4:	6821      	ldr	r1, [r4, #0]
 8002ec6:	1860      	adds	r0, r4, r1
 8002ec8:	4283      	cmp	r3, r0
 8002eca:	d1f3      	bne.n	8002eb4 <_free_r+0x20>
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	1841      	adds	r1, r0, r1
 8002ed2:	6021      	str	r1, [r4, #0]
 8002ed4:	e7ee      	b.n	8002eb4 <_free_r+0x20>
 8002ed6:	001a      	movs	r2, r3
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <_free_r+0x4e>
 8002ede:	42a3      	cmp	r3, r4
 8002ee0:	d9f9      	bls.n	8002ed6 <_free_r+0x42>
 8002ee2:	6811      	ldr	r1, [r2, #0]
 8002ee4:	1850      	adds	r0, r2, r1
 8002ee6:	42a0      	cmp	r0, r4
 8002ee8:	d10b      	bne.n	8002f02 <_free_r+0x6e>
 8002eea:	6820      	ldr	r0, [r4, #0]
 8002eec:	1809      	adds	r1, r1, r0
 8002eee:	1850      	adds	r0, r2, r1
 8002ef0:	6011      	str	r1, [r2, #0]
 8002ef2:	4283      	cmp	r3, r0
 8002ef4:	d1e0      	bne.n	8002eb8 <_free_r+0x24>
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	1841      	adds	r1, r0, r1
 8002efc:	6011      	str	r1, [r2, #0]
 8002efe:	6053      	str	r3, [r2, #4]
 8002f00:	e7da      	b.n	8002eb8 <_free_r+0x24>
 8002f02:	42a0      	cmp	r0, r4
 8002f04:	d902      	bls.n	8002f0c <_free_r+0x78>
 8002f06:	230c      	movs	r3, #12
 8002f08:	602b      	str	r3, [r5, #0]
 8002f0a:	e7d5      	b.n	8002eb8 <_free_r+0x24>
 8002f0c:	6821      	ldr	r1, [r4, #0]
 8002f0e:	1860      	adds	r0, r4, r1
 8002f10:	4283      	cmp	r3, r0
 8002f12:	d103      	bne.n	8002f1c <_free_r+0x88>
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	1841      	adds	r1, r0, r1
 8002f1a:	6021      	str	r1, [r4, #0]
 8002f1c:	6063      	str	r3, [r4, #4]
 8002f1e:	6054      	str	r4, [r2, #4]
 8002f20:	e7ca      	b.n	8002eb8 <_free_r+0x24>
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	20000174 	.word	0x20000174

08002f28 <sbrk_aligned>:
 8002f28:	b570      	push	{r4, r5, r6, lr}
 8002f2a:	4e0f      	ldr	r6, [pc, #60]	; (8002f68 <sbrk_aligned+0x40>)
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	6831      	ldr	r1, [r6, #0]
 8002f30:	0004      	movs	r4, r0
 8002f32:	2900      	cmp	r1, #0
 8002f34:	d102      	bne.n	8002f3c <sbrk_aligned+0x14>
 8002f36:	f000 f8bf 	bl	80030b8 <_sbrk_r>
 8002f3a:	6030      	str	r0, [r6, #0]
 8002f3c:	0029      	movs	r1, r5
 8002f3e:	0020      	movs	r0, r4
 8002f40:	f000 f8ba 	bl	80030b8 <_sbrk_r>
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	d00a      	beq.n	8002f5e <sbrk_aligned+0x36>
 8002f48:	2303      	movs	r3, #3
 8002f4a:	1cc5      	adds	r5, r0, #3
 8002f4c:	439d      	bics	r5, r3
 8002f4e:	42a8      	cmp	r0, r5
 8002f50:	d007      	beq.n	8002f62 <sbrk_aligned+0x3a>
 8002f52:	1a29      	subs	r1, r5, r0
 8002f54:	0020      	movs	r0, r4
 8002f56:	f000 f8af 	bl	80030b8 <_sbrk_r>
 8002f5a:	1c43      	adds	r3, r0, #1
 8002f5c:	d101      	bne.n	8002f62 <sbrk_aligned+0x3a>
 8002f5e:	2501      	movs	r5, #1
 8002f60:	426d      	negs	r5, r5
 8002f62:	0028      	movs	r0, r5
 8002f64:	bd70      	pop	{r4, r5, r6, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	20000178 	.word	0x20000178

08002f6c <_malloc_r>:
 8002f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f6e:	2203      	movs	r2, #3
 8002f70:	1ccb      	adds	r3, r1, #3
 8002f72:	4393      	bics	r3, r2
 8002f74:	3308      	adds	r3, #8
 8002f76:	0006      	movs	r6, r0
 8002f78:	001f      	movs	r7, r3
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d232      	bcs.n	8002fe4 <_malloc_r+0x78>
 8002f7e:	270c      	movs	r7, #12
 8002f80:	42b9      	cmp	r1, r7
 8002f82:	d831      	bhi.n	8002fe8 <_malloc_r+0x7c>
 8002f84:	0030      	movs	r0, r6
 8002f86:	f000 f8a9 	bl	80030dc <__malloc_lock>
 8002f8a:	4d32      	ldr	r5, [pc, #200]	; (8003054 <_malloc_r+0xe8>)
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	001c      	movs	r4, r3
 8002f90:	2c00      	cmp	r4, #0
 8002f92:	d12e      	bne.n	8002ff2 <_malloc_r+0x86>
 8002f94:	0039      	movs	r1, r7
 8002f96:	0030      	movs	r0, r6
 8002f98:	f7ff ffc6 	bl	8002f28 <sbrk_aligned>
 8002f9c:	0004      	movs	r4, r0
 8002f9e:	1c43      	adds	r3, r0, #1
 8002fa0:	d11e      	bne.n	8002fe0 <_malloc_r+0x74>
 8002fa2:	682c      	ldr	r4, [r5, #0]
 8002fa4:	0025      	movs	r5, r4
 8002fa6:	2d00      	cmp	r5, #0
 8002fa8:	d14a      	bne.n	8003040 <_malloc_r+0xd4>
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	0029      	movs	r1, r5
 8002fae:	18e3      	adds	r3, r4, r3
 8002fb0:	0030      	movs	r0, r6
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	f000 f880 	bl	80030b8 <_sbrk_r>
 8002fb8:	9b01      	ldr	r3, [sp, #4]
 8002fba:	4283      	cmp	r3, r0
 8002fbc:	d143      	bne.n	8003046 <_malloc_r+0xda>
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	3703      	adds	r7, #3
 8002fc2:	1aff      	subs	r7, r7, r3
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	439f      	bics	r7, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	2f0c      	cmp	r7, #12
 8002fcc:	d200      	bcs.n	8002fd0 <_malloc_r+0x64>
 8002fce:	270c      	movs	r7, #12
 8002fd0:	0039      	movs	r1, r7
 8002fd2:	0030      	movs	r0, r6
 8002fd4:	f7ff ffa8 	bl	8002f28 <sbrk_aligned>
 8002fd8:	1c43      	adds	r3, r0, #1
 8002fda:	d034      	beq.n	8003046 <_malloc_r+0xda>
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	19df      	adds	r7, r3, r7
 8002fe0:	6027      	str	r7, [r4, #0]
 8002fe2:	e013      	b.n	800300c <_malloc_r+0xa0>
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	dacb      	bge.n	8002f80 <_malloc_r+0x14>
 8002fe8:	230c      	movs	r3, #12
 8002fea:	2500      	movs	r5, #0
 8002fec:	6033      	str	r3, [r6, #0]
 8002fee:	0028      	movs	r0, r5
 8002ff0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ff2:	6822      	ldr	r2, [r4, #0]
 8002ff4:	1bd1      	subs	r1, r2, r7
 8002ff6:	d420      	bmi.n	800303a <_malloc_r+0xce>
 8002ff8:	290b      	cmp	r1, #11
 8002ffa:	d917      	bls.n	800302c <_malloc_r+0xc0>
 8002ffc:	19e2      	adds	r2, r4, r7
 8002ffe:	6027      	str	r7, [r4, #0]
 8003000:	42a3      	cmp	r3, r4
 8003002:	d111      	bne.n	8003028 <_malloc_r+0xbc>
 8003004:	602a      	str	r2, [r5, #0]
 8003006:	6863      	ldr	r3, [r4, #4]
 8003008:	6011      	str	r1, [r2, #0]
 800300a:	6053      	str	r3, [r2, #4]
 800300c:	0030      	movs	r0, r6
 800300e:	0025      	movs	r5, r4
 8003010:	f000 f86c 	bl	80030ec <__malloc_unlock>
 8003014:	2207      	movs	r2, #7
 8003016:	350b      	adds	r5, #11
 8003018:	1d23      	adds	r3, r4, #4
 800301a:	4395      	bics	r5, r2
 800301c:	1aea      	subs	r2, r5, r3
 800301e:	429d      	cmp	r5, r3
 8003020:	d0e5      	beq.n	8002fee <_malloc_r+0x82>
 8003022:	1b5b      	subs	r3, r3, r5
 8003024:	50a3      	str	r3, [r4, r2]
 8003026:	e7e2      	b.n	8002fee <_malloc_r+0x82>
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	e7ec      	b.n	8003006 <_malloc_r+0x9a>
 800302c:	6862      	ldr	r2, [r4, #4]
 800302e:	42a3      	cmp	r3, r4
 8003030:	d101      	bne.n	8003036 <_malloc_r+0xca>
 8003032:	602a      	str	r2, [r5, #0]
 8003034:	e7ea      	b.n	800300c <_malloc_r+0xa0>
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	e7e8      	b.n	800300c <_malloc_r+0xa0>
 800303a:	0023      	movs	r3, r4
 800303c:	6864      	ldr	r4, [r4, #4]
 800303e:	e7a7      	b.n	8002f90 <_malloc_r+0x24>
 8003040:	002c      	movs	r4, r5
 8003042:	686d      	ldr	r5, [r5, #4]
 8003044:	e7af      	b.n	8002fa6 <_malloc_r+0x3a>
 8003046:	230c      	movs	r3, #12
 8003048:	0030      	movs	r0, r6
 800304a:	6033      	str	r3, [r6, #0]
 800304c:	f000 f84e 	bl	80030ec <__malloc_unlock>
 8003050:	e7cd      	b.n	8002fee <_malloc_r+0x82>
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	20000174 	.word	0x20000174

08003058 <_realloc_r>:
 8003058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800305a:	0007      	movs	r7, r0
 800305c:	000e      	movs	r6, r1
 800305e:	0014      	movs	r4, r2
 8003060:	2900      	cmp	r1, #0
 8003062:	d105      	bne.n	8003070 <_realloc_r+0x18>
 8003064:	0011      	movs	r1, r2
 8003066:	f7ff ff81 	bl	8002f6c <_malloc_r>
 800306a:	0005      	movs	r5, r0
 800306c:	0028      	movs	r0, r5
 800306e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003070:	2a00      	cmp	r2, #0
 8003072:	d103      	bne.n	800307c <_realloc_r+0x24>
 8003074:	f7ff ff0e 	bl	8002e94 <_free_r>
 8003078:	0025      	movs	r5, r4
 800307a:	e7f7      	b.n	800306c <_realloc_r+0x14>
 800307c:	f000 f83e 	bl	80030fc <_malloc_usable_size_r>
 8003080:	9001      	str	r0, [sp, #4]
 8003082:	4284      	cmp	r4, r0
 8003084:	d803      	bhi.n	800308e <_realloc_r+0x36>
 8003086:	0035      	movs	r5, r6
 8003088:	0843      	lsrs	r3, r0, #1
 800308a:	42a3      	cmp	r3, r4
 800308c:	d3ee      	bcc.n	800306c <_realloc_r+0x14>
 800308e:	0021      	movs	r1, r4
 8003090:	0038      	movs	r0, r7
 8003092:	f7ff ff6b 	bl	8002f6c <_malloc_r>
 8003096:	1e05      	subs	r5, r0, #0
 8003098:	d0e8      	beq.n	800306c <_realloc_r+0x14>
 800309a:	9b01      	ldr	r3, [sp, #4]
 800309c:	0022      	movs	r2, r4
 800309e:	429c      	cmp	r4, r3
 80030a0:	d900      	bls.n	80030a4 <_realloc_r+0x4c>
 80030a2:	001a      	movs	r2, r3
 80030a4:	0031      	movs	r1, r6
 80030a6:	0028      	movs	r0, r5
 80030a8:	f7ff fed7 	bl	8002e5a <memcpy>
 80030ac:	0031      	movs	r1, r6
 80030ae:	0038      	movs	r0, r7
 80030b0:	f7ff fef0 	bl	8002e94 <_free_r>
 80030b4:	e7da      	b.n	800306c <_realloc_r+0x14>
	...

080030b8 <_sbrk_r>:
 80030b8:	2300      	movs	r3, #0
 80030ba:	b570      	push	{r4, r5, r6, lr}
 80030bc:	4d06      	ldr	r5, [pc, #24]	; (80030d8 <_sbrk_r+0x20>)
 80030be:	0004      	movs	r4, r0
 80030c0:	0008      	movs	r0, r1
 80030c2:	602b      	str	r3, [r5, #0]
 80030c4:	f7fd fb24 	bl	8000710 <_sbrk>
 80030c8:	1c43      	adds	r3, r0, #1
 80030ca:	d103      	bne.n	80030d4 <_sbrk_r+0x1c>
 80030cc:	682b      	ldr	r3, [r5, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d000      	beq.n	80030d4 <_sbrk_r+0x1c>
 80030d2:	6023      	str	r3, [r4, #0]
 80030d4:	bd70      	pop	{r4, r5, r6, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	2000017c 	.word	0x2000017c

080030dc <__malloc_lock>:
 80030dc:	b510      	push	{r4, lr}
 80030de:	4802      	ldr	r0, [pc, #8]	; (80030e8 <__malloc_lock+0xc>)
 80030e0:	f000 f814 	bl	800310c <__retarget_lock_acquire_recursive>
 80030e4:	bd10      	pop	{r4, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	20000180 	.word	0x20000180

080030ec <__malloc_unlock>:
 80030ec:	b510      	push	{r4, lr}
 80030ee:	4802      	ldr	r0, [pc, #8]	; (80030f8 <__malloc_unlock+0xc>)
 80030f0:	f000 f80d 	bl	800310e <__retarget_lock_release_recursive>
 80030f4:	bd10      	pop	{r4, pc}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	20000180 	.word	0x20000180

080030fc <_malloc_usable_size_r>:
 80030fc:	1f0b      	subs	r3, r1, #4
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	1f18      	subs	r0, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	da01      	bge.n	800310a <_malloc_usable_size_r+0xe>
 8003106:	580b      	ldr	r3, [r1, r0]
 8003108:	18c0      	adds	r0, r0, r3
 800310a:	4770      	bx	lr

0800310c <__retarget_lock_acquire_recursive>:
 800310c:	4770      	bx	lr

0800310e <__retarget_lock_release_recursive>:
 800310e:	4770      	bx	lr

08003110 <_init>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003116:	bc08      	pop	{r3}
 8003118:	469e      	mov	lr, r3
 800311a:	4770      	bx	lr

0800311c <_fini>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr
