
LoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800318c  0800318c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800318c  0800318c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800318c  0800318c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800318c  0800318c  0001318c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003190  08003190  00013190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  08003204  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08003204  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088be  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014d8  00000000  00000000  00028956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  00029e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  0002a508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001127b  00000000  00000000  0002ab70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e1c  00000000  00000000  0003bdeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000696d5  00000000  00000000  00044c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ae2dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b08  00000000  00000000  000ae32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003048 	.word	0x08003048

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003048 	.word	0x08003048

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fc5f 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f84f 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f935 	bl	80004b0 <MX_GPIO_Init>
  MX_ADC_Init();
 8000246:	f000 f89b 	bl	8000380 <MX_ADC_Init>
  MX_USART2_UART_Init();
 800024a:	f000 f901 	bl	8000450 <MX_USART2_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  // Wait until push button is pressed to start listening
	  	  if (listening == 1)
 800024e:	4b20      	ldr	r3, [pc, #128]	; (80002d0 <main+0x9c>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b01      	cmp	r3, #1
 8000254:	d1fb      	bne.n	800024e <main+0x1a>
	  	  {
	  		  //print to UART
	  		  memset(VAL_print, 0, sizeof(VAL_print));
 8000256:	4b1f      	ldr	r3, [pc, #124]	; (80002d4 <main+0xa0>)
 8000258:	2228      	movs	r2, #40	; 0x28
 800025a:	2100      	movs	r1, #0
 800025c:	0018      	movs	r0, r3
 800025e:	f002 fa81 	bl	8002764 <memset>
	  		  sprintf(VAL_print, "Waiting...\r\n\r\n");
 8000262:	4a1d      	ldr	r2, [pc, #116]	; (80002d8 <main+0xa4>)
 8000264:	4b1b      	ldr	r3, [pc, #108]	; (80002d4 <main+0xa0>)
 8000266:	0011      	movs	r1, r2
 8000268:	0018      	movs	r0, r3
 800026a:	f002 fa83 	bl	8002774 <siprintf>
	  		  HAL_UART_Transmit(&huart2, VAL_print, sizeof(VAL_print), 1000);
 800026e:	23fa      	movs	r3, #250	; 0xfa
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	4918      	ldr	r1, [pc, #96]	; (80002d4 <main+0xa0>)
 8000274:	4819      	ldr	r0, [pc, #100]	; (80002dc <main+0xa8>)
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	f001 fea0 	bl	8001fbc <HAL_UART_Transmit>

	  		  // Check the value of the signal input pin
	  		  uint32_t state = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 800027c:	2390      	movs	r3, #144	; 0x90
 800027e:	05db      	lsls	r3, r3, #23
 8000280:	2120      	movs	r1, #32
 8000282:	0018      	movs	r0, r3
 8000284:	f001 f95e 	bl	8001544 <HAL_GPIO_ReadPin>
 8000288:	0003      	movs	r3, r0
 800028a:	607b      	str	r3, [r7, #4]

	  		  // Wait for start bit from transmitter
	  		  while(state<REF)
 800028c:	e007      	b.n	800029e <main+0x6a>
	  		  {
	  			  // Continue checking state if input pin until input goes HIGH
	  			  state = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 800028e:	2390      	movs	r3, #144	; 0x90
 8000290:	05db      	lsls	r3, r3, #23
 8000292:	2120      	movs	r1, #32
 8000294:	0018      	movs	r0, r3
 8000296:	f001 f955 	bl	8001544 <HAL_GPIO_ReadPin>
 800029a:	0003      	movs	r3, r0
 800029c:	607b      	str	r3, [r7, #4]
	  		  while(state<REF)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d0f4      	beq.n	800028e <main+0x5a>
	  		  }

	  		  // Once state of input pin goes high, begin to read and store the data being received
	  		  int cont = 1;
 80002a4:	2301      	movs	r3, #1
 80002a6:	603b      	str	r3, [r7, #0]
	  		  //while loop to check if more data is transmitted
	  		  while(cont)
 80002a8:	e00e      	b.n	80002c8 <main+0x94>
	  		  {
	  			  readSignal();
 80002aa:	f000 f9b3 	bl	8000614 <readSignal>
	  			  HAL_Delay(PERIOD);
 80002ae:	23fa      	movs	r3, #250	; 0xfa
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fc86 	bl	8000bc4 <HAL_Delay>
	  			  cont = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 80002b8:	2390      	movs	r3, #144	; 0x90
 80002ba:	05db      	lsls	r3, r3, #23
 80002bc:	2120      	movs	r1, #32
 80002be:	0018      	movs	r0, r3
 80002c0:	f001 f940 	bl	8001544 <HAL_GPIO_ReadPin>
 80002c4:	0003      	movs	r3, r0
 80002c6:	603b      	str	r3, [r7, #0]
	  		  while(cont)
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d1ed      	bne.n	80002aa <main+0x76>
	  	  if (listening == 1)
 80002ce:	e7be      	b.n	800024e <main+0x1a>
 80002d0:	20000150 	.word	0x20000150
 80002d4:	20000174 	.word	0x20000174
 80002d8:	08003060 	.word	0x08003060
 80002dc:	200000cc 	.word	0x200000cc

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b091      	sub	sp, #68	; 0x44
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	2410      	movs	r4, #16
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	0018      	movs	r0, r3
 80002ec:	2330      	movs	r3, #48	; 0x30
 80002ee:	001a      	movs	r2, r3
 80002f0:	2100      	movs	r1, #0
 80002f2:	f002 fa37 	bl	8002764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f6:	003b      	movs	r3, r7
 80002f8:	0018      	movs	r0, r3
 80002fa:	2310      	movs	r3, #16
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f002 fa30 	bl	8002764 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000304:	0021      	movs	r1, r4
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2212      	movs	r2, #18
 800030a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2201      	movs	r2, #1
 8000310:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2201      	movs	r2, #1
 8000316:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2210      	movs	r2, #16
 800031c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2210      	movs	r2, #16
 8000322:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2202      	movs	r2, #2
 8000328:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2200      	movs	r2, #0
 800032e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	22a0      	movs	r2, #160	; 0xa0
 8000334:	0392      	lsls	r2, r2, #14
 8000336:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2200      	movs	r2, #0
 800033c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	187b      	adds	r3, r7, r1
 8000340:	0018      	movs	r0, r3
 8000342:	f001 f97b 	bl	800163c <HAL_RCC_OscConfig>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800034a:	f000 fa9d 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	003b      	movs	r3, r7
 8000350:	2207      	movs	r2, #7
 8000352:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	003b      	movs	r3, r7
 8000356:	2202      	movs	r2, #2
 8000358:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	003b      	movs	r3, r7
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	003b      	movs	r3, r7
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000366:	003b      	movs	r3, r7
 8000368:	2101      	movs	r1, #1
 800036a:	0018      	movs	r0, r3
 800036c:	f001 fc80 	bl	8001c70 <HAL_RCC_ClockConfig>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000374:	f000 fa88 	bl	8000888 <Error_Handler>
  }
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b011      	add	sp, #68	; 0x44
 800037e:	bd90      	pop	{r4, r7, pc}

08000380 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	0018      	movs	r0, r3
 800038a:	230c      	movs	r3, #12
 800038c:	001a      	movs	r2, r3
 800038e:	2100      	movs	r1, #0
 8000390:	f002 f9e8 	bl	8002764 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000394:	4b2c      	ldr	r3, [pc, #176]	; (8000448 <MX_ADC_Init+0xc8>)
 8000396:	4a2d      	ldr	r2, [pc, #180]	; (800044c <MX_ADC_Init+0xcc>)
 8000398:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800039a:	4b2b      	ldr	r3, [pc, #172]	; (8000448 <MX_ADC_Init+0xc8>)
 800039c:	2200      	movs	r2, #0
 800039e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80003a0:	4b29      	ldr	r3, [pc, #164]	; (8000448 <MX_ADC_Init+0xc8>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a6:	4b28      	ldr	r3, [pc, #160]	; (8000448 <MX_ADC_Init+0xc8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003ac:	4b26      	ldr	r3, [pc, #152]	; (8000448 <MX_ADC_Init+0xc8>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003b2:	4b25      	ldr	r3, [pc, #148]	; (8000448 <MX_ADC_Init+0xc8>)
 80003b4:	2204      	movs	r2, #4
 80003b6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003b8:	4b23      	ldr	r3, [pc, #140]	; (8000448 <MX_ADC_Init+0xc8>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003be:	4b22      	ldr	r3, [pc, #136]	; (8000448 <MX_ADC_Init+0xc8>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003c4:	4b20      	ldr	r3, [pc, #128]	; (8000448 <MX_ADC_Init+0xc8>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003ca:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <MX_ADC_Init+0xc8>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003d0:	4b1d      	ldr	r3, [pc, #116]	; (8000448 <MX_ADC_Init+0xc8>)
 80003d2:	22c2      	movs	r2, #194	; 0xc2
 80003d4:	32ff      	adds	r2, #255	; 0xff
 80003d6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <MX_ADC_Init+0xc8>)
 80003da:	2200      	movs	r2, #0
 80003dc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003de:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <MX_ADC_Init+0xc8>)
 80003e0:	2224      	movs	r2, #36	; 0x24
 80003e2:	2100      	movs	r1, #0
 80003e4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003e6:	4b18      	ldr	r3, [pc, #96]	; (8000448 <MX_ADC_Init+0xc8>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003ec:	4b16      	ldr	r3, [pc, #88]	; (8000448 <MX_ADC_Init+0xc8>)
 80003ee:	0018      	movs	r0, r3
 80003f0:	f000 fc0c 	bl	8000c0c <HAL_ADC_Init>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003f8:	f000 fa46 	bl	8000888 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2201      	movs	r2, #1
 8000400:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2280      	movs	r2, #128	; 0x80
 8000406:	0152      	lsls	r2, r2, #5
 8000408:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	0552      	lsls	r2, r2, #21
 8000410:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000412:	1d3a      	adds	r2, r7, #4
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_ADC_Init+0xc8>)
 8000416:	0011      	movs	r1, r2
 8000418:	0018      	movs	r0, r3
 800041a:	f000 fd37 	bl	8000e8c <HAL_ADC_ConfigChannel>
 800041e:	1e03      	subs	r3, r0, #0
 8000420:	d001      	beq.n	8000426 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000422:	f000 fa31 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  ADC1->CR|=ADC_CR_ADEN;
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <MX_ADC_Init+0xcc>)
 8000428:	689a      	ldr	r2, [r3, #8]
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <MX_ADC_Init+0xcc>)
 800042c:	2101      	movs	r1, #1
 800042e:	430a      	orrs	r2, r1
 8000430:	609a      	str	r2, [r3, #8]

  // Wait for ISR to be set
  while((ADC1->ISR & ADC_ISR_ADRDY)==0);
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <MX_ADC_Init+0xcc>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2201      	movs	r2, #1
 800043a:	4013      	ands	r3, r2
 800043c:	d0fa      	beq.n	8000434 <MX_ADC_Init+0xb4>
  /* USER CODE END ADC_Init 2 */

}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b004      	add	sp, #16
 8000446:	bd80      	pop	{r7, pc}
 8000448:	2000008c 	.word	0x2000008c
 800044c:	40012400 	.word	0x40012400

08000450 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000456:	4a15      	ldr	r2, [pc, #84]	; (80004ac <MX_USART2_UART_Init+0x5c>)
 8000458:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800045c:	2296      	movs	r2, #150	; 0x96
 800045e:	0192      	lsls	r2, r2, #6
 8000460:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000476:	220c      	movs	r2, #12
 8000478:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <MX_USART2_UART_Init+0x58>)
 8000494:	0018      	movs	r0, r3
 8000496:	f001 fd3d 	bl	8001f14 <HAL_UART_Init>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800049e:	f000 f9f3 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	200000cc 	.word	0x200000cc
 80004ac:	40004400 	.word	0x40004400

080004b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b089      	sub	sp, #36	; 0x24
 80004b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	240c      	movs	r4, #12
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	0018      	movs	r0, r3
 80004bc:	2314      	movs	r3, #20
 80004be:	001a      	movs	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f002 f94f 	bl	8002764 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b32      	ldr	r3, [pc, #200]	; (8000590 <MX_GPIO_Init+0xe0>)
 80004c8:	695a      	ldr	r2, [r3, #20]
 80004ca:	4b31      	ldr	r3, [pc, #196]	; (8000590 <MX_GPIO_Init+0xe0>)
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	0289      	lsls	r1, r1, #10
 80004d0:	430a      	orrs	r2, r1
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	4b2e      	ldr	r3, [pc, #184]	; (8000590 <MX_GPIO_Init+0xe0>)
 80004d6:	695a      	ldr	r2, [r3, #20]
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	029b      	lsls	r3, r3, #10
 80004dc:	4013      	ands	r3, r2
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <MX_GPIO_Init+0xe0>)
 80004e4:	695a      	ldr	r2, [r3, #20]
 80004e6:	4b2a      	ldr	r3, [pc, #168]	; (8000590 <MX_GPIO_Init+0xe0>)
 80004e8:	2180      	movs	r1, #128	; 0x80
 80004ea:	0309      	lsls	r1, r1, #12
 80004ec:	430a      	orrs	r2, r1
 80004ee:	615a      	str	r2, [r3, #20]
 80004f0:	4b27      	ldr	r3, [pc, #156]	; (8000590 <MX_GPIO_Init+0xe0>)
 80004f2:	695a      	ldr	r2, [r3, #20]
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	031b      	lsls	r3, r3, #12
 80004f8:	4013      	ands	r3, r2
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80004fe:	23c0      	movs	r3, #192	; 0xc0
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	4824      	ldr	r0, [pc, #144]	; (8000594 <MX_GPIO_Init+0xe4>)
 8000504:	2200      	movs	r2, #0
 8000506:	0019      	movs	r1, r3
 8000508:	f001 f839 	bl	800157e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2201      	movs	r2, #1
 8000510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2288      	movs	r2, #136	; 0x88
 8000516:	0352      	lsls	r2, r2, #13
 8000518:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000520:	193a      	adds	r2, r7, r4
 8000522:	2390      	movs	r3, #144	; 0x90
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f000 fe9b 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : Signal_in_Pin */
  GPIO_InitStruct.Pin = Signal_in_Pin;
 800052e:	193b      	adds	r3, r7, r4
 8000530:	2220      	movs	r2, #32
 8000532:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000534:	193b      	adds	r3, r7, r4
 8000536:	2200      	movs	r2, #0
 8000538:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800053a:	193b      	adds	r3, r7, r4
 800053c:	2202      	movs	r2, #2
 800053e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Signal_in_GPIO_Port, &GPIO_InitStruct);
 8000540:	193a      	adds	r2, r7, r4
 8000542:	2390      	movs	r3, #144	; 0x90
 8000544:	05db      	lsls	r3, r3, #23
 8000546:	0011      	movs	r1, r2
 8000548:	0018      	movs	r0, r3
 800054a:	f000 fe8b 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800054e:	0021      	movs	r1, r4
 8000550:	187b      	adds	r3, r7, r1
 8000552:	22c0      	movs	r2, #192	; 0xc0
 8000554:	0092      	lsls	r2, r2, #2
 8000556:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2201      	movs	r2, #1
 800055c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800056a:	187b      	adds	r3, r7, r1
 800056c:	4a09      	ldr	r2, [pc, #36]	; (8000594 <MX_GPIO_Init+0xe4>)
 800056e:	0019      	movs	r1, r3
 8000570:	0010      	movs	r0, r2
 8000572:	f000 fe77 	bl	8001264 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	2005      	movs	r0, #5
 800057c:	f000 fe40 	bl	8001200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000580:	2005      	movs	r0, #5
 8000582:	f000 fe52 	bl	800122a <HAL_NVIC_EnableIRQ>

}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b009      	add	sp, #36	; 0x24
 800058c:	bd90      	pop	{r4, r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	40021000 	.word	0x40021000
 8000594:	48000800 	.word	0x48000800

08000598 <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI0_1_IRQHandler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	/* Interrupt that is called when the blue push button is pressed */

	//if the button is pressed set the mode to listening
	if (B1_Pin)
		{
			if (listening == 0)
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <EXTI0_1_IRQHandler+0x20>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d102      	bne.n	80005aa <EXTI0_1_IRQHandler+0x12>
			{
				// Change listening to 1 so that STM starts waiting for start bit
				listening = 1;
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <EXTI0_1_IRQHandler+0x20>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
			}
		}

	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80005aa:	2001      	movs	r0, #1
 80005ac:	f001 f820 	bl	80015f0 <HAL_GPIO_EXTI_IRQHandler>
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	20000150 	.word	0x20000150

080005bc <arrayToData>:

uint8_t arrayToData(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	/* Convert the data array into a single byte value */

	// Local variable to store data value
	uint8_t output = 0;
 80005c2:	1dfb      	adds	r3, r7, #7
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < 8; i++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	e010      	b.n	80005f0 <arrayToData+0x34>
	{
		output = output + ((data[i])<<i);
 80005ce:	4a10      	ldr	r2, [pc, #64]	; (8000610 <arrayToData+0x54>)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	18d3      	adds	r3, r2, r3
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	001a      	movs	r2, r3
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	409a      	lsls	r2, r3
 80005dc:	0013      	movs	r3, r2
 80005de:	b2d9      	uxtb	r1, r3
 80005e0:	1dfb      	adds	r3, r7, #7
 80005e2:	1dfa      	adds	r2, r7, #7
 80005e4:	7812      	ldrb	r2, [r2, #0]
 80005e6:	188a      	adds	r2, r1, r2
 80005e8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	2b07      	cmp	r3, #7
 80005f4:	ddeb      	ble.n	80005ce <arrayToData+0x12>
	}

	//reset data to 0
	memset(data, 0, sizeof data);
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <arrayToData+0x54>)
 80005f8:	2208      	movs	r2, #8
 80005fa:	2100      	movs	r1, #0
 80005fc:	0018      	movs	r0, r3
 80005fe:	f002 f8b1 	bl	8002764 <memset>
	return output;
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	781b      	ldrb	r3, [r3, #0]
}
 8000606:	0018      	movs	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	20000154 	.word	0x20000154

08000614 <readSignal>:

void readSignal(void)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
	/* Function called to read the input signal and determine if the input is a data packet or the number of packets already sent */

	//add an initial delay
	HAL_Delay(PERIOD);
 800061a:	23fa      	movs	r3, #250	; 0xfa
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fad0 	bl	8000bc4 <HAL_Delay>

	// Local variable to store the state of the input signal (0 means data packet being sent, 1 means number of packets being sent
	uint32_t state = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 8000624:	2390      	movs	r3, #144	; 0x90
 8000626:	05db      	lsls	r3, r3, #23
 8000628:	2120      	movs	r1, #32
 800062a:	0018      	movs	r0, r3
 800062c:	f000 ff8a 	bl	8001544 <HAL_GPIO_ReadPin>
 8000630:	0003      	movs	r3, r0
 8000632:	607b      	str	r3, [r7, #4]

	//check mode of operation
	if (state < REF) //save data mode
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d161      	bne.n	80006fe <readSignal+0xea>
	{
	// Once start bit has been received, store the next 8 bits of data in the data array
		memset(VAL_print, 0, sizeof(VAL_print));
 800063a:	4b86      	ldr	r3, [pc, #536]	; (8000854 <readSignal+0x240>)
 800063c:	2228      	movs	r2, #40	; 0x28
 800063e:	2100      	movs	r1, #0
 8000640:	0018      	movs	r0, r3
 8000642:	f002 f88f 	bl	8002764 <memset>
		sprintf(VAL_print, "Receiving data values...\r\n");
 8000646:	4a84      	ldr	r2, [pc, #528]	; (8000858 <readSignal+0x244>)
 8000648:	4b82      	ldr	r3, [pc, #520]	; (8000854 <readSignal+0x240>)
 800064a:	0011      	movs	r1, r2
 800064c:	0018      	movs	r0, r3
 800064e:	f002 f891 	bl	8002774 <siprintf>
		HAL_UART_Transmit(&huart2, VAL_print, sizeof(VAL_print), 1000);
 8000652:	23fa      	movs	r3, #250	; 0xfa
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	497f      	ldr	r1, [pc, #508]	; (8000854 <readSignal+0x240>)
 8000658:	4880      	ldr	r0, [pc, #512]	; (800085c <readSignal+0x248>)
 800065a:	2228      	movs	r2, #40	; 0x28
 800065c:	f001 fcae 	bl	8001fbc <HAL_UART_Transmit>
		for (int i = 7; i >= 0; i--)
 8000660:	2307      	movs	r3, #7
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	e01d      	b.n	80006a2 <readSignal+0x8e>
		{
			HAL_Delay(PERIOD);
 8000666:	23fa      	movs	r3, #250	; 0xfa
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	0018      	movs	r0, r3
 800066c:	f000 faaa 	bl	8000bc4 <HAL_Delay>
			state = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 8000670:	2390      	movs	r3, #144	; 0x90
 8000672:	05db      	lsls	r3, r3, #23
 8000674:	2120      	movs	r1, #32
 8000676:	0018      	movs	r0, r3
 8000678:	f000 ff64 	bl	8001544 <HAL_GPIO_ReadPin>
 800067c:	0003      	movs	r3, r0
 800067e:	607b      	str	r3, [r7, #4]
			if (state < REF)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d105      	bne.n	8000692 <readSignal+0x7e>
			{
				data[i] = 0;
 8000686:	4a76      	ldr	r2, [pc, #472]	; (8000860 <readSignal+0x24c>)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	18d3      	adds	r3, r2, r3
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
 8000690:	e004      	b.n	800069c <readSignal+0x88>
			}
			else
			{
				data[i] = 1;
 8000692:	4a73      	ldr	r2, [pc, #460]	; (8000860 <readSignal+0x24c>)
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	18d3      	adds	r3, r2, r3
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
		for (int i = 7; i >= 0; i--)
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3b01      	subs	r3, #1
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	dade      	bge.n	8000666 <readSignal+0x52>
			}
		}

	// Convert data into single 8 bit int and store in allSamples array
	allSamples[packets] = arrayToData();
 80006a8:	4b6e      	ldr	r3, [pc, #440]	; (8000864 <readSignal+0x250>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	001c      	movs	r4, r3
 80006ae:	f7ff ff85 	bl	80005bc <arrayToData>
 80006b2:	0003      	movs	r3, r0
 80006b4:	001a      	movs	r2, r3
 80006b6:	4b6c      	ldr	r3, [pc, #432]	; (8000868 <readSignal+0x254>)
 80006b8:	551a      	strb	r2, [r3, r4]

	// Increase sample counter
	packets++;
 80006ba:	4b6a      	ldr	r3, [pc, #424]	; (8000864 <readSignal+0x250>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b68      	ldr	r3, [pc, #416]	; (8000864 <readSignal+0x250>)
 80006c4:	701a      	strb	r2, [r3, #0]

	// Stop listening
	listening = 0;
 80006c6:	4b69      	ldr	r3, [pc, #420]	; (800086c <readSignal+0x258>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
	memset(VAL_print, 0, sizeof(VAL_print));
 80006cc:	4b61      	ldr	r3, [pc, #388]	; (8000854 <readSignal+0x240>)
 80006ce:	2228      	movs	r2, #40	; 0x28
 80006d0:	2100      	movs	r1, #0
 80006d2:	0018      	movs	r0, r3
 80006d4:	f002 f846 	bl	8002764 <memset>
	sprintf(VAL_print, "Value Received: %d\r\n\r\n", allSamples[packets-1]);
 80006d8:	4b62      	ldr	r3, [pc, #392]	; (8000864 <readSignal+0x250>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	3b01      	subs	r3, #1
 80006de:	4a62      	ldr	r2, [pc, #392]	; (8000868 <readSignal+0x254>)
 80006e0:	5cd3      	ldrb	r3, [r2, r3]
 80006e2:	001a      	movs	r2, r3
 80006e4:	4962      	ldr	r1, [pc, #392]	; (8000870 <readSignal+0x25c>)
 80006e6:	4b5b      	ldr	r3, [pc, #364]	; (8000854 <readSignal+0x240>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f002 f843 	bl	8002774 <siprintf>
	HAL_UART_Transmit(&huart2, VAL_print, sizeof(VAL_print), 1000);
 80006ee:	23fa      	movs	r3, #250	; 0xfa
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4958      	ldr	r1, [pc, #352]	; (8000854 <readSignal+0x240>)
 80006f4:	4859      	ldr	r0, [pc, #356]	; (800085c <readSignal+0x248>)
 80006f6:	2228      	movs	r2, #40	; 0x28
 80006f8:	f001 fc60 	bl	8001fbc <HAL_UART_Transmit>
HAL_Delay(500);
HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8); //toggle blue pin
packets = transmit_packets;
}
}
}
 80006fc:	e0a6      	b.n	800084c <readSignal+0x238>
memset(VAL_print, 0, sizeof(VAL_print));
 80006fe:	4b55      	ldr	r3, [pc, #340]	; (8000854 <readSignal+0x240>)
 8000700:	2228      	movs	r2, #40	; 0x28
 8000702:	2100      	movs	r1, #0
 8000704:	0018      	movs	r0, r3
 8000706:	f002 f82d 	bl	8002764 <memset>
sprintf(VAL_print, "Comparing number of transmissions...\r\n");
 800070a:	4a5a      	ldr	r2, [pc, #360]	; (8000874 <readSignal+0x260>)
 800070c:	4b51      	ldr	r3, [pc, #324]	; (8000854 <readSignal+0x240>)
 800070e:	0011      	movs	r1, r2
 8000710:	0018      	movs	r0, r3
 8000712:	f002 f82f 	bl	8002774 <siprintf>
HAL_UART_Transmit(&huart2, VAL_print, sizeof(VAL_print), 1000);
 8000716:	23fa      	movs	r3, #250	; 0xfa
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	494e      	ldr	r1, [pc, #312]	; (8000854 <readSignal+0x240>)
 800071c:	484f      	ldr	r0, [pc, #316]	; (800085c <readSignal+0x248>)
 800071e:	2228      	movs	r2, #40	; 0x28
 8000720:	f001 fc4c 	bl	8001fbc <HAL_UART_Transmit>
for(int i = 7; i >= 0; i--)
 8000724:	2307      	movs	r3, #7
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	e01d      	b.n	8000766 <readSignal+0x152>
HAL_Delay(PERIOD);
 800072a:	23fa      	movs	r3, #250	; 0xfa
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fa48 	bl	8000bc4 <HAL_Delay>
state = HAL_GPIO_ReadPin(GPIOA, Signal_in_Pin);
 8000734:	2390      	movs	r3, #144	; 0x90
 8000736:	05db      	lsls	r3, r3, #23
 8000738:	2120      	movs	r1, #32
 800073a:	0018      	movs	r0, r3
 800073c:	f000 ff02 	bl	8001544 <HAL_GPIO_ReadPin>
 8000740:	0003      	movs	r3, r0
 8000742:	607b      	str	r3, [r7, #4]
if (state < REF)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d105      	bne.n	8000756 <readSignal+0x142>
data[i] = 0;
 800074a:	4a45      	ldr	r2, [pc, #276]	; (8000860 <readSignal+0x24c>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	18d3      	adds	r3, r2, r3
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
 8000754:	e004      	b.n	8000760 <readSignal+0x14c>
data[i] = 1;
 8000756:	4a42      	ldr	r2, [pc, #264]	; (8000860 <readSignal+0x24c>)
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	18d3      	adds	r3, r2, r3
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
for(int i = 7; i >= 0; i--)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	3b01      	subs	r3, #1
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	2b00      	cmp	r3, #0
 800076a:	dade      	bge.n	800072a <readSignal+0x116>
	uint8_t transmit_packets = arrayToData();
 800076c:	1cfc      	adds	r4, r7, #3
 800076e:	f7ff ff25 	bl	80005bc <arrayToData>
 8000772:	0003      	movs	r3, r0
 8000774:	7023      	strb	r3, [r4, #0]
	memset(VAL_print, 0, sizeof(VAL_print));
 8000776:	4b37      	ldr	r3, [pc, #220]	; (8000854 <readSignal+0x240>)
 8000778:	2228      	movs	r2, #40	; 0x28
 800077a:	2100      	movs	r1, #0
 800077c:	0018      	movs	r0, r3
 800077e:	f001 fff1 	bl	8002764 <memset>
	sprintf(VAL_print, "Number of transmissions: %d\r\n",transmit_packets);
 8000782:	1cfb      	adds	r3, r7, #3
 8000784:	781a      	ldrb	r2, [r3, #0]
 8000786:	493c      	ldr	r1, [pc, #240]	; (8000878 <readSignal+0x264>)
 8000788:	4b32      	ldr	r3, [pc, #200]	; (8000854 <readSignal+0x240>)
 800078a:	0018      	movs	r0, r3
 800078c:	f001 fff2 	bl	8002774 <siprintf>
	HAL_UART_Transmit(&huart2, VAL_print, sizeof(VAL_print), 1000);
 8000790:	23fa      	movs	r3, #250	; 0xfa
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	492f      	ldr	r1, [pc, #188]	; (8000854 <readSignal+0x240>)
 8000796:	4831      	ldr	r0, [pc, #196]	; (800085c <readSignal+0x248>)
 8000798:	2228      	movs	r2, #40	; 0x28
 800079a:	f001 fc0f 	bl	8001fbc <HAL_UART_Transmit>
	if (transmit_packets == packets)
 800079e:	4b31      	ldr	r3, [pc, #196]	; (8000864 <readSignal+0x250>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	1cfa      	adds	r2, r7, #3
 80007a4:	7812      	ldrb	r2, [r2, #0]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d126      	bne.n	80007f8 <readSignal+0x1e4>
memset(VAL_print, 0, sizeof(VAL_print));
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <readSignal+0x240>)
 80007ac:	2228      	movs	r2, #40	; 0x28
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 ffd7 	bl	8002764 <memset>
sprintf(VAL_print, "It's the same!! :)\r\n\r\n");
 80007b6:	4a31      	ldr	r2, [pc, #196]	; (800087c <readSignal+0x268>)
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <readSignal+0x240>)
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 ffd9 	bl	8002774 <siprintf>
HAL_UART_Transmit(&huart2, VAL_print, sizeof(VAL_print), 1000);
 80007c2:	23fa      	movs	r3, #250	; 0xfa
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4923      	ldr	r1, [pc, #140]	; (8000854 <readSignal+0x240>)
 80007c8:	4824      	ldr	r0, [pc, #144]	; (800085c <readSignal+0x248>)
 80007ca:	2228      	movs	r2, #40	; 0x28
 80007cc:	f001 fbf6 	bl	8001fbc <HAL_UART_Transmit>
HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9); //toggle green pin
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4a2a      	ldr	r2, [pc, #168]	; (8000880 <readSignal+0x26c>)
 80007d6:	0019      	movs	r1, r3
 80007d8:	0010      	movs	r0, r2
 80007da:	f000 feed 	bl	80015b8 <HAL_GPIO_TogglePin>
HAL_Delay(500);
 80007de:	23fa      	movs	r3, #250	; 0xfa
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 f9ee 	bl	8000bc4 <HAL_Delay>
HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9); //toggle green pin
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4a24      	ldr	r2, [pc, #144]	; (8000880 <readSignal+0x26c>)
 80007ee:	0019      	movs	r1, r3
 80007f0:	0010      	movs	r0, r2
 80007f2:	f000 fee1 	bl	80015b8 <HAL_GPIO_TogglePin>
}
 80007f6:	e029      	b.n	800084c <readSignal+0x238>
memset(VAL_print, 0, sizeof(VAL_print));
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <readSignal+0x240>)
 80007fa:	2228      	movs	r2, #40	; 0x28
 80007fc:	2100      	movs	r1, #0
 80007fe:	0018      	movs	r0, r3
 8000800:	f001 ffb0 	bl	8002764 <memset>
sprintf(VAL_print, "It's not the same!! :(\r\n\r\n");
 8000804:	4a1f      	ldr	r2, [pc, #124]	; (8000884 <readSignal+0x270>)
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <readSignal+0x240>)
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f001 ffb2 	bl	8002774 <siprintf>
HAL_UART_Transmit(&huart2, VAL_print, sizeof(VAL_print), 1000);
 8000810:	23fa      	movs	r3, #250	; 0xfa
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	490f      	ldr	r1, [pc, #60]	; (8000854 <readSignal+0x240>)
 8000816:	4811      	ldr	r0, [pc, #68]	; (800085c <readSignal+0x248>)
 8000818:	2228      	movs	r2, #40	; 0x28
 800081a:	f001 fbcf 	bl	8001fbc <HAL_UART_Transmit>
HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8); //toggle blue pin
 800081e:	2380      	movs	r3, #128	; 0x80
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4a17      	ldr	r2, [pc, #92]	; (8000880 <readSignal+0x26c>)
 8000824:	0019      	movs	r1, r3
 8000826:	0010      	movs	r0, r2
 8000828:	f000 fec6 	bl	80015b8 <HAL_GPIO_TogglePin>
HAL_Delay(500);
 800082c:	23fa      	movs	r3, #250	; 0xfa
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	0018      	movs	r0, r3
 8000832:	f000 f9c7 	bl	8000bc4 <HAL_Delay>
HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8); //toggle blue pin
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	4a11      	ldr	r2, [pc, #68]	; (8000880 <readSignal+0x26c>)
 800083c:	0019      	movs	r1, r3
 800083e:	0010      	movs	r0, r2
 8000840:	f000 feba 	bl	80015b8 <HAL_GPIO_TogglePin>
packets = transmit_packets;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <readSignal+0x250>)
 8000846:	1cfa      	adds	r2, r7, #3
 8000848:	7812      	ldrb	r2, [r2, #0]
 800084a:	701a      	strb	r2, [r3, #0]
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b005      	add	sp, #20
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	20000174 	.word	0x20000174
 8000858:	08003070 	.word	0x08003070
 800085c:	200000cc 	.word	0x200000cc
 8000860:	20000154 	.word	0x20000154
 8000864:	2000015c 	.word	0x2000015c
 8000868:	20000160 	.word	0x20000160
 800086c:	20000150 	.word	0x20000150
 8000870:	0800308c 	.word	0x0800308c
 8000874:	080030a4 	.word	0x080030a4
 8000878:	080030cc 	.word	0x080030cc
 800087c:	080030ec 	.word	0x080030ec
 8000880:	48000800 	.word	0x48000800
 8000884:	08003104 	.word	0x08003104

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	e7fe      	b.n	8000890 <Error_Handler+0x8>
	...

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <HAL_MspInit+0x44>)
 800089c:	699a      	ldr	r2, [r3, #24]
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <HAL_MspInit+0x44>)
 80008a0:	2101      	movs	r1, #1
 80008a2:	430a      	orrs	r2, r1
 80008a4:	619a      	str	r2, [r3, #24]
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <HAL_MspInit+0x44>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	2201      	movs	r2, #1
 80008ac:	4013      	ands	r3, r2
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_MspInit+0x44>)
 80008b4:	69da      	ldr	r2, [r3, #28]
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_MspInit+0x44>)
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	0549      	lsls	r1, r1, #21
 80008bc:	430a      	orrs	r2, r1
 80008be:	61da      	str	r2, [r3, #28]
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_MspInit+0x44>)
 80008c2:	69da      	ldr	r2, [r3, #28]
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	055b      	lsls	r3, r3, #21
 80008c8:	4013      	ands	r3, r2
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b08b      	sub	sp, #44	; 0x2c
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	2414      	movs	r4, #20
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	0018      	movs	r0, r3
 80008ea:	2314      	movs	r3, #20
 80008ec:	001a      	movs	r2, r3
 80008ee:	2100      	movs	r1, #0
 80008f0:	f001 ff38 	bl	8002764 <memset>
  if(hadc->Instance==ADC1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a19      	ldr	r2, [pc, #100]	; (8000960 <HAL_ADC_MspInit+0x84>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d12b      	bne.n	8000956 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <HAL_ADC_MspInit+0x88>)
 8000900:	699a      	ldr	r2, [r3, #24]
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_ADC_MspInit+0x88>)
 8000904:	2180      	movs	r1, #128	; 0x80
 8000906:	0089      	lsls	r1, r1, #2
 8000908:	430a      	orrs	r2, r1
 800090a:	619a      	str	r2, [r3, #24]
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_ADC_MspInit+0x88>)
 800090e:	699a      	ldr	r2, [r3, #24]
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_ADC_MspInit+0x88>)
 800091c:	695a      	ldr	r2, [r3, #20]
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_ADC_MspInit+0x88>)
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	0289      	lsls	r1, r1, #10
 8000924:	430a      	orrs	r2, r1
 8000926:	615a      	str	r2, [r3, #20]
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_ADC_MspInit+0x88>)
 800092a:	695a      	ldr	r2, [r3, #20]
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	029b      	lsls	r3, r3, #10
 8000930:	4013      	ands	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2202      	movs	r2, #2
 800093a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	2203      	movs	r2, #3
 8000940:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	193b      	adds	r3, r7, r4
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	193a      	adds	r2, r7, r4
 800094a:	2390      	movs	r3, #144	; 0x90
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f000 fc87 	bl	8001264 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b00b      	add	sp, #44	; 0x2c
 800095c:	bd90      	pop	{r4, r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	40012400 	.word	0x40012400
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b08b      	sub	sp, #44	; 0x2c
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	2414      	movs	r4, #20
 8000972:	193b      	adds	r3, r7, r4
 8000974:	0018      	movs	r0, r3
 8000976:	2314      	movs	r3, #20
 8000978:	001a      	movs	r2, r3
 800097a:	2100      	movs	r1, #0
 800097c:	f001 fef2 	bl	8002764 <memset>
  if(huart->Instance==USART2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <HAL_UART_MspInit+0x90>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d132      	bne.n	80009f0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_UART_MspInit+0x94>)
 800098c:	69da      	ldr	r2, [r3, #28]
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <HAL_UART_MspInit+0x94>)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	0289      	lsls	r1, r1, #10
 8000994:	430a      	orrs	r2, r1
 8000996:	61da      	str	r2, [r3, #28]
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_UART_MspInit+0x94>)
 800099a:	69da      	ldr	r2, [r3, #28]
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	029b      	lsls	r3, r3, #10
 80009a0:	4013      	ands	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_UART_MspInit+0x94>)
 80009a8:	695a      	ldr	r2, [r3, #20]
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_UART_MspInit+0x94>)
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	0289      	lsls	r1, r1, #10
 80009b0:	430a      	orrs	r2, r1
 80009b2:	615a      	str	r2, [r3, #20]
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_UART_MspInit+0x94>)
 80009b6:	695a      	ldr	r2, [r3, #20]
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	029b      	lsls	r3, r3, #10
 80009bc:	4013      	ands	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009c2:	0021      	movs	r1, r4
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	220c      	movs	r2, #12
 80009c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2202      	movs	r2, #2
 80009ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2203      	movs	r2, #3
 80009da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2201      	movs	r2, #1
 80009e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	187a      	adds	r2, r7, r1
 80009e4:	2390      	movs	r3, #144	; 0x90
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	0011      	movs	r1, r2
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 fc3a 	bl	8001264 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b00b      	add	sp, #44	; 0x2c
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	40004400 	.word	0x40004400
 80009fc:	40021000 	.word	0x40021000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f8b2 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <_sbrk+0x5c>)
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <_sbrk+0x60>)
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <_sbrk+0x64>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <_sbrk+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	18d3      	adds	r3, r2, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d207      	bcs.n	8000a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a60:	f001 fe56 	bl	8002710 <__errno>
 8000a64:	0003      	movs	r3, r0
 8000a66:	220c      	movs	r2, #12
 8000a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	e009      	b.n	8000a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	18d2      	adds	r2, r2, r3
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <_sbrk+0x64>)
 8000a80:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a82:	68fb      	ldr	r3, [r7, #12]
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b006      	add	sp, #24
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20002000 	.word	0x20002000
 8000a90:	00000400 	.word	0x00000400
 8000a94:	2000019c 	.word	0x2000019c
 8000a98:	200001b8 	.word	0x200001b8

08000a9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aaa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aae:	490e      	ldr	r1, [pc, #56]	; (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac4:	4c0b      	ldr	r4, [pc, #44]	; (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ad2:	f7ff ffe3 	bl	8000a9c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ad6:	f001 fe21 	bl	800271c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ada:	f7ff fbab 	bl	8000234 <main>

08000ade <LoopForever>:

LoopForever:
    b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   r0, =_estack
 8000ae0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000aec:	08003194 	.word	0x08003194
  ldr r2, =_sbss
 8000af0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000af4:	200001b4 	.word	0x200001b4

08000af8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_COMP_IRQHandler>
	...

08000afc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <HAL_Init+0x24>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_Init+0x24>)
 8000b06:	2110      	movs	r1, #16
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 f809 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b12:	f7ff febf 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	40022000 	.word	0x40022000

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_InitTick+0x5c>)
 8000b2e:	681c      	ldr	r4, [r3, #0]
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_InitTick+0x60>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	0019      	movs	r1, r3
 8000b36:	23fa      	movs	r3, #250	; 0xfa
 8000b38:	0098      	lsls	r0, r3, #2
 8000b3a:	f7ff faef 	bl	800011c <__udivsi3>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	0019      	movs	r1, r3
 8000b42:	0020      	movs	r0, r4
 8000b44:	f7ff faea 	bl	800011c <__udivsi3>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 fb7d 	bl	800124a <HAL_SYSTICK_Config>
 8000b50:	1e03      	subs	r3, r0, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	e00f      	b.n	8000b78 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d80b      	bhi.n	8000b76 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	2301      	movs	r3, #1
 8000b62:	425b      	negs	r3, r3
 8000b64:	2200      	movs	r2, #0
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 fb4a 	bl	8001200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_InitTick+0x64>)
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b003      	add	sp, #12
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x1c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	001a      	movs	r2, r3
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_IncTick+0x20>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	18d2      	adds	r2, r2, r3
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_IncTick+0x20>)
 8000b9e:	601a      	str	r2, [r3, #0]
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	200001a0 	.word	0x200001a0

08000bb0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b02      	ldr	r3, [pc, #8]	; (8000bc0 <HAL_GetTick+0x10>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	200001a0 	.word	0x200001a0

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff fff0 	bl	8000bb0 <HAL_GetTick>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_Delay+0x44>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	001a      	movs	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	189b      	adds	r3, r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	f7ff ffe0 	bl	8000bb0 <HAL_GetTick>
 8000bf0:	0002      	movs	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b004      	add	sp, #16
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	20000008 	.word	0x20000008

08000c0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c14:	230f      	movs	r3, #15
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e125      	b.n	8000e76 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10a      	bne.n	8000c48 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2234      	movs	r2, #52	; 0x34
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	0018      	movs	r0, r3
 8000c44:	f7ff fe4a 	bl	80008dc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c4c:	2210      	movs	r2, #16
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d000      	beq.n	8000c54 <HAL_ADC_Init+0x48>
 8000c52:	e103      	b.n	8000e5c <HAL_ADC_Init+0x250>
 8000c54:	230f      	movs	r3, #15
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d000      	beq.n	8000c60 <HAL_ADC_Init+0x54>
 8000c5e:	e0fd      	b.n	8000e5c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	2204      	movs	r2, #4
 8000c68:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000c6a:	d000      	beq.n	8000c6e <HAL_ADC_Init+0x62>
 8000c6c:	e0f6      	b.n	8000e5c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c72:	4a83      	ldr	r2, [pc, #524]	; (8000e80 <HAL_ADC_Init+0x274>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	2202      	movs	r2, #2
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	2203      	movs	r2, #3
 8000c86:	4013      	ands	r3, r2
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d112      	bne.n	8000cb2 <HAL_ADC_Init+0xa6>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2201      	movs	r2, #1
 8000c94:	4013      	ands	r3, r2
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d009      	beq.n	8000cae <HAL_ADC_Init+0xa2>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	021b      	lsls	r3, r3, #8
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d101      	bne.n	8000cb2 <HAL_ADC_Init+0xa6>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <HAL_ADC_Init+0xa8>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d116      	bne.n	8000ce6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	2218      	movs	r2, #24
 8000cc0:	4393      	bics	r3, r2
 8000cc2:	0019      	movs	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	0899      	lsrs	r1, r3, #2
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4964      	ldr	r1, [pc, #400]	; (8000e84 <HAL_ADC_Init+0x278>)
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	7e1b      	ldrb	r3, [r3, #24]
 8000cfa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7e5b      	ldrb	r3, [r3, #25]
 8000d00:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d02:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7e9b      	ldrb	r3, [r3, #26]
 8000d08:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d0a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d002      	beq.n	8000d1a <HAL_ADC_Init+0x10e>
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	015b      	lsls	r3, r3, #5
 8000d18:	e000      	b.n	8000d1c <HAL_ADC_Init+0x110>
 8000d1a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d1c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d22:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d101      	bne.n	8000d30 <HAL_ADC_Init+0x124>
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	e000      	b.n	8000d32 <HAL_ADC_Init+0x126>
 8000d30:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000d32:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2124      	movs	r1, #36	; 0x24
 8000d38:	5c5b      	ldrb	r3, [r3, r1]
 8000d3a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d3c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7edb      	ldrb	r3, [r3, #27]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d115      	bne.n	8000d78 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7e9b      	ldrb	r3, [r3, #26]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d105      	bne.n	8000d60 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	0252      	lsls	r2, r2, #9
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	e00b      	b.n	8000d78 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d64:	2220      	movs	r2, #32
 8000d66:	431a      	orrs	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d70:	2201      	movs	r2, #1
 8000d72:	431a      	orrs	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69da      	ldr	r2, [r3, #28]
 8000d7c:	23c2      	movs	r3, #194	; 0xc2
 8000d7e:	33ff      	adds	r3, #255	; 0xff
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d007      	beq.n	8000d94 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	68d9      	ldr	r1, [r3, #12]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	055b      	lsls	r3, r3, #21
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d01b      	beq.n	8000de8 <HAL_ADC_Init+0x1dc>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d017      	beq.n	8000de8 <HAL_ADC_Init+0x1dc>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d013      	beq.n	8000de8 <HAL_ADC_Init+0x1dc>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d00f      	beq.n	8000de8 <HAL_ADC_Init+0x1dc>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d00b      	beq.n	8000de8 <HAL_ADC_Init+0x1dc>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd4:	2b05      	cmp	r3, #5
 8000dd6:	d007      	beq.n	8000de8 <HAL_ADC_Init+0x1dc>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	2b06      	cmp	r3, #6
 8000dde:	d003      	beq.n	8000de8 <HAL_ADC_Init+0x1dc>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de4:	2b07      	cmp	r3, #7
 8000de6:	d112      	bne.n	8000e0e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	695a      	ldr	r2, [r3, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2107      	movs	r1, #7
 8000df4:	438a      	bics	r2, r1
 8000df6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6959      	ldr	r1, [r3, #20]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e02:	2207      	movs	r2, #7
 8000e04:	401a      	ands	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <HAL_ADC_Init+0x27c>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	68ba      	ldr	r2, [r7, #8]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d10b      	bne.n	8000e36 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e28:	2203      	movs	r2, #3
 8000e2a:	4393      	bics	r3, r2
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e34:	e01c      	b.n	8000e70 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e3a:	2212      	movs	r2, #18
 8000e3c:	4393      	bics	r3, r2
 8000e3e:	2210      	movs	r2, #16
 8000e40:	431a      	orrs	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000e52:	230f      	movs	r3, #15
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e5a:	e009      	b.n	8000e70 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e60:	2210      	movs	r2, #16
 8000e62:	431a      	orrs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000e68:	230f      	movs	r3, #15
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e70:	230f      	movs	r3, #15
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	781b      	ldrb	r3, [r3, #0]
}
 8000e76:	0018      	movs	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b004      	add	sp, #16
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	fffffefd 	.word	0xfffffefd
 8000e84:	fffe0219 	.word	0xfffe0219
 8000e88:	833fffe7 	.word	0x833fffe7

08000e8c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e96:	230f      	movs	r3, #15
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	055b      	lsls	r3, r3, #21
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d011      	beq.n	8000ed2 <HAL_ADC_ConfigChannel+0x46>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_ADC_ConfigChannel+0x46>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d009      	beq.n	8000ed2 <HAL_ADC_ConfigChannel+0x46>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d005      	beq.n	8000ed2 <HAL_ADC_ConfigChannel+0x46>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d001      	beq.n	8000ed2 <HAL_ADC_ConfigChannel+0x46>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2234      	movs	r2, #52	; 0x34
 8000ed6:	5c9b      	ldrb	r3, [r3, r2]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d101      	bne.n	8000ee0 <HAL_ADC_ConfigChannel+0x54>
 8000edc:	2302      	movs	r3, #2
 8000ede:	e0d0      	b.n	8001082 <HAL_ADC_ConfigChannel+0x1f6>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2234      	movs	r2, #52	; 0x34
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2204      	movs	r2, #4
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d000      	beq.n	8000ef6 <HAL_ADC_ConfigChannel+0x6a>
 8000ef4:	e0b4      	b.n	8001060 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	4a64      	ldr	r2, [pc, #400]	; (800108c <HAL_ADC_ConfigChannel+0x200>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d100      	bne.n	8000f02 <HAL_ADC_ConfigChannel+0x76>
 8000f00:	e082      	b.n	8001008 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	055b      	lsls	r3, r3, #21
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d037      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d033      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d02f      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d02b      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d027      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f48:	2b05      	cmp	r3, #5
 8000f4a:	d023      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	2b06      	cmp	r3, #6
 8000f52:	d01f      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	2b07      	cmp	r3, #7
 8000f5a:	d01b      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	2107      	movs	r1, #7
 8000f68:	400b      	ands	r3, r1
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d012      	beq.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	695a      	ldr	r2, [r3, #20]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2107      	movs	r1, #7
 8000f7a:	438a      	bics	r2, r1
 8000f7c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6959      	ldr	r1, [r3, #20]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	2207      	movs	r2, #7
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	430a      	orrs	r2, r1
 8000f92:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b10      	cmp	r3, #16
 8000f9a:	d007      	beq.n	8000fac <HAL_ADC_ConfigChannel+0x120>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b11      	cmp	r3, #17
 8000fa2:	d003      	beq.n	8000fac <HAL_ADC_ConfigChannel+0x120>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b12      	cmp	r3, #18
 8000faa:	d163      	bne.n	8001074 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000fac:	4b38      	ldr	r3, [pc, #224]	; (8001090 <HAL_ADC_ConfigChannel+0x204>)
 8000fae:	6819      	ldr	r1, [r3, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b10      	cmp	r3, #16
 8000fb6:	d009      	beq.n	8000fcc <HAL_ADC_ConfigChannel+0x140>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b11      	cmp	r3, #17
 8000fbe:	d102      	bne.n	8000fc6 <HAL_ADC_ConfigChannel+0x13a>
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	03db      	lsls	r3, r3, #15
 8000fc4:	e004      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0x144>
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	045b      	lsls	r3, r3, #17
 8000fca:	e001      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0x144>
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	041b      	lsls	r3, r3, #16
 8000fd0:	4a2f      	ldr	r2, [pc, #188]	; (8001090 <HAL_ADC_ConfigChannel+0x204>)
 8000fd2:	430b      	orrs	r3, r1
 8000fd4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b10      	cmp	r3, #16
 8000fdc:	d14a      	bne.n	8001074 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fde:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <HAL_ADC_ConfigChannel+0x208>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	492d      	ldr	r1, [pc, #180]	; (8001098 <HAL_ADC_ConfigChannel+0x20c>)
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff f899 	bl	800011c <__udivsi3>
 8000fea:	0003      	movs	r3, r0
 8000fec:	001a      	movs	r2, r3
 8000fee:	0013      	movs	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	189b      	adds	r3, r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ff8:	e002      	b.n	8001000 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f9      	bne.n	8000ffa <HAL_ADC_ConfigChannel+0x16e>
 8001006:	e035      	b.n	8001074 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2101      	movs	r1, #1
 8001014:	4099      	lsls	r1, r3
 8001016:	000b      	movs	r3, r1
 8001018:	43d9      	mvns	r1, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	400a      	ands	r2, r1
 8001020:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b10      	cmp	r3, #16
 8001028:	d007      	beq.n	800103a <HAL_ADC_ConfigChannel+0x1ae>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b11      	cmp	r3, #17
 8001030:	d003      	beq.n	800103a <HAL_ADC_ConfigChannel+0x1ae>
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b12      	cmp	r3, #18
 8001038:	d11c      	bne.n	8001074 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_ADC_ConfigChannel+0x204>)
 800103c:	6819      	ldr	r1, [r3, #0]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b10      	cmp	r3, #16
 8001044:	d007      	beq.n	8001056 <HAL_ADC_ConfigChannel+0x1ca>
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b11      	cmp	r3, #17
 800104c:	d101      	bne.n	8001052 <HAL_ADC_ConfigChannel+0x1c6>
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <HAL_ADC_ConfigChannel+0x210>)
 8001050:	e002      	b.n	8001058 <HAL_ADC_ConfigChannel+0x1cc>
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_ADC_ConfigChannel+0x214>)
 8001054:	e000      	b.n	8001058 <HAL_ADC_ConfigChannel+0x1cc>
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_ADC_ConfigChannel+0x218>)
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_ADC_ConfigChannel+0x204>)
 800105a:	400b      	ands	r3, r1
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e009      	b.n	8001074 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001064:	2220      	movs	r2, #32
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800106c:	230f      	movs	r3, #15
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2234      	movs	r2, #52	; 0x34
 8001078:	2100      	movs	r1, #0
 800107a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800107c:	230f      	movs	r3, #15
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	781b      	ldrb	r3, [r3, #0]
}
 8001082:	0018      	movs	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	b004      	add	sp, #16
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	00001001 	.word	0x00001001
 8001090:	40012708 	.word	0x40012708
 8001094:	20000000 	.word	0x20000000
 8001098:	000f4240 	.word	0x000f4240
 800109c:	ffbfffff 	.word	0xffbfffff
 80010a0:	feffffff 	.word	0xfeffffff
 80010a4:	ff7fffff 	.word	0xff7fffff

080010a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	0002      	movs	r2, r0
 80010b0:	1dfb      	adds	r3, r7, #7
 80010b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	1dfb      	adds	r3, r7, #7
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b7f      	cmp	r3, #127	; 0x7f
 80010ba:	d809      	bhi.n	80010d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	001a      	movs	r2, r3
 80010c2:	231f      	movs	r3, #31
 80010c4:	401a      	ands	r2, r3
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_EnableIRQ+0x30>)
 80010c8:	2101      	movs	r1, #1
 80010ca:	4091      	lsls	r1, r2
 80010cc:	000a      	movs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
  }
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	0002      	movs	r2, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b7f      	cmp	r3, #127	; 0x7f
 80010f0:	d828      	bhi.n	8001144 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f2:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <__NVIC_SetPriority+0xd4>)
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	33c0      	adds	r3, #192	; 0xc0
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	589b      	ldr	r3, [r3, r2]
 8001102:	1dfa      	adds	r2, r7, #7
 8001104:	7812      	ldrb	r2, [r2, #0]
 8001106:	0011      	movs	r1, r2
 8001108:	2203      	movs	r2, #3
 800110a:	400a      	ands	r2, r1
 800110c:	00d2      	lsls	r2, r2, #3
 800110e:	21ff      	movs	r1, #255	; 0xff
 8001110:	4091      	lsls	r1, r2
 8001112:	000a      	movs	r2, r1
 8001114:	43d2      	mvns	r2, r2
 8001116:	401a      	ands	r2, r3
 8001118:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	019b      	lsls	r3, r3, #6
 800111e:	22ff      	movs	r2, #255	; 0xff
 8001120:	401a      	ands	r2, r3
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	0018      	movs	r0, r3
 8001128:	2303      	movs	r3, #3
 800112a:	4003      	ands	r3, r0
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001130:	481f      	ldr	r0, [pc, #124]	; (80011b0 <__NVIC_SetPriority+0xd4>)
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b25b      	sxtb	r3, r3
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	430a      	orrs	r2, r1
 800113c:	33c0      	adds	r3, #192	; 0xc0
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001142:	e031      	b.n	80011a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001144:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <__NVIC_SetPriority+0xd8>)
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	0019      	movs	r1, r3
 800114c:	230f      	movs	r3, #15
 800114e:	400b      	ands	r3, r1
 8001150:	3b08      	subs	r3, #8
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3306      	adds	r3, #6
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	18d3      	adds	r3, r2, r3
 800115a:	3304      	adds	r3, #4
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	1dfa      	adds	r2, r7, #7
 8001160:	7812      	ldrb	r2, [r2, #0]
 8001162:	0011      	movs	r1, r2
 8001164:	2203      	movs	r2, #3
 8001166:	400a      	ands	r2, r1
 8001168:	00d2      	lsls	r2, r2, #3
 800116a:	21ff      	movs	r1, #255	; 0xff
 800116c:	4091      	lsls	r1, r2
 800116e:	000a      	movs	r2, r1
 8001170:	43d2      	mvns	r2, r2
 8001172:	401a      	ands	r2, r3
 8001174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	019b      	lsls	r3, r3, #6
 800117a:	22ff      	movs	r2, #255	; 0xff
 800117c:	401a      	ands	r2, r3
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	0018      	movs	r0, r3
 8001184:	2303      	movs	r3, #3
 8001186:	4003      	ands	r3, r0
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <__NVIC_SetPriority+0xd8>)
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	001c      	movs	r4, r3
 8001194:	230f      	movs	r3, #15
 8001196:	4023      	ands	r3, r4
 8001198:	3b08      	subs	r3, #8
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	430a      	orrs	r2, r1
 800119e:	3306      	adds	r3, #6
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	18c3      	adds	r3, r0, r3
 80011a4:	3304      	adds	r3, #4
 80011a6:	601a      	str	r2, [r3, #0]
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b003      	add	sp, #12
 80011ae:	bd90      	pop	{r4, r7, pc}
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	1e5a      	subs	r2, r3, #1
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	045b      	lsls	r3, r3, #17
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d301      	bcc.n	80011d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011cc:	2301      	movs	r3, #1
 80011ce:	e010      	b.n	80011f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <SysTick_Config+0x44>)
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	3a01      	subs	r2, #1
 80011d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d8:	2301      	movs	r3, #1
 80011da:	425b      	negs	r3, r3
 80011dc:	2103      	movs	r1, #3
 80011de:	0018      	movs	r0, r3
 80011e0:	f7ff ff7c 	bl	80010dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <SysTick_Config+0x44>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <SysTick_Config+0x44>)
 80011ec:	2207      	movs	r2, #7
 80011ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	0018      	movs	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b002      	add	sp, #8
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	e000e010 	.word	0xe000e010

08001200 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	210f      	movs	r1, #15
 800120c:	187b      	adds	r3, r7, r1
 800120e:	1c02      	adds	r2, r0, #0
 8001210:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	187b      	adds	r3, r7, r1
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b25b      	sxtb	r3, r3
 800121a:	0011      	movs	r1, r2
 800121c:	0018      	movs	r0, r3
 800121e:	f7ff ff5d 	bl	80010dc <__NVIC_SetPriority>
}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	b004      	add	sp, #16
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	0002      	movs	r2, r0
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001236:	1dfb      	adds	r3, r7, #7
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b25b      	sxtb	r3, r3
 800123c:	0018      	movs	r0, r3
 800123e:	f7ff ff33 	bl	80010a8 <__NVIC_EnableIRQ>
}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b002      	add	sp, #8
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff ffaf 	bl	80011b8 <SysTick_Config>
 800125a:	0003      	movs	r3, r0
}
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	b002      	add	sp, #8
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001272:	e14f      	b.n	8001514 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4091      	lsls	r1, r2
 800127e:	000a      	movs	r2, r1
 8001280:	4013      	ands	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d100      	bne.n	800128c <HAL_GPIO_Init+0x28>
 800128a:	e140      	b.n	800150e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2203      	movs	r2, #3
 8001292:	4013      	ands	r3, r2
 8001294:	2b01      	cmp	r3, #1
 8001296:	d005      	beq.n	80012a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2203      	movs	r2, #3
 800129e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d130      	bne.n	8001306 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	409a      	lsls	r2, r3
 80012b2:	0013      	movs	r3, r2
 80012b4:	43da      	mvns	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	409a      	lsls	r2, r3
 80012c6:	0013      	movs	r3, r2
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012da:	2201      	movs	r2, #1
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
 80012e0:	0013      	movs	r3, r2
 80012e2:	43da      	mvns	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	2201      	movs	r2, #1
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2203      	movs	r2, #3
 800130c:	4013      	ands	r3, r2
 800130e:	2b03      	cmp	r3, #3
 8001310:	d017      	beq.n	8001342 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	2203      	movs	r2, #3
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	43da      	mvns	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2203      	movs	r2, #3
 8001348:	4013      	ands	r3, r2
 800134a:	2b02      	cmp	r3, #2
 800134c:	d123      	bne.n	8001396 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	08da      	lsrs	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3208      	adds	r2, #8
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	58d3      	ldr	r3, [r2, r3]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	2207      	movs	r2, #7
 8001360:	4013      	ands	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	43da      	mvns	r2, r3
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	691a      	ldr	r2, [r3, #16]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2107      	movs	r1, #7
 800137a:	400b      	ands	r3, r1
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	409a      	lsls	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	08da      	lsrs	r2, r3, #3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3208      	adds	r2, #8
 8001390:	0092      	lsls	r2, r2, #2
 8001392:	6939      	ldr	r1, [r7, #16]
 8001394:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	409a      	lsls	r2, r3
 80013a4:	0013      	movs	r3, r2
 80013a6:	43da      	mvns	r2, r3
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2203      	movs	r2, #3
 80013b4:	401a      	ands	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	409a      	lsls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	23c0      	movs	r3, #192	; 0xc0
 80013d0:	029b      	lsls	r3, r3, #10
 80013d2:	4013      	ands	r3, r2
 80013d4:	d100      	bne.n	80013d8 <HAL_GPIO_Init+0x174>
 80013d6:	e09a      	b.n	800150e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d8:	4b54      	ldr	r3, [pc, #336]	; (800152c <HAL_GPIO_Init+0x2c8>)
 80013da:	699a      	ldr	r2, [r3, #24]
 80013dc:	4b53      	ldr	r3, [pc, #332]	; (800152c <HAL_GPIO_Init+0x2c8>)
 80013de:	2101      	movs	r1, #1
 80013e0:	430a      	orrs	r2, r1
 80013e2:	619a      	str	r2, [r3, #24]
 80013e4:	4b51      	ldr	r3, [pc, #324]	; (800152c <HAL_GPIO_Init+0x2c8>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	2201      	movs	r2, #1
 80013ea:	4013      	ands	r3, r2
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013f0:	4a4f      	ldr	r2, [pc, #316]	; (8001530 <HAL_GPIO_Init+0x2cc>)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	589b      	ldr	r3, [r3, r2]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	2203      	movs	r2, #3
 8001402:	4013      	ands	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	220f      	movs	r2, #15
 8001408:	409a      	lsls	r2, r3
 800140a:	0013      	movs	r3, r2
 800140c:	43da      	mvns	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	2390      	movs	r3, #144	; 0x90
 8001418:	05db      	lsls	r3, r3, #23
 800141a:	429a      	cmp	r2, r3
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x1e2>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a44      	ldr	r2, [pc, #272]	; (8001534 <HAL_GPIO_Init+0x2d0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x1de>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a43      	ldr	r2, [pc, #268]	; (8001538 <HAL_GPIO_Init+0x2d4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x1da>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a42      	ldr	r2, [pc, #264]	; (800153c <HAL_GPIO_Init+0x2d8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x1d6>
 8001436:	2303      	movs	r3, #3
 8001438:	e006      	b.n	8001448 <HAL_GPIO_Init+0x1e4>
 800143a:	2305      	movs	r3, #5
 800143c:	e004      	b.n	8001448 <HAL_GPIO_Init+0x1e4>
 800143e:	2302      	movs	r3, #2
 8001440:	e002      	b.n	8001448 <HAL_GPIO_Init+0x1e4>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x1e4>
 8001446:	2300      	movs	r3, #0
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	2103      	movs	r1, #3
 800144c:	400a      	ands	r2, r1
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	4093      	lsls	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001458:	4935      	ldr	r1, [pc, #212]	; (8001530 <HAL_GPIO_Init+0x2cc>)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001466:	4b36      	ldr	r3, [pc, #216]	; (8001540 <HAL_GPIO_Init+0x2dc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43da      	mvns	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	025b      	lsls	r3, r3, #9
 800147e:	4013      	ands	r3, r2
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <HAL_GPIO_Init+0x2dc>)
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_GPIO_Init+0x2dc>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43da      	mvns	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	029b      	lsls	r3, r3, #10
 80014a8:	4013      	ands	r3, r2
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <HAL_GPIO_Init+0x2dc>)
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_GPIO_Init+0x2dc>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	43da      	mvns	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	035b      	lsls	r3, r3, #13
 80014d2:	4013      	ands	r3, r2
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_GPIO_Init+0x2dc>)
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_GPIO_Init+0x2dc>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	43da      	mvns	r2, r3
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	039b      	lsls	r3, r3, #14
 80014fc:	4013      	ands	r3, r2
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <HAL_GPIO_Init+0x2dc>)
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	40da      	lsrs	r2, r3
 800151c:	1e13      	subs	r3, r2, #0
 800151e:	d000      	beq.n	8001522 <HAL_GPIO_Init+0x2be>
 8001520:	e6a8      	b.n	8001274 <HAL_GPIO_Init+0x10>
  } 
}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b006      	add	sp, #24
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000
 8001534:	48000400 	.word	0x48000400
 8001538:	48000800 	.word	0x48000800
 800153c:	48000c00 	.word	0x48000c00
 8001540:	40010400 	.word	0x40010400

08001544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	000a      	movs	r2, r1
 800154e:	1cbb      	adds	r3, r7, #2
 8001550:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	1cba      	adds	r2, r7, #2
 8001558:	8812      	ldrh	r2, [r2, #0]
 800155a:	4013      	ands	r3, r2
 800155c:	d004      	beq.n	8001568 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800155e:	230f      	movs	r3, #15
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
 8001566:	e003      	b.n	8001570 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001568:	230f      	movs	r3, #15
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001570:	230f      	movs	r3, #15
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	781b      	ldrb	r3, [r3, #0]
  }
 8001576:	0018      	movs	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	b004      	add	sp, #16
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	0008      	movs	r0, r1
 8001588:	0011      	movs	r1, r2
 800158a:	1cbb      	adds	r3, r7, #2
 800158c:	1c02      	adds	r2, r0, #0
 800158e:	801a      	strh	r2, [r3, #0]
 8001590:	1c7b      	adds	r3, r7, #1
 8001592:	1c0a      	adds	r2, r1, #0
 8001594:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001596:	1c7b      	adds	r3, r7, #1
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800159e:	1cbb      	adds	r3, r7, #2
 80015a0:	881a      	ldrh	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a6:	e003      	b.n	80015b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015a8:	1cbb      	adds	r3, r7, #2
 80015aa:	881a      	ldrh	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b002      	add	sp, #8
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	000a      	movs	r2, r1
 80015c2:	1cbb      	adds	r3, r7, #2
 80015c4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015cc:	1cbb      	adds	r3, r7, #2
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	041a      	lsls	r2, r3, #16
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43db      	mvns	r3, r3
 80015da:	1cb9      	adds	r1, r7, #2
 80015dc:	8809      	ldrh	r1, [r1, #0]
 80015de:	400b      	ands	r3, r1
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	619a      	str	r2, [r3, #24]
}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b004      	add	sp, #16
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	0002      	movs	r2, r0
 80015f8:	1dbb      	adds	r3, r7, #6
 80015fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	1dba      	adds	r2, r7, #6
 8001602:	8812      	ldrh	r2, [r2, #0]
 8001604:	4013      	ands	r3, r2
 8001606:	d008      	beq.n	800161a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800160a:	1dba      	adds	r2, r7, #6
 800160c:	8812      	ldrh	r2, [r2, #0]
 800160e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001610:	1dbb      	adds	r3, r7, #6
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	0018      	movs	r0, r3
 8001616:	f000 f807 	bl	8001628 <HAL_GPIO_EXTI_Callback>
  }
}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	40010400 	.word	0x40010400

08001628 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	0002      	movs	r2, r0
 8001630:	1dbb      	adds	r3, r7, #6
 8001632:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b002      	add	sp, #8
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e301      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2201      	movs	r2, #1
 8001654:	4013      	ands	r3, r2
 8001656:	d100      	bne.n	800165a <HAL_RCC_OscConfig+0x1e>
 8001658:	e08d      	b.n	8001776 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800165a:	4bc3      	ldr	r3, [pc, #780]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	220c      	movs	r2, #12
 8001660:	4013      	ands	r3, r2
 8001662:	2b04      	cmp	r3, #4
 8001664:	d00e      	beq.n	8001684 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001666:	4bc0      	ldr	r3, [pc, #768]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	220c      	movs	r2, #12
 800166c:	4013      	ands	r3, r2
 800166e:	2b08      	cmp	r3, #8
 8001670:	d116      	bne.n	80016a0 <HAL_RCC_OscConfig+0x64>
 8001672:	4bbd      	ldr	r3, [pc, #756]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	025b      	lsls	r3, r3, #9
 800167a:	401a      	ands	r2, r3
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	025b      	lsls	r3, r3, #9
 8001680:	429a      	cmp	r2, r3
 8001682:	d10d      	bne.n	80016a0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	4bb8      	ldr	r3, [pc, #736]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	029b      	lsls	r3, r3, #10
 800168c:	4013      	ands	r3, r2
 800168e:	d100      	bne.n	8001692 <HAL_RCC_OscConfig+0x56>
 8001690:	e070      	b.n	8001774 <HAL_RCC_OscConfig+0x138>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d000      	beq.n	800169c <HAL_RCC_OscConfig+0x60>
 800169a:	e06b      	b.n	8001774 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e2d8      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_OscConfig+0x7c>
 80016a8:	4baf      	ldr	r3, [pc, #700]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4bae      	ldr	r3, [pc, #696]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	0249      	lsls	r1, r1, #9
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e02f      	b.n	8001718 <HAL_RCC_OscConfig+0xdc>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10c      	bne.n	80016da <HAL_RCC_OscConfig+0x9e>
 80016c0:	4ba9      	ldr	r3, [pc, #676]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4ba8      	ldr	r3, [pc, #672]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	49a9      	ldr	r1, [pc, #676]	; (800196c <HAL_RCC_OscConfig+0x330>)
 80016c8:	400a      	ands	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	4ba6      	ldr	r3, [pc, #664]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4ba5      	ldr	r3, [pc, #660]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	49a7      	ldr	r1, [pc, #668]	; (8001970 <HAL_RCC_OscConfig+0x334>)
 80016d4:	400a      	ands	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e01e      	b.n	8001718 <HAL_RCC_OscConfig+0xdc>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d10e      	bne.n	8001700 <HAL_RCC_OscConfig+0xc4>
 80016e2:	4ba1      	ldr	r3, [pc, #644]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4ba0      	ldr	r3, [pc, #640]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	02c9      	lsls	r1, r1, #11
 80016ec:	430a      	orrs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	4b9d      	ldr	r3, [pc, #628]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b9c      	ldr	r3, [pc, #624]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	0249      	lsls	r1, r1, #9
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0xdc>
 8001700:	4b99      	ldr	r3, [pc, #612]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b98      	ldr	r3, [pc, #608]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001706:	4999      	ldr	r1, [pc, #612]	; (800196c <HAL_RCC_OscConfig+0x330>)
 8001708:	400a      	ands	r2, r1
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	4b96      	ldr	r3, [pc, #600]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b95      	ldr	r3, [pc, #596]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001712:	4997      	ldr	r1, [pc, #604]	; (8001970 <HAL_RCC_OscConfig+0x334>)
 8001714:	400a      	ands	r2, r1
 8001716:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d014      	beq.n	800174a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fa46 	bl	8000bb0 <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172a:	f7ff fa41 	bl	8000bb0 <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b64      	cmp	r3, #100	; 0x64
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e28a      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173c:	4b8a      	ldr	r3, [pc, #552]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	029b      	lsls	r3, r3, #10
 8001744:	4013      	ands	r3, r2
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0xee>
 8001748:	e015      	b.n	8001776 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff fa31 	bl	8000bb0 <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fa2c 	bl	8000bb0 <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	; 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e275      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	4b80      	ldr	r3, [pc, #512]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	029b      	lsls	r3, r3, #10
 800176e:	4013      	ands	r3, r2
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x118>
 8001772:	e000      	b.n	8001776 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2202      	movs	r2, #2
 800177c:	4013      	ands	r3, r2
 800177e:	d100      	bne.n	8001782 <HAL_RCC_OscConfig+0x146>
 8001780:	e069      	b.n	8001856 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001782:	4b79      	ldr	r3, [pc, #484]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	220c      	movs	r2, #12
 8001788:	4013      	ands	r3, r2
 800178a:	d00b      	beq.n	80017a4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800178c:	4b76      	ldr	r3, [pc, #472]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	220c      	movs	r2, #12
 8001792:	4013      	ands	r3, r2
 8001794:	2b08      	cmp	r3, #8
 8001796:	d11c      	bne.n	80017d2 <HAL_RCC_OscConfig+0x196>
 8001798:	4b73      	ldr	r3, [pc, #460]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	025b      	lsls	r3, r3, #9
 80017a0:	4013      	ands	r3, r2
 80017a2:	d116      	bne.n	80017d2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a4:	4b70      	ldr	r3, [pc, #448]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2202      	movs	r2, #2
 80017aa:	4013      	ands	r3, r2
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_OscConfig+0x17e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d001      	beq.n	80017ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e24b      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ba:	4b6b      	ldr	r3, [pc, #428]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	22f8      	movs	r2, #248	; 0xf8
 80017c0:	4393      	bics	r3, r2
 80017c2:	0019      	movs	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	00da      	lsls	r2, r3, #3
 80017ca:	4b67      	ldr	r3, [pc, #412]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d0:	e041      	b.n	8001856 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d024      	beq.n	8001824 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017da:	4b63      	ldr	r3, [pc, #396]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b62      	ldr	r3, [pc, #392]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80017e0:	2101      	movs	r1, #1
 80017e2:	430a      	orrs	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff f9e3 	bl	8000bb0 <HAL_GetTick>
 80017ea:	0003      	movs	r3, r0
 80017ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f0:	f7ff f9de 	bl	8000bb0 <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e227      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001802:	4b59      	ldr	r3, [pc, #356]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2202      	movs	r2, #2
 8001808:	4013      	ands	r3, r2
 800180a:	d0f1      	beq.n	80017f0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	4b56      	ldr	r3, [pc, #344]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	22f8      	movs	r2, #248	; 0xf8
 8001812:	4393      	bics	r3, r2
 8001814:	0019      	movs	r1, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	00da      	lsls	r2, r3, #3
 800181c:	4b52      	ldr	r3, [pc, #328]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800181e:	430a      	orrs	r2, r1
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e018      	b.n	8001856 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b4f      	ldr	r3, [pc, #316]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800182a:	2101      	movs	r1, #1
 800182c:	438a      	bics	r2, r1
 800182e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff f9be 	bl	8000bb0 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183a:	f7ff f9b9 	bl	8000bb0 <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e202      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184c:	4b46      	ldr	r3, [pc, #280]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2202      	movs	r2, #2
 8001852:	4013      	ands	r3, r2
 8001854:	d1f1      	bne.n	800183a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2208      	movs	r2, #8
 800185c:	4013      	ands	r3, r2
 800185e:	d036      	beq.n	80018ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d019      	beq.n	800189c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001868:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800186a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800186c:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800186e:	2101      	movs	r1, #1
 8001870:	430a      	orrs	r2, r1
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001874:	f7ff f99c 	bl	8000bb0 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187e:	f7ff f997 	bl	8000bb0 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e1e0      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001890:	4b35      	ldr	r3, [pc, #212]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	2202      	movs	r2, #2
 8001896:	4013      	ands	r3, r2
 8001898:	d0f1      	beq.n	800187e <HAL_RCC_OscConfig+0x242>
 800189a:	e018      	b.n	80018ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189c:	4b32      	ldr	r3, [pc, #200]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800189e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a0:	4b31      	ldr	r3, [pc, #196]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018a2:	2101      	movs	r1, #1
 80018a4:	438a      	bics	r2, r1
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a8:	f7ff f982 	bl	8000bb0 <HAL_GetTick>
 80018ac:	0003      	movs	r3, r0
 80018ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b2:	f7ff f97d 	bl	8000bb0 <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e1c6      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	4b28      	ldr	r3, [pc, #160]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	2202      	movs	r2, #2
 80018ca:	4013      	ands	r3, r2
 80018cc:	d1f1      	bne.n	80018b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2204      	movs	r2, #4
 80018d4:	4013      	ands	r3, r2
 80018d6:	d100      	bne.n	80018da <HAL_RCC_OscConfig+0x29e>
 80018d8:	e0b4      	b.n	8001a44 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018da:	201f      	movs	r0, #31
 80018dc:	183b      	adds	r3, r7, r0
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018e4:	69da      	ldr	r2, [r3, #28]
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	055b      	lsls	r3, r3, #21
 80018ea:	4013      	ands	r3, r2
 80018ec:	d110      	bne.n	8001910 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018f0:	69da      	ldr	r2, [r3, #28]
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018f4:	2180      	movs	r1, #128	; 0x80
 80018f6:	0549      	lsls	r1, r1, #21
 80018f8:	430a      	orrs	r2, r1
 80018fa:	61da      	str	r2, [r3, #28]
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 80018fe:	69da      	ldr	r2, [r3, #28]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	055b      	lsls	r3, r3, #21
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800190a:	183b      	adds	r3, r7, r0
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_RCC_OscConfig+0x338>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4013      	ands	r3, r2
 800191a:	d11a      	bne.n	8001952 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_RCC_OscConfig+0x338>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <HAL_RCC_OscConfig+0x338>)
 8001922:	2180      	movs	r1, #128	; 0x80
 8001924:	0049      	lsls	r1, r1, #1
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192a:	f7ff f941 	bl	8000bb0 <HAL_GetTick>
 800192e:	0003      	movs	r3, r0
 8001930:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001934:	f7ff f93c 	bl	8000bb0 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e185      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_OscConfig+0x338>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4013      	ands	r3, r2
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d10e      	bne.n	8001978 <HAL_RCC_OscConfig+0x33c>
 800195a:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 800195c:	6a1a      	ldr	r2, [r3, #32]
 800195e:	4b02      	ldr	r3, [pc, #8]	; (8001968 <HAL_RCC_OscConfig+0x32c>)
 8001960:	2101      	movs	r1, #1
 8001962:	430a      	orrs	r2, r1
 8001964:	621a      	str	r2, [r3, #32]
 8001966:	e035      	b.n	80019d4 <HAL_RCC_OscConfig+0x398>
 8001968:	40021000 	.word	0x40021000
 800196c:	fffeffff 	.word	0xfffeffff
 8001970:	fffbffff 	.word	0xfffbffff
 8001974:	40007000 	.word	0x40007000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10c      	bne.n	800199a <HAL_RCC_OscConfig+0x35e>
 8001980:	4bb6      	ldr	r3, [pc, #728]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001982:	6a1a      	ldr	r2, [r3, #32]
 8001984:	4bb5      	ldr	r3, [pc, #724]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001986:	2101      	movs	r1, #1
 8001988:	438a      	bics	r2, r1
 800198a:	621a      	str	r2, [r3, #32]
 800198c:	4bb3      	ldr	r3, [pc, #716]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 800198e:	6a1a      	ldr	r2, [r3, #32]
 8001990:	4bb2      	ldr	r3, [pc, #712]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001992:	2104      	movs	r1, #4
 8001994:	438a      	bics	r2, r1
 8001996:	621a      	str	r2, [r3, #32]
 8001998:	e01c      	b.n	80019d4 <HAL_RCC_OscConfig+0x398>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b05      	cmp	r3, #5
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0x380>
 80019a2:	4bae      	ldr	r3, [pc, #696]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 80019a4:	6a1a      	ldr	r2, [r3, #32]
 80019a6:	4bad      	ldr	r3, [pc, #692]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 80019a8:	2104      	movs	r1, #4
 80019aa:	430a      	orrs	r2, r1
 80019ac:	621a      	str	r2, [r3, #32]
 80019ae:	4bab      	ldr	r3, [pc, #684]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 80019b0:	6a1a      	ldr	r2, [r3, #32]
 80019b2:	4baa      	ldr	r3, [pc, #680]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	621a      	str	r2, [r3, #32]
 80019ba:	e00b      	b.n	80019d4 <HAL_RCC_OscConfig+0x398>
 80019bc:	4ba7      	ldr	r3, [pc, #668]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 80019be:	6a1a      	ldr	r2, [r3, #32]
 80019c0:	4ba6      	ldr	r3, [pc, #664]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	438a      	bics	r2, r1
 80019c6:	621a      	str	r2, [r3, #32]
 80019c8:	4ba4      	ldr	r3, [pc, #656]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 80019ca:	6a1a      	ldr	r2, [r3, #32]
 80019cc:	4ba3      	ldr	r3, [pc, #652]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 80019ce:	2104      	movs	r1, #4
 80019d0:	438a      	bics	r2, r1
 80019d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d014      	beq.n	8001a06 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff f8e8 	bl	8000bb0 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e4:	e009      	b.n	80019fa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	f7ff f8e3 	bl	8000bb0 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4a9b      	ldr	r2, [pc, #620]	; (8001c60 <HAL_RCC_OscConfig+0x624>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e12b      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fa:	4b98      	ldr	r3, [pc, #608]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	2202      	movs	r2, #2
 8001a00:	4013      	ands	r3, r2
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x3aa>
 8001a04:	e013      	b.n	8001a2e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff f8d3 	bl	8000bb0 <HAL_GetTick>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0e:	e009      	b.n	8001a24 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a10:	f7ff f8ce 	bl	8000bb0 <HAL_GetTick>
 8001a14:	0002      	movs	r2, r0
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	4a91      	ldr	r2, [pc, #580]	; (8001c60 <HAL_RCC_OscConfig+0x624>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e116      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a24:	4b8d      	ldr	r3, [pc, #564]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a2e:	231f      	movs	r3, #31
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d105      	bne.n	8001a44 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a38:	4b88      	ldr	r3, [pc, #544]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001a3a:	69da      	ldr	r2, [r3, #28]
 8001a3c:	4b87      	ldr	r3, [pc, #540]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001a3e:	4989      	ldr	r1, [pc, #548]	; (8001c64 <HAL_RCC_OscConfig+0x628>)
 8001a40:	400a      	ands	r2, r1
 8001a42:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2210      	movs	r2, #16
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d063      	beq.n	8001b16 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d12a      	bne.n	8001aac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a56:	4b81      	ldr	r3, [pc, #516]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5a:	4b80      	ldr	r3, [pc, #512]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a62:	4b7e      	ldr	r3, [pc, #504]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a66:	4b7d      	ldr	r3, [pc, #500]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001a68:	2101      	movs	r1, #1
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff f89f 	bl	8000bb0 <HAL_GetTick>
 8001a72:	0003      	movs	r3, r0
 8001a74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a78:	f7ff f89a 	bl	8000bb0 <HAL_GetTick>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e0e3      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a8a:	4b74      	ldr	r3, [pc, #464]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8e:	2202      	movs	r2, #2
 8001a90:	4013      	ands	r3, r2
 8001a92:	d0f1      	beq.n	8001a78 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a94:	4b71      	ldr	r3, [pc, #452]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a98:	22f8      	movs	r2, #248	; 0xf8
 8001a9a:	4393      	bics	r3, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	00da      	lsls	r2, r3, #3
 8001aa4:	4b6d      	ldr	r3, [pc, #436]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	635a      	str	r2, [r3, #52]	; 0x34
 8001aaa:	e034      	b.n	8001b16 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	3305      	adds	r3, #5
 8001ab2:	d111      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ab4:	4b69      	ldr	r3, [pc, #420]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab8:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001aba:	2104      	movs	r1, #4
 8001abc:	438a      	bics	r2, r1
 8001abe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ac0:	4b66      	ldr	r3, [pc, #408]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac4:	22f8      	movs	r2, #248	; 0xf8
 8001ac6:	4393      	bics	r3, r2
 8001ac8:	0019      	movs	r1, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	00da      	lsls	r2, r3, #3
 8001ad0:	4b62      	ldr	r3, [pc, #392]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ad6:	e01e      	b.n	8001b16 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ad8:	4b60      	ldr	r3, [pc, #384]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001adc:	4b5f      	ldr	r3, [pc, #380]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001ade:	2104      	movs	r1, #4
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ae4:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae8:	4b5c      	ldr	r3, [pc, #368]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	438a      	bics	r2, r1
 8001aee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af0:	f7ff f85e 	bl	8000bb0 <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001afa:	f7ff f859 	bl	8000bb0 <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e0a2      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b10:	2202      	movs	r2, #2
 8001b12:	4013      	ands	r3, r2
 8001b14:	d1f1      	bne.n	8001afa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d100      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4e4>
 8001b1e:	e097      	b.n	8001c50 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b20:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	220c      	movs	r2, #12
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d100      	bne.n	8001b2e <HAL_RCC_OscConfig+0x4f2>
 8001b2c:	e06b      	b.n	8001c06 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d14c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b36:	4b49      	ldr	r3, [pc, #292]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001b3c:	494a      	ldr	r1, [pc, #296]	; (8001c68 <HAL_RCC_OscConfig+0x62c>)
 8001b3e:	400a      	ands	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff f835 	bl	8000bb0 <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff f830 	bl	8000bb0 <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e079      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	049b      	lsls	r3, r3, #18
 8001b66:	4013      	ands	r3, r2
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b6a:	4b3c      	ldr	r3, [pc, #240]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	220f      	movs	r2, #15
 8001b70:	4393      	bics	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b78:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4a3a      	ldr	r2, [pc, #232]	; (8001c6c <HAL_RCC_OscConfig+0x630>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	0019      	movs	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	431a      	orrs	r2, r3
 8001b92:	4b32      	ldr	r3, [pc, #200]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001b94:	430a      	orrs	r2, r1
 8001b96:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b98:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001b9e:	2180      	movs	r1, #128	; 0x80
 8001ba0:	0449      	lsls	r1, r1, #17
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff f803 	bl	8000bb0 <HAL_GetTick>
 8001baa:	0003      	movs	r3, r0
 8001bac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7fe fffe 	bl	8000bb0 <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e047      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc2:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	049b      	lsls	r3, r3, #18
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x574>
 8001bce:	e03f      	b.n	8001c50 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd0:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001bd6:	4924      	ldr	r1, [pc, #144]	; (8001c68 <HAL_RCC_OscConfig+0x62c>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7fe ffe8 	bl	8000bb0 <HAL_GetTick>
 8001be0:	0003      	movs	r3, r0
 8001be2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be6:	f7fe ffe3 	bl	8000bb0 <HAL_GetTick>
 8001bea:	0002      	movs	r2, r0
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e02c      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	049b      	lsls	r3, r3, #18
 8001c00:	4013      	ands	r3, r2
 8001c02:	d1f0      	bne.n	8001be6 <HAL_RCC_OscConfig+0x5aa>
 8001c04:	e024      	b.n	8001c50 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e01f      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_RCC_OscConfig+0x620>)
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	025b      	lsls	r3, r3, #9
 8001c24:	401a      	ands	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d10e      	bne.n	8001c4c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	220f      	movs	r2, #15
 8001c32:	401a      	ands	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	23f0      	movs	r3, #240	; 0xf0
 8001c40:	039b      	lsls	r3, r3, #14
 8001c42:	401a      	ands	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	0018      	movs	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b008      	add	sp, #32
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	00001388 	.word	0x00001388
 8001c64:	efffffff 	.word	0xefffffff
 8001c68:	feffffff 	.word	0xfeffffff
 8001c6c:	ffc2ffff 	.word	0xffc2ffff

08001c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b3      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c84:	4b5b      	ldr	r3, [pc, #364]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d911      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b58      	ldr	r3, [pc, #352]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4393      	bics	r3, r2
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	4b55      	ldr	r3, [pc, #340]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca4:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4013      	ands	r3, r2
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e09a      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d015      	beq.n	8001cec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d006      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cca:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001cd0:	21e0      	movs	r1, #224	; 0xe0
 8001cd2:	00c9      	lsls	r1, r1, #3
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	22f0      	movs	r2, #240	; 0xf0
 8001cde:	4393      	bics	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d040      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	029b      	lsls	r3, r3, #10
 8001d06:	4013      	ands	r3, r2
 8001d08:	d114      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e06e      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d16:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	049b      	lsls	r3, r3, #18
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d108      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e062      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e05b      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d34:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	4393      	bics	r3, r2
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d44:	430a      	orrs	r2, r1
 8001d46:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d48:	f7fe ff32 	bl	8000bb0 <HAL_GetTick>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d50:	e009      	b.n	8001d66 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d52:	f7fe ff2d 	bl	8000bb0 <HAL_GetTick>
 8001d56:	0002      	movs	r2, r0
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <HAL_RCC_ClockConfig+0x18c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e042      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1ec      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d78:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4013      	ands	r3, r2
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d211      	bcs.n	8001daa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4393      	bics	r3, r2
 8001d8e:	0019      	movs	r1, r3
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e020      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2204      	movs	r2, #4
 8001db0:	4013      	ands	r3, r2
 8001db2:	d009      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <HAL_RCC_ClockConfig+0x190>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dc8:	f000 f820 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8001dcc:	0001      	movs	r1, r0
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_RCC_ClockConfig+0x194>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	000a      	movs	r2, r1
 8001dde:	40da      	lsrs	r2, r3
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_RCC_ClockConfig+0x198>)
 8001de2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7fe fe9d 	bl	8000b24 <HAL_InitTick>
  
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b004      	add	sp, #16
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40022000 	.word	0x40022000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	00001388 	.word	0x00001388
 8001e00:	fffff8ff 	.word	0xfffff8ff
 8001e04:	08003140 	.word	0x08003140
 8001e08:	20000000 	.word	0x20000000

08001e0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b08f      	sub	sp, #60	; 0x3c
 8001e10:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e12:	2314      	movs	r3, #20
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	4a2b      	ldr	r2, [pc, #172]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e1a:	c313      	stmia	r3!, {r0, r1, r4}
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	4a29      	ldr	r2, [pc, #164]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e24:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e26:	c313      	stmia	r3!, {r0, r1, r4}
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e30:	2300      	movs	r3, #0
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e34:	2300      	movs	r3, #0
 8001e36:	637b      	str	r3, [r7, #52]	; 0x34
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e48:	220c      	movs	r2, #12
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d002      	beq.n	8001e56 <HAL_RCC_GetSysClockFreq+0x4a>
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d003      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x50>
 8001e54:	e02d      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e5a:	e02d      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5e:	0c9b      	lsrs	r3, r3, #18
 8001e60:	220f      	movs	r2, #15
 8001e62:	4013      	ands	r3, r2
 8001e64:	2214      	movs	r2, #20
 8001e66:	18ba      	adds	r2, r7, r2
 8001e68:	5cd3      	ldrb	r3, [r2, r3]
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	220f      	movs	r2, #15
 8001e72:	4013      	ands	r3, r2
 8001e74:	1d3a      	adds	r2, r7, #4
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	025b      	lsls	r3, r3, #9
 8001e80:	4013      	ands	r3, r2
 8001e82:	d009      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e86:	4812      	ldr	r0, [pc, #72]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e88:	f7fe f948 	bl	800011c <__udivsi3>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	001a      	movs	r2, r3
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	4353      	muls	r3, r2
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
 8001e96:	e009      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e9a:	000a      	movs	r2, r1
 8001e9c:	0152      	lsls	r2, r2, #5
 8001e9e:	1a52      	subs	r2, r2, r1
 8001ea0:	0193      	lsls	r3, r2, #6
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	185b      	adds	r3, r3, r1
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eb0:	e002      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eb6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b00f      	add	sp, #60	; 0x3c
 8001ec0:	bd90      	pop	{r4, r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	08003120 	.word	0x08003120
 8001ec8:	08003130 	.word	0x08003130
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	007a1200 	.word	0x007a1200

08001ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed8:	4b02      	ldr	r3, [pc, #8]	; (8001ee4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	20000000 	.word	0x20000000

08001ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001eec:	f7ff fff2 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001ef0:	0001      	movs	r1, r0
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	2207      	movs	r2, #7
 8001efa:	4013      	ands	r3, r2
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001efe:	5cd3      	ldrb	r3, [r2, r3]
 8001f00:	40d9      	lsrs	r1, r3
 8001f02:	000b      	movs	r3, r1
}    
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	08003150 	.word	0x08003150

08001f14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e044      	b.n	8001fb0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d107      	bne.n	8001f3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2274      	movs	r2, #116	; 0x74
 8001f32:	2100      	movs	r1, #0
 8001f34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7fe fd15 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2224      	movs	r2, #36	; 0x24
 8001f42:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2101      	movs	r1, #1
 8001f50:	438a      	bics	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	0018      	movs	r0, r3
 8001f58:	f000 f8da 	bl	8002110 <UART_SetConfig>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e024      	b.n	8001fb0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f000 fa0d 	bl	8002390 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	490d      	ldr	r1, [pc, #52]	; (8001fb8 <HAL_UART_Init+0xa4>)
 8001f82:	400a      	ands	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	212a      	movs	r1, #42	; 0x2a
 8001f92:	438a      	bics	r2, r1
 8001f94:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f000 faa5 	bl	80024f8 <UART_CheckIdleState>
 8001fae:	0003      	movs	r3, r0
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	ffffb7ff 	.word	0xffffb7ff

08001fbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	1dbb      	adds	r3, r7, #6
 8001fca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d000      	beq.n	8001fd6 <HAL_UART_Transmit+0x1a>
 8001fd4:	e096      	b.n	8002104 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_UART_Transmit+0x28>
 8001fdc:	1dbb      	adds	r3, r7, #6
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e08e      	b.n	8002106 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	015b      	lsls	r3, r3, #5
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d109      	bne.n	8002008 <HAL_UART_Transmit+0x4c>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2201      	movs	r2, #1
 8002000:	4013      	ands	r3, r2
 8002002:	d001      	beq.n	8002008 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e07e      	b.n	8002106 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2274      	movs	r2, #116	; 0x74
 800200c:	5c9b      	ldrb	r3, [r3, r2]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_UART_Transmit+0x5a>
 8002012:	2302      	movs	r3, #2
 8002014:	e077      	b.n	8002106 <HAL_UART_Transmit+0x14a>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2274      	movs	r2, #116	; 0x74
 800201a:	2101      	movs	r1, #1
 800201c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	2100      	movs	r1, #0
 8002024:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2221      	movs	r2, #33	; 0x21
 800202a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800202c:	f7fe fdc0 	bl	8000bb0 <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1dba      	adds	r2, r7, #6
 8002038:	2150      	movs	r1, #80	; 0x50
 800203a:	8812      	ldrh	r2, [r2, #0]
 800203c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1dba      	adds	r2, r7, #6
 8002042:	2152      	movs	r1, #82	; 0x52
 8002044:	8812      	ldrh	r2, [r2, #0]
 8002046:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	015b      	lsls	r3, r3, #5
 8002050:	429a      	cmp	r2, r3
 8002052:	d108      	bne.n	8002066 <HAL_UART_Transmit+0xaa>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d104      	bne.n	8002066 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	e003      	b.n	800206e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2274      	movs	r2, #116	; 0x74
 8002072:	2100      	movs	r1, #0
 8002074:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002076:	e02d      	b.n	80020d4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	0013      	movs	r3, r2
 8002082:	2200      	movs	r2, #0
 8002084:	2180      	movs	r1, #128	; 0x80
 8002086:	f000 fa7f 	bl	8002588 <UART_WaitOnFlagUntilTimeout>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d001      	beq.n	8002092 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e039      	b.n	8002106 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10b      	bne.n	80020b0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	881a      	ldrh	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	05d2      	lsls	r2, r2, #23
 80020a2:	0dd2      	lsrs	r2, r2, #23
 80020a4:	b292      	uxth	r2, r2
 80020a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	3302      	adds	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	e008      	b.n	80020c2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	781a      	ldrb	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	b292      	uxth	r2, r2
 80020ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	3301      	adds	r3, #1
 80020c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2252      	movs	r2, #82	; 0x52
 80020c6:	5a9b      	ldrh	r3, [r3, r2]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b299      	uxth	r1, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2252      	movs	r2, #82	; 0x52
 80020d2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2252      	movs	r2, #82	; 0x52
 80020d8:	5a9b      	ldrh	r3, [r3, r2]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1cb      	bne.n	8002078 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	0013      	movs	r3, r2
 80020ea:	2200      	movs	r2, #0
 80020ec:	2140      	movs	r1, #64	; 0x40
 80020ee:	f000 fa4b 	bl	8002588 <UART_WaitOnFlagUntilTimeout>
 80020f2:	1e03      	subs	r3, r0, #0
 80020f4:	d001      	beq.n	80020fa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e005      	b.n	8002106 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2220      	movs	r2, #32
 80020fe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002104:	2302      	movs	r3, #2
  }
}
 8002106:	0018      	movs	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	b008      	add	sp, #32
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002118:	231e      	movs	r3, #30
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a8d      	ldr	r2, [pc, #564]	; (8002374 <UART_SetConfig+0x264>)
 8002140:	4013      	ands	r3, r2
 8002142:	0019      	movs	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a88      	ldr	r2, [pc, #544]	; (8002378 <UART_SetConfig+0x268>)
 8002156:	4013      	ands	r3, r2
 8002158:	0019      	movs	r1, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	4313      	orrs	r3, r2
 8002174:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a7f      	ldr	r2, [pc, #508]	; (800237c <UART_SetConfig+0x26c>)
 800217e:	4013      	ands	r3, r2
 8002180:	0019      	movs	r1, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	430a      	orrs	r2, r1
 800218a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a7b      	ldr	r2, [pc, #492]	; (8002380 <UART_SetConfig+0x270>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d127      	bne.n	80021e6 <UART_SetConfig+0xd6>
 8002196:	4b7b      	ldr	r3, [pc, #492]	; (8002384 <UART_SetConfig+0x274>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	2203      	movs	r2, #3
 800219c:	4013      	ands	r3, r2
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d00d      	beq.n	80021be <UART_SetConfig+0xae>
 80021a2:	d81b      	bhi.n	80021dc <UART_SetConfig+0xcc>
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d014      	beq.n	80021d2 <UART_SetConfig+0xc2>
 80021a8:	d818      	bhi.n	80021dc <UART_SetConfig+0xcc>
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <UART_SetConfig+0xa4>
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d00a      	beq.n	80021c8 <UART_SetConfig+0xb8>
 80021b2:	e013      	b.n	80021dc <UART_SetConfig+0xcc>
 80021b4:	231f      	movs	r3, #31
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	e021      	b.n	8002202 <UART_SetConfig+0xf2>
 80021be:	231f      	movs	r3, #31
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	2202      	movs	r2, #2
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	e01c      	b.n	8002202 <UART_SetConfig+0xf2>
 80021c8:	231f      	movs	r3, #31
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	2204      	movs	r2, #4
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e017      	b.n	8002202 <UART_SetConfig+0xf2>
 80021d2:	231f      	movs	r3, #31
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	2208      	movs	r2, #8
 80021d8:	701a      	strb	r2, [r3, #0]
 80021da:	e012      	b.n	8002202 <UART_SetConfig+0xf2>
 80021dc:	231f      	movs	r3, #31
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	2210      	movs	r2, #16
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	e00d      	b.n	8002202 <UART_SetConfig+0xf2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a67      	ldr	r2, [pc, #412]	; (8002388 <UART_SetConfig+0x278>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d104      	bne.n	80021fa <UART_SetConfig+0xea>
 80021f0:	231f      	movs	r3, #31
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	e003      	b.n	8002202 <UART_SetConfig+0xf2>
 80021fa:	231f      	movs	r3, #31
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	2210      	movs	r2, #16
 8002200:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69da      	ldr	r2, [r3, #28]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	429a      	cmp	r2, r3
 800220c:	d15d      	bne.n	80022ca <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800220e:	231f      	movs	r3, #31
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b08      	cmp	r3, #8
 8002216:	d015      	beq.n	8002244 <UART_SetConfig+0x134>
 8002218:	dc18      	bgt.n	800224c <UART_SetConfig+0x13c>
 800221a:	2b04      	cmp	r3, #4
 800221c:	d00d      	beq.n	800223a <UART_SetConfig+0x12a>
 800221e:	dc15      	bgt.n	800224c <UART_SetConfig+0x13c>
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <UART_SetConfig+0x11a>
 8002224:	2b02      	cmp	r3, #2
 8002226:	d005      	beq.n	8002234 <UART_SetConfig+0x124>
 8002228:	e010      	b.n	800224c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800222a:	f7ff fe5d 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 800222e:	0003      	movs	r3, r0
 8002230:	61bb      	str	r3, [r7, #24]
        break;
 8002232:	e012      	b.n	800225a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002234:	4b55      	ldr	r3, [pc, #340]	; (800238c <UART_SetConfig+0x27c>)
 8002236:	61bb      	str	r3, [r7, #24]
        break;
 8002238:	e00f      	b.n	800225a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800223a:	f7ff fde7 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 800223e:	0003      	movs	r3, r0
 8002240:	61bb      	str	r3, [r7, #24]
        break;
 8002242:	e00a      	b.n	800225a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	61bb      	str	r3, [r7, #24]
        break;
 800224a:	e006      	b.n	800225a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002250:	231e      	movs	r3, #30
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
        break;
 8002258:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d100      	bne.n	8002262 <UART_SetConfig+0x152>
 8002260:	e07b      	b.n	800235a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	005a      	lsls	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	085b      	lsrs	r3, r3, #1
 800226c:	18d2      	adds	r2, r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	0019      	movs	r1, r3
 8002274:	0010      	movs	r0, r2
 8002276:	f7fd ff51 	bl	800011c <__udivsi3>
 800227a:	0003      	movs	r3, r0
 800227c:	b29b      	uxth	r3, r3
 800227e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	d91c      	bls.n	80022c0 <UART_SetConfig+0x1b0>
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	025b      	lsls	r3, r3, #9
 800228c:	429a      	cmp	r2, r3
 800228e:	d217      	bcs.n	80022c0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	b29a      	uxth	r2, r3
 8002294:	200e      	movs	r0, #14
 8002296:	183b      	adds	r3, r7, r0
 8002298:	210f      	movs	r1, #15
 800229a:	438a      	bics	r2, r1
 800229c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	085b      	lsrs	r3, r3, #1
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2207      	movs	r2, #7
 80022a6:	4013      	ands	r3, r2
 80022a8:	b299      	uxth	r1, r3
 80022aa:	183b      	adds	r3, r7, r0
 80022ac:	183a      	adds	r2, r7, r0
 80022ae:	8812      	ldrh	r2, [r2, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	183a      	adds	r2, r7, r0
 80022ba:	8812      	ldrh	r2, [r2, #0]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	e04c      	b.n	800235a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80022c0:	231e      	movs	r3, #30
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	e047      	b.n	800235a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80022ca:	231f      	movs	r3, #31
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d015      	beq.n	8002300 <UART_SetConfig+0x1f0>
 80022d4:	dc18      	bgt.n	8002308 <UART_SetConfig+0x1f8>
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d00d      	beq.n	80022f6 <UART_SetConfig+0x1e6>
 80022da:	dc15      	bgt.n	8002308 <UART_SetConfig+0x1f8>
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <UART_SetConfig+0x1d6>
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d005      	beq.n	80022f0 <UART_SetConfig+0x1e0>
 80022e4:	e010      	b.n	8002308 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022e6:	f7ff fdff 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 80022ea:	0003      	movs	r3, r0
 80022ec:	61bb      	str	r3, [r7, #24]
        break;
 80022ee:	e012      	b.n	8002316 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022f0:	4b26      	ldr	r3, [pc, #152]	; (800238c <UART_SetConfig+0x27c>)
 80022f2:	61bb      	str	r3, [r7, #24]
        break;
 80022f4:	e00f      	b.n	8002316 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022f6:	f7ff fd89 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 80022fa:	0003      	movs	r3, r0
 80022fc:	61bb      	str	r3, [r7, #24]
        break;
 80022fe:	e00a      	b.n	8002316 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	61bb      	str	r3, [r7, #24]
        break;
 8002306:	e006      	b.n	8002316 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800230c:	231e      	movs	r3, #30
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
        break;
 8002314:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01e      	beq.n	800235a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	085a      	lsrs	r2, r3, #1
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	18d2      	adds	r2, r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	0019      	movs	r1, r3
 800232c:	0010      	movs	r0, r2
 800232e:	f7fd fef5 	bl	800011c <__udivsi3>
 8002332:	0003      	movs	r3, r0
 8002334:	b29b      	uxth	r3, r3
 8002336:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b0f      	cmp	r3, #15
 800233c:	d909      	bls.n	8002352 <UART_SetConfig+0x242>
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	025b      	lsls	r3, r3, #9
 8002344:	429a      	cmp	r2, r3
 8002346:	d204      	bcs.n	8002352 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	60da      	str	r2, [r3, #12]
 8002350:	e003      	b.n	800235a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002352:	231e      	movs	r3, #30
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002366:	231e      	movs	r3, #30
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	781b      	ldrb	r3, [r3, #0]
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b008      	add	sp, #32
 8002372:	bd80      	pop	{r7, pc}
 8002374:	ffff69f3 	.word	0xffff69f3
 8002378:	ffffcfff 	.word	0xffffcfff
 800237c:	fffff4ff 	.word	0xfffff4ff
 8002380:	40013800 	.word	0x40013800
 8002384:	40021000 	.word	0x40021000
 8002388:	40004400 	.word	0x40004400
 800238c:	007a1200 	.word	0x007a1200

08002390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	2201      	movs	r2, #1
 800239e:	4013      	ands	r3, r2
 80023a0:	d00b      	beq.n	80023ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4a4a      	ldr	r2, [pc, #296]	; (80024d4 <UART_AdvFeatureConfig+0x144>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	0019      	movs	r1, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	2202      	movs	r2, #2
 80023c0:	4013      	ands	r3, r2
 80023c2:	d00b      	beq.n	80023dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4a43      	ldr	r2, [pc, #268]	; (80024d8 <UART_AdvFeatureConfig+0x148>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	0019      	movs	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	2204      	movs	r2, #4
 80023e2:	4013      	ands	r3, r2
 80023e4:	d00b      	beq.n	80023fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a3b      	ldr	r2, [pc, #236]	; (80024dc <UART_AdvFeatureConfig+0x14c>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	2208      	movs	r2, #8
 8002404:	4013      	ands	r3, r2
 8002406:	d00b      	beq.n	8002420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4a34      	ldr	r2, [pc, #208]	; (80024e0 <UART_AdvFeatureConfig+0x150>)
 8002410:	4013      	ands	r3, r2
 8002412:	0019      	movs	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	2210      	movs	r2, #16
 8002426:	4013      	ands	r3, r2
 8002428:	d00b      	beq.n	8002442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a2c      	ldr	r2, [pc, #176]	; (80024e4 <UART_AdvFeatureConfig+0x154>)
 8002432:	4013      	ands	r3, r2
 8002434:	0019      	movs	r1, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	2220      	movs	r2, #32
 8002448:	4013      	ands	r3, r2
 800244a:	d00b      	beq.n	8002464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	4a25      	ldr	r2, [pc, #148]	; (80024e8 <UART_AdvFeatureConfig+0x158>)
 8002454:	4013      	ands	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	4013      	ands	r3, r2
 800246c:	d01d      	beq.n	80024aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <UART_AdvFeatureConfig+0x15c>)
 8002476:	4013      	ands	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	035b      	lsls	r3, r3, #13
 800248e:	429a      	cmp	r2, r3
 8002490:	d10b      	bne.n	80024aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	4a15      	ldr	r2, [pc, #84]	; (80024f0 <UART_AdvFeatureConfig+0x160>)
 800249a:	4013      	ands	r3, r2
 800249c:	0019      	movs	r1, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	4013      	ands	r3, r2
 80024b2:	d00b      	beq.n	80024cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <UART_AdvFeatureConfig+0x164>)
 80024bc:	4013      	ands	r3, r2
 80024be:	0019      	movs	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	605a      	str	r2, [r3, #4]
  }
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	fffdffff 	.word	0xfffdffff
 80024d8:	fffeffff 	.word	0xfffeffff
 80024dc:	fffbffff 	.word	0xfffbffff
 80024e0:	ffff7fff 	.word	0xffff7fff
 80024e4:	ffffefff 	.word	0xffffefff
 80024e8:	ffffdfff 	.word	0xffffdfff
 80024ec:	ffefffff 	.word	0xffefffff
 80024f0:	ff9fffff 	.word	0xff9fffff
 80024f4:	fff7ffff 	.word	0xfff7ffff

080024f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2280      	movs	r2, #128	; 0x80
 8002504:	2100      	movs	r1, #0
 8002506:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002508:	f7fe fb52 	bl	8000bb0 <HAL_GetTick>
 800250c:	0003      	movs	r3, r0
 800250e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2208      	movs	r2, #8
 8002518:	4013      	ands	r3, r2
 800251a:	2b08      	cmp	r3, #8
 800251c:	d10c      	bne.n	8002538 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	0391      	lsls	r1, r2, #14
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <UART_CheckIdleState+0x8c>)
 8002528:	9200      	str	r2, [sp, #0]
 800252a:	2200      	movs	r2, #0
 800252c:	f000 f82c 	bl	8002588 <UART_WaitOnFlagUntilTimeout>
 8002530:	1e03      	subs	r3, r0, #0
 8002532:	d001      	beq.n	8002538 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e021      	b.n	800257c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2204      	movs	r2, #4
 8002540:	4013      	ands	r3, r2
 8002542:	2b04      	cmp	r3, #4
 8002544:	d10c      	bne.n	8002560 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2280      	movs	r2, #128	; 0x80
 800254a:	03d1      	lsls	r1, r2, #15
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <UART_CheckIdleState+0x8c>)
 8002550:	9200      	str	r2, [sp, #0]
 8002552:	2200      	movs	r2, #0
 8002554:	f000 f818 	bl	8002588 <UART_WaitOnFlagUntilTimeout>
 8002558:	1e03      	subs	r3, r0, #0
 800255a:	d001      	beq.n	8002560 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e00d      	b.n	800257c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2220      	movs	r2, #32
 800256a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2274      	movs	r2, #116	; 0x74
 8002576:	2100      	movs	r1, #0
 8002578:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b004      	add	sp, #16
 8002582:	bd80      	pop	{r7, pc}
 8002584:	01ffffff 	.word	0x01ffffff

08002588 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b094      	sub	sp, #80	; 0x50
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	1dfb      	adds	r3, r7, #7
 8002596:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002598:	e0a3      	b.n	80026e2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800259a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800259c:	3301      	adds	r3, #1
 800259e:	d100      	bne.n	80025a2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80025a0:	e09f      	b.n	80026e2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a2:	f7fe fb05 	bl	8000bb0 <HAL_GetTick>
 80025a6:	0002      	movs	r2, r0
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d302      	bcc.n	80025b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80025b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d13d      	bne.n	8002634 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b8:	f3ef 8310 	mrs	r3, PRIMASK
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025c0:	647b      	str	r3, [r7, #68]	; 0x44
 80025c2:	2301      	movs	r3, #1
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c8:	f383 8810 	msr	PRIMASK, r3
}
 80025cc:	46c0      	nop			; (mov r8, r8)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	494c      	ldr	r1, [pc, #304]	; (800270c <UART_WaitOnFlagUntilTimeout+0x184>)
 80025da:	400a      	ands	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e4:	f383 8810 	msr	PRIMASK, r3
}
 80025e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ea:	f3ef 8310 	mrs	r3, PRIMASK
 80025ee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f2:	643b      	str	r3, [r7, #64]	; 0x40
 80025f4:	2301      	movs	r3, #1
 80025f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fa:	f383 8810 	msr	PRIMASK, r3
}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2101      	movs	r1, #1
 800260c:	438a      	bics	r2, r1
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002612:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002616:	f383 8810 	msr	PRIMASK, r3
}
 800261a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2220      	movs	r2, #32
 8002626:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2274      	movs	r2, #116	; 0x74
 800262c:	2100      	movs	r1, #0
 800262e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e067      	b.n	8002704 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2204      	movs	r2, #4
 800263c:	4013      	ands	r3, r2
 800263e:	d050      	beq.n	80026e2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	401a      	ands	r2, r3
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	429a      	cmp	r2, r3
 8002652:	d146      	bne.n	80026e2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800265e:	f3ef 8310 	mrs	r3, PRIMASK
 8002662:	613b      	str	r3, [r7, #16]
  return(result);
 8002664:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002668:	2301      	movs	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f383 8810 	msr	PRIMASK, r3
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4923      	ldr	r1, [pc, #140]	; (800270c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002680:	400a      	ands	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002686:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f383 8810 	msr	PRIMASK, r3
}
 800268e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002690:	f3ef 8310 	mrs	r3, PRIMASK
 8002694:	61fb      	str	r3, [r7, #28]
  return(result);
 8002696:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002698:	64bb      	str	r3, [r7, #72]	; 0x48
 800269a:	2301      	movs	r3, #1
 800269c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	f383 8810 	msr	PRIMASK, r3
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	438a      	bics	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	f383 8810 	msr	PRIMASK, r3
}
 80026c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2220      	movs	r2, #32
 80026c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2280      	movs	r2, #128	; 0x80
 80026d2:	2120      	movs	r1, #32
 80026d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2274      	movs	r2, #116	; 0x74
 80026da:	2100      	movs	r1, #0
 80026dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e010      	b.n	8002704 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	4013      	ands	r3, r2
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	425a      	negs	r2, r3
 80026f2:	4153      	adcs	r3, r2
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	001a      	movs	r2, r3
 80026f8:	1dfb      	adds	r3, r7, #7
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d100      	bne.n	8002702 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002700:	e74b      	b.n	800259a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	0018      	movs	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	b014      	add	sp, #80	; 0x50
 800270a:	bd80      	pop	{r7, pc}
 800270c:	fffffe5f 	.word	0xfffffe5f

08002710 <__errno>:
 8002710:	4b01      	ldr	r3, [pc, #4]	; (8002718 <__errno+0x8>)
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	4770      	bx	lr
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	2000000c 	.word	0x2000000c

0800271c <__libc_init_array>:
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	2600      	movs	r6, #0
 8002720:	4d0c      	ldr	r5, [pc, #48]	; (8002754 <__libc_init_array+0x38>)
 8002722:	4c0d      	ldr	r4, [pc, #52]	; (8002758 <__libc_init_array+0x3c>)
 8002724:	1b64      	subs	r4, r4, r5
 8002726:	10a4      	asrs	r4, r4, #2
 8002728:	42a6      	cmp	r6, r4
 800272a:	d109      	bne.n	8002740 <__libc_init_array+0x24>
 800272c:	2600      	movs	r6, #0
 800272e:	f000 fc8b 	bl	8003048 <_init>
 8002732:	4d0a      	ldr	r5, [pc, #40]	; (800275c <__libc_init_array+0x40>)
 8002734:	4c0a      	ldr	r4, [pc, #40]	; (8002760 <__libc_init_array+0x44>)
 8002736:	1b64      	subs	r4, r4, r5
 8002738:	10a4      	asrs	r4, r4, #2
 800273a:	42a6      	cmp	r6, r4
 800273c:	d105      	bne.n	800274a <__libc_init_array+0x2e>
 800273e:	bd70      	pop	{r4, r5, r6, pc}
 8002740:	00b3      	lsls	r3, r6, #2
 8002742:	58eb      	ldr	r3, [r5, r3]
 8002744:	4798      	blx	r3
 8002746:	3601      	adds	r6, #1
 8002748:	e7ee      	b.n	8002728 <__libc_init_array+0xc>
 800274a:	00b3      	lsls	r3, r6, #2
 800274c:	58eb      	ldr	r3, [r5, r3]
 800274e:	4798      	blx	r3
 8002750:	3601      	adds	r6, #1
 8002752:	e7f2      	b.n	800273a <__libc_init_array+0x1e>
 8002754:	0800318c 	.word	0x0800318c
 8002758:	0800318c 	.word	0x0800318c
 800275c:	0800318c 	.word	0x0800318c
 8002760:	08003190 	.word	0x08003190

08002764 <memset>:
 8002764:	0003      	movs	r3, r0
 8002766:	1882      	adds	r2, r0, r2
 8002768:	4293      	cmp	r3, r2
 800276a:	d100      	bne.n	800276e <memset+0xa>
 800276c:	4770      	bx	lr
 800276e:	7019      	strb	r1, [r3, #0]
 8002770:	3301      	adds	r3, #1
 8002772:	e7f9      	b.n	8002768 <memset+0x4>

08002774 <siprintf>:
 8002774:	b40e      	push	{r1, r2, r3}
 8002776:	b500      	push	{lr}
 8002778:	490b      	ldr	r1, [pc, #44]	; (80027a8 <siprintf+0x34>)
 800277a:	b09c      	sub	sp, #112	; 0x70
 800277c:	ab1d      	add	r3, sp, #116	; 0x74
 800277e:	9002      	str	r0, [sp, #8]
 8002780:	9006      	str	r0, [sp, #24]
 8002782:	9107      	str	r1, [sp, #28]
 8002784:	9104      	str	r1, [sp, #16]
 8002786:	4809      	ldr	r0, [pc, #36]	; (80027ac <siprintf+0x38>)
 8002788:	4909      	ldr	r1, [pc, #36]	; (80027b0 <siprintf+0x3c>)
 800278a:	cb04      	ldmia	r3!, {r2}
 800278c:	9105      	str	r1, [sp, #20]
 800278e:	6800      	ldr	r0, [r0, #0]
 8002790:	a902      	add	r1, sp, #8
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	f000 f870 	bl	8002878 <_svfiprintf_r>
 8002798:	2300      	movs	r3, #0
 800279a:	9a02      	ldr	r2, [sp, #8]
 800279c:	7013      	strb	r3, [r2, #0]
 800279e:	b01c      	add	sp, #112	; 0x70
 80027a0:	bc08      	pop	{r3}
 80027a2:	b003      	add	sp, #12
 80027a4:	4718      	bx	r3
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	7fffffff 	.word	0x7fffffff
 80027ac:	2000000c 	.word	0x2000000c
 80027b0:	ffff0208 	.word	0xffff0208

080027b4 <__ssputs_r>:
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b6:	688e      	ldr	r6, [r1, #8]
 80027b8:	b085      	sub	sp, #20
 80027ba:	0007      	movs	r7, r0
 80027bc:	000c      	movs	r4, r1
 80027be:	9203      	str	r2, [sp, #12]
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	429e      	cmp	r6, r3
 80027c4:	d83c      	bhi.n	8002840 <__ssputs_r+0x8c>
 80027c6:	2390      	movs	r3, #144	; 0x90
 80027c8:	898a      	ldrh	r2, [r1, #12]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	421a      	tst	r2, r3
 80027ce:	d034      	beq.n	800283a <__ssputs_r+0x86>
 80027d0:	6909      	ldr	r1, [r1, #16]
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	6960      	ldr	r0, [r4, #20]
 80027d6:	1a5b      	subs	r3, r3, r1
 80027d8:	9302      	str	r3, [sp, #8]
 80027da:	2303      	movs	r3, #3
 80027dc:	4343      	muls	r3, r0
 80027de:	0fdd      	lsrs	r5, r3, #31
 80027e0:	18ed      	adds	r5, r5, r3
 80027e2:	9b01      	ldr	r3, [sp, #4]
 80027e4:	9802      	ldr	r0, [sp, #8]
 80027e6:	3301      	adds	r3, #1
 80027e8:	181b      	adds	r3, r3, r0
 80027ea:	106d      	asrs	r5, r5, #1
 80027ec:	42ab      	cmp	r3, r5
 80027ee:	d900      	bls.n	80027f2 <__ssputs_r+0x3e>
 80027f0:	001d      	movs	r5, r3
 80027f2:	0553      	lsls	r3, r2, #21
 80027f4:	d532      	bpl.n	800285c <__ssputs_r+0xa8>
 80027f6:	0029      	movs	r1, r5
 80027f8:	0038      	movs	r0, r7
 80027fa:	f000 fb53 	bl	8002ea4 <_malloc_r>
 80027fe:	1e06      	subs	r6, r0, #0
 8002800:	d109      	bne.n	8002816 <__ssputs_r+0x62>
 8002802:	230c      	movs	r3, #12
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	2340      	movs	r3, #64	; 0x40
 8002808:	2001      	movs	r0, #1
 800280a:	89a2      	ldrh	r2, [r4, #12]
 800280c:	4240      	negs	r0, r0
 800280e:	4313      	orrs	r3, r2
 8002810:	81a3      	strh	r3, [r4, #12]
 8002812:	b005      	add	sp, #20
 8002814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002816:	9a02      	ldr	r2, [sp, #8]
 8002818:	6921      	ldr	r1, [r4, #16]
 800281a:	f000 faba 	bl	8002d92 <memcpy>
 800281e:	89a3      	ldrh	r3, [r4, #12]
 8002820:	4a14      	ldr	r2, [pc, #80]	; (8002874 <__ssputs_r+0xc0>)
 8002822:	401a      	ands	r2, r3
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	4313      	orrs	r3, r2
 8002828:	81a3      	strh	r3, [r4, #12]
 800282a:	9b02      	ldr	r3, [sp, #8]
 800282c:	6126      	str	r6, [r4, #16]
 800282e:	18f6      	adds	r6, r6, r3
 8002830:	6026      	str	r6, [r4, #0]
 8002832:	6165      	str	r5, [r4, #20]
 8002834:	9e01      	ldr	r6, [sp, #4]
 8002836:	1aed      	subs	r5, r5, r3
 8002838:	60a5      	str	r5, [r4, #8]
 800283a:	9b01      	ldr	r3, [sp, #4]
 800283c:	429e      	cmp	r6, r3
 800283e:	d900      	bls.n	8002842 <__ssputs_r+0x8e>
 8002840:	9e01      	ldr	r6, [sp, #4]
 8002842:	0032      	movs	r2, r6
 8002844:	9903      	ldr	r1, [sp, #12]
 8002846:	6820      	ldr	r0, [r4, #0]
 8002848:	f000 faac 	bl	8002da4 <memmove>
 800284c:	68a3      	ldr	r3, [r4, #8]
 800284e:	2000      	movs	r0, #0
 8002850:	1b9b      	subs	r3, r3, r6
 8002852:	60a3      	str	r3, [r4, #8]
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	199e      	adds	r6, r3, r6
 8002858:	6026      	str	r6, [r4, #0]
 800285a:	e7da      	b.n	8002812 <__ssputs_r+0x5e>
 800285c:	002a      	movs	r2, r5
 800285e:	0038      	movs	r0, r7
 8002860:	f000 fb96 	bl	8002f90 <_realloc_r>
 8002864:	1e06      	subs	r6, r0, #0
 8002866:	d1e0      	bne.n	800282a <__ssputs_r+0x76>
 8002868:	0038      	movs	r0, r7
 800286a:	6921      	ldr	r1, [r4, #16]
 800286c:	f000 faae 	bl	8002dcc <_free_r>
 8002870:	e7c7      	b.n	8002802 <__ssputs_r+0x4e>
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	fffffb7f 	.word	0xfffffb7f

08002878 <_svfiprintf_r>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	b0a1      	sub	sp, #132	; 0x84
 800287c:	9003      	str	r0, [sp, #12]
 800287e:	001d      	movs	r5, r3
 8002880:	898b      	ldrh	r3, [r1, #12]
 8002882:	000f      	movs	r7, r1
 8002884:	0016      	movs	r6, r2
 8002886:	061b      	lsls	r3, r3, #24
 8002888:	d511      	bpl.n	80028ae <_svfiprintf_r+0x36>
 800288a:	690b      	ldr	r3, [r1, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10e      	bne.n	80028ae <_svfiprintf_r+0x36>
 8002890:	2140      	movs	r1, #64	; 0x40
 8002892:	f000 fb07 	bl	8002ea4 <_malloc_r>
 8002896:	6038      	str	r0, [r7, #0]
 8002898:	6138      	str	r0, [r7, #16]
 800289a:	2800      	cmp	r0, #0
 800289c:	d105      	bne.n	80028aa <_svfiprintf_r+0x32>
 800289e:	230c      	movs	r3, #12
 80028a0:	9a03      	ldr	r2, [sp, #12]
 80028a2:	3801      	subs	r0, #1
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	b021      	add	sp, #132	; 0x84
 80028a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028aa:	2340      	movs	r3, #64	; 0x40
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	2300      	movs	r3, #0
 80028b0:	ac08      	add	r4, sp, #32
 80028b2:	6163      	str	r3, [r4, #20]
 80028b4:	3320      	adds	r3, #32
 80028b6:	7663      	strb	r3, [r4, #25]
 80028b8:	3310      	adds	r3, #16
 80028ba:	76a3      	strb	r3, [r4, #26]
 80028bc:	9507      	str	r5, [sp, #28]
 80028be:	0035      	movs	r5, r6
 80028c0:	782b      	ldrb	r3, [r5, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <_svfiprintf_r+0x52>
 80028c6:	2b25      	cmp	r3, #37	; 0x25
 80028c8:	d147      	bne.n	800295a <_svfiprintf_r+0xe2>
 80028ca:	1bab      	subs	r3, r5, r6
 80028cc:	9305      	str	r3, [sp, #20]
 80028ce:	42b5      	cmp	r5, r6
 80028d0:	d00c      	beq.n	80028ec <_svfiprintf_r+0x74>
 80028d2:	0032      	movs	r2, r6
 80028d4:	0039      	movs	r1, r7
 80028d6:	9803      	ldr	r0, [sp, #12]
 80028d8:	f7ff ff6c 	bl	80027b4 <__ssputs_r>
 80028dc:	1c43      	adds	r3, r0, #1
 80028de:	d100      	bne.n	80028e2 <_svfiprintf_r+0x6a>
 80028e0:	e0ae      	b.n	8002a40 <_svfiprintf_r+0x1c8>
 80028e2:	6962      	ldr	r2, [r4, #20]
 80028e4:	9b05      	ldr	r3, [sp, #20]
 80028e6:	4694      	mov	ip, r2
 80028e8:	4463      	add	r3, ip
 80028ea:	6163      	str	r3, [r4, #20]
 80028ec:	782b      	ldrb	r3, [r5, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d100      	bne.n	80028f4 <_svfiprintf_r+0x7c>
 80028f2:	e0a5      	b.n	8002a40 <_svfiprintf_r+0x1c8>
 80028f4:	2201      	movs	r2, #1
 80028f6:	2300      	movs	r3, #0
 80028f8:	4252      	negs	r2, r2
 80028fa:	6062      	str	r2, [r4, #4]
 80028fc:	a904      	add	r1, sp, #16
 80028fe:	3254      	adds	r2, #84	; 0x54
 8002900:	1852      	adds	r2, r2, r1
 8002902:	1c6e      	adds	r6, r5, #1
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	60e3      	str	r3, [r4, #12]
 8002908:	60a3      	str	r3, [r4, #8]
 800290a:	7013      	strb	r3, [r2, #0]
 800290c:	65a3      	str	r3, [r4, #88]	; 0x58
 800290e:	2205      	movs	r2, #5
 8002910:	7831      	ldrb	r1, [r6, #0]
 8002912:	4854      	ldr	r0, [pc, #336]	; (8002a64 <_svfiprintf_r+0x1ec>)
 8002914:	f000 fa32 	bl	8002d7c <memchr>
 8002918:	1c75      	adds	r5, r6, #1
 800291a:	2800      	cmp	r0, #0
 800291c:	d11f      	bne.n	800295e <_svfiprintf_r+0xe6>
 800291e:	6822      	ldr	r2, [r4, #0]
 8002920:	06d3      	lsls	r3, r2, #27
 8002922:	d504      	bpl.n	800292e <_svfiprintf_r+0xb6>
 8002924:	2353      	movs	r3, #83	; 0x53
 8002926:	a904      	add	r1, sp, #16
 8002928:	185b      	adds	r3, r3, r1
 800292a:	2120      	movs	r1, #32
 800292c:	7019      	strb	r1, [r3, #0]
 800292e:	0713      	lsls	r3, r2, #28
 8002930:	d504      	bpl.n	800293c <_svfiprintf_r+0xc4>
 8002932:	2353      	movs	r3, #83	; 0x53
 8002934:	a904      	add	r1, sp, #16
 8002936:	185b      	adds	r3, r3, r1
 8002938:	212b      	movs	r1, #43	; 0x2b
 800293a:	7019      	strb	r1, [r3, #0]
 800293c:	7833      	ldrb	r3, [r6, #0]
 800293e:	2b2a      	cmp	r3, #42	; 0x2a
 8002940:	d016      	beq.n	8002970 <_svfiprintf_r+0xf8>
 8002942:	0035      	movs	r5, r6
 8002944:	2100      	movs	r1, #0
 8002946:	200a      	movs	r0, #10
 8002948:	68e3      	ldr	r3, [r4, #12]
 800294a:	782a      	ldrb	r2, [r5, #0]
 800294c:	1c6e      	adds	r6, r5, #1
 800294e:	3a30      	subs	r2, #48	; 0x30
 8002950:	2a09      	cmp	r2, #9
 8002952:	d94e      	bls.n	80029f2 <_svfiprintf_r+0x17a>
 8002954:	2900      	cmp	r1, #0
 8002956:	d111      	bne.n	800297c <_svfiprintf_r+0x104>
 8002958:	e017      	b.n	800298a <_svfiprintf_r+0x112>
 800295a:	3501      	adds	r5, #1
 800295c:	e7b0      	b.n	80028c0 <_svfiprintf_r+0x48>
 800295e:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <_svfiprintf_r+0x1ec>)
 8002960:	6822      	ldr	r2, [r4, #0]
 8002962:	1ac0      	subs	r0, r0, r3
 8002964:	2301      	movs	r3, #1
 8002966:	4083      	lsls	r3, r0
 8002968:	4313      	orrs	r3, r2
 800296a:	002e      	movs	r6, r5
 800296c:	6023      	str	r3, [r4, #0]
 800296e:	e7ce      	b.n	800290e <_svfiprintf_r+0x96>
 8002970:	9b07      	ldr	r3, [sp, #28]
 8002972:	1d19      	adds	r1, r3, #4
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	9107      	str	r1, [sp, #28]
 8002978:	2b00      	cmp	r3, #0
 800297a:	db01      	blt.n	8002980 <_svfiprintf_r+0x108>
 800297c:	930b      	str	r3, [sp, #44]	; 0x2c
 800297e:	e004      	b.n	800298a <_svfiprintf_r+0x112>
 8002980:	425b      	negs	r3, r3
 8002982:	60e3      	str	r3, [r4, #12]
 8002984:	2302      	movs	r3, #2
 8002986:	4313      	orrs	r3, r2
 8002988:	6023      	str	r3, [r4, #0]
 800298a:	782b      	ldrb	r3, [r5, #0]
 800298c:	2b2e      	cmp	r3, #46	; 0x2e
 800298e:	d10a      	bne.n	80029a6 <_svfiprintf_r+0x12e>
 8002990:	786b      	ldrb	r3, [r5, #1]
 8002992:	2b2a      	cmp	r3, #42	; 0x2a
 8002994:	d135      	bne.n	8002a02 <_svfiprintf_r+0x18a>
 8002996:	9b07      	ldr	r3, [sp, #28]
 8002998:	3502      	adds	r5, #2
 800299a:	1d1a      	adds	r2, r3, #4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	9207      	str	r2, [sp, #28]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	db2b      	blt.n	80029fc <_svfiprintf_r+0x184>
 80029a4:	9309      	str	r3, [sp, #36]	; 0x24
 80029a6:	4e30      	ldr	r6, [pc, #192]	; (8002a68 <_svfiprintf_r+0x1f0>)
 80029a8:	2203      	movs	r2, #3
 80029aa:	0030      	movs	r0, r6
 80029ac:	7829      	ldrb	r1, [r5, #0]
 80029ae:	f000 f9e5 	bl	8002d7c <memchr>
 80029b2:	2800      	cmp	r0, #0
 80029b4:	d006      	beq.n	80029c4 <_svfiprintf_r+0x14c>
 80029b6:	2340      	movs	r3, #64	; 0x40
 80029b8:	1b80      	subs	r0, r0, r6
 80029ba:	4083      	lsls	r3, r0
 80029bc:	6822      	ldr	r2, [r4, #0]
 80029be:	3501      	adds	r5, #1
 80029c0:	4313      	orrs	r3, r2
 80029c2:	6023      	str	r3, [r4, #0]
 80029c4:	7829      	ldrb	r1, [r5, #0]
 80029c6:	2206      	movs	r2, #6
 80029c8:	4828      	ldr	r0, [pc, #160]	; (8002a6c <_svfiprintf_r+0x1f4>)
 80029ca:	1c6e      	adds	r6, r5, #1
 80029cc:	7621      	strb	r1, [r4, #24]
 80029ce:	f000 f9d5 	bl	8002d7c <memchr>
 80029d2:	2800      	cmp	r0, #0
 80029d4:	d03c      	beq.n	8002a50 <_svfiprintf_r+0x1d8>
 80029d6:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <_svfiprintf_r+0x1f8>)
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d125      	bne.n	8002a28 <_svfiprintf_r+0x1b0>
 80029dc:	2207      	movs	r2, #7
 80029de:	9b07      	ldr	r3, [sp, #28]
 80029e0:	3307      	adds	r3, #7
 80029e2:	4393      	bics	r3, r2
 80029e4:	3308      	adds	r3, #8
 80029e6:	9307      	str	r3, [sp, #28]
 80029e8:	6963      	ldr	r3, [r4, #20]
 80029ea:	9a04      	ldr	r2, [sp, #16]
 80029ec:	189b      	adds	r3, r3, r2
 80029ee:	6163      	str	r3, [r4, #20]
 80029f0:	e765      	b.n	80028be <_svfiprintf_r+0x46>
 80029f2:	4343      	muls	r3, r0
 80029f4:	0035      	movs	r5, r6
 80029f6:	2101      	movs	r1, #1
 80029f8:	189b      	adds	r3, r3, r2
 80029fa:	e7a6      	b.n	800294a <_svfiprintf_r+0xd2>
 80029fc:	2301      	movs	r3, #1
 80029fe:	425b      	negs	r3, r3
 8002a00:	e7d0      	b.n	80029a4 <_svfiprintf_r+0x12c>
 8002a02:	2300      	movs	r3, #0
 8002a04:	200a      	movs	r0, #10
 8002a06:	001a      	movs	r2, r3
 8002a08:	3501      	adds	r5, #1
 8002a0a:	6063      	str	r3, [r4, #4]
 8002a0c:	7829      	ldrb	r1, [r5, #0]
 8002a0e:	1c6e      	adds	r6, r5, #1
 8002a10:	3930      	subs	r1, #48	; 0x30
 8002a12:	2909      	cmp	r1, #9
 8002a14:	d903      	bls.n	8002a1e <_svfiprintf_r+0x1a6>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0c5      	beq.n	80029a6 <_svfiprintf_r+0x12e>
 8002a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8002a1c:	e7c3      	b.n	80029a6 <_svfiprintf_r+0x12e>
 8002a1e:	4342      	muls	r2, r0
 8002a20:	0035      	movs	r5, r6
 8002a22:	2301      	movs	r3, #1
 8002a24:	1852      	adds	r2, r2, r1
 8002a26:	e7f1      	b.n	8002a0c <_svfiprintf_r+0x194>
 8002a28:	ab07      	add	r3, sp, #28
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	003a      	movs	r2, r7
 8002a2e:	0021      	movs	r1, r4
 8002a30:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <_svfiprintf_r+0x1fc>)
 8002a32:	9803      	ldr	r0, [sp, #12]
 8002a34:	e000      	b.n	8002a38 <_svfiprintf_r+0x1c0>
 8002a36:	bf00      	nop
 8002a38:	9004      	str	r0, [sp, #16]
 8002a3a:	9b04      	ldr	r3, [sp, #16]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	d1d3      	bne.n	80029e8 <_svfiprintf_r+0x170>
 8002a40:	89bb      	ldrh	r3, [r7, #12]
 8002a42:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002a44:	065b      	lsls	r3, r3, #25
 8002a46:	d400      	bmi.n	8002a4a <_svfiprintf_r+0x1d2>
 8002a48:	e72d      	b.n	80028a6 <_svfiprintf_r+0x2e>
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	4240      	negs	r0, r0
 8002a4e:	e72a      	b.n	80028a6 <_svfiprintf_r+0x2e>
 8002a50:	ab07      	add	r3, sp, #28
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	003a      	movs	r2, r7
 8002a56:	0021      	movs	r1, r4
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <_svfiprintf_r+0x1fc>)
 8002a5a:	9803      	ldr	r0, [sp, #12]
 8002a5c:	f000 f87c 	bl	8002b58 <_printf_i>
 8002a60:	e7ea      	b.n	8002a38 <_svfiprintf_r+0x1c0>
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	08003158 	.word	0x08003158
 8002a68:	0800315e 	.word	0x0800315e
 8002a6c:	08003162 	.word	0x08003162
 8002a70:	00000000 	.word	0x00000000
 8002a74:	080027b5 	.word	0x080027b5

08002a78 <_printf_common>:
 8002a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a7a:	0015      	movs	r5, r2
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	688a      	ldr	r2, [r1, #8]
 8002a80:	690b      	ldr	r3, [r1, #16]
 8002a82:	000c      	movs	r4, r1
 8002a84:	9000      	str	r0, [sp, #0]
 8002a86:	4293      	cmp	r3, r2
 8002a88:	da00      	bge.n	8002a8c <_printf_common+0x14>
 8002a8a:	0013      	movs	r3, r2
 8002a8c:	0022      	movs	r2, r4
 8002a8e:	602b      	str	r3, [r5, #0]
 8002a90:	3243      	adds	r2, #67	; 0x43
 8002a92:	7812      	ldrb	r2, [r2, #0]
 8002a94:	2a00      	cmp	r2, #0
 8002a96:	d001      	beq.n	8002a9c <_printf_common+0x24>
 8002a98:	3301      	adds	r3, #1
 8002a9a:	602b      	str	r3, [r5, #0]
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	069b      	lsls	r3, r3, #26
 8002aa0:	d502      	bpl.n	8002aa8 <_printf_common+0x30>
 8002aa2:	682b      	ldr	r3, [r5, #0]
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	602b      	str	r3, [r5, #0]
 8002aa8:	6822      	ldr	r2, [r4, #0]
 8002aaa:	2306      	movs	r3, #6
 8002aac:	0017      	movs	r7, r2
 8002aae:	401f      	ands	r7, r3
 8002ab0:	421a      	tst	r2, r3
 8002ab2:	d027      	beq.n	8002b04 <_printf_common+0x8c>
 8002ab4:	0023      	movs	r3, r4
 8002ab6:	3343      	adds	r3, #67	; 0x43
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	1e5a      	subs	r2, r3, #1
 8002abc:	4193      	sbcs	r3, r2
 8002abe:	6822      	ldr	r2, [r4, #0]
 8002ac0:	0692      	lsls	r2, r2, #26
 8002ac2:	d430      	bmi.n	8002b26 <_printf_common+0xae>
 8002ac4:	0022      	movs	r2, r4
 8002ac6:	9901      	ldr	r1, [sp, #4]
 8002ac8:	9800      	ldr	r0, [sp, #0]
 8002aca:	9e08      	ldr	r6, [sp, #32]
 8002acc:	3243      	adds	r2, #67	; 0x43
 8002ace:	47b0      	blx	r6
 8002ad0:	1c43      	adds	r3, r0, #1
 8002ad2:	d025      	beq.n	8002b20 <_printf_common+0xa8>
 8002ad4:	2306      	movs	r3, #6
 8002ad6:	6820      	ldr	r0, [r4, #0]
 8002ad8:	682a      	ldr	r2, [r5, #0]
 8002ada:	68e1      	ldr	r1, [r4, #12]
 8002adc:	2500      	movs	r5, #0
 8002ade:	4003      	ands	r3, r0
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d103      	bne.n	8002aec <_printf_common+0x74>
 8002ae4:	1a8d      	subs	r5, r1, r2
 8002ae6:	43eb      	mvns	r3, r5
 8002ae8:	17db      	asrs	r3, r3, #31
 8002aea:	401d      	ands	r5, r3
 8002aec:	68a3      	ldr	r3, [r4, #8]
 8002aee:	6922      	ldr	r2, [r4, #16]
 8002af0:	4293      	cmp	r3, r2
 8002af2:	dd01      	ble.n	8002af8 <_printf_common+0x80>
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	18ed      	adds	r5, r5, r3
 8002af8:	2700      	movs	r7, #0
 8002afa:	42bd      	cmp	r5, r7
 8002afc:	d120      	bne.n	8002b40 <_printf_common+0xc8>
 8002afe:	2000      	movs	r0, #0
 8002b00:	e010      	b.n	8002b24 <_printf_common+0xac>
 8002b02:	3701      	adds	r7, #1
 8002b04:	68e3      	ldr	r3, [r4, #12]
 8002b06:	682a      	ldr	r2, [r5, #0]
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	42bb      	cmp	r3, r7
 8002b0c:	ddd2      	ble.n	8002ab4 <_printf_common+0x3c>
 8002b0e:	0022      	movs	r2, r4
 8002b10:	2301      	movs	r3, #1
 8002b12:	9901      	ldr	r1, [sp, #4]
 8002b14:	9800      	ldr	r0, [sp, #0]
 8002b16:	9e08      	ldr	r6, [sp, #32]
 8002b18:	3219      	adds	r2, #25
 8002b1a:	47b0      	blx	r6
 8002b1c:	1c43      	adds	r3, r0, #1
 8002b1e:	d1f0      	bne.n	8002b02 <_printf_common+0x8a>
 8002b20:	2001      	movs	r0, #1
 8002b22:	4240      	negs	r0, r0
 8002b24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b26:	2030      	movs	r0, #48	; 0x30
 8002b28:	18e1      	adds	r1, r4, r3
 8002b2a:	3143      	adds	r1, #67	; 0x43
 8002b2c:	7008      	strb	r0, [r1, #0]
 8002b2e:	0021      	movs	r1, r4
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	3145      	adds	r1, #69	; 0x45
 8002b34:	7809      	ldrb	r1, [r1, #0]
 8002b36:	18a2      	adds	r2, r4, r2
 8002b38:	3243      	adds	r2, #67	; 0x43
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	7011      	strb	r1, [r2, #0]
 8002b3e:	e7c1      	b.n	8002ac4 <_printf_common+0x4c>
 8002b40:	0022      	movs	r2, r4
 8002b42:	2301      	movs	r3, #1
 8002b44:	9901      	ldr	r1, [sp, #4]
 8002b46:	9800      	ldr	r0, [sp, #0]
 8002b48:	9e08      	ldr	r6, [sp, #32]
 8002b4a:	321a      	adds	r2, #26
 8002b4c:	47b0      	blx	r6
 8002b4e:	1c43      	adds	r3, r0, #1
 8002b50:	d0e6      	beq.n	8002b20 <_printf_common+0xa8>
 8002b52:	3701      	adds	r7, #1
 8002b54:	e7d1      	b.n	8002afa <_printf_common+0x82>
	...

08002b58 <_printf_i>:
 8002b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b5a:	b08b      	sub	sp, #44	; 0x2c
 8002b5c:	9206      	str	r2, [sp, #24]
 8002b5e:	000a      	movs	r2, r1
 8002b60:	3243      	adds	r2, #67	; 0x43
 8002b62:	9307      	str	r3, [sp, #28]
 8002b64:	9005      	str	r0, [sp, #20]
 8002b66:	9204      	str	r2, [sp, #16]
 8002b68:	7e0a      	ldrb	r2, [r1, #24]
 8002b6a:	000c      	movs	r4, r1
 8002b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b6e:	2a78      	cmp	r2, #120	; 0x78
 8002b70:	d807      	bhi.n	8002b82 <_printf_i+0x2a>
 8002b72:	2a62      	cmp	r2, #98	; 0x62
 8002b74:	d809      	bhi.n	8002b8a <_printf_i+0x32>
 8002b76:	2a00      	cmp	r2, #0
 8002b78:	d100      	bne.n	8002b7c <_printf_i+0x24>
 8002b7a:	e0c1      	b.n	8002d00 <_printf_i+0x1a8>
 8002b7c:	2a58      	cmp	r2, #88	; 0x58
 8002b7e:	d100      	bne.n	8002b82 <_printf_i+0x2a>
 8002b80:	e08c      	b.n	8002c9c <_printf_i+0x144>
 8002b82:	0026      	movs	r6, r4
 8002b84:	3642      	adds	r6, #66	; 0x42
 8002b86:	7032      	strb	r2, [r6, #0]
 8002b88:	e022      	b.n	8002bd0 <_printf_i+0x78>
 8002b8a:	0010      	movs	r0, r2
 8002b8c:	3863      	subs	r0, #99	; 0x63
 8002b8e:	2815      	cmp	r0, #21
 8002b90:	d8f7      	bhi.n	8002b82 <_printf_i+0x2a>
 8002b92:	f7fd fab9 	bl	8000108 <__gnu_thumb1_case_shi>
 8002b96:	0016      	.short	0x0016
 8002b98:	fff6001f 	.word	0xfff6001f
 8002b9c:	fff6fff6 	.word	0xfff6fff6
 8002ba0:	001ffff6 	.word	0x001ffff6
 8002ba4:	fff6fff6 	.word	0xfff6fff6
 8002ba8:	fff6fff6 	.word	0xfff6fff6
 8002bac:	003600a8 	.word	0x003600a8
 8002bb0:	fff6009a 	.word	0xfff6009a
 8002bb4:	00b9fff6 	.word	0x00b9fff6
 8002bb8:	0036fff6 	.word	0x0036fff6
 8002bbc:	fff6fff6 	.word	0xfff6fff6
 8002bc0:	009e      	.short	0x009e
 8002bc2:	0026      	movs	r6, r4
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	3642      	adds	r6, #66	; 0x42
 8002bc8:	1d11      	adds	r1, r2, #4
 8002bca:	6019      	str	r1, [r3, #0]
 8002bcc:	6813      	ldr	r3, [r2, #0]
 8002bce:	7033      	strb	r3, [r6, #0]
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0a7      	b.n	8002d24 <_printf_i+0x1cc>
 8002bd4:	6808      	ldr	r0, [r1, #0]
 8002bd6:	6819      	ldr	r1, [r3, #0]
 8002bd8:	1d0a      	adds	r2, r1, #4
 8002bda:	0605      	lsls	r5, r0, #24
 8002bdc:	d50b      	bpl.n	8002bf6 <_printf_i+0x9e>
 8002bde:	680d      	ldr	r5, [r1, #0]
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	2d00      	cmp	r5, #0
 8002be4:	da03      	bge.n	8002bee <_printf_i+0x96>
 8002be6:	232d      	movs	r3, #45	; 0x2d
 8002be8:	9a04      	ldr	r2, [sp, #16]
 8002bea:	426d      	negs	r5, r5
 8002bec:	7013      	strb	r3, [r2, #0]
 8002bee:	4b61      	ldr	r3, [pc, #388]	; (8002d74 <_printf_i+0x21c>)
 8002bf0:	270a      	movs	r7, #10
 8002bf2:	9303      	str	r3, [sp, #12]
 8002bf4:	e01b      	b.n	8002c2e <_printf_i+0xd6>
 8002bf6:	680d      	ldr	r5, [r1, #0]
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	0641      	lsls	r1, r0, #25
 8002bfc:	d5f1      	bpl.n	8002be2 <_printf_i+0x8a>
 8002bfe:	b22d      	sxth	r5, r5
 8002c00:	e7ef      	b.n	8002be2 <_printf_i+0x8a>
 8002c02:	680d      	ldr	r5, [r1, #0]
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	1d08      	adds	r0, r1, #4
 8002c08:	6018      	str	r0, [r3, #0]
 8002c0a:	062e      	lsls	r6, r5, #24
 8002c0c:	d501      	bpl.n	8002c12 <_printf_i+0xba>
 8002c0e:	680d      	ldr	r5, [r1, #0]
 8002c10:	e003      	b.n	8002c1a <_printf_i+0xc2>
 8002c12:	066d      	lsls	r5, r5, #25
 8002c14:	d5fb      	bpl.n	8002c0e <_printf_i+0xb6>
 8002c16:	680d      	ldr	r5, [r1, #0]
 8002c18:	b2ad      	uxth	r5, r5
 8002c1a:	4b56      	ldr	r3, [pc, #344]	; (8002d74 <_printf_i+0x21c>)
 8002c1c:	2708      	movs	r7, #8
 8002c1e:	9303      	str	r3, [sp, #12]
 8002c20:	2a6f      	cmp	r2, #111	; 0x6f
 8002c22:	d000      	beq.n	8002c26 <_printf_i+0xce>
 8002c24:	3702      	adds	r7, #2
 8002c26:	0023      	movs	r3, r4
 8002c28:	2200      	movs	r2, #0
 8002c2a:	3343      	adds	r3, #67	; 0x43
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	6863      	ldr	r3, [r4, #4]
 8002c30:	60a3      	str	r3, [r4, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	db03      	blt.n	8002c3e <_printf_i+0xe6>
 8002c36:	2204      	movs	r2, #4
 8002c38:	6821      	ldr	r1, [r4, #0]
 8002c3a:	4391      	bics	r1, r2
 8002c3c:	6021      	str	r1, [r4, #0]
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d102      	bne.n	8002c48 <_printf_i+0xf0>
 8002c42:	9e04      	ldr	r6, [sp, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00c      	beq.n	8002c62 <_printf_i+0x10a>
 8002c48:	9e04      	ldr	r6, [sp, #16]
 8002c4a:	0028      	movs	r0, r5
 8002c4c:	0039      	movs	r1, r7
 8002c4e:	f7fd faeb 	bl	8000228 <__aeabi_uidivmod>
 8002c52:	9b03      	ldr	r3, [sp, #12]
 8002c54:	3e01      	subs	r6, #1
 8002c56:	5c5b      	ldrb	r3, [r3, r1]
 8002c58:	7033      	strb	r3, [r6, #0]
 8002c5a:	002b      	movs	r3, r5
 8002c5c:	0005      	movs	r5, r0
 8002c5e:	429f      	cmp	r7, r3
 8002c60:	d9f3      	bls.n	8002c4a <_printf_i+0xf2>
 8002c62:	2f08      	cmp	r7, #8
 8002c64:	d109      	bne.n	8002c7a <_printf_i+0x122>
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	07db      	lsls	r3, r3, #31
 8002c6a:	d506      	bpl.n	8002c7a <_printf_i+0x122>
 8002c6c:	6863      	ldr	r3, [r4, #4]
 8002c6e:	6922      	ldr	r2, [r4, #16]
 8002c70:	4293      	cmp	r3, r2
 8002c72:	dc02      	bgt.n	8002c7a <_printf_i+0x122>
 8002c74:	2330      	movs	r3, #48	; 0x30
 8002c76:	3e01      	subs	r6, #1
 8002c78:	7033      	strb	r3, [r6, #0]
 8002c7a:	9b04      	ldr	r3, [sp, #16]
 8002c7c:	1b9b      	subs	r3, r3, r6
 8002c7e:	6123      	str	r3, [r4, #16]
 8002c80:	9b07      	ldr	r3, [sp, #28]
 8002c82:	0021      	movs	r1, r4
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	9805      	ldr	r0, [sp, #20]
 8002c88:	9b06      	ldr	r3, [sp, #24]
 8002c8a:	aa09      	add	r2, sp, #36	; 0x24
 8002c8c:	f7ff fef4 	bl	8002a78 <_printf_common>
 8002c90:	1c43      	adds	r3, r0, #1
 8002c92:	d14c      	bne.n	8002d2e <_printf_i+0x1d6>
 8002c94:	2001      	movs	r0, #1
 8002c96:	4240      	negs	r0, r0
 8002c98:	b00b      	add	sp, #44	; 0x2c
 8002c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c9c:	3145      	adds	r1, #69	; 0x45
 8002c9e:	700a      	strb	r2, [r1, #0]
 8002ca0:	4a34      	ldr	r2, [pc, #208]	; (8002d74 <_printf_i+0x21c>)
 8002ca2:	9203      	str	r2, [sp, #12]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	6821      	ldr	r1, [r4, #0]
 8002ca8:	ca20      	ldmia	r2!, {r5}
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	0608      	lsls	r0, r1, #24
 8002cae:	d516      	bpl.n	8002cde <_printf_i+0x186>
 8002cb0:	07cb      	lsls	r3, r1, #31
 8002cb2:	d502      	bpl.n	8002cba <_printf_i+0x162>
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	4319      	orrs	r1, r3
 8002cb8:	6021      	str	r1, [r4, #0]
 8002cba:	2710      	movs	r7, #16
 8002cbc:	2d00      	cmp	r5, #0
 8002cbe:	d1b2      	bne.n	8002c26 <_printf_i+0xce>
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	6822      	ldr	r2, [r4, #0]
 8002cc4:	439a      	bics	r2, r3
 8002cc6:	6022      	str	r2, [r4, #0]
 8002cc8:	e7ad      	b.n	8002c26 <_printf_i+0xce>
 8002cca:	2220      	movs	r2, #32
 8002ccc:	6809      	ldr	r1, [r1, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	6022      	str	r2, [r4, #0]
 8002cd2:	0022      	movs	r2, r4
 8002cd4:	2178      	movs	r1, #120	; 0x78
 8002cd6:	3245      	adds	r2, #69	; 0x45
 8002cd8:	7011      	strb	r1, [r2, #0]
 8002cda:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <_printf_i+0x220>)
 8002cdc:	e7e1      	b.n	8002ca2 <_printf_i+0x14a>
 8002cde:	0648      	lsls	r0, r1, #25
 8002ce0:	d5e6      	bpl.n	8002cb0 <_printf_i+0x158>
 8002ce2:	b2ad      	uxth	r5, r5
 8002ce4:	e7e4      	b.n	8002cb0 <_printf_i+0x158>
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	680d      	ldr	r5, [r1, #0]
 8002cea:	1d10      	adds	r0, r2, #4
 8002cec:	6949      	ldr	r1, [r1, #20]
 8002cee:	6018      	str	r0, [r3, #0]
 8002cf0:	6813      	ldr	r3, [r2, #0]
 8002cf2:	062e      	lsls	r6, r5, #24
 8002cf4:	d501      	bpl.n	8002cfa <_printf_i+0x1a2>
 8002cf6:	6019      	str	r1, [r3, #0]
 8002cf8:	e002      	b.n	8002d00 <_printf_i+0x1a8>
 8002cfa:	066d      	lsls	r5, r5, #25
 8002cfc:	d5fb      	bpl.n	8002cf6 <_printf_i+0x19e>
 8002cfe:	8019      	strh	r1, [r3, #0]
 8002d00:	2300      	movs	r3, #0
 8002d02:	9e04      	ldr	r6, [sp, #16]
 8002d04:	6123      	str	r3, [r4, #16]
 8002d06:	e7bb      	b.n	8002c80 <_printf_i+0x128>
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	1d11      	adds	r1, r2, #4
 8002d0c:	6019      	str	r1, [r3, #0]
 8002d0e:	6816      	ldr	r6, [r2, #0]
 8002d10:	2100      	movs	r1, #0
 8002d12:	0030      	movs	r0, r6
 8002d14:	6862      	ldr	r2, [r4, #4]
 8002d16:	f000 f831 	bl	8002d7c <memchr>
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	d001      	beq.n	8002d22 <_printf_i+0x1ca>
 8002d1e:	1b80      	subs	r0, r0, r6
 8002d20:	6060      	str	r0, [r4, #4]
 8002d22:	6863      	ldr	r3, [r4, #4]
 8002d24:	6123      	str	r3, [r4, #16]
 8002d26:	2300      	movs	r3, #0
 8002d28:	9a04      	ldr	r2, [sp, #16]
 8002d2a:	7013      	strb	r3, [r2, #0]
 8002d2c:	e7a8      	b.n	8002c80 <_printf_i+0x128>
 8002d2e:	6923      	ldr	r3, [r4, #16]
 8002d30:	0032      	movs	r2, r6
 8002d32:	9906      	ldr	r1, [sp, #24]
 8002d34:	9805      	ldr	r0, [sp, #20]
 8002d36:	9d07      	ldr	r5, [sp, #28]
 8002d38:	47a8      	blx	r5
 8002d3a:	1c43      	adds	r3, r0, #1
 8002d3c:	d0aa      	beq.n	8002c94 <_printf_i+0x13c>
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	079b      	lsls	r3, r3, #30
 8002d42:	d415      	bmi.n	8002d70 <_printf_i+0x218>
 8002d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d46:	68e0      	ldr	r0, [r4, #12]
 8002d48:	4298      	cmp	r0, r3
 8002d4a:	daa5      	bge.n	8002c98 <_printf_i+0x140>
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	e7a3      	b.n	8002c98 <_printf_i+0x140>
 8002d50:	0022      	movs	r2, r4
 8002d52:	2301      	movs	r3, #1
 8002d54:	9906      	ldr	r1, [sp, #24]
 8002d56:	9805      	ldr	r0, [sp, #20]
 8002d58:	9e07      	ldr	r6, [sp, #28]
 8002d5a:	3219      	adds	r2, #25
 8002d5c:	47b0      	blx	r6
 8002d5e:	1c43      	adds	r3, r0, #1
 8002d60:	d098      	beq.n	8002c94 <_printf_i+0x13c>
 8002d62:	3501      	adds	r5, #1
 8002d64:	68e3      	ldr	r3, [r4, #12]
 8002d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	42ab      	cmp	r3, r5
 8002d6c:	dcf0      	bgt.n	8002d50 <_printf_i+0x1f8>
 8002d6e:	e7e9      	b.n	8002d44 <_printf_i+0x1ec>
 8002d70:	2500      	movs	r5, #0
 8002d72:	e7f7      	b.n	8002d64 <_printf_i+0x20c>
 8002d74:	08003169 	.word	0x08003169
 8002d78:	0800317a 	.word	0x0800317a

08002d7c <memchr>:
 8002d7c:	b2c9      	uxtb	r1, r1
 8002d7e:	1882      	adds	r2, r0, r2
 8002d80:	4290      	cmp	r0, r2
 8002d82:	d101      	bne.n	8002d88 <memchr+0xc>
 8002d84:	2000      	movs	r0, #0
 8002d86:	4770      	bx	lr
 8002d88:	7803      	ldrb	r3, [r0, #0]
 8002d8a:	428b      	cmp	r3, r1
 8002d8c:	d0fb      	beq.n	8002d86 <memchr+0xa>
 8002d8e:	3001      	adds	r0, #1
 8002d90:	e7f6      	b.n	8002d80 <memchr+0x4>

08002d92 <memcpy>:
 8002d92:	2300      	movs	r3, #0
 8002d94:	b510      	push	{r4, lr}
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d100      	bne.n	8002d9c <memcpy+0xa>
 8002d9a:	bd10      	pop	{r4, pc}
 8002d9c:	5ccc      	ldrb	r4, [r1, r3]
 8002d9e:	54c4      	strb	r4, [r0, r3]
 8002da0:	3301      	adds	r3, #1
 8002da2:	e7f8      	b.n	8002d96 <memcpy+0x4>

08002da4 <memmove>:
 8002da4:	b510      	push	{r4, lr}
 8002da6:	4288      	cmp	r0, r1
 8002da8:	d902      	bls.n	8002db0 <memmove+0xc>
 8002daa:	188b      	adds	r3, r1, r2
 8002dac:	4298      	cmp	r0, r3
 8002dae:	d303      	bcc.n	8002db8 <memmove+0x14>
 8002db0:	2300      	movs	r3, #0
 8002db2:	e007      	b.n	8002dc4 <memmove+0x20>
 8002db4:	5c8b      	ldrb	r3, [r1, r2]
 8002db6:	5483      	strb	r3, [r0, r2]
 8002db8:	3a01      	subs	r2, #1
 8002dba:	d2fb      	bcs.n	8002db4 <memmove+0x10>
 8002dbc:	bd10      	pop	{r4, pc}
 8002dbe:	5ccc      	ldrb	r4, [r1, r3]
 8002dc0:	54c4      	strb	r4, [r0, r3]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d1fa      	bne.n	8002dbe <memmove+0x1a>
 8002dc8:	e7f8      	b.n	8002dbc <memmove+0x18>
	...

08002dcc <_free_r>:
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	0005      	movs	r5, r0
 8002dd0:	2900      	cmp	r1, #0
 8002dd2:	d010      	beq.n	8002df6 <_free_r+0x2a>
 8002dd4:	1f0c      	subs	r4, r1, #4
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	da00      	bge.n	8002dde <_free_r+0x12>
 8002ddc:	18e4      	adds	r4, r4, r3
 8002dde:	0028      	movs	r0, r5
 8002de0:	f000 f918 	bl	8003014 <__malloc_lock>
 8002de4:	4a1d      	ldr	r2, [pc, #116]	; (8002e5c <_free_r+0x90>)
 8002de6:	6813      	ldr	r3, [r2, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <_free_r+0x2c>
 8002dec:	6063      	str	r3, [r4, #4]
 8002dee:	6014      	str	r4, [r2, #0]
 8002df0:	0028      	movs	r0, r5
 8002df2:	f000 f917 	bl	8003024 <__malloc_unlock>
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	42a3      	cmp	r3, r4
 8002dfa:	d908      	bls.n	8002e0e <_free_r+0x42>
 8002dfc:	6821      	ldr	r1, [r4, #0]
 8002dfe:	1860      	adds	r0, r4, r1
 8002e00:	4283      	cmp	r3, r0
 8002e02:	d1f3      	bne.n	8002dec <_free_r+0x20>
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	1841      	adds	r1, r0, r1
 8002e0a:	6021      	str	r1, [r4, #0]
 8002e0c:	e7ee      	b.n	8002dec <_free_r+0x20>
 8002e0e:	001a      	movs	r2, r3
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <_free_r+0x4e>
 8002e16:	42a3      	cmp	r3, r4
 8002e18:	d9f9      	bls.n	8002e0e <_free_r+0x42>
 8002e1a:	6811      	ldr	r1, [r2, #0]
 8002e1c:	1850      	adds	r0, r2, r1
 8002e1e:	42a0      	cmp	r0, r4
 8002e20:	d10b      	bne.n	8002e3a <_free_r+0x6e>
 8002e22:	6820      	ldr	r0, [r4, #0]
 8002e24:	1809      	adds	r1, r1, r0
 8002e26:	1850      	adds	r0, r2, r1
 8002e28:	6011      	str	r1, [r2, #0]
 8002e2a:	4283      	cmp	r3, r0
 8002e2c:	d1e0      	bne.n	8002df0 <_free_r+0x24>
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	1841      	adds	r1, r0, r1
 8002e34:	6011      	str	r1, [r2, #0]
 8002e36:	6053      	str	r3, [r2, #4]
 8002e38:	e7da      	b.n	8002df0 <_free_r+0x24>
 8002e3a:	42a0      	cmp	r0, r4
 8002e3c:	d902      	bls.n	8002e44 <_free_r+0x78>
 8002e3e:	230c      	movs	r3, #12
 8002e40:	602b      	str	r3, [r5, #0]
 8002e42:	e7d5      	b.n	8002df0 <_free_r+0x24>
 8002e44:	6821      	ldr	r1, [r4, #0]
 8002e46:	1860      	adds	r0, r4, r1
 8002e48:	4283      	cmp	r3, r0
 8002e4a:	d103      	bne.n	8002e54 <_free_r+0x88>
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	1841      	adds	r1, r0, r1
 8002e52:	6021      	str	r1, [r4, #0]
 8002e54:	6063      	str	r3, [r4, #4]
 8002e56:	6054      	str	r4, [r2, #4]
 8002e58:	e7ca      	b.n	8002df0 <_free_r+0x24>
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	200001a4 	.word	0x200001a4

08002e60 <sbrk_aligned>:
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	4e0f      	ldr	r6, [pc, #60]	; (8002ea0 <sbrk_aligned+0x40>)
 8002e64:	000d      	movs	r5, r1
 8002e66:	6831      	ldr	r1, [r6, #0]
 8002e68:	0004      	movs	r4, r0
 8002e6a:	2900      	cmp	r1, #0
 8002e6c:	d102      	bne.n	8002e74 <sbrk_aligned+0x14>
 8002e6e:	f000 f8bf 	bl	8002ff0 <_sbrk_r>
 8002e72:	6030      	str	r0, [r6, #0]
 8002e74:	0029      	movs	r1, r5
 8002e76:	0020      	movs	r0, r4
 8002e78:	f000 f8ba 	bl	8002ff0 <_sbrk_r>
 8002e7c:	1c43      	adds	r3, r0, #1
 8002e7e:	d00a      	beq.n	8002e96 <sbrk_aligned+0x36>
 8002e80:	2303      	movs	r3, #3
 8002e82:	1cc5      	adds	r5, r0, #3
 8002e84:	439d      	bics	r5, r3
 8002e86:	42a8      	cmp	r0, r5
 8002e88:	d007      	beq.n	8002e9a <sbrk_aligned+0x3a>
 8002e8a:	1a29      	subs	r1, r5, r0
 8002e8c:	0020      	movs	r0, r4
 8002e8e:	f000 f8af 	bl	8002ff0 <_sbrk_r>
 8002e92:	1c43      	adds	r3, r0, #1
 8002e94:	d101      	bne.n	8002e9a <sbrk_aligned+0x3a>
 8002e96:	2501      	movs	r5, #1
 8002e98:	426d      	negs	r5, r5
 8002e9a:	0028      	movs	r0, r5
 8002e9c:	bd70      	pop	{r4, r5, r6, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	200001a8 	.word	0x200001a8

08002ea4 <_malloc_r>:
 8002ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	1ccb      	adds	r3, r1, #3
 8002eaa:	4393      	bics	r3, r2
 8002eac:	3308      	adds	r3, #8
 8002eae:	0006      	movs	r6, r0
 8002eb0:	001f      	movs	r7, r3
 8002eb2:	2b0c      	cmp	r3, #12
 8002eb4:	d232      	bcs.n	8002f1c <_malloc_r+0x78>
 8002eb6:	270c      	movs	r7, #12
 8002eb8:	42b9      	cmp	r1, r7
 8002eba:	d831      	bhi.n	8002f20 <_malloc_r+0x7c>
 8002ebc:	0030      	movs	r0, r6
 8002ebe:	f000 f8a9 	bl	8003014 <__malloc_lock>
 8002ec2:	4d32      	ldr	r5, [pc, #200]	; (8002f8c <_malloc_r+0xe8>)
 8002ec4:	682b      	ldr	r3, [r5, #0]
 8002ec6:	001c      	movs	r4, r3
 8002ec8:	2c00      	cmp	r4, #0
 8002eca:	d12e      	bne.n	8002f2a <_malloc_r+0x86>
 8002ecc:	0039      	movs	r1, r7
 8002ece:	0030      	movs	r0, r6
 8002ed0:	f7ff ffc6 	bl	8002e60 <sbrk_aligned>
 8002ed4:	0004      	movs	r4, r0
 8002ed6:	1c43      	adds	r3, r0, #1
 8002ed8:	d11e      	bne.n	8002f18 <_malloc_r+0x74>
 8002eda:	682c      	ldr	r4, [r5, #0]
 8002edc:	0025      	movs	r5, r4
 8002ede:	2d00      	cmp	r5, #0
 8002ee0:	d14a      	bne.n	8002f78 <_malloc_r+0xd4>
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	0029      	movs	r1, r5
 8002ee6:	18e3      	adds	r3, r4, r3
 8002ee8:	0030      	movs	r0, r6
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	f000 f880 	bl	8002ff0 <_sbrk_r>
 8002ef0:	9b01      	ldr	r3, [sp, #4]
 8002ef2:	4283      	cmp	r3, r0
 8002ef4:	d143      	bne.n	8002f7e <_malloc_r+0xda>
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	3703      	adds	r7, #3
 8002efa:	1aff      	subs	r7, r7, r3
 8002efc:	2303      	movs	r3, #3
 8002efe:	439f      	bics	r7, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	2f0c      	cmp	r7, #12
 8002f04:	d200      	bcs.n	8002f08 <_malloc_r+0x64>
 8002f06:	270c      	movs	r7, #12
 8002f08:	0039      	movs	r1, r7
 8002f0a:	0030      	movs	r0, r6
 8002f0c:	f7ff ffa8 	bl	8002e60 <sbrk_aligned>
 8002f10:	1c43      	adds	r3, r0, #1
 8002f12:	d034      	beq.n	8002f7e <_malloc_r+0xda>
 8002f14:	6823      	ldr	r3, [r4, #0]
 8002f16:	19df      	adds	r7, r3, r7
 8002f18:	6027      	str	r7, [r4, #0]
 8002f1a:	e013      	b.n	8002f44 <_malloc_r+0xa0>
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	dacb      	bge.n	8002eb8 <_malloc_r+0x14>
 8002f20:	230c      	movs	r3, #12
 8002f22:	2500      	movs	r5, #0
 8002f24:	6033      	str	r3, [r6, #0]
 8002f26:	0028      	movs	r0, r5
 8002f28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f2a:	6822      	ldr	r2, [r4, #0]
 8002f2c:	1bd1      	subs	r1, r2, r7
 8002f2e:	d420      	bmi.n	8002f72 <_malloc_r+0xce>
 8002f30:	290b      	cmp	r1, #11
 8002f32:	d917      	bls.n	8002f64 <_malloc_r+0xc0>
 8002f34:	19e2      	adds	r2, r4, r7
 8002f36:	6027      	str	r7, [r4, #0]
 8002f38:	42a3      	cmp	r3, r4
 8002f3a:	d111      	bne.n	8002f60 <_malloc_r+0xbc>
 8002f3c:	602a      	str	r2, [r5, #0]
 8002f3e:	6863      	ldr	r3, [r4, #4]
 8002f40:	6011      	str	r1, [r2, #0]
 8002f42:	6053      	str	r3, [r2, #4]
 8002f44:	0030      	movs	r0, r6
 8002f46:	0025      	movs	r5, r4
 8002f48:	f000 f86c 	bl	8003024 <__malloc_unlock>
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	350b      	adds	r5, #11
 8002f50:	1d23      	adds	r3, r4, #4
 8002f52:	4395      	bics	r5, r2
 8002f54:	1aea      	subs	r2, r5, r3
 8002f56:	429d      	cmp	r5, r3
 8002f58:	d0e5      	beq.n	8002f26 <_malloc_r+0x82>
 8002f5a:	1b5b      	subs	r3, r3, r5
 8002f5c:	50a3      	str	r3, [r4, r2]
 8002f5e:	e7e2      	b.n	8002f26 <_malloc_r+0x82>
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	e7ec      	b.n	8002f3e <_malloc_r+0x9a>
 8002f64:	6862      	ldr	r2, [r4, #4]
 8002f66:	42a3      	cmp	r3, r4
 8002f68:	d101      	bne.n	8002f6e <_malloc_r+0xca>
 8002f6a:	602a      	str	r2, [r5, #0]
 8002f6c:	e7ea      	b.n	8002f44 <_malloc_r+0xa0>
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	e7e8      	b.n	8002f44 <_malloc_r+0xa0>
 8002f72:	0023      	movs	r3, r4
 8002f74:	6864      	ldr	r4, [r4, #4]
 8002f76:	e7a7      	b.n	8002ec8 <_malloc_r+0x24>
 8002f78:	002c      	movs	r4, r5
 8002f7a:	686d      	ldr	r5, [r5, #4]
 8002f7c:	e7af      	b.n	8002ede <_malloc_r+0x3a>
 8002f7e:	230c      	movs	r3, #12
 8002f80:	0030      	movs	r0, r6
 8002f82:	6033      	str	r3, [r6, #0]
 8002f84:	f000 f84e 	bl	8003024 <__malloc_unlock>
 8002f88:	e7cd      	b.n	8002f26 <_malloc_r+0x82>
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	200001a4 	.word	0x200001a4

08002f90 <_realloc_r>:
 8002f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f92:	0007      	movs	r7, r0
 8002f94:	000e      	movs	r6, r1
 8002f96:	0014      	movs	r4, r2
 8002f98:	2900      	cmp	r1, #0
 8002f9a:	d105      	bne.n	8002fa8 <_realloc_r+0x18>
 8002f9c:	0011      	movs	r1, r2
 8002f9e:	f7ff ff81 	bl	8002ea4 <_malloc_r>
 8002fa2:	0005      	movs	r5, r0
 8002fa4:	0028      	movs	r0, r5
 8002fa6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fa8:	2a00      	cmp	r2, #0
 8002faa:	d103      	bne.n	8002fb4 <_realloc_r+0x24>
 8002fac:	f7ff ff0e 	bl	8002dcc <_free_r>
 8002fb0:	0025      	movs	r5, r4
 8002fb2:	e7f7      	b.n	8002fa4 <_realloc_r+0x14>
 8002fb4:	f000 f83e 	bl	8003034 <_malloc_usable_size_r>
 8002fb8:	9001      	str	r0, [sp, #4]
 8002fba:	4284      	cmp	r4, r0
 8002fbc:	d803      	bhi.n	8002fc6 <_realloc_r+0x36>
 8002fbe:	0035      	movs	r5, r6
 8002fc0:	0843      	lsrs	r3, r0, #1
 8002fc2:	42a3      	cmp	r3, r4
 8002fc4:	d3ee      	bcc.n	8002fa4 <_realloc_r+0x14>
 8002fc6:	0021      	movs	r1, r4
 8002fc8:	0038      	movs	r0, r7
 8002fca:	f7ff ff6b 	bl	8002ea4 <_malloc_r>
 8002fce:	1e05      	subs	r5, r0, #0
 8002fd0:	d0e8      	beq.n	8002fa4 <_realloc_r+0x14>
 8002fd2:	9b01      	ldr	r3, [sp, #4]
 8002fd4:	0022      	movs	r2, r4
 8002fd6:	429c      	cmp	r4, r3
 8002fd8:	d900      	bls.n	8002fdc <_realloc_r+0x4c>
 8002fda:	001a      	movs	r2, r3
 8002fdc:	0031      	movs	r1, r6
 8002fde:	0028      	movs	r0, r5
 8002fe0:	f7ff fed7 	bl	8002d92 <memcpy>
 8002fe4:	0031      	movs	r1, r6
 8002fe6:	0038      	movs	r0, r7
 8002fe8:	f7ff fef0 	bl	8002dcc <_free_r>
 8002fec:	e7da      	b.n	8002fa4 <_realloc_r+0x14>
	...

08002ff0 <_sbrk_r>:
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	b570      	push	{r4, r5, r6, lr}
 8002ff4:	4d06      	ldr	r5, [pc, #24]	; (8003010 <_sbrk_r+0x20>)
 8002ff6:	0004      	movs	r4, r0
 8002ff8:	0008      	movs	r0, r1
 8002ffa:	602b      	str	r3, [r5, #0]
 8002ffc:	f7fd fd18 	bl	8000a30 <_sbrk>
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	d103      	bne.n	800300c <_sbrk_r+0x1c>
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d000      	beq.n	800300c <_sbrk_r+0x1c>
 800300a:	6023      	str	r3, [r4, #0]
 800300c:	bd70      	pop	{r4, r5, r6, pc}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	200001ac 	.word	0x200001ac

08003014 <__malloc_lock>:
 8003014:	b510      	push	{r4, lr}
 8003016:	4802      	ldr	r0, [pc, #8]	; (8003020 <__malloc_lock+0xc>)
 8003018:	f000 f814 	bl	8003044 <__retarget_lock_acquire_recursive>
 800301c:	bd10      	pop	{r4, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	200001b0 	.word	0x200001b0

08003024 <__malloc_unlock>:
 8003024:	b510      	push	{r4, lr}
 8003026:	4802      	ldr	r0, [pc, #8]	; (8003030 <__malloc_unlock+0xc>)
 8003028:	f000 f80d 	bl	8003046 <__retarget_lock_release_recursive>
 800302c:	bd10      	pop	{r4, pc}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	200001b0 	.word	0x200001b0

08003034 <_malloc_usable_size_r>:
 8003034:	1f0b      	subs	r3, r1, #4
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	1f18      	subs	r0, r3, #4
 800303a:	2b00      	cmp	r3, #0
 800303c:	da01      	bge.n	8003042 <_malloc_usable_size_r+0xe>
 800303e:	580b      	ldr	r3, [r1, r0]
 8003040:	18c0      	adds	r0, r0, r3
 8003042:	4770      	bx	lr

08003044 <__retarget_lock_acquire_recursive>:
 8003044:	4770      	bx	lr

08003046 <__retarget_lock_release_recursive>:
 8003046:	4770      	bx	lr

08003048 <_init>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304e:	bc08      	pop	{r3}
 8003050:	469e      	mov	lr, r3
 8003052:	4770      	bx	lr

08003054 <_fini>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305a:	bc08      	pop	{r3}
 800305c:	469e      	mov	lr, r3
 800305e:	4770      	bx	lr
